!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
.DEFAULT_GOAL	Makefile	/^.DEFAULT_GOAL :=$/;"	m
CUDAMEMTESTDIR	Makefile	/^CUDAMEMTESTDIR = cudamatrix$/;"	m
EXT_SUBDIRS	Makefile	/^EXT_SUBDIRS = online onlinebin  # python-kaldi-decoding$/;"	m
EXT_SUBDIRS_LIB	Makefile	/^EXT_SUBDIRS_LIB = $(filter-out %bin, $(EXT_SUBDIRS))$/;"	m
MEMTESTDIRS	Makefile	/^MEMTESTDIRS = base matrix util feat tree thread gmm transform sgmm \\$/;"	m
OPENFST_VER_NUM	Makefile	/^OPENFST_VER_NUM := $(shell echo $(OPENFST_VER) | sed 's\/\\.\/ \/g' | xargs printf "%d%02d%02d")$/;"	m
SHELL	Makefile	/^SHELL := \/bin\/bash$/;"	m
SUBDIRS	Makefile	/^SUBDIRS = base matrix util feat tree thread gmm transform sgmm \\$/;"	m
SUBDIRS_LIB	Makefile	/^SUBDIRS_LIB = $(filter-out %bin, $(SUBDIRS))$/;"	m
ADDLIBS	base/Makefile	/^ADDLIBS = $/;"	m
LIBNAME	base/Makefile	/^LIBNAME = kaldi-base$/;"	m
OBJFILES	base/Makefile	/^OBJFILES = kaldi-math.o kaldi-error.o io-funcs.o kaldi-utils.o$/;"	m
TESTFILES	base/Makefile	/^TESTFILES = kaldi-math-test io-funcs-test kaldi-error-test timer-test$/;"	m
InitKaldiInputStream	base/io-funcs-inl.h	/^inline bool InitKaldiInputStream(std::istream &is, bool *binary) {$/;"	f	namespace:kaldi
InitKaldiOutputStream	base/io-funcs-inl.h	/^inline void InitKaldiOutputStream(std::ostream &os, bool binary) {$/;"	f	namespace:kaldi
KALDI_BASE_IO_FUNCS_INL_H_	base/io-funcs-inl.h	22;"	d
ReadBasicType	base/io-funcs-inl.h	/^template<class T> inline void ReadBasicType(std::istream &is,$/;"	f	namespace:kaldi
ReadIntegerVector	base/io-funcs-inl.h	/^template<class T> inline void ReadIntegerVector(std::istream &is,$/;"	f	namespace:kaldi
WriteBasicType	base/io-funcs-inl.h	/^template<class T>  void WriteBasicType(std::ostream &os,$/;"	f	namespace:kaldi
WriteIntegerVector	base/io-funcs-inl.h	/^template<class T> inline void WriteIntegerVector(std::ostream &os, bool binary,$/;"	f	namespace:kaldi
kaldi	base/io-funcs-inl.h	/^namespace kaldi {$/;"	n
UnitTestIo	base/io-funcs-test.cc	/^void UnitTestIo(bool binary) {$/;"	f	namespace:kaldi
kaldi	base/io-funcs-test.cc	/^namespace kaldi {$/;"	n	file:
main	base/io-funcs-test.cc	/^int main() {$/;"	f
CheckToken	base/io-funcs.cc	/^void CheckToken(const char *token) {$/;"	f	namespace:kaldi
ExpectToken	base/io-funcs.cc	/^void ExpectToken(std::istream &is, bool binary, const char *token) {$/;"	f	namespace:kaldi
ExpectToken	base/io-funcs.cc	/^void ExpectToken(std::istream &is, bool binary, const std::string &token) {$/;"	f	namespace:kaldi
Peek	base/io-funcs.cc	/^int Peek(std::istream &is, bool binary) {$/;"	f	namespace:kaldi
PeekToken	base/io-funcs.cc	/^int PeekToken(std::istream &is, bool binary) {$/;"	f	namespace:kaldi
ReadBasicType	base/io-funcs.cc	/^void ReadBasicType<bool>(std::istream &is, bool binary, bool *b) {$/;"	f	namespace:kaldi
ReadBasicType	base/io-funcs.cc	/^void ReadBasicType<double>(std::istream &is, bool binary, double *d) {$/;"	f	namespace:kaldi
ReadBasicType	base/io-funcs.cc	/^void ReadBasicType<float>(std::istream &is, bool binary, float *f) {$/;"	f	namespace:kaldi
ReadToken	base/io-funcs.cc	/^void ReadToken(std::istream &is, bool binary, std::string *str) {$/;"	f	namespace:kaldi
WriteBasicType	base/io-funcs.cc	/^void WriteBasicType<bool>(std::ostream &os, bool binary, bool b) {$/;"	f	namespace:kaldi
WriteBasicType	base/io-funcs.cc	/^void WriteBasicType<double>(std::ostream &os, bool binary, double f) {$/;"	f	namespace:kaldi
WriteBasicType	base/io-funcs.cc	/^void WriteBasicType<float>(std::ostream &os, bool binary, float f) {$/;"	f	namespace:kaldi
WriteToken	base/io-funcs.cc	/^void WriteToken(std::ostream &os, bool binary, const char *token) {$/;"	f	namespace:kaldi
WriteToken	base/io-funcs.cc	/^void WriteToken(std::ostream &os, bool binary, const std::string & token) {$/;"	f	namespace:kaldi
kaldi	base/io-funcs.cc	/^namespace kaldi {$/;"	n	file:
KALDI_BASE_IO_FUNCS_H_	base/io-funcs.h	22;"	d
ReadBasicType	base/io-funcs.h	/^inline void ReadBasicType(std::istream &is, bool binary, T *t, bool add) {$/;"	f	namespace:kaldi
kaldi	base/io-funcs.h	/^namespace kaldi {$/;"	n
KALDI_BASE_KALDI_COMMON_H_	base/kaldi-common.h	21;"	d
MyFunction1	base/kaldi-error-test.cc	/^void MyFunction1() {$/;"	f	namespace:kaldi
MyFunction2	base/kaldi-error-test.cc	/^void MyFunction2() {$/;"	f	namespace:kaldi
UnitTestError	base/kaldi-error-test.cc	/^void UnitTestError() {$/;"	f	namespace:kaldi
kaldi	base/kaldi-error-test.cc	/^namespace kaldi {$/;"	n	file:
main	base/kaldi-error-test.cc	/^int main() {$/;"	f
GetProgramName	base/kaldi-error.cc	/^const char *GetProgramName() {$/;"	f	namespace:kaldi
GetShortFileName	base/kaldi-error.cc	/^const char *GetShortFileName(const char *filename) {$/;"	f	namespace:kaldi
KALDI_APPEND_POSSIBLY_DEMANGLED_STRING	base/kaldi-error.cc	/^inline void KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(std::string &ans,  $/;"	f	namespace:kaldi
KALDI_APPEND_POSSIBLY_DEMANGLED_STRING	base/kaldi-error.cc	91;"	d	file:
KALDI_MAX_TRACE_PRINT	base/kaldi-error.cc	97;"	d	file:
KALDI_MAX_TRACE_SIZE	base/kaldi-error.cc	96;"	d	file:
KaldiAssertFailure_	base/kaldi-error.cc	/^void KaldiAssertFailure_(const char *func, const char *file,$/;"	f	namespace:kaldi
KaldiErrorMessage	base/kaldi-error.cc	/^KaldiErrorMessage::KaldiErrorMessage(const char *func, const char *file,$/;"	f	class:kaldi::KaldiErrorMessage
KaldiGetStackTrace	base/kaldi-error.cc	/^std::string KaldiGetStackTrace() {$/;"	f	namespace:kaldi
KaldiLogMessage	base/kaldi-error.cc	/^KaldiLogMessage::KaldiLogMessage(const char *func, const char *file,$/;"	f	class:kaldi::KaldiLogMessage
KaldiVlogMessage	base/kaldi-error.cc	/^KaldiVlogMessage::KaldiVlogMessage(const char *func, const char *file,$/;"	f	class:kaldi::KaldiVlogMessage
KaldiWarnMessage	base/kaldi-error.cc	/^KaldiWarnMessage::KaldiWarnMessage(const char *func, const char *file,$/;"	f	class:kaldi::KaldiWarnMessage
NOEXCEPT	base/kaldi-error.cc	/^KaldiErrorMessage::~KaldiErrorMessage() NOEXCEPT(false) {$/;"	f	namespace:kaldi
g_kaldi_verbose_level	base/kaldi-error.cc	/^int32 g_kaldi_verbose_level = 0;  \/\/ Just initialize this global variable.$/;"	m	namespace:kaldi	file:
g_program_name	base/kaldi-error.cc	/^const char *g_program_name = NULL;$/;"	m	namespace:kaldi	file:
kaldi	base/kaldi-error.cc	/^namespace kaldi {$/;"	n	file:
GetVerboseLevel	base/kaldi-error.h	/^inline int32 GetVerboseLevel() { return g_kaldi_verbose_level; }$/;"	f	namespace:kaldi
IsKaldiError	base/kaldi-error.h	/^inline bool IsKaldiError(const std::string &str) {$/;"	f	namespace:kaldi
KALDI_ASSERT	base/kaldi-error.h	120;"	d
KALDI_ASSERT	base/kaldi-error.h	123;"	d
KALDI_BASE_KALDI_ERROR_H_	base/kaldi-error.h	22;"	d
KALDI_ERR	base/kaldi-error.h	135;"	d
KALDI_LOG	base/kaldi-error.h	137;"	d
KALDI_PARANOID_ASSERT	base/kaldi-error.h	129;"	d
KALDI_PARANOID_ASSERT	base/kaldi-error.h	132;"	d
KALDI_VLOG	base/kaldi-error.h	139;"	d
KALDI_WARN	base/kaldi-error.h	136;"	d
KaldiErrorMessage	base/kaldi-error.h	/^class KaldiErrorMessage {$/;"	c	namespace:kaldi
KaldiLogMessage	base/kaldi-error.h	/^class KaldiLogMessage {$/;"	c	namespace:kaldi
KaldiVlogMessage	base/kaldi-error.h	/^class KaldiVlogMessage {$/;"	c	namespace:kaldi
KaldiWarnMessage	base/kaldi-error.h	/^class KaldiWarnMessage {$/;"	c	namespace:kaldi
NOEXCEPT	base/kaldi-error.h	31;"	d
NOEXCEPT	base/kaldi-error.h	33;"	d
NOEXCEPT	base/kaldi-error.h	35;"	d
SetVerboseLevel	base/kaldi-error.h	/^inline void SetVerboseLevel(int32 i) { g_kaldi_verbose_level = i; }$/;"	f	namespace:kaldi
__func__	base/kaldi-error.h	116;"	d
kaldi	base/kaldi-error.h	/^namespace kaldi {$/;"	n
ss	base/kaldi-error.h	/^  std::ostringstream ss;$/;"	m	class:kaldi::KaldiErrorMessage
ss	base/kaldi-error.h	/^  std::ostringstream ss;$/;"	m	class:kaldi::KaldiLogMessage
ss	base/kaldi-error.h	/^  std::ostringstream ss;$/;"	m	class:kaldi::KaldiVlogMessage
ss	base/kaldi-error.h	/^  std::ostringstream ss;$/;"	m	class:kaldi::KaldiWarnMessage
stream	base/kaldi-error.h	/^  inline std::ostream &stream() { return ss; }$/;"	f	class:kaldi::KaldiErrorMessage
stream	base/kaldi-error.h	/^  inline std::ostream &stream() { return ss; }$/;"	f	class:kaldi::KaldiLogMessage
stream	base/kaldi-error.h	/^  inline std::ostream &stream() { return ss; }$/;"	f	class:kaldi::KaldiVlogMessage
stream	base/kaldi-error.h	/^  inline std::ostream &stream() { return ss; }$/;"	f	class:kaldi::KaldiWarnMessage
~KaldiLogMessage	base/kaldi-error.h	/^  ~KaldiLogMessage() { fprintf(stderr, "%s\\n", ss.str().c_str()); }$/;"	f	class:kaldi::KaldiLogMessage
~KaldiVlogMessage	base/kaldi-error.h	/^  ~KaldiVlogMessage() { fprintf(stderr, "%s\\n", ss.str().c_str()); }$/;"	f	class:kaldi::KaldiVlogMessage
~KaldiWarnMessage	base/kaldi-error.h	/^  ~KaldiWarnMessage()  { fprintf(stderr, "%s\\n", ss.str().c_str()); }$/;"	f	class:kaldi::KaldiWarnMessage
UnitTestApproxEqual	base/kaldi-math-test.cc	/^void UnitTestApproxEqual() {$/;"	f	namespace:kaldi
UnitTestAssertFunc	base/kaldi-math-test.cc	/^void UnitTestAssertFunc() {  \/\/ Testing Assert** *functions$/;"	f	namespace:kaldi
UnitTestDefines	base/kaldi-math-test.cc	/^void UnitTestDefines() {  \/\/ Yes, we even unit-test the preprocessor statements.$/;"	f	namespace:kaldi
UnitTestExpSpeed	base/kaldi-math-test.cc	/^void UnitTestExpSpeed() {$/;"	f	namespace:kaldi
UnitTestFactorize	base/kaldi-math-test.cc	/^void UnitTestFactorize() {$/;"	f	namespace:kaldi
UnitTestFactorizeTpl	base/kaldi-math-test.cc	/^template<class I> void UnitTestFactorizeTpl() {$/;"	f	namespace:kaldi
UnitTestGcdLcm	base/kaldi-math-test.cc	/^void UnitTestGcdLcm() {$/;"	f	namespace:kaldi
UnitTestGcdLcmTpl	base/kaldi-math-test.cc	/^template<class I> void UnitTestGcdLcmTpl() {$/;"	f	namespace:kaldi
UnitTestLogAddSub	base/kaldi-math-test.cc	/^void UnitTestLogAddSub() {$/;"	f	namespace:kaldi
UnitTestLogSpeed	base/kaldi-math-test.cc	/^void UnitTestLogSpeed() {$/;"	f	namespace:kaldi
UnitTestRand	base/kaldi-math-test.cc	/^void UnitTestRand() {$/;"	f	namespace:kaldi
UnitTestRoundUpToNearestPowerOfTwo	base/kaldi-math-test.cc	/^void UnitTestRoundUpToNearestPowerOfTwo() {$/;"	f	namespace:kaldi
kaldi	base/kaldi-math-test.cc	/^namespace kaldi {$/;"	n	file:
main	base/kaldi-math-test.cc	/^int main() {$/;"	f
Rand	base/kaldi-math.cc	/^int Rand(struct RandomState* state)$/;"	f	namespace:kaldi
RandGauss2	base/kaldi-math.cc	/^void RandGauss2(double *a, double *b, RandomState *state)$/;"	f	namespace:kaldi
RandGauss2	base/kaldi-math.cc	/^void RandGauss2(float *a, float *b, RandomState *state)$/;"	f	namespace:kaldi
RandInt	base/kaldi-math.cc	/^int32 RandInt(int32 min_val, int32 max_val, struct RandomState* state) {  \/\/ This is not exact.$/;"	f	namespace:kaldi
RandPoisson	base/kaldi-math.cc	/^int32 RandPoisson(float lambda, struct RandomState* state) {$/;"	f	namespace:kaldi
RandomState	base/kaldi-math.cc	/^RandomState::RandomState() {$/;"	f	class:kaldi::RandomState
RoundUpToNearestPowerOfTwo	base/kaldi-math.cc	/^int32 RoundUpToNearestPowerOfTwo(int32 n) {$/;"	f	namespace:kaldi
WithProb	base/kaldi-math.cc	/^bool WithProb(BaseFloat prob, struct RandomState* state) {$/;"	f	namespace:kaldi
_RandMutex	base/kaldi-math.cc	/^static pthread_mutex_t _RandMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	m	namespace:kaldi	file:
kaldi	base/kaldi-math.cc	/^namespace kaldi {$/;"	n	file:
ApproxEqual	base/kaldi-math.h	/^static inline bool ApproxEqual(float a, float b,$/;"	f	namespace:kaldi
AssertEqual	base/kaldi-math.h	/^static inline void AssertEqual(float a, float b,$/;"	f	namespace:kaldi
DBL_EPSILON	base/kaldi-math.h	37;"	d
Exp	base/kaldi-math.h	/^inline double Exp(double x) { return exp(x); }$/;"	f	namespace:kaldi
Exp	base/kaldi-math.h	/^inline float Exp(float x) { return exp(x); }$/;"	f	namespace:kaldi
Exp	base/kaldi-math.h	/^inline float Exp(float x) { return expf(x); }$/;"	f	namespace:kaldi
FLT_EPSILON	base/kaldi-math.h	40;"	d
Factorize	base/kaldi-math.h	/^template<class I> void Factorize(I m, std::vector<I> *factors) {$/;"	f	namespace:kaldi
Gcd	base/kaldi-math.h	/^template<class I> I  Gcd(I m, I n) {$/;"	f	namespace:kaldi
Hypot	base/kaldi-math.h	/^inline double Hypot(double x, double y) {  return hypot(x, y); }$/;"	f	namespace:kaldi
Hypot	base/kaldi-math.h	/^inline float Hypot(float x, float y) {  return hypotf(x, y); }$/;"	f	namespace:kaldi
KALDI_BASE_KALDI_MATH_H_	base/kaldi-math.h	22;"	d
KALDI_ISFINITE	base/kaldi-math.h	71;"	d
KALDI_ISFINITE	base/kaldi-math.h	75;"	d
KALDI_ISINF	base/kaldi-math.h	70;"	d
KALDI_ISINF	base/kaldi-math.h	74;"	d
KALDI_ISNAN	base/kaldi-math.h	69;"	d
KALDI_ISNAN	base/kaldi-math.h	73;"	d
KALDI_SQR	base/kaldi-math.h	78;"	d
Lcm	base/kaldi-math.h	/^template<class I> I  Lcm(I m, I n) {$/;"	f	namespace:kaldi
Log	base/kaldi-math.h	/^inline double Log(double x) { return log(x); }$/;"	f	namespace:kaldi
Log	base/kaldi-math.h	/^inline float Log(float x) { return logf(x); }$/;"	f	namespace:kaldi
Log1p	base/kaldi-math.h	/^inline double Log1p(double x) {  return log1p(x); }$/;"	f	namespace:kaldi
Log1p	base/kaldi-math.h	/^inline double Log1p(double x) {$/;"	f	namespace:kaldi
Log1p	base/kaldi-math.h	/^inline float Log1p(float x) {  return log1pf(x); }$/;"	f	namespace:kaldi
Log1p	base/kaldi-math.h	/^inline float Log1p(float x) {$/;"	f	namespace:kaldi
LogAdd	base/kaldi-math.h	/^inline double LogAdd(double x, double y) {$/;"	f	namespace:kaldi
LogAdd	base/kaldi-math.h	/^inline float LogAdd(float x, float y) {$/;"	f	namespace:kaldi
LogSub	base/kaldi-math.h	/^inline double LogSub(double x, double y) {$/;"	f	namespace:kaldi
LogSub	base/kaldi-math.h	/^inline float LogSub(float x, float y) {$/;"	f	namespace:kaldi
M_2PI	base/kaldi-math.h	53;"	d
M_LN2	base/kaldi-math.h	65;"	d
M_LOG_2PI	base/kaldi-math.h	61;"	d
M_PI	base/kaldi-math.h	44;"	d
M_SQRT1_2	base/kaldi-math.h	57;"	d
M_SQRT2	base/kaldi-math.h	48;"	d
RandGauss	base/kaldi-math.h	/^inline float RandGauss(struct RandomState* state = NULL) {$/;"	f	namespace:kaldi
RandPrune	base/kaldi-math.h	/^inline Float RandPrune(Float post, BaseFloat prune_thresh, struct RandomState* state=NULL) {$/;"	f	namespace:kaldi
RandUniform	base/kaldi-math.h	/^inline float RandUniform(struct RandomState* state = NULL) {$/;"	f	namespace:kaldi
RandomState	base/kaldi-math.h	/^struct RandomState {$/;"	s	namespace:kaldi
kLogZeroBaseFloat	base/kaldi-math.h	/^const BaseFloat kLogZeroBaseFloat = -std::numeric_limits<BaseFloat>::infinity();$/;"	m	namespace:kaldi
kLogZeroDouble	base/kaldi-math.h	/^const double kLogZeroDouble = -std::numeric_limits<double>::infinity();$/;"	m	namespace:kaldi
kLogZeroFloat	base/kaldi-math.h	/^const float kLogZeroFloat = -std::numeric_limits<float>::infinity();$/;"	m	namespace:kaldi
kMinLogDiffDouble	base/kaldi-math.h	/^static const double kMinLogDiffDouble = std::log(DBL_EPSILON);  \/\/ negative!$/;"	m	namespace:kaldi
kMinLogDiffFloat	base/kaldi-math.h	/^static const float kMinLogDiffFloat = std::log(FLT_EPSILON);  \/\/ negative!$/;"	m	namespace:kaldi
kaldi	base/kaldi-math.h	/^namespace kaldi {$/;"	n
seed	base/kaldi-math.h	/^  unsigned seed;$/;"	m	struct:kaldi::RandomState
BaseFloat	base/kaldi-types.h	/^typedef double  BaseFloat;$/;"	t	namespace:kaldi
KALDI_BASE_KALDI_TYPES_H_	base/kaldi-types.h	22;"	d
double64	base/kaldi-types.h	/^typedef double        double64;$/;"	t	namespace:kaldi
float32	base/kaldi-types.h	/^typedef float          float32;$/;"	t	namespace:kaldi
int16	base/kaldi-types.h	/^typedef __int16          int16;$/;"	t	namespace:kaldi
int32	base/kaldi-types.h	/^typedef __int32          int32;$/;"	t	namespace:kaldi
int64	base/kaldi-types.h	/^typedef __int64          int64;$/;"	t	namespace:kaldi
kaldi	base/kaldi-types.h	/^namespace kaldi {$/;"	n
ssize_t	base/kaldi-types.h	45;"	d
uint16	base/kaldi-types.h	/^typedef unsigned __int16 uint16;$/;"	t	namespace:kaldi
uint32	base/kaldi-types.h	/^typedef unsigned __int32 uint32;$/;"	t	namespace:kaldi
uint64	base/kaldi-types.h	/^typedef unsigned __int64 uint64;$/;"	t	namespace:kaldi
CharToString	base/kaldi-utils.cc	/^std::string CharToString(const char &c) {$/;"	f	namespace:kaldi
Sleep	base/kaldi-utils.cc	/^void Sleep(float seconds) {$/;"	f	namespace:kaldi
kaldi	base/kaldi-utils.cc	/^namespace kaldi {$/;"	n	file:
Check	base/kaldi-utils.h	/^  static inline void Check() { }  $/;"	f	class:KaldiCompileTimeAssert
KALDI_ASSERT_IS_FLOATING_TYPE	base/kaldi-utils.h	124;"	d
KALDI_ASSERT_IS_INTEGER_TYPE	base/kaldi-utils.h	120;"	d
KALDI_BASE_KALDI_UTILS_H_	base/kaldi-utils.h	22;"	d
KALDI_COMPILE_TIME_ASSERT	base/kaldi-utils.h	118;"	d
KALDI_DISALLOW_COPY_AND_ASSIGN	base/kaldi-utils.h	104;"	d
KALDI_MEMALIGN	base/kaldi-utils.h	39;"	d
KALDI_MEMALIGN	base/kaldi-utils.h	45;"	d
KALDI_MEMALIGN	base/kaldi-utils.h	49;"	d
KALDI_MEMALIGN_FREE	base/kaldi-utils.h	41;"	d
KALDI_MEMALIGN_FREE	base/kaldi-utils.h	47;"	d
KALDI_MEMALIGN_FREE	base/kaldi-utils.h	51;"	d
KALDI_STRCASECMP	base/kaldi-utils.h	137;"	d
KALDI_STRCASECMP	base/kaldi-utils.h	139;"	d
KALDI_STRTOD	base/kaldi-utils.h	147;"	d
KALDI_STRTOF	base/kaldi-utils.h	150;"	d
KALDI_STRTOF	base/kaldi-utils.h	153;"	d
KALDI_STRTOLL	base/kaldi-utils.h	142;"	d
KALDI_STRTOLL	base/kaldi-utils.h	144;"	d
KALDI_SWAP2	base/kaldi-utils.h	95;"	d
KALDI_SWAP4	base/kaldi-utils.h	92;"	d
KALDI_SWAP8	base/kaldi-utils.h	87;"	d
KaldiCompileTimeAssert	base/kaldi-utils.h	/^template<> class KaldiCompileTimeAssert<true> {$/;"	c
KaldiCompileTimeAssert	base/kaldi-utils.h	/^template<bool B> class KaldiCompileTimeAssert { };$/;"	c
MachineIsLittleEndian	base/kaldi-utils.h	/^inline int MachineIsLittleEndian() {$/;"	f	namespace:kaldi
NOMINMAX	base/kaldi-utils.h	29;"	d
WIN32_LEAN_AND_MEAN	base/kaldi-utils.h	28;"	d
__restrict__	base/kaldi-utils.h	35;"	d
kaldi	base/kaldi-utils.h	/^namespace kaldi {$/;"	n
unlink	base/kaldi-utils.h	130;"	d
TimerTest	base/timer-test.cc	/^void TimerTest() {$/;"	f	namespace:kaldi
kaldi	base/timer-test.cc	/^namespace kaldi {$/;"	n	file:
main	base/timer-test.cc	/^int main() {$/;"	f
Elapsed	base/timer.h	/^  double Elapsed() {$/;"	f	class:kaldi::Timer
KALDI_BASE_TIMER_H_	base/timer.h	20;"	d
Reset	base/timer.h	/^  void Reset() {$/;"	f	class:kaldi::Timer
Timer	base/timer.h	/^  Timer() { Reset(); }$/;"	f	class:kaldi::Timer
Timer	base/timer.h	/^class Timer {$/;"	c	namespace:kaldi
kaldi	base/timer.h	/^namespace kaldi$/;"	n
time_start_	base/timer.h	/^  LARGE_INTEGER time_start_;$/;"	m	class:kaldi::Timer
ADDLIBS	bin/Makefile	/^ADDLIBS = ..\/lm\/kaldi-lm.a ..\/decoder\/kaldi-decoder.a ..\/lat\/kaldi-lat.a \\$/;"	m
BINFILES	bin/Makefile	/^BINFILES = align-equal align-equal-compiled acc-tree-stats \\$/;"	m
EXTRA_CXXFLAGS	bin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	bin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	bin/Makefile	/^TESTFILES =$/;"	m
main	bin/acc-lda.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/acc-tree-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/add-self-loops.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/ali-to-pdf.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/ali-to-phones.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/ali-to-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/align-compiled-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/align-equal-compiled.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/align-equal.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/align-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
IsNotToken	bin/align-text.cc	/^bool IsNotToken(const std::string &token) {$/;"	f
main	bin/align-text.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/am-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/analyze-counts.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/arpa2fst.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/build-pfile-from-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetSeenPhones	bin/build-tree-two-level.cc	/^void GetSeenPhones(BuildTreeStatsType &stats, int P, std::vector<int32> *phones_out) {$/;"	f	namespace:kaldi
kaldi	bin/build-tree-two-level.cc	/^namespace kaldi {$/;"	n	file:
main	bin/build-tree-two-level.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/build-tree.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/cluster-phones.cc	/^int main(int argc, char *argv[]) {$/;"	f
ProcessTopo	bin/compile-questions.cc	/^int32 ProcessTopo(const HmmTopology &topo, const std::vector<std::vector<int32> > &questions) {$/;"	f	namespace:kaldi
kaldi	bin/compile-questions.cc	/^namespace kaldi {$/;"	n	file:
main	bin/compile-questions.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/compile-train-graphs-fsts.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/compile-train-graphs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/compute-mce-scale.cc	/^int main(int argc, char *argv[]) {$/;"	f
PrintAlignmentStats	bin/compute-wer.cc	/^void PrintAlignmentStats(const std::vector<T> &ref,$/;"	f	namespace:kaldi
kaldi	bin/compute-wer.cc	/^namespace kaldi {$/;"	n	file:
main	bin/compute-wer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/convert-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-gselect.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-int-vector-vector.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-int-vector.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-matrix.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-transition-model.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-tree.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-vector-segments.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/copy-vector.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/decode-faster-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/decode-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/dot-weights.cc	/^int main(int argc, char *argv[]) {$/;"	f
MakeEvent	bin/draw-tree.cc	/^void MakeEvent(std::string &qry, fst::SymbolTable *phone_syms,$/;"	f
main	bin/draw-tree.cc	/^int main(int argc, char **argv) {$/;"	f
main	bin/duplicate-matrix.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/est-lda.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/est-mllt.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/est-pca.cc	/^int main(int argc, char *argv[]) {$/;"	f
EventTypeToString	bin/extract-ctx.cc	/^static std::string EventTypeToString(EventType &e,$/;"	f	file:
main	bin/extract-ctx.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/get-post-on-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/get-silence-probs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/hmm-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/latgen-faster-mapped-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/latgen-faster-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/latgen-tracking-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/logprob-to-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/make-h-transducer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/make-ilabel-transducer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/make-pdf-to-tid-transducer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/matrix-logprob.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/matrix-sum-rows.cc	/^int main(int argc, char *argv[]) {$/;"	f
TypeOneUsage	bin/matrix-sum.cc	/^int32 TypeOneUsage(const ParseOptions &po,$/;"	f	namespace:kaldi
TypeThreeUsage	bin/matrix-sum.cc	/^int32 TypeThreeUsage(const ParseOptions &po,$/;"	f	namespace:kaldi
TypeTwoUsage	bin/matrix-sum.cc	/^int32 TypeTwoUsage(const ParseOptions &po,$/;"	f	namespace:kaldi
kaldi	bin/matrix-sum.cc	/^namespace kaldi {$/;"	n	file:
main	bin/matrix-sum.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/pdf-to-counts.cc	/^int main(int argc, char *argv[]) {$/;"	f
CreatePhonesAltFst	bin/phones-to-prons.cc	/^void CreatePhonesAltFst(const std::vector<int32> &phones,$/;"	f
main	bin/phones-to-prons.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/post-to-pdf-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/post-to-phone-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/post-to-tacc.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/post-to-weights.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/prob-to-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/prons-to-wordali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/rand-prune-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/reverse-weights.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/scale-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/show-alignments.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/show-transitions.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/sum-lda-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/sum-matrices.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/sum-mllt-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/sum-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/sum-tree-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/thresh-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/transform-vec.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/tree-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/vector-scale.cc	/^int main(int argc, char *argv[]) {$/;"	f
TypeOneUsage	bin/vector-sum.cc	/^int32 TypeOneUsage(const ParseOptions &po) {$/;"	f	namespace:kaldi
TypeThreeUsage	bin/vector-sum.cc	/^int32 TypeThreeUsage(const ParseOptions &po,$/;"	f	namespace:kaldi
TypeTwoUsage	bin/vector-sum.cc	/^int32 TypeTwoUsage(const ParseOptions &po,$/;"	f	namespace:kaldi
kaldi	bin/vector-sum.cc	/^namespace kaldi {$/;"	n	file:
main	bin/vector-sum.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/weight-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	bin/weight-silence-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
check_exists	configure	/^function check_exists {$/;"	f
check_for_bad_gcc	configure	/^function check_for_bad_gcc {$/;"	f
check_for_slow_expf	configure	/^function check_for_slow_expf {$/;"	f
check_library	configure	/^function check_library {$/;"	f
exit_success	configure	/^function exit_success {$/;"	f
failure	configure	/^function failure {$/;"	f
fix_cxx_flag	configure	/^function fix_cxx_flag {$/;"	f
is_set	configure	/^function is_set {$/;"	f
linux_atlas_failure	configure	/^function linux_atlas_failure { # function we use when we couldn't find$/;"	f
linux_check_dynamic	configure	/^function linux_check_dynamic {$/;"	f
linux_check_static	configure	/^function linux_check_static {$/;"	f
linux_configure_cuda	configure	/^function linux_configure_cuda {$/;"	f
linux_configure_debian7	configure	/^function linux_configure_debian7 {$/;"	f
linux_configure_debian_ubuntu	configure	/^function linux_configure_debian_ubuntu {$/;"	f
linux_configure_debian_ubuntu3	configure	/^function linux_configure_debian_ubuntu3 {$/;"	f
linux_configure_dynamic	configure	/^function linux_configure_dynamic {$/;"	f
linux_configure_mkl_includes	configure	/^function linux_configure_mkl_includes {$/;"	f
linux_configure_mkl_libraries	configure	/^function linux_configure_mkl_libraries {$/;"	f
linux_configure_mkllibdir	configure	/^function linux_configure_mkllibdir {$/;"	f
linux_configure_omplibdir	configure	/^function linux_configure_omplibdir {$/;"	f
linux_configure_redhat	configure	/^function linux_configure_redhat {$/;"	f
linux_configure_redhat_fat	configure	/^function linux_configure_redhat_fat {$/;"	f
linux_configure_speex	configure	/^function linux_configure_speex {$/;"	f
linux_configure_static	configure	/^function linux_configure_static {$/;"	f
read_dirname	configure	/^function read_dirname {$/;"	f
rel2abs	configure	/^function rel2abs {$/;"	f
usage	configure	/^function usage {$/;"	f
ADDLIBS	cudamatrix/Makefile	/^ADDLIBS = ..\/matrix\/kaldi-matrix.a ..\/base\/kaldi-base.a  ..\/util\/kaldi-util.a $/;"	m
CUDA_ARCH	cudamatrix/Makefile	/^  CUDA_ARCH=-gencode arch=compute_20,code=sm_20$/;"	m
CUDA_VERSION	cudamatrix/Makefile	/^  CUDA_VERSION=$(shell $(CUDATKDIR)\/bin\/nvcc -V | grep release | sed -e 's|.*release ||' -e 's|,.*||' -e 's|\\.||')$/;"	m
CUDA_VER_GT_4_2	cudamatrix/Makefile	/^  CUDA_VER_GT_4_2 := $(shell [ $(CUDA_VERSION) -ge 42 ] && echo true)$/;"	m
CUDA_VER_GT_5_0	cudamatrix/Makefile	/^  CUDA_VER_GT_5_0 := $(shell [ $(CUDA_VERSION) -ge 50 ] && echo true)$/;"	m
CUDA_VER_GT_6_0	cudamatrix/Makefile	/^  CUDA_VER_GT_6_0 := $(shell [ $(CUDA_VERSION) -ge 60 ] && echo true)$/;"	m
CUDA_VER_GT_6_5	cudamatrix/Makefile	/^  CUDA_VER_GT_6_5 := $(shell [ $(CUDA_VERSION) -ge 65 ] && echo true)$/;"	m
LIBNAME	cudamatrix/Makefile	/^LIBNAME = kaldi-cudamatrix$/;"	m
OBJFILES	cudamatrix/Makefile	/^OBJFILES = cu-device.o cu-math.o cu-matrix.o cu-packed-matrix.o cu-sp-matrix.o \\$/;"	m
OPENFST_CXXFLAGS	cudamatrix/Makefile	/^OPENFST_CXXFLAGS = $/;"	m
OPENFST_LDLIBS	cudamatrix/Makefile	/^OPENFST_LDLIBS =$/;"	m
TESTFILES	cudamatrix/Makefile	/^TESTFILES = cu-vector-test cu-matrix-test cu-math-test cu-test cu-sp-matrix-test cu-packed-matrix-test cu-tp-matrix-test \\$/;"	m
CopyFromArray	cudamatrix/cu-array-inl.h	/^void CuArray<T>::CopyFromArray(const CuArray<T> &src) {$/;"	f	class:kaldi::CuArray
CopyFromVec	cudamatrix/cu-array-inl.h	/^void CuArray<T>::CopyFromVec(const std::vector<T> &src) {$/;"	f	class:kaldi::CuArray
CopyToVec	cudamatrix/cu-array-inl.h	/^void CuArray<T>::CopyToVec(std::vector<T> *dst) const {$/;"	f	class:kaldi::CuArray
Destroy	cudamatrix/cu-array-inl.h	/^void CuArray<T>::Destroy() {$/;"	f	class:kaldi::CuArray
KALDI_CUDAMATRIX_CU_ARRAY_INL_H_	cudamatrix/cu-array-inl.h	24;"	d
Resize	cudamatrix/cu-array-inl.h	/^void CuArray<T>::Resize(MatrixIndexT dim, MatrixResizeType resize_type) {$/;"	f	class:kaldi::CuArray
Set	cudamatrix/cu-array-inl.h	/^inline void CuArray<T>::Set(const T &value) {$/;"	f	class:kaldi::CuArray
Set	cudamatrix/cu-array-inl.h	/^inline void CuArray<int32>::Set(const int32 &value) {$/;"	f	class:kaldi::CuArray
SetZero	cudamatrix/cu-array-inl.h	/^void CuArray<T>::SetZero() {$/;"	f	class:kaldi::CuArray
kaldi	cudamatrix/cu-array-inl.h	/^namespace kaldi {$/;"	n
operator <<	cudamatrix/cu-array-inl.h	/^std::ostream &operator << (std::ostream &out, const CuArray<T> &vec) {$/;"	f	namespace:kaldi
AssertEqual	cudamatrix/cu-array-test.cc	/^void AssertEqual(const std::vector<T> &vec1,$/;"	f	namespace:kaldi
UnitTestCuArray	cudamatrix/cu-array-test.cc	/^static void UnitTestCuArray() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-array-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-array-test.cc	/^int main() {$/;"	f
CuArray	cudamatrix/cu-array.h	/^  CuArray<T>() : dim_(0), data_(NULL) {  }$/;"	f	class:kaldi::CuArray
CuArray	cudamatrix/cu-array.h	/^  explicit CuArray<T>(MatrixIndexT dim, MatrixResizeType resize_type = kSetZero):$/;"	f	class:kaldi::CuArray
CuArray	cudamatrix/cu-array.h	/^  explicit CuArray<T>(const CuArray<T> &src):$/;"	f	class:kaldi::CuArray
CuArray	cudamatrix/cu-array.h	/^  explicit CuArray<T>(const std::vector<T> &src):$/;"	f	class:kaldi::CuArray
CuArray	cudamatrix/cu-array.h	/^class CuArray {$/;"	c	namespace:kaldi
Data	cudamatrix/cu-array.h	/^  T* Data() { return data_; }$/;"	f	class:kaldi::CuArray
Data	cudamatrix/cu-array.h	/^  const T* Data() const { return data_; }$/;"	f	class:kaldi::CuArray
Dim	cudamatrix/cu-array.h	/^  MatrixIndexT Dim() const { return dim_;  }$/;"	f	class:kaldi::CuArray
KALDI_CUDAMATRIX_CU_ARRAY_H_	cudamatrix/cu-array.h	24;"	d
ThisType	cudamatrix/cu-array.h	/^  typedef CuArray<T> ThisType;$/;"	t	class:kaldi::CuArray
data_	cudamatrix/cu-array.h	/^  T *data_;  \/\/\/< GPU data pointer (if GPU not available,$/;"	m	class:kaldi::CuArray
dim_	cudamatrix/cu-array.h	/^  MatrixIndexT dim_;     \/\/\/< dimension of the vector$/;"	m	class:kaldi::CuArray
kaldi	cudamatrix/cu-array.h	/^namespace kaldi {$/;"	n
operator =	cudamatrix/cu-array.h	/^  CuArray<T> &operator= (const CuArray<T> &in) {$/;"	f	class:kaldi::CuArray
operator =	cudamatrix/cu-array.h	/^  CuArray<T> &operator= (const std::vector<T> &in) {$/;"	f	class:kaldi::CuArray
~CuArray	cudamatrix/cu-array.h	/^  ~CuArray() { Destroy(); }$/;"	f	class:kaldi::CuArray
ApproxEqual	cudamatrix/cu-block-matrix-test.cc	/^static bool ApproxEqual(const CuBlockMatrix<Real> &A,$/;"	f	namespace:kaldi
CuBlockMatrixUnitTest	cudamatrix/cu-block-matrix-test.cc	/^template<typename Real> void CuBlockMatrixUnitTest() {$/;"	f	namespace:kaldi
UnitTestCuBlockMatrixAddMatBlock	cudamatrix/cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixAddMatBlock() {$/;"	f	namespace:kaldi
UnitTestCuBlockMatrixAddMatMat	cudamatrix/cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixAddMatMat() {$/;"	f	namespace:kaldi
UnitTestCuBlockMatrixIO	cudamatrix/cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixIO() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-block-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-block-matrix-test.cc	/^int main() {$/;"	f
AddMatMat	cudamatrix/cu-block-matrix.cc	/^void CuBlockMatrix<Real>::AddMatMat($/;"	f	class:kaldi::CuBlockMatrix
Block	cudamatrix/cu-block-matrix.cc	/^CuSubMatrix<Real> CuBlockMatrix<Real>::Block(int32 b) {$/;"	f	class:kaldi::CuBlockMatrix
Block	cudamatrix/cu-block-matrix.cc	/^const CuSubMatrix<Real> CuBlockMatrix<Real>::Block(int32 b) const {$/;"	f	class:kaldi::CuBlockMatrix
CopyFromMat	cudamatrix/cu-block-matrix.cc	/^void CuBlockMatrix<Real>::CopyFromMat(const CuMatrix<Real> &M) {$/;"	f	class:kaldi::CuBlockMatrix
CuBlockMatrix	cudamatrix/cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix() {$/;"	f	class:kaldi::CuBlockMatrix
CuBlockMatrix	cudamatrix/cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix(const CuBlockMatrix<Real> &other):$/;"	f	class:kaldi::CuBlockMatrix
CuBlockMatrix	cudamatrix/cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix(const std::vector<CuMatrix<Real> >&data) {$/;"	f	class:kaldi::CuBlockMatrix
Destroy	cudamatrix/cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuBlockMatrix
FreeCudaData	cudamatrix/cu-block-matrix.cc	/^void CuBlockMatrix<Real>::FreeCudaData() {$/;"	f	class:kaldi::CuBlockMatrix
MaxBlockCols	cudamatrix/cu-block-matrix.cc	/^MatrixIndexT CuBlockMatrix<Real>::MaxBlockCols() const {$/;"	f	class:kaldi::CuBlockMatrix
MaxBlockRows	cudamatrix/cu-block-matrix.cc	/^MatrixIndexT CuBlockMatrix<Real>::MaxBlockRows() const {$/;"	f	class:kaldi::CuBlockMatrix
Read	cudamatrix/cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuBlockMatrix
SetCudaData	cudamatrix/cu-block-matrix.cc	/^void CuBlockMatrix<Real>::SetCudaData() {$/;"	f	class:kaldi::CuBlockMatrix
Swap	cudamatrix/cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Swap(CuBlockMatrix<Real> *other) {$/;"	f	class:kaldi::CuBlockMatrix
Write	cudamatrix/cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuBlockMatrix
kaldi	cudamatrix/cu-block-matrix.cc	/^namespace kaldi {$/;"	n	file:
operator <<	cudamatrix/cu-block-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuBlockMatrix<Real> &mat) {$/;"	f	namespace:kaldi
operator =	cudamatrix/cu-block-matrix.cc	/^CuBlockMatrix<Real> &CuBlockMatrix<Real>::operator =(const CuBlockMatrix<Real> &other) {$/;"	f	class:kaldi::CuBlockMatrix
BlockMatrixData	cudamatrix/cu-block-matrix.h	/^  struct BlockMatrixData{$/;"	s	class:kaldi::CuBlockMatrix
CuBlockMatrix	cudamatrix/cu-block-matrix.h	/^class CuBlockMatrix {$/;"	c	namespace:kaldi
CuData	cudamatrix/cu-block-matrix.h	/^  const CuBlockMatrixData* CuData() const { return cu_data_; }$/;"	f	class:kaldi::CuBlockMatrix
KALDI_CUDAMATRIX_CU_BLOCK_MATRIX_H_	cudamatrix/cu-block-matrix.h	23;"	d
NumBlocks	cudamatrix/cu-block-matrix.h	/^  MatrixIndexT NumBlocks() const { return block_data_.size(); }$/;"	f	class:kaldi::CuBlockMatrix
NumCols	cudamatrix/cu-block-matrix.h	/^  MatrixIndexT NumCols() const { return data_.num_cols_; }$/;"	f	class:kaldi::CuBlockMatrix
NumRows	cudamatrix/cu-block-matrix.h	/^  MatrixIndexT NumRows() const { return num_rows_; }$/;"	f	class:kaldi::CuBlockMatrix
block_data_	cudamatrix/cu-block-matrix.h	/^  std::vector<BlockMatrixData> block_data_;$/;"	m	class:kaldi::CuBlockMatrix
col_offset	cudamatrix/cu-block-matrix.h	/^    MatrixIndexT col_offset;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
cu_data_	cudamatrix/cu-block-matrix.h	/^  CuBlockMatrixData *cu_data_; \/\/ We store the pointers and some additional info$/;"	m	class:kaldi::CuBlockMatrix
data_	cudamatrix/cu-block-matrix.h	/^  CuMatrix<Real> data_; \/\/ This is a single matrix into which$/;"	m	class:kaldi::CuBlockMatrix
kaldi	cudamatrix/cu-block-matrix.h	/^namespace kaldi {$/;"	n
num_cols	cudamatrix/cu-block-matrix.h	/^    MatrixIndexT num_cols;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
num_rows	cudamatrix/cu-block-matrix.h	/^    MatrixIndexT num_rows;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
num_rows_	cudamatrix/cu-block-matrix.h	/^  MatrixIndexT num_rows_; \/\/ sum of num_rows of elements of block_data_.$/;"	m	class:kaldi::CuBlockMatrix
row_offset	cudamatrix/cu-block-matrix.h	/^    MatrixIndexT row_offset;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
~CuBlockMatrix	cudamatrix/cu-block-matrix.h	/^  ~CuBlockMatrix() { Destroy(); }$/;"	f	class:kaldi::CuBlockMatrix
KALDI_CUDAMATRIX_COMMON_H_	cudamatrix/cu-common.cc	2;"	d	file:
KaldiTransToCuTrans	cudamatrix/cu-common.cc	/^cublasOperation_t KaldiTransToCuTrans(MatrixTransposeType kaldi_trans) {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-common.cc	/^namespace kaldi {$/;"	n	file:
CU_SAFE_CALL	cudamatrix/cu-common.h	38;"	d
KALDI_CUDAMATRIX_CU_COMMON_H_	cudamatrix/cu-common.h	24;"	d
kaldi	cudamatrix/cu-common.h	/^namespace kaldi {$/;"	n
n_blocks	cudamatrix/cu-common.h	/^inline int32 n_blocks(int32 size, int32 block_size) { $/;"	f	namespace:kaldi
AccuProfile	cudamatrix/cu-device.cc	/^void CuDevice::AccuProfile(const std::string &key, double time) { $/;"	f	class:kaldi::CuDevice
CheckGpuHealth	cudamatrix/cu-device.cc	/^void CuDevice::CheckGpuHealth() {$/;"	f	class:kaldi::CuDevice
Cleanup	cudamatrix/cu-device.cc	/^void CuAllocator::Cleanup() {$/;"	f	class:kaldi::CuAllocator
CuAllocator	cudamatrix/cu-device.cc	/^  CuAllocator(const CuAllocatorOptions &opts, CuDevice *device):$/;"	f	class:kaldi::CuAllocator
CuAllocator	cudamatrix/cu-device.cc	/^class CuAllocator {$/;"	c	namespace:kaldi	file:
CuAllocatorOptions	cudamatrix/cu-device.cc	/^  CuAllocatorOptions()$/;"	f	struct:kaldi::CuAllocatorOptions
CuAllocatorOptions	cudamatrix/cu-device.cc	/^struct CuAllocatorOptions {$/;"	s	namespace:kaldi	file:
CuDevice	cudamatrix/cu-device.cc	/^CuDevice::CuDevice(): active_gpu_id_(-1), verbose_(true),$/;"	f	class:kaldi::CuDevice
DeviceGetName	cudamatrix/cu-device.cc	/^void CuDevice::DeviceGetName(char* name, int32 len, int32 dev) {$/;"	f	class:kaldi::CuDevice
DisableCaching	cudamatrix/cu-device.cc	/^inline void CuAllocator::DisableCaching() {$/;"	f	class:kaldi::CuAllocator
DisableCaching	cudamatrix/cu-device.cc	/^void CuDevice::DisableCaching() {$/;"	f	class:kaldi::CuDevice
DoublePrecisionSupported	cudamatrix/cu-device.cc	/^bool CuDevice::DoublePrecisionSupported() {$/;"	f	class:kaldi::CuDevice
FinalizeActiveGpu	cudamatrix/cu-device.cc	/^void CuDevice::FinalizeActiveGpu() {$/;"	f	class:kaldi::CuDevice
FindMemInfo	cudamatrix/cu-device.cc	/^  inline MemInfoForSize *FindMemInfo(size_t row_bytes,$/;"	f	class:kaldi::CuAllocator	file:
Free	cudamatrix/cu-device.cc	/^void CuAllocator::Free(void *addr) {$/;"	f	class:kaldi::CuAllocator
Free	cudamatrix/cu-device.cc	/^void CuDevice::Free(void *ptr) { allocator_->Free(ptr); }$/;"	f	class:kaldi::CuDevice
GetFreeMemory	cudamatrix/cu-device.cc	/^std::string CuDevice::GetFreeMemory(int64* free, int64* total) const {$/;"	f	class:kaldi::CuDevice
IsComputeExclusive	cudamatrix/cu-device.cc	/^bool CuDevice::IsComputeExclusive() {$/;"	f	class:kaldi::CuDevice
Malloc	cudamatrix/cu-device.cc	/^void* CuAllocator::Malloc(size_t size) {$/;"	f	class:kaldi::CuAllocator
Malloc	cudamatrix/cu-device.cc	/^void* CuDevice::Malloc(size_t size) {$/;"	f	class:kaldi::CuDevice
MallocInternal	cudamatrix/cu-device.cc	/^void* CuAllocator::MallocInternal(size_t row_bytes,$/;"	f	class:kaldi::CuAllocator
MallocPitch	cudamatrix/cu-device.cc	/^void* CuAllocator::MallocPitch(size_t num_rows, size_t row_bytes,$/;"	f	class:kaldi::CuAllocator
MallocPitch	cudamatrix/cu-device.cc	/^void* CuDevice::MallocPitch(size_t row_bytes, size_t num_rows, size_t *pitch) {$/;"	f	class:kaldi::CuDevice
MemInfoForSize	cudamatrix/cu-device.cc	/^    MemInfoForSize(size_t row_bytes,$/;"	f	struct:kaldi::CuAllocator::MemInfoForSize
MemInfoForSize	cudamatrix/cu-device.cc	/^  struct MemInfoForSize {$/;"	s	class:kaldi::CuAllocator	file:
PossiblyCleanup	cudamatrix/cu-device.cc	/^void CuAllocator::PossiblyCleanup(size_t num_bytes) {$/;"	f	class:kaldi::CuAllocator
PrintMemoryUsage	cudamatrix/cu-device.cc	/^void CuDevice::PrintMemoryUsage() const {$/;"	f	class:kaldi::CuDevice
PrintProfile	cudamatrix/cu-device.cc	/^void CuDevice::PrintProfile() {$/;"	f	class:kaldi::CuDevice
ReleaseAllCachedMemory	cudamatrix/cu-device.cc	/^void CuAllocator::ReleaseAllCachedMemory(bool destroy) {$/;"	f	class:kaldi::CuAllocator
SelectGpuId	cudamatrix/cu-device.cc	/^void CuDevice::SelectGpuId(std::string use_gpu) {$/;"	f	class:kaldi::CuDevice
SelectGpuIdAuto	cudamatrix/cu-device.cc	/^bool CuDevice::SelectGpuIdAuto() {$/;"	f	class:kaldi::CuDevice
addr_to_list_	cudamatrix/cu-device.cc	/^  unordered_map<void*, MemInfoForSize*> addr_to_list_;$/;"	m	class:kaldi::CuAllocator	file:
cache_memory	cudamatrix/cu-device.cc	/^  bool cache_memory; \/\/ Enable GPU memory caching, (false = disable).$/;"	m	struct:kaldi::CuAllocatorOptions	file:
cleanup_countdown_bytes_	cudamatrix/cu-device.cc	/^  int32 cleanup_countdown_bytes_; \/\/ countdown in bytes, until the next time we check$/;"	m	class:kaldi::CuAllocator	file:
cleanup_interval_bytes	cudamatrix/cu-device.cc	/^  int32 cleanup_interval_bytes;$/;"	m	struct:kaldi::CuAllocatorOptions	file:
count	cudamatrix/cu-device.cc	/^  int32 count; \/\/ Number of times we free and delete a particular size before we$/;"	m	struct:kaldi::CuAllocatorOptions	file:
countdown	cudamatrix/cu-device.cc	/^    size_t countdown; \/\/ number that have been freed and not cached.$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
currently_used	cudamatrix/cu-device.cc	/^    size_t currently_used; \/\/ number that are "in the wild".. kept for$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
device_	cudamatrix/cu-device.cc	/^  CuDevice *device_; \/\/ device this is attached to...$/;"	m	class:kaldi::CuAllocator	file:
freed	cudamatrix/cu-device.cc	/^    std::vector<void*> freed; \/\/ freed and cached...$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
global_device_	cudamatrix/cu-device.cc	/^CuDevice CuDevice::global_device_;$/;"	m	class:kaldi::CuDevice	file:
kaldi	cudamatrix/cu-device.cc	/^namespace kaldi {$/;"	n	file:
num_rows	cudamatrix/cu-device.cc	/^    size_t num_rows; \/\/ or the number of rows, if it's a regular CudaMalloc$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
opts_	cudamatrix/cu-device.cc	/^  CuAllocatorOptions opts_;$/;"	m	class:kaldi::CuAllocator	file:
pitch	cudamatrix/cu-device.cc	/^    size_t pitch; \/\/ If CudaMallocPitch, the pitch returned by CudaMallocPitch;$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
row_bytes	cudamatrix/cu-device.cc	/^    size_t row_bytes; \/\/ or zero, if a regular CudaMalloc, not$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
size_to_list_	cudamatrix/cu-device.cc	/^  std::vector<std::map<size_t, MemInfoForSize*>* > size_to_list_;$/;"	m	class:kaldi::CuAllocator	file:
~CuAllocator	cudamatrix/cu-device.cc	/^CuAllocator::~CuAllocator() {$/;"	f	class:kaldi::CuAllocator
~CuDevice	cudamatrix/cu-device.cc	/^CuDevice::~CuDevice() {$/;"	f	class:kaldi::CuDevice
ActiveGpuId	cudamatrix/cu-device.h	/^  int32 ActiveGpuId() {$/;"	f	class:kaldi::CuDevice
CuDevice	cudamatrix/cu-device.h	/^class CuDevice {$/;"	c	namespace:kaldi
Enabled	cudamatrix/cu-device.h	/^  bool Enabled() const {$/;"	f	class:kaldi::CuDevice
Instantiate	cudamatrix/cu-device.h	/^  static inline CuDevice& Instantiate() { return global_device_; }$/;"	f	class:kaldi::CuDevice
KALDI_CUDAMATRIX_CU_DEVICE_H_	cudamatrix/cu-device.h	23;"	d
ResetProfile	cudamatrix/cu-device.h	/^  void ResetProfile() { $/;"	f	class:kaldi::CuDevice
SetVerbose	cudamatrix/cu-device.h	/^  void SetVerbose(bool verbose) {  verbose_ = verbose; }$/;"	f	class:kaldi::CuDevice
active_gpu_id_	cudamatrix/cu-device.h	/^  int32 active_gpu_id_; $/;"	m	class:kaldi::CuDevice
allocator_	cudamatrix/cu-device.h	/^  CuAllocator *allocator_;$/;"	m	class:kaldi::CuDevice
free_memory_at_startup_	cudamatrix/cu-device.h	/^  int64 free_memory_at_startup_;$/;"	m	class:kaldi::CuDevice
global_device_	cudamatrix/cu-device.h	/^  static CuDevice global_device_;$/;"	m	class:kaldi::CuDevice
kaldi	cudamatrix/cu-device.h	/^namespace kaldi {$/;"	n
profile_map_	cudamatrix/cu-device.h	/^  std::map<std::string, double> profile_map_;$/;"	m	class:kaldi::CuDevice
properties_	cudamatrix/cu-device.h	/^  cudaDeviceProp properties_;$/;"	m	class:kaldi::CuDevice
verbose_	cudamatrix/cu-device.h	/^  bool verbose_;$/;"	m	class:kaldi::CuDevice
KALDI_CUDAMATRIX_CU_KERNELS_ANSI_H_	cudamatrix/cu-kernels-ansi.h	28;"	d
KALDI_CUDAMATRIX_CU_KERNELS_H_	cudamatrix/cu-kernels.h	28;"	d
cuda_add	cudamatrix/cu-kernels.h	/^inline void cuda_add(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_add(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_add	cudamatrix/cu-kernels.h	/^inline void cuda_add(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_add(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_add_diag_mat_mat	cudamatrix/cu-kernels.h	/^inline void cuda_add_diag_mat_mat(int Gr, int Bl, double alpha, double* v, int v_dim, const double* M, $/;"	f	namespace:kaldi
cuda_add_diag_mat_mat	cudamatrix/cu-kernels.h	/^inline void cuda_add_diag_mat_mat(int Gr, int Bl, float alpha, float* v, int v_dim, const float* M, $/;"	f	namespace:kaldi
cuda_add_diag_packed	cudamatrix/cu-kernels.h	/^inline void cuda_add_diag_packed(int Gr, int Bl, double* mat, double value, int dim) { cudaD_add_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_add_diag_packed	cudamatrix/cu-kernels.h	/^inline void cuda_add_diag_packed(int Gr, int Bl, float* mat, float value, int dim) { cudaF_add_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_add_diag_vec_mat	cudamatrix/cu-kernels.h	/^inline void cuda_add_diag_vec_mat(dim3 Gr, dim3 Bl, double alpha, double *mat, MatrixDim mat_dim,$/;"	f	namespace:kaldi
cuda_add_diag_vec_mat	cudamatrix/cu-kernels.h	/^inline void cuda_add_diag_vec_mat(dim3 Gr, dim3 Bl, float alpha, float *mat, MatrixDim mat_dim,$/;"	f	namespace:kaldi
cuda_add_mat	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat(dim3 Gr, dim3 Bl, double alpha, const double *src, double *dst, MatrixDim d, int src_stride, int A_trans) { cudaD_add_mat(Gr,Bl,alpha,src,dst,d,src_stride, A_trans); }$/;"	f	namespace:kaldi
cuda_add_mat	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat(dim3 Gr, dim3 Bl, float alpha, const float *src, float *dst, MatrixDim d, int src_stride, int A_trans) { cudaF_add_mat(Gr,Bl,alpha,src,dst,d,src_stride, A_trans); }$/;"	f	namespace:kaldi
cuda_add_mat_blockmat	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat_blockmat(dim3 Gr, dim3 Bl, double *data, MatrixDim d, const double *Adata,$/;"	f	namespace:kaldi
cuda_add_mat_blockmat	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat_blockmat(dim3 Gr, dim3 Bl, float *data, MatrixDim d, const float *Adata,$/;"	f	namespace:kaldi
cuda_add_mat_diag_vec	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat_diag_vec(dim3 Gr, dim3 Bl, double alpha, double *mat, MatrixDim mat_dim, const double *mat2, int mat2_row_stride, int mat2_col_stride, const double *vec,  double beta) { cudaD_add_mat_diag_vec(Gr, Bl, alpha, mat, mat_dim, mat2, mat2_row_stride, mat2_col_stride, vec, beta); }$/;"	f	namespace:kaldi
cuda_add_mat_diag_vec	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat_diag_vec(dim3 Gr, dim3 Bl, float alpha, float *mat, MatrixDim mat_dim, const float *mat2, int mat2_row_stride, int mat2_col_stride, const float *vec,  float beta) { cudaF_add_mat_diag_vec(Gr, Bl, alpha, mat, mat_dim, mat2, mat2_row_stride, mat2_col_stride, vec, beta); }$/;"	f	namespace:kaldi
cuda_add_mat_mat_div_mat	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat_mat_div_mat(dim3 Gr, dim3 Bl, const double *A, const double *B, const double *C, double *dst, MatrixDim d, int stride_a, int stride_b, int stride_c) { cudaD_add_mat_mat_div_mat(Gr,Bl,A,B,C,dst,d,stride_a,stride_b,stride_c); }$/;"	f	namespace:kaldi
cuda_add_mat_mat_div_mat	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat_mat_div_mat(dim3 Gr, dim3 Bl, const float *A, const float *B, const float *C, float *dst, MatrixDim d, int stride_a, int stride_b, int stride_c) { cudaF_add_mat_mat_div_mat(Gr,Bl,A,B,C,dst,d,stride_a,stride_b,stride_c); }$/;"	f	namespace:kaldi
cuda_add_mat_mat_elements	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat_mat_elements(dim3 Gr, dim3 Bl, double *data, const double *srcA_data, const double *srcB_data, MatrixDim dim, int srcA_stride, int srcB_stride, double alpha, double beta) { cudaD_add_mat_mat_elements(Gr, Bl, data, srcA_data, srcB_data, dim, srcA_stride, srcB_stride, alpha, beta); }$/;"	f	namespace:kaldi
cuda_add_mat_mat_elements	cudamatrix/cu-kernels.h	/^inline void cuda_add_mat_mat_elements(dim3 Gr, dim3 Bl, float *data, const float *srcA_data, const float *srcB_data, MatrixDim dim, int srcA_stride, int srcB_stride, float alpha, float beta) { cudaF_add_mat_mat_elements(Gr, Bl, data, srcA_data, srcB_data, dim, srcA_stride, srcB_stride, alpha, beta); } $/;"	f	namespace:kaldi
cuda_add_vec2	cudamatrix/cu-kernels.h	/^inline void cuda_add_vec2(dim3 Gr, dim3 Bl, double *mat, const double *vec, const double alpha, int dim) { cudaD_add_vec2(Gr,Bl,mat,vec,alpha,dim); }$/;"	f	namespace:kaldi
cuda_add_vec2	cudamatrix/cu-kernels.h	/^inline void cuda_add_vec2(dim3 Gr, dim3 Bl, float *mat, const float *vec, const float alpha, int dim) { cudaF_add_vec2(Gr,Bl,mat,vec,alpha,dim); }$/;"	f	namespace:kaldi
cuda_add_vec_to_cols	cudamatrix/cu-kernels.h	/^inline void cuda_add_vec_to_cols(dim3 Gr, dim3 Bl, double alpha, const double *col, double beta, double *dst, MatrixDim d) { cudaD_add_vec_to_cols(Gr,Bl,alpha,col,beta,dst,d); }$/;"	f	namespace:kaldi
cuda_add_vec_to_cols	cudamatrix/cu-kernels.h	/^inline void cuda_add_vec_to_cols(dim3 Gr, dim3 Bl, float alpha, const float *col, float beta, float *dst, MatrixDim d) { cudaF_add_vec_to_cols(Gr,Bl,alpha,col,beta,dst,d); }$/;"	f	namespace:kaldi
cuda_add_vec_to_rows	cudamatrix/cu-kernels.h	/^inline void cuda_add_vec_to_rows(dim3 Gr, dim3 Bl, double alpha, const double *row, double beta, double *dst, MatrixDim d) { cudaD_add_vec_to_rows(Gr,Bl,alpha,row,beta,dst,d); }$/;"	f	namespace:kaldi
cuda_add_vec_to_rows	cudamatrix/cu-kernels.h	/^inline void cuda_add_vec_to_rows(dim3 Gr, dim3 Bl, float alpha, const float *row, float beta, float *dst, MatrixDim d) { cudaF_add_vec_to_rows(Gr,Bl,alpha,row,beta,dst,d); }$/;"	f	namespace:kaldi
cuda_add_vec_vec	cudamatrix/cu-kernels.h	/^inline void cuda_add_vec_vec(int Gr, int Bl, double alpha, double* v, const double* x, const double* y, double beta, int dim) { cudaD_add_vec_vec(Gr,Bl,alpha,v,x,y,beta,dim); }$/;"	f	namespace:kaldi
cuda_add_vec_vec	cudamatrix/cu-kernels.h	/^inline void cuda_add_vec_vec(int Gr, int Bl, float alpha, float* v, const float* x, const float* y, float beta, int dim) { cudaF_add_vec_vec(Gr,Bl,alpha,v,x,y,beta,dim); }$/;"	f	namespace:kaldi
cuda_apply_ceiling	cudamatrix/cu-kernels.h	/^inline void cuda_apply_ceiling(dim3 Gr, dim3 Bl, double* mat, double ceiling_val, MatrixDim dim) { cudaD_apply_ceiling(Gr,Bl,mat,ceiling_val,dim); }$/;"	f	namespace:kaldi
cuda_apply_ceiling	cudamatrix/cu-kernels.h	/^inline void cuda_apply_ceiling(dim3 Gr, dim3 Bl, float* mat, float ceiling_val, MatrixDim dim) { cudaF_apply_ceiling(Gr,Bl,mat,ceiling_val,dim); }$/;"	f	namespace:kaldi
cuda_apply_exp	cudamatrix/cu-kernels.h	/^inline void cuda_apply_exp(dim3 Gr, dim3 Bl, double* mat, MatrixDim d) { cudaD_apply_exp(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_apply_exp	cudamatrix/cu-kernels.h	/^inline void cuda_apply_exp(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_apply_exp(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_apply_floor	cudamatrix/cu-kernels.h	/^inline void cuda_apply_floor(dim3 Gr, dim3 Bl, double* mat, double floor_val, MatrixDim dim) { cudaD_apply_floor(Gr,Bl,mat,floor_val,dim); }$/;"	f	namespace:kaldi
cuda_apply_floor	cudamatrix/cu-kernels.h	/^inline void cuda_apply_floor(dim3 Gr, dim3 Bl, float* mat, float floor_val, MatrixDim dim) { cudaF_apply_floor(Gr,Bl,mat,floor_val,dim); }$/;"	f	namespace:kaldi
cuda_apply_heaviside	cudamatrix/cu-kernels.h	/^inline void cuda_apply_heaviside(dim3 Gr, dim3 Bl, double* mat, MatrixDim dim) { cudaD_apply_heaviside(Gr,Bl,mat,dim); }$/;"	f	namespace:kaldi
cuda_apply_heaviside	cudamatrix/cu-kernels.h	/^inline void cuda_apply_heaviside(dim3 Gr, dim3 Bl, float* mat, MatrixDim dim) { cudaF_apply_heaviside(Gr,Bl,mat,dim); }$/;"	f	namespace:kaldi
cuda_apply_log	cudamatrix/cu-kernels.h	/^inline void cuda_apply_log(dim3 Gr, dim3 Bl, double *mat, MatrixDim d) { cudaD_apply_log(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_apply_log	cudamatrix/cu-kernels.h	/^inline void cuda_apply_log(dim3 Gr, dim3 Bl, float *mat, MatrixDim d) { cudaF_apply_log(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_apply_pow	cudamatrix/cu-kernels.h	/^inline void cuda_apply_pow(dim3 Gr, dim3 Bl, double* mat, double power, MatrixDim dim) { cudaD_apply_pow(Gr,Bl,mat,power,dim); }$/;"	f	namespace:kaldi
cuda_apply_pow	cudamatrix/cu-kernels.h	/^inline void cuda_apply_pow(dim3 Gr, dim3 Bl, float* mat, float power, MatrixDim dim) { cudaF_apply_pow(Gr,Bl,mat,power,dim); }$/;"	f	namespace:kaldi
cuda_apply_pow_abs	cudamatrix/cu-kernels.h	/^inline void cuda_apply_pow_abs(dim3 Gr, dim3 Bl, double* mat, double power, bool include_sign, MatrixDim dim) { cudaD_apply_pow_abs(Gr,Bl,mat,power,include_sign,dim); }$/;"	f	namespace:kaldi
cuda_apply_pow_abs	cudamatrix/cu-kernels.h	/^inline void cuda_apply_pow_abs(dim3 Gr, dim3 Bl, float* mat, float power, bool include_sign, MatrixDim dim) { cudaF_apply_pow_abs(Gr,Bl,mat,power,include_sign, dim); }$/;"	f	namespace:kaldi
cuda_axpy	cudamatrix/cu-kernels.h	/^inline void cuda_axpy(int n, double alpha, const double *x, int incx, double *y, int incy) {$/;"	f	namespace:kaldi
cuda_axpy	cudamatrix/cu-kernels.h	/^inline void cuda_axpy(int n, float alpha, const float *x, int incx, float *y, int incy) {$/;"	f	namespace:kaldi
cuda_block_add_mat_mat	cudamatrix/cu-kernels.h	/^inline void cuda_block_add_mat_mat(dim3 Gr, dim3 Bl, CuBlockMatrixData *B_cu_data, int num_blocks,$/;"	f	namespace:kaldi
cuda_calc_pnorm_deriv	cudamatrix/cu-kernels.h	/^inline void cuda_calc_pnorm_deriv(dim3 Gr, dim3 Bl, double *y, const double *x1, const double *x2,  MatrixDim d, int src_stride, int group_size, double power) {cudaD_calc_pnorm_deriv(Gr, Bl, y, x1, x2, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
cuda_calc_pnorm_deriv	cudamatrix/cu-kernels.h	/^inline void cuda_calc_pnorm_deriv(dim3 Gr, dim3 Bl, float *y, const float *x1, const float *x2,  MatrixDim d, int src_stride, int group_size, float power) {cudaF_calc_pnorm_deriv(Gr, Bl, y, x1, x2, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
cuda_comp_obj_deriv	cudamatrix/cu-kernels.h	/^inline void cuda_comp_obj_deriv(dim3 Gr, dim3 Bl, MatrixElement<double>* x, int32 size, const double* z, MatrixDim d, double* z2, MatrixDim d2, double* t) {cudaD_comp_obj_deriv(Gr,Bl,x,size,z,d,z2,d2,t); }$/;"	f	namespace:kaldi
cuda_comp_obj_deriv	cudamatrix/cu-kernels.h	/^inline void cuda_comp_obj_deriv(dim3 Gr, dim3 Bl, MatrixElement<float>* x, int32 size, const float* z, MatrixDim d, float* z2, MatrixDim d2, float* t) {cudaF_comp_obj_deriv(Gr,Bl,x,size,z,d,z2,d2,t); }$/;"	f	namespace:kaldi
cuda_copy	cudamatrix/cu-kernels.h	/^inline void cuda_copy(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaD_copy(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_copy	cudamatrix/cu-kernels.h	/^inline void cuda_copy(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaF_copy(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat	cudamatrix/cu-kernels.h	/^inline void cuda_copy_col_from_mat(int Gr, int Bl, double* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat	cudamatrix/cu-kernels.h	/^inline void cuda_copy_col_from_mat(int Gr, int Bl, float* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat_df	cudamatrix/cu-kernels.h	/^inline void cuda_copy_col_from_mat_df(int Gr, int Bl, double* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat_df(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat_df	cudamatrix/cu-kernels.h	/^inline void cuda_copy_col_from_mat_df(int Gr, int Bl, double* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat_df(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat_fd	cudamatrix/cu-kernels.h	/^inline void cuda_copy_col_from_mat_fd(int Gr, int Bl, float* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat_fd(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat_fd	cudamatrix/cu-kernels.h	/^inline void cuda_copy_col_from_mat_fd(int Gr, int Bl, float* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat_fd(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_vec	cudamatrix/cu-kernels.h	/^inline void cuda_copy_col_from_vec(int Gr, int Bl, double* mat, const double* v, int col, MatrixDim d) { cudaD_copy_col_from_vec(Gr,Bl,mat,v,col,d); }$/;"	f	namespace:kaldi
cuda_copy_col_from_vec	cudamatrix/cu-kernels.h	/^inline void cuda_copy_col_from_vec(int Gr, int Bl, float* mat, const float* v, int col, MatrixDim d) { cudaF_copy_col_from_vec(Gr,Bl,mat,v,col,d); }$/;"	f	namespace:kaldi
cuda_copy_cols	cudamatrix/cu-kernels.h	/^inline void cuda_copy_cols(dim3 Gr, dim3 Bl, double* dst, const double* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
cuda_copy_cols	cudamatrix/cu-kernels.h	/^inline void cuda_copy_cols(dim3 Gr, dim3 Bl, float* dst, const float* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
cuda_copy_from_mat	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, double* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, double* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, float* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, float* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat_trans	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, double* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat_trans	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, double* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat_trans	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, float* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat_trans	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, float* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_sp	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_sp(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_out) { cudaD_copy_from_sp(Gr,Bl,x,y,d_out); }$/;"	f	namespace:kaldi
cuda_copy_from_sp	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_sp(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_out) { cudaF_copy_from_sp(Gr,Bl,x,y,d_out); }$/;"	f	namespace:kaldi
cuda_copy_from_tp	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_tp(dim3 Gr, dim3 Bl, double* A, const double* B, MatrixDim dmat) { cudaD_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_tp(dim3 Gr, dim3 Bl, double* A, const float* B, MatrixDim dmat) { cudaDF_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_tp(dim3 Gr, dim3 Bl, float* A, const double* B, MatrixDim dmat) { cudaFD_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_tp(dim3 Gr, dim3 Bl, float* A, const float* B, MatrixDim dmat) { cudaF_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp_trans	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_tp_trans(dim3 Gr, dim3 Bl, double* A, const double* B, MatrixDim dmat) { cudaD_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp_trans	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_tp_trans(dim3 Gr, dim3 Bl, double* A, const float* B, MatrixDim dmat) { cudaDF_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp_trans	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_tp_trans(dim3 Gr, dim3 Bl, float* A, const double* B, MatrixDim dmat) { cudaFD_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp_trans	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_tp_trans(dim3 Gr, dim3 Bl, float* A, const float* B, MatrixDim dmat) { cudaF_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_vec_df	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_vec_df(int Gr, int Bl, double* v_out, const double* v_in, int dim) { cudaD_copy_from_vec_df(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
cuda_copy_from_vec_df	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_vec_df(int Gr, int Bl, double* v_out, const float* v_in, int dim) { cudaF_copy_from_vec_df(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
cuda_copy_from_vec_fd	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_vec_fd(int Gr, int Bl, float* v_out, const double* v_in, int dim) { cudaD_copy_from_vec_fd(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
cuda_copy_from_vec_fd	cudamatrix/cu-kernels.h	/^inline void cuda_copy_from_vec_fd(int Gr, int Bl, float* v_out, const float* v_in, int dim) { cudaF_copy_from_vec_fd(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
cuda_copy_low_upp	cudamatrix/cu-kernels.h	/^inline void cuda_copy_low_upp(dim3 Gr, dim3 Bl, double* A, MatrixDim dimA) { cudaD_copy_low_upp(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
cuda_copy_low_upp	cudamatrix/cu-kernels.h	/^inline void cuda_copy_low_upp(dim3 Gr, dim3 Bl, float* A, MatrixDim dimA) { cudaF_copy_low_upp(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
cuda_copy_rows	cudamatrix/cu-kernels.h	/^inline void cuda_copy_rows(dim3 Gr, dim3 Bl, double* dst, const double* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
cuda_copy_rows	cudamatrix/cu-kernels.h	/^inline void cuda_copy_rows(dim3 Gr, dim3 Bl, float* dst, const float* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
cuda_copy_rows_from_vec	cudamatrix/cu-kernels.h	/^inline void cuda_copy_rows_from_vec(dim3 Gr, dim3 Bl, double *mat_out, MatrixDim d_out, const double *v_in) {$/;"	f	namespace:kaldi
cuda_copy_rows_from_vec	cudamatrix/cu-kernels.h	/^inline void cuda_copy_rows_from_vec(dim3 Gr, dim3 Bl, float *mat_out, MatrixDim d_out, const float *v_in) {$/;"	f	namespace:kaldi
cuda_copy_upp_low	cudamatrix/cu-kernels.h	/^inline void cuda_copy_upp_low(dim3 Gr, dim3 Bl, double* A, MatrixDim dimA) { cudaD_copy_upp_low(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
cuda_copy_upp_low	cudamatrix/cu-kernels.h	/^inline void cuda_copy_upp_low(dim3 Gr, dim3 Bl, float* A, MatrixDim dimA) { cudaF_copy_upp_low(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
cuda_diff_sigmoid	cudamatrix/cu-kernels.h	/^inline void cuda_diff_sigmoid(dim3 Gr, dim3 Bl, double *eout, const double *e, const double *y, MatrixDim d, int e_stride, int y_stride) { cudaD_diff_sigmoid(Gr,Bl,eout,e,y,d,e_stride,y_stride); }$/;"	f	namespace:kaldi
cuda_diff_sigmoid	cudamatrix/cu-kernels.h	/^inline void cuda_diff_sigmoid(dim3 Gr, dim3 Bl, float *eout, const float *e, const float *y, MatrixDim d, int e_stride, int y_stride) { cudaF_diff_sigmoid(Gr,Bl,eout,e,y,d,e_stride,y_stride); }$/;"	f	namespace:kaldi
cuda_diff_tanh	cudamatrix/cu-kernels.h	/^inline void cuda_diff_tanh(dim3 Gr, dim3 Bl, double *eout, const double *e, const double *y, MatrixDim d, int e_stride, int y_stride) { cudaD_diff_tanh(Gr,Bl,eout,e,y,d,e_stride,y_stride); }$/;"	f	namespace:kaldi
cuda_diff_tanh	cudamatrix/cu-kernels.h	/^inline void cuda_diff_tanh(dim3 Gr, dim3 Bl, float *eout, const float *e, const float *y, MatrixDim d, int e_stride, int y_stride) { cudaF_diff_tanh(Gr,Bl,eout,e,y,d,e_stride,y_stride); }$/;"	f	namespace:kaldi
cuda_diff_xent	cudamatrix/cu-kernels.h	/^inline void cuda_diff_xent(dim3 Gr, dim3 Bl, const int32_cuda *vec_tgt, double *mat_net_out, double *vec_log_post, MatrixDim d) {$/;"	f	namespace:kaldi
cuda_diff_xent	cudamatrix/cu-kernels.h	/^inline void cuda_diff_xent(dim3 Gr, dim3 Bl, const int32_cuda *vec_tgt, float *mat_net_out, float *vec_log_post, MatrixDim d) { cudaF_diff_xent(Gr,Bl,vec_tgt,mat_net_out,vec_log_post,d); }$/;"	f	namespace:kaldi
cuda_div_rows_vec	cudamatrix/cu-kernels.h	/^inline void cuda_div_rows_vec(dim3 Gr, dim3 Bl, double *mat, const double *vec_div, MatrixDim d) { cudaD_div_rows_vec(Gr,Bl,mat,vec_div,d); }$/;"	f	namespace:kaldi
cuda_div_rows_vec	cudamatrix/cu-kernels.h	/^inline void cuda_div_rows_vec(dim3 Gr, dim3 Bl, float *mat, const float *vec_div, MatrixDim d) { cudaF_div_rows_vec(Gr,Bl,mat,vec_div,d); }$/;"	f	namespace:kaldi
cuda_equal_element_mask	cudamatrix/cu-kernels.h	/^inline void cuda_equal_element_mask(dim3 Gr, dim3 Bl, const double *mat1, const double *mat2, double *mask, $/;"	f	namespace:kaldi
cuda_equal_element_mask	cudamatrix/cu-kernels.h	/^inline void cuda_equal_element_mask(dim3 Gr, dim3 Bl, const float *mat1, const float *mat2, float *mask, $/;"	f	namespace:kaldi
cuda_find_row_max_id	cudamatrix/cu-kernels.h	/^inline void cuda_find_row_max_id(dim3 Gr, dim3 Bl, const double *mat, double *vec_val, int32_cuda *vec_id, int32_cuda voff, MatrixDim d) { cudaD_find_row_max_id(Gr,Bl,mat,vec_val,vec_id,voff,d); }$/;"	f	namespace:kaldi
cuda_find_row_max_id	cudamatrix/cu-kernels.h	/^inline void cuda_find_row_max_id(dim3 Gr, dim3 Bl, const float *mat, float *vec_val, int32_cuda *vec_id, int32_cuda voff, MatrixDim d) { cudaF_find_row_max_id(Gr,Bl,mat,vec_val,vec_id,voff,d); }$/;"	f	namespace:kaldi
cuda_group_pnorm	cudamatrix/cu-kernels.h	/^inline void cuda_group_pnorm(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride, int group_size, double power) { cudaD_group_pnorm(Gr, Bl, y, x, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
cuda_group_pnorm	cudamatrix/cu-kernels.h	/^inline void cuda_group_pnorm(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride, int group_size, float power) { cudaF_group_pnorm(Gr, Bl, y, x, d, src_stride, group_size, power);}$/;"	f	namespace:kaldi
cuda_invert_elements	cudamatrix/cu-kernels.h	/^inline void cuda_invert_elements(dim3 Gr, dim3 Bl, double *data, MatrixDim d) { cudaD_invert_elements(Gr,Bl,data,d); }$/;"	f	namespace:kaldi
cuda_invert_elements	cudamatrix/cu-kernels.h	/^inline void cuda_invert_elements(dim3 Gr, dim3 Bl, float *data, MatrixDim d) { cudaF_invert_elements(Gr,Bl,data,d); }$/;"	f	namespace:kaldi
cuda_matrix_add_elements	cudamatrix/cu-kernels.h	/^inline void cuda_matrix_add_elements(dim3 Gr, dim3 Bl, double *data, MatrixDim dim, double alpha, MatrixElement<double>* x, int s) { cudaD_matrix_add_elements(Gr, Bl, data, dim, alpha, x, s); }$/;"	f	namespace:kaldi
cuda_matrix_add_elements	cudamatrix/cu-kernels.h	/^inline void cuda_matrix_add_elements(dim3 Gr, dim3 Bl, float *data, MatrixDim dim, float alpha, MatrixElement<float>* x, int s) { cudaF_matrix_add_elements(Gr, Bl, data, dim, alpha, x, s); }$/;"	f	namespace:kaldi
cuda_matrix_lookup	cudamatrix/cu-kernels.h	/^inline void cuda_matrix_lookup(dim3 Gr, dim3 Bl, const double *data,$/;"	f	namespace:kaldi
cuda_matrix_lookup	cudamatrix/cu-kernels.h	/^inline void cuda_matrix_lookup(dim3 Gr, dim3 Bl, const float *data,$/;"	f	namespace:kaldi
cuda_max	cudamatrix/cu-kernels.h	/^inline void cuda_max(dim3 Gr, dim3 Bl, double *mat, const double *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
cuda_max	cudamatrix/cu-kernels.h	/^inline void cuda_max(dim3 Gr, dim3 Bl, float *mat, const float *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
cuda_mul_cols_vec	cudamatrix/cu-kernels.h	/^inline void cuda_mul_cols_vec(dim3 Gr, dim3 Bl, double *mat, const double *scale, MatrixDim d) { cudaD_mul_cols_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
cuda_mul_cols_vec	cudamatrix/cu-kernels.h	/^inline void cuda_mul_cols_vec(dim3 Gr, dim3 Bl, float *mat, const float *scale, MatrixDim d) { cudaF_mul_cols_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
cuda_mul_elements	cudamatrix/cu-kernels.h	/^inline void cuda_mul_elements(dim3 Gr, dim3 Bl, double *mat, const double *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
cuda_mul_elements	cudamatrix/cu-kernels.h	/^inline void cuda_mul_elements(dim3 Gr, dim3 Bl, float *mat, const float *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
cuda_mul_rows_group_mat	cudamatrix/cu-kernels.h	/^inline void cuda_mul_rows_group_mat(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride, int group_size) { cudaD_mul_rows_group_mat(Gr, Bl, y, x, d, src_stride, group_size); }$/;"	f	namespace:kaldi
cuda_mul_rows_group_mat	cudamatrix/cu-kernels.h	/^inline void cuda_mul_rows_group_mat(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride, int group_size) { cudaF_mul_rows_group_mat(Gr, Bl, y, x, d, src_stride, group_size); }$/;"	f	namespace:kaldi
cuda_mul_rows_vec	cudamatrix/cu-kernels.h	/^inline void cuda_mul_rows_vec(dim3 Gr, dim3 Bl, double *mat, const double *scale, MatrixDim d) { cudaD_mul_rows_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
cuda_mul_rows_vec	cudamatrix/cu-kernels.h	/^inline void cuda_mul_rows_vec(dim3 Gr, dim3 Bl, float *mat, const float *scale, MatrixDim d) { cudaF_mul_rows_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
cuda_one	cudamatrix/cu-kernels.h	/^inline void cuda_one(int Gr,int Bl,double* x,int dim) { cudaD_one(Gr,Bl,x,dim); }$/;"	f	namespace:kaldi
cuda_one	cudamatrix/cu-kernels.h	/^inline void cuda_one(int Gr,int Bl,float* x,int dim) { cudaF_one(Gr,Bl,x,dim); }$/;"	f	namespace:kaldi
cuda_pvec_sum	cudamatrix/cu-kernels.h	/^inline void cuda_pvec_sum(int Gr, int Bl, double* vec, double* pvec_sum, int dim, int size) { cudaD_pvec_sum(Gr,Bl,vec,pvec_sum,dim,size); }$/;"	f	namespace:kaldi
cuda_pvec_sum	cudamatrix/cu-kernels.h	/^inline void cuda_pvec_sum(int Gr, int Bl, float* vec, float* pvec_sum, int dim, int size) { cudaF_pvec_sum(Gr, Bl, vec, pvec_sum, dim, size); }$/;"	f	namespace:kaldi
cuda_randomize	cudamatrix/cu-kernels.h	/^inline void cuda_randomize(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaD_randomize(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_randomize	cudamatrix/cu-kernels.h	/^inline void cuda_randomize(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaF_randomize(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_regularize_l1	cudamatrix/cu-kernels.h	/^inline void cuda_regularize_l1(dim3 Gr, dim3 Bl, double *wei, double *grad, double l1, double lr, MatrixDim d, int stride_grad) { cudaD_regularize_l1(Gr,Bl,wei,grad,l1,lr,d,stride_grad); }$/;"	f	namespace:kaldi
cuda_regularize_l1	cudamatrix/cu-kernels.h	/^inline void cuda_regularize_l1(dim3 Gr, dim3 Bl, float *wei, float *grad, float l1, float lr, MatrixDim d, int stride_grad) { cudaF_regularize_l1(Gr,Bl,wei,grad,l1,lr,d,stride_grad); }$/;"	f	namespace:kaldi
cuda_replace_value	cudamatrix/cu-kernels.h	/^inline void cuda_replace_value(int Gr, int Bl, double *v, int dim, double orig, double changed) {cudaD_replace_value(Gr, Bl, v, dim, orig, changed); }$/;"	f	namespace:kaldi
cuda_replace_value	cudamatrix/cu-kernels.h	/^inline void cuda_replace_value(int Gr, int Bl, float *v, int dim, float orig, float changed) {cudaF_replace_value(Gr, Bl, v, dim, orig, changed); }$/;"	f	namespace:kaldi
cuda_scal	cudamatrix/cu-kernels.h	/^inline void cuda_scal(int n, double alpha, double *x, int incx) {$/;"	f	namespace:kaldi
cuda_scal	cudamatrix/cu-kernels.h	/^inline void cuda_scal(int n, float alpha, float *x, int incx) {$/;"	f	namespace:kaldi
cuda_scale	cudamatrix/cu-kernels.h	/^inline void cuda_scale(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_scale(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_scale	cudamatrix/cu-kernels.h	/^inline void cuda_scale(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_scale(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_scale_diag_packed	cudamatrix/cu-kernels.h	/^inline void cuda_scale_diag_packed(int Gr, int Bl, double* mat, double value, int dim) { cudaD_scale_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_scale_diag_packed	cudamatrix/cu-kernels.h	/^inline void cuda_scale_diag_packed(int Gr, int Bl, float* mat, float value, int dim) { cudaF_scale_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_set_bias_params	cudamatrix/cu-kernels.h	/^inline void cuda_set_bias_params(int Gr, int Bl, double* v, const double* a, double param_1, double param_2, double param_3, int* flag, int dim) { cudaD_set_bias_params(Gr,Bl,v,a,param_1,param_2,param_3,flag,dim); }$/;"	f	namespace:kaldi
cuda_set_bias_params	cudamatrix/cu-kernels.h	/^inline void cuda_set_bias_params(int Gr, int Bl, float* v, const float* a, float param_1, float param_2, float param_3, int* flag, int dim) { cudaF_set_bias_params(Gr,Bl,v,a,param_1,param_2,param_3,flag,dim); }$/;"	f	namespace:kaldi
cuda_set_const	cudamatrix/cu-kernels.h	/^inline void cuda_set_const(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_set_const(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_set_const	cudamatrix/cu-kernels.h	/^inline void cuda_set_const(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_set_const(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_set_diag	cudamatrix/cu-kernels.h	/^inline void cuda_set_diag(int Gr, int Bl, double* mat, double value, MatrixDim d) { cudaD_set_diag(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_set_diag	cudamatrix/cu-kernels.h	/^inline void cuda_set_diag(int Gr, int Bl, float* mat, float value, MatrixDim d) { cudaF_set_diag(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_set_diag_packed	cudamatrix/cu-kernels.h	/^inline void cuda_set_diag_packed(int Gr, int Bl, double* mat, double value, int dim) { cudaD_set_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_set_diag_packed	cudamatrix/cu-kernels.h	/^inline void cuda_set_diag_packed(int Gr, int Bl, float* mat, float value, int dim) { cudaF_set_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_set_zero_above_diag	cudamatrix/cu-kernels.h	/^inline void cuda_set_zero_above_diag(dim3 Gr, dim3 Bl, double* mat, MatrixDim d) { cudaD_set_zero_above_diag(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_set_zero_above_diag	cudamatrix/cu-kernels.h	/^inline void cuda_set_zero_above_diag(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_set_zero_above_diag(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_sigmoid	cudamatrix/cu-kernels.h	/^inline void cuda_sigmoid(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_sigmoid(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_sigmoid	cudamatrix/cu-kernels.h	/^inline void cuda_sigmoid(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_sigmoid(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_soft_hinge	cudamatrix/cu-kernels.h	/^inline void cuda_soft_hinge(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_soft_hinge(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_soft_hinge	cudamatrix/cu-kernels.h	/^inline void cuda_soft_hinge(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_soft_hinge(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_softmax_reduce	cudamatrix/cu-kernels.h	/^inline void cuda_softmax_reduce(size_t Gr, size_t Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_softmax_reduce(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_softmax_reduce	cudamatrix/cu-kernels.h	/^inline void cuda_softmax_reduce(size_t Gr, size_t Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_softmax_reduce(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_splice	cudamatrix/cu-kernels.h	/^inline void cuda_splice(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *off, MatrixDim d_out, MatrixDim d_in) { cudaD_splice(Gr,Bl,y,x,off,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_splice	cudamatrix/cu-kernels.h	/^inline void cuda_splice(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *off, MatrixDim d_out, MatrixDim d_in) { cudaF_splice(Gr,Bl,y,x,off,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_sum_column_ranges	cudamatrix/cu-kernels.h	/^inline void cuda_sum_column_ranges(dim3 Gr, dim3 Bl, double *data, MatrixDim dim,$/;"	f	namespace:kaldi
cuda_sum_column_ranges	cudamatrix/cu-kernels.h	/^inline void cuda_sum_column_ranges(dim3 Gr, dim3 Bl, float *data, MatrixDim dim,$/;"	f	namespace:kaldi
cuda_sy_add_tr2	cudamatrix/cu-kernels.h	/^inline void cuda_sy_add_tr2(dim3 Gr, dim3 Bl, double alpha, double beta, const double* T, MatrixDim tdim, double *S, MatrixDim sdim) { cudaD_sy_add_tr2(Gr, Bl, alpha, beta, T, tdim, S, sdim); }$/;"	f	namespace:kaldi
cuda_sy_add_tr2	cudamatrix/cu-kernels.h	/^inline void cuda_sy_add_tr2(dim3 Gr, dim3 Bl, float alpha, float beta, const float* T, MatrixDim tdim, float *S, MatrixDim sdim) { cudaF_sy_add_tr2(Gr, Bl, alpha, beta, T, tdim, S, sdim); }$/;"	f	namespace:kaldi
cuda_take_lower	cudamatrix/cu-kernels.h	/^inline void cuda_take_lower(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_lower(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_lower	cudamatrix/cu-kernels.h	/^inline void cuda_take_lower(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_lower(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_mean	cudamatrix/cu-kernels.h	/^inline void cuda_take_mean(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_mean(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_mean	cudamatrix/cu-kernels.h	/^inline void cuda_take_mean(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_mean(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_upper	cudamatrix/cu-kernels.h	/^inline void cuda_take_upper(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_upper(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_upper	cudamatrix/cu-kernels.h	/^inline void cuda_take_upper(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_upper(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_tanh	cudamatrix/cu-kernels.h	/^inline void cuda_tanh(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_tanh(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_tanh	cudamatrix/cu-kernels.h	/^inline void cuda_tanh(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_tanh(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_trace	cudamatrix/cu-kernels.h	/^inline void cuda_trace(int Gr, int Bl, double* mat, double* value, int dim) { cudaD_trace(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_trace	cudamatrix/cu-kernels.h	/^inline void cuda_trace(int Gr, int Bl, float* mat, float* value, int dim) { cudaF_trace(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_trace_mat_mat	cudamatrix/cu-kernels.h	/^inline void cuda_trace_mat_mat(const double* A, const double* B, MatrixDim dA, int B_stride, double* value) { cudaD_trace_mat_mat(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
cuda_trace_mat_mat	cudamatrix/cu-kernels.h	/^inline void cuda_trace_mat_mat(const float* A, const float* B, MatrixDim dA, int B_stride, float* value) { cudaF_trace_mat_mat(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
cuda_trace_mat_mat_trans	cudamatrix/cu-kernels.h	/^inline void cuda_trace_mat_mat_trans(const double* A, const double* B, MatrixDim dA, int B_stride, double* value) { cudaD_trace_mat_mat_trans(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
cuda_trace_mat_mat_trans	cudamatrix/cu-kernels.h	/^inline void cuda_trace_mat_mat_trans(const float* A, const float* B, MatrixDim dA, int B_stride, float* value) { cudaF_trace_mat_mat_trans(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
cuda_transpose_matrix	cudamatrix/cu-kernels.h	/^inline void cuda_transpose_matrix(dim3 Gr, dim3 Bl, double *mat, MatrixDim d) { cudaD_transpose_matrix(Gr, Bl, mat, d); }$/;"	f	namespace:kaldi
cuda_transpose_matrix	cudamatrix/cu-kernels.h	/^inline void cuda_transpose_matrix(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_transpose_matrix(Gr, Bl, mat, d); }$/;"	f	namespace:kaldi
cuda_vec_apply_exp	cudamatrix/cu-kernels.h	/^inline void cuda_vec_apply_exp(int Gr, int Bl, double* v, int dim) { cudaD_vec_apply_exp(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_exp	cudamatrix/cu-kernels.h	/^inline void cuda_vec_apply_exp(int Gr, int Bl, float* v, int dim) { cudaF_vec_apply_exp(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_floor	cudamatrix/cu-kernels.h	/^inline void cuda_vec_apply_floor(int Gr, int Bl, double* v, double floor_val, float* num, int dim) { cudaD_vec_apply_floor(Gr,Bl,v,floor_val,num,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_floor	cudamatrix/cu-kernels.h	/^inline void cuda_vec_apply_floor(int Gr, int Bl, float* v, float floor_val, float* num, int dim) { cudaF_vec_apply_floor(Gr,Bl,v,floor_val,num,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_log	cudamatrix/cu-kernels.h	/^inline void cuda_vec_apply_log(int Gr, int Bl, double* v, double* flag, int dim) { cudaD_vec_apply_log(Gr,Bl,v,flag,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_log	cudamatrix/cu-kernels.h	/^inline void cuda_vec_apply_log(int Gr, int Bl, float* v, float* flag, int dim) { cudaF_vec_apply_log(Gr,Bl,v,flag,dim); }$/;"	f	namespace:kaldi
cuda_vec_copy_diag_from_packed	cudamatrix/cu-kernels.h	/^inline void cuda_vec_copy_diag_from_packed(int Gr, int Bl, double *dst, const double *src, int dim) { cudaD_vec_copy_diag_from_packed(Gr,Bl,dst,src,dim); }$/;"	f	namespace:kaldi
cuda_vec_copy_diag_from_packed	cudamatrix/cu-kernels.h	/^inline void cuda_vec_copy_diag_from_packed(int Gr, int Bl, float *dst, const float *src, int dim) { cudaF_vec_copy_diag_from_packed(Gr,Bl,dst,src,dim); }$/;"	f	namespace:kaldi
cuda_vec_max	cudamatrix/cu-kernels.h	/^inline void cuda_vec_max(const double* v, double* value, int dim) { cudaD_vec_max(v,value,dim); }$/;"	f	namespace:kaldi
cuda_vec_max	cudamatrix/cu-kernels.h	/^inline void cuda_vec_max(const float* v, float* value, int dim) { cudaF_vec_max(v,value,dim); }$/;"	f	namespace:kaldi
cuda_vec_min	cudamatrix/cu-kernels.h	/^inline void cuda_vec_min(const double* v, double* value, int dim) { cudaD_vec_min(v,value,dim); }$/;"	f	namespace:kaldi
cuda_vec_min	cudamatrix/cu-kernels.h	/^inline void cuda_vec_min(const float* v, float* value, int dim) { cudaF_vec_min(v,value,dim); }$/;"	f	namespace:kaldi
cuda_vec_mul_elements	cudamatrix/cu-kernels.h	/^inline void cuda_vec_mul_elements(int Gr, int Bl, double* v, const double* a, int dim) { cudaD_vec_mul_elements(Gr,Bl,v,a,dim); }$/;"	f	namespace:kaldi
cuda_vec_mul_elements	cudamatrix/cu-kernels.h	/^inline void cuda_vec_mul_elements(int Gr, int Bl, float* v, const float* a, int dim) { cudaF_vec_mul_elements(Gr,Bl,v,a,dim); }$/;"	f	namespace:kaldi
cuda_vec_soft_max	cudamatrix/cu-kernels.h	/^inline void cuda_vec_soft_max(int Gr, int Bl, double* v, int dim) { cudaD_vec_soft_max(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
cuda_vec_soft_max	cudamatrix/cu-kernels.h	/^inline void cuda_vec_soft_max(int Gr, int Bl, float* v, int dim) { cudaF_vec_soft_max(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
cuda_vec_sum	cudamatrix/cu-kernels.h	/^inline void cuda_vec_sum(int Gr, int Bl, double* v, double* value, int dim, int inc) { cudaD_vec_sum(Gr,Bl,v,value,dim,inc); }$/;"	f	namespace:kaldi
cuda_vec_sum	cudamatrix/cu-kernels.h	/^inline void cuda_vec_sum(int Gr, int Bl, float* v, float* value, int dim, int inc) { cudaF_vec_sum(Gr,Bl,v,value,dim,inc); }$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-kernels.h	/^namespace kaldi {$/;"	n
CudaMathUnitTest	cudamatrix/cu-math-test.cc	/^template<typename Real> void CudaMathUnitTest() {$/;"	f	namespace:kaldi
UnitTestCuMathCopy	cudamatrix/cu-math-test.cc	/^static void UnitTestCuMathCopy() {$/;"	f	namespace:kaldi
UnitTestCuMathRandomize	cudamatrix/cu-math-test.cc	/^static void UnitTestCuMathRandomize() {$/;"	f	namespace:kaldi
UnitTestCuMathSplice	cudamatrix/cu-math-test.cc	/^static void UnitTestCuMathSplice() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-math-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-math-test.cc	/^int main() {$/;"	f
Copy	cudamatrix/cu-math.cc	/^void Copy(const CuMatrixBase<Real> &src, const CuArray<int32> &copy_from_indices,$/;"	f	namespace:kaldi::cu
Randomize	cudamatrix/cu-math.cc	/^void Randomize(const CuMatrixBase<Real> &src,$/;"	f	namespace:kaldi::cu
RegularizeL1	cudamatrix/cu-math.cc	/^void RegularizeL1(CuMatrixBase<Real> *weight, CuMatrixBase<Real> *grad, Real l1, Real lr) {$/;"	f	namespace:kaldi::cu
Splice	cudamatrix/cu-math.cc	/^void Splice(const CuMatrixBase<Real> &src, const CuArray<int32> &frame_offsets,$/;"	f	namespace:kaldi::cu
cu	cudamatrix/cu-math.cc	/^namespace cu {$/;"	n	namespace:kaldi	file:
kaldi	cudamatrix/cu-math.cc	/^namespace kaldi {$/;"	n	file:
KALDI_CUDAMATRIX_CU_MATH_H_	cudamatrix/cu-math.h	24;"	d
cu	cudamatrix/cu-math.h	/^namespace cu {$/;"	n	namespace:kaldi
kaldi	cudamatrix/cu-math.h	/^namespace kaldi {$/;"	n
CuSubMatrix	cudamatrix/cu-matrix-inl.h	/^inline CuSubMatrix<Real>::CuSubMatrix(const CuMatrixBase<Real> &mat,$/;"	f	class:kaldi::CuSubMatrix
KALDI_CUDAMATRIX_CU_MATRIX_INL_H_	cudamatrix/cu-matrix-inl.h	23;"	d
kaldi	cudamatrix/cu-matrix-inl.h	/^namespace kaldi {$/;"	n
KALDI_CUDAMATRIX_CU_MATRIX_LIB_H_	cudamatrix/cu-matrix-lib.h	23;"	d
CudaMatrixSpeedTest	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void CudaMatrixSpeedTest() {$/;"	f	namespace:kaldi
NameOf	cudamatrix/cu-matrix-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
TestCuFindRowMaxId	cudamatrix/cu-matrix-speed-test.cc	/^static void TestCuFindRowMaxId(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixAddDiagVecMat	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixAddDiagVecMat(int32 dim, MatrixTransposeType trans) {$/;"	f	namespace:kaldi
TestCuMatrixCholesky	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCholesky(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixCompObjfAndDeriv	cudamatrix/cu-matrix-speed-test.cc	/^static void TestCuMatrixCompObjfAndDeriv(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixCopyFromSp	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCopyFromSp(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixCopyFromTp	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCopyFromTp(int32 dim, MatrixTransposeType trans) {$/;"	f	namespace:kaldi
TestCuMatrixCopyLowerToUpper	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCopyLowerToUpper(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixCopyUpperToLower	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCopyUpperToLower(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixGroupPnorm	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixGroupPnorm(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixGroupPnormDeriv	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixGroupPnormDeriv(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixLookup	cudamatrix/cu-matrix-speed-test.cc	/^void TestCuMatrixLookup(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixMatMat	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixMatMat(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixMulRowsGroupMat	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixMulRowsGroupMat(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixSetZeroAboveDiag	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixSetZeroAboveDiag(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixSigmoid	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixSigmoid(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixSoftmax	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixSoftmax(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixTraceMatMat	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixTraceMatMat(int32 dim) {$/;"	f	namespace:kaldi
TestSymInvertPosDef	cudamatrix/cu-matrix-speed-test.cc	/^template<typename Real> void TestSymInvertPosDef(int32 dim) {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-matrix-speed-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-matrix-speed-test.cc	/^int main() {$/;"	f
CudaMatrixUnitTest	cudamatrix/cu-matrix-test.cc	/^template<typename Real> void CudaMatrixUnitTest() {$/;"	f	namespace:kaldi
DoubleFactorial	cudamatrix/cu-matrix-test.cc	/^static int32 DoubleFactorial(int32 i) {$/;"	f	namespace:kaldi
InitRand	cudamatrix/cu-matrix-test.cc	/^static void InitRand(MatrixBase<Real> *M) {$/;"	f	namespace:kaldi
InitRand	cudamatrix/cu-matrix-test.cc	/^static void InitRand(VectorBase<Real> *v) {$/;"	f	namespace:kaldi
RandZeroToOneMatrix	cudamatrix/cu-matrix-test.cc	/^static void RandZeroToOneMatrix(MatrixBase<Real>* mat) {$/;"	f	namespace:kaldi
UnitTestCheck	cudamatrix/cu-matrix-test.cc	/^template<typename Real> void UnitTestCheck() {$/;"	f	namespace:kaldi
UnitTestCuApproxEqual	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuApproxEqual() {$/;"	f	namespace:kaldi
UnitTestCuCholesky	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuCholesky() {$/;"	f	namespace:kaldi
UnitTestCuCopy	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuCopy() {$/;"	f	namespace:kaldi
UnitTestCuDiffSigmoid	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuDiffSigmoid() {$/;"	f	namespace:kaldi
UnitTestCuDiffTanh	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuDiffTanh() {$/;"	f	namespace:kaldi
UnitTestCuDiffXent	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuDiffXent() {$/;"	f	namespace:kaldi
UnitTestCuFindRowMaxId	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuFindRowMaxId() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAdd	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAdd() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAdd2	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAdd2() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddDiagVecMat	cudamatrix/cu-matrix-test.cc	/^template<typename Real> static void UnitTestCuMatrixAddDiagVecMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddElements	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAddElements() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddMat	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddMatDiagVec	cudamatrix/cu-matrix-test.cc	/^template<typename Real> static void UnitTestCuMatrixAddMatDiagVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddMatMat	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMatMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddMatMatElements	cudamatrix/cu-matrix-test.cc	/^template<typename Real> static void UnitTestCuMatrixAddMatMatElements() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddMatTp	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMatTp() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddToDiag	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAddToDiag() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddTpMat	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAddTpMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddVecToCols	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAddVecToCols() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddVecToRows	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixAddVecToRows() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyExp	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyExp() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyFloor	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyFloor() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyHeaviside	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyHeaviside() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyLog	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyLog() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyPow	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyPow() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyPowAbs	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyPowAbs() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyCols	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyCols() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyCross	cudamatrix/cu-matrix-test.cc	/^void UnitTestCuMatrixCopyCross() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyCross2	cudamatrix/cu-matrix-test.cc	/^template<typename Real> void UnitTestCuMatrixCopyCross2() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyFromMat	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyFromMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyFromTp	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyFromTp() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyLowerToUpper	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyLowerToUpper() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyRows	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyRows() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyRowsFromVec	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyRowsFromVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyUpperToLower	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyUpperToLower() {$/;"	f	namespace:kaldi
UnitTestCuMatrixDivRowsVec	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixDivRowsVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixEqualElementMask	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixEqualElementMask() {$/;"	f	namespace:kaldi
UnitTestCuMatrixGroupPnorm	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixGroupPnorm() {$/;"	f	namespace:kaldi
UnitTestCuMatrixGroupPnormDeriv	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixGroupPnormDeriv() {$/;"	f	namespace:kaldi
UnitTestCuMatrixIO	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixIO() {$/;"	f	namespace:kaldi
UnitTestCuMatrixInvertElements	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixInvertElements() {$/;"	f	namespace:kaldi
UnitTestCuMatrixLookup	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixLookup() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMax	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixMax() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMulColsVec	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixMulColsVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMulElements	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixMulElements() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMulRowsGroupMat	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixMulRowsGroupMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMulRowsVec	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixMulRowsVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixObjfDeriv	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixObjfDeriv() {$/;"	f	namespace:kaldi
UnitTestCuMatrixScale	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixScale() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSet	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSet() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSetRandUniform	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSetRandUniform() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSetRandn	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSetRandn() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSetZeroAboveDiag	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSetZeroAboveDiag() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSigmoid	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSigmoid() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSoftHinge	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSoftHinge() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSum	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSum() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSumColumnRanges	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSumColumnRanges() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSymAddMat2	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSymAddMat2() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSymInvertPosDef	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixSymInvertPosDef() {$/;"	f	namespace:kaldi
UnitTestCuMatrixTraceMatMat	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixTraceMatMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixTranspose	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuMatrixTranspose() {$/;"	f	namespace:kaldi
UnitTestCuSigmoid	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuSigmoid() {$/;"	f	namespace:kaldi
UnitTestCuSoftmax	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuSoftmax() {$/;"	f	namespace:kaldi
UnitTestCuSubMatrix	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuSubMatrix() {$/;"	f	namespace:kaldi
UnitTestCuTanh	cudamatrix/cu-matrix-test.cc	/^void UnitTestCuTanh() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddColSumMat	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuVectorAddColSumMat() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddColSumMatLarge	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuVectorAddColSumMatLarge() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddRowSumMat	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuVectorAddRowSumMat() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddRowSumMatLarge	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuVectorAddRowSumMatLarge() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddTpVec	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuVectorAddTpVec() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddVec	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuVectorAddVec() {$/;"	f	namespace:kaldi
UnitTestCuVectorInvertElements	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuVectorInvertElements() {$/;"	f	namespace:kaldi
UnitTestCuVectorMulTp	cudamatrix/cu-matrix-test.cc	/^static void UnitTestCuVectorMulTp() {$/;"	f	namespace:kaldi
UnitTestSwapCu2Cu	cudamatrix/cu-matrix-test.cc	/^void UnitTestSwapCu2Cu() {$/;"	f	namespace:kaldi
UnitTestSwapCu2M	cudamatrix/cu-matrix-test.cc	/^void UnitTestSwapCu2M() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-matrix-test.cc	/^int main() {$/;"	f
Add	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Add(Real value) { $/;"	f	class:kaldi::CuMatrixBase
AddDiagVecMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddDiagVecMat($/;"	f	class:kaldi::CuMatrixBase
AddElements	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddElements(Real alpha, $/;"	f	class:kaldi::CuMatrixBase
AddMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddMat(Real alpha, const CuMatrixBase<Real>& A, $/;"	f	class:kaldi::CuMatrixBase
AddMatBlock	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatBlock($/;"	f	class:kaldi::CuMatrixBase
AddMatDiagVec	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatDiagVec($/;"	f	class:kaldi::CuMatrixBase
AddMatMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatMat($/;"	f	class:kaldi::CuMatrixBase
AddMatMatDivMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatMatDivMat(const CuMatrixBase<Real> &A, $/;"	f	class:kaldi::CuMatrixBase
AddMatMatElements	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatMatElements(Real alpha, $/;"	f	class:kaldi::CuMatrixBase
AddToDiag	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddToDiag(Real value) { $/;"	f	class:kaldi::CuMatrixBase
AddVecToCols	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddVecToCols(Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddVecToRows	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::AddVecToRows(Real alpha,$/;"	f	class:kaldi::CuMatrixBase
ApplyCeiling	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyCeiling(Real ceiling_val) {$/;"	f	class:kaldi::CuMatrixBase
ApplyExp	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyExp() {$/;"	f	class:kaldi::CuMatrixBase
ApplyFloor	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyFloor(Real floor_val) {$/;"	f	class:kaldi::CuMatrixBase
ApplyHeaviside	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyHeaviside() {$/;"	f	class:kaldi::CuMatrixBase
ApplyLog	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyLog() { $/;"	f	class:kaldi::CuMatrixBase
ApplyPow	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::CuMatrixBase
ApplyPowAbs	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyPowAbs(Real power, bool include_sign) {$/;"	f	class:kaldi::CuMatrixBase
ApplySoftMaxPerRow	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::ApplySoftMaxPerRow(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
ApproxEqual	cudamatrix/cu-matrix.cc	/^bool CuMatrixBase<Real>::ApproxEqual(const CuMatrixBase<Real> &other,$/;"	f	class:kaldi::CuMatrixBase
Cholesky	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Cholesky(CuMatrixBase<Real> *inv_cholesky) {$/;"	f	class:kaldi::CuMatrixBase
CompObjfAndDeriv	cudamatrix/cu-matrix.cc	/^void CuMatrix<Real>::CompObjfAndDeriv(const std::vector<MatrixElement<Real> >& sv_labels,$/;"	f	class:kaldi::CuMatrix
CopyColFromVec	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyColFromVec(const CuVectorBase<Real> &v,$/;"	f	class:kaldi::CuMatrixBase
CopyCols	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyCols(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
CopyFromBlock	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromBlock(const CuBlockMatrix<Real> &B,$/;"	f	class:kaldi::CuMatrixBase
CopyFromMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const CuMatrixBase<OtherReal> &M,$/;"	f	class:kaldi::CuMatrixBase
CopyFromMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const MatrixBase<OtherReal> &src,$/;"	f	class:kaldi::CuMatrixBase
CopyFromMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const MatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
CopyFromSp	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromSp(const CuSpMatrix<Real> &M) {$/;"	f	class:kaldi::CuMatrixBase
CopyFromTp	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromTp(const CuTpMatrix<OtherReal> &M,$/;"	f	class:kaldi::CuMatrixBase
CopyLowerToUpper	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyLowerToUpper() {$/;"	f	class:kaldi::CuMatrixBase
CopyRows	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRows(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
CopyRowsFromMat	cudamatrix/cu-matrix.cc	/^void VectorBase<Real>::CopyRowsFromMat(const CuMatrixBase<Real> &mat) {$/;"	f	class:kaldi::VectorBase
CopyRowsFromVec	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRowsFromVec(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuMatrixBase
CopyRowsFromVec	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRowsFromVec(const VectorBase<Real> &v) {$/;"	f	class:kaldi::CuMatrixBase
CopyToMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyToMat(MatrixBase<OtherReal> *dst,$/;"	f	class:kaldi::CuMatrixBase
CopyUpperToLower	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::CopyUpperToLower() {$/;"	f	class:kaldi::CuMatrixBase
CuMatrix	cudamatrix/cu-matrix.cc	/^ CuMatrix<Real>::CuMatrix(const CuBlockMatrix<Real> &B,$/;"	f	class:kaldi::CuMatrix
CuMatrix	cudamatrix/cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrix<Real> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
CuMatrix	cudamatrix/cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrixBase<OtherReal> & M,$/;"	f	class:kaldi::CuMatrix
CuMatrix	cudamatrix/cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrixBase<Real> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
CuMatrix	cudamatrix/cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const MatrixBase<OtherReal> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
Destroy	cudamatrix/cu-matrix.cc	/^void CuMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuMatrix
DiffSigmoid	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::DiffSigmoid(const CuMatrixBase<Real> &value,$/;"	f	class:kaldi::CuMatrixBase
DiffTanh	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::DiffTanh(const CuMatrixBase<Real> &value,$/;"	f	class:kaldi::CuMatrixBase
DiffXent	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::DiffXent(const CuArray<int32> &tgt,$/;"	f	class:kaldi::CuMatrixBase
DivRowsVec	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::DivRowsVec(const CuVectorBase<Real> &div) {$/;"	f	class:kaldi::CuMatrixBase
EqualElementMask	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::EqualElementMask(const CuMatrixBase<Real> &mat, CuMatrix<Real> *mask) const {$/;"	f	class:kaldi::CuMatrixBase
FindRowMaxId	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::FindRowMaxId(CuArray<int32> *id) const {$/;"	f	class:kaldi::CuMatrixBase
GroupPnorm	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::GroupPnorm(const CuMatrixBase<Real> &src, Real power) {$/;"	f	class:kaldi::CuMatrixBase
GroupPnormDeriv	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::GroupPnormDeriv(const CuMatrixBase<Real> &src1,$/;"	f	class:kaldi::CuMatrixBase
InvertElements	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::InvertElements() {$/;"	f	class:kaldi::CuMatrixBase
IsUnit	cudamatrix/cu-matrix.cc	/^bool CuMatrixBase<Real>::IsUnit(Real tol) const {$/;"	f	class:kaldi::CuMatrixBase
Lookup	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Lookup(const std::vector<Int32Pair> &indices,$/;"	f	class:kaldi::CuMatrixBase
Max	cudamatrix/cu-matrix.cc	/^Real CuMatrixBase<Real>::Max() const {$/;"	f	class:kaldi::CuMatrixBase
Max	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Max(const CuMatrixBase<Real>& A) {$/;"	f	class:kaldi::CuMatrixBase
Min	cudamatrix/cu-matrix.cc	/^Real CuMatrixBase<Real>::Min() const {$/;"	f	class:kaldi::CuMatrixBase
MulColsVec	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::MulColsVec(const CuVectorBase<Real> &scale) {$/;"	f	class:kaldi::CuMatrixBase
MulElements	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::MulElements(const CuMatrixBase<Real>& A) {$/;"	f	class:kaldi::CuMatrixBase
MulRowsGroupMat	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::MulRowsGroupMat(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
MulRowsVec	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::MulRowsVec(const CuVectorBase<Real> &scale) {$/;"	f	class:kaldi::CuMatrixBase
Read	cudamatrix/cu-matrix.cc	/^void CuMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuMatrix
Resize	cudamatrix/cu-matrix.cc	/^void CuMatrix<Real>::Resize(MatrixIndexT rows, MatrixIndexT cols,$/;"	f	class:kaldi::CuMatrix
Scale	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Scale(Real value) { $/;"	f	class:kaldi::CuMatrixBase
Set	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Set(Real value) {$/;"	f	class:kaldi::CuMatrixBase
SetRandUniform	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::SetRandUniform() {$/;"	f	class:kaldi::CuMatrixBase
SetRandn	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::SetRandn() {$/;"	f	class:kaldi::CuMatrixBase
SetZero	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::SetZero() {$/;"	f	class:kaldi::CuMatrixBase
SetZeroAboveDiag	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::SetZeroAboveDiag() {$/;"	f	class:kaldi::CuMatrixBase
Sigmoid	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Sigmoid(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
SoftHinge	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::SoftHinge(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
Sum	cudamatrix/cu-matrix.cc	/^Real CuMatrixBase<Real>::Sum() const {$/;"	f	class:kaldi::CuMatrixBase
SumColumnRanges	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::SumColumnRanges(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
Swap	cudamatrix/cu-matrix.cc	/^void CuMatrix<Real>::Swap(CuMatrix<Real> *mat) {$/;"	f	class:kaldi::CuMatrix
Swap	cudamatrix/cu-matrix.cc	/^void CuMatrix<Real>::Swap(Matrix<Real> *mat) {$/;"	f	class:kaldi::CuMatrix
Swap	cudamatrix/cu-matrix.cc	/^void Matrix<Real>::Swap(CuMatrix<Real> *mat) { mat->Swap(this); }$/;"	f	class:kaldi::Matrix
SymAddMat2	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::SymAddMat2($/;"	f	class:kaldi::CuMatrixBase
SymInvertPosDef	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::SymInvertPosDef() {$/;"	f	class:kaldi::CuMatrixBase
Tanh	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Tanh(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
Trace	cudamatrix/cu-matrix.cc	/^Real CuMatrixBase<Real>::Trace(bool check_square) const {$/;"	f	class:kaldi::CuMatrixBase
TraceMatMat	cudamatrix/cu-matrix.cc	/^Real TraceMatMat(const CuMatrixBase<Real> &A,$/;"	f	namespace:kaldi
Transpose	cudamatrix/cu-matrix.cc	/^void CuMatrix<Real>::Transpose() {$/;"	f	class:kaldi::CuMatrix
Write	cudamatrix/cu-matrix.cc	/^void CuMatrixBase<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuMatrixBase
kaldi	cudamatrix/cu-matrix.cc	/^namespace kaldi {$/;"	n	file:
operator <<	cudamatrix/cu-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuMatrixBase<Real> &mat) {$/;"	f	namespace:kaldi
AddMatSp	cudamatrix/cu-matrix.h	/^  void AddMatSp(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddMatTp	cudamatrix/cu-matrix.h	/^  void AddMatTp(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddSpMat	cudamatrix/cu-matrix.h	/^  void AddSpMat(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddTpMat	cudamatrix/cu-matrix.h	/^  void AddTpMat(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
ApproxEqual	cudamatrix/cu-matrix.h	/^bool ApproxEqual(const CuMatrixBase<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cudamatrix/cu-matrix.h	/^inline void AssertEqual(CuMatrixBase<Real> &A, CuMatrixBase<Real> &B,$/;"	f	namespace:kaldi
ColRange	cudamatrix/cu-matrix.h	/^  inline CuSubMatrix<Real> ColRange(const MatrixIndexT col_offset,$/;"	f	class:kaldi::CuMatrixBase
CopyFromMat	cudamatrix/cu-matrix.h	/^void MatrixBase<Real>::CopyFromMat(const CuMatrixBase<OtherReal> &cu,$/;"	f	class:kaldi::MatrixBase
CuMatrix	cudamatrix/cu-matrix.h	/^  CuMatrix() { }$/;"	f	class:kaldi::CuMatrix
CuMatrix	cudamatrix/cu-matrix.h	/^  CuMatrix(MatrixIndexT rows, MatrixIndexT cols,$/;"	f	class:kaldi::CuMatrix
CuMatrix	cudamatrix/cu-matrix.h	/^  explicit CuMatrix(const CuSpMatrix<Real> &M) : CuMatrixBase<Real>() {$/;"	f	class:kaldi::CuMatrix
CuMatrix	cudamatrix/cu-matrix.h	/^  explicit CuMatrix(const CuTpMatrix<OtherReal> & M,$/;"	f	class:kaldi::CuMatrix
CuMatrix	cudamatrix/cu-matrix.h	/^class CuMatrix: public CuMatrixBase<Real> {$/;"	c	namespace:kaldi
CuMatrixBase	cudamatrix/cu-matrix.h	/^  CuMatrixBase<Real>(): data_(NULL), num_cols_(0), num_rows_(0), stride_(0) { }$/;"	f	class:kaldi::CuMatrixBase
CuMatrixBase	cudamatrix/cu-matrix.h	/^  CuMatrixBase<Real>(Real *data,$/;"	f	class:kaldi::CuMatrixBase
CuMatrixBase	cudamatrix/cu-matrix.h	/^class CuMatrixBase {$/;"	c	namespace:kaldi
CuSubMatrix	cudamatrix/cu-matrix.h	/^  inline CuSubMatrix<Real> (const CuSubMatrix &other):$/;"	f	class:kaldi::CuSubMatrix
CuSubMatrix	cudamatrix/cu-matrix.h	/^class CuSubMatrix: public CuMatrixBase<Real> {$/;"	c	namespace:kaldi
Data	cudamatrix/cu-matrix.h	/^  inline Real *Data() { return data_; }$/;"	f	class:kaldi::CuMatrixBase
Data	cudamatrix/cu-matrix.h	/^  inline const Real *Data() const { return data_; }$/;"	f	class:kaldi::CuMatrixBase
Dim	cudamatrix/cu-matrix.h	/^  ::MatrixDim Dim() const { $/;"	f	class:kaldi::CuMatrixBase
FrobeniusNorm	cudamatrix/cu-matrix.h	/^  Real FrobeniusNorm() const { return sqrt(TraceMatMat(*this, *this, kTrans)); }$/;"	f	class:kaldi::CuMatrixBase
KALDI_CUDAMATRIX_CU_MATRIX_H_	cudamatrix/cu-matrix.h	27;"	d
Mat	cudamatrix/cu-matrix.h	/^  inline Matrix<Real> &Mat() {$/;"	f	class:kaldi::CuMatrix
Mat	cudamatrix/cu-matrix.h	/^  inline MatrixBase<Real> &Mat() {$/;"	f	class:kaldi::CuMatrixBase
Mat	cudamatrix/cu-matrix.h	/^  inline const Matrix<Real> &Mat() const {$/;"	f	class:kaldi::CuMatrix
Mat	cudamatrix/cu-matrix.h	/^  inline const MatrixBase<Real> &Mat() const {$/;"	f	class:kaldi::CuMatrixBase
Matrix	cudamatrix/cu-matrix.h	/^Matrix<Real>::Matrix(const CuMatrixBase<OtherReal> &M,$/;"	f	class:kaldi::Matrix
NumCols	cudamatrix/cu-matrix.h	/^  MatrixIndexT NumCols() const { return num_cols_;  }$/;"	f	class:kaldi::CuMatrixBase
NumRows	cudamatrix/cu-matrix.h	/^  MatrixIndexT NumRows() const { return num_rows_;  }$/;"	f	class:kaldi::CuMatrixBase
Range	cudamatrix/cu-matrix.h	/^  inline CuSubMatrix<Real> Range(const MatrixIndexT row_offset,$/;"	f	class:kaldi::CuMatrixBase
Row	cudamatrix/cu-matrix.h	/^  inline CuSubVector<Real> Row(MatrixIndexT i) {$/;"	f	class:kaldi::CuMatrixBase
Row	cudamatrix/cu-matrix.h	/^  inline const CuSubVector<Real> Row(MatrixIndexT i) const {$/;"	f	class:kaldi::CuMatrixBase
RowData	cudamatrix/cu-matrix.h	/^  inline Real* RowData(MatrixIndexT r) { return data_ + r * stride_; }$/;"	f	class:kaldi::CuMatrixBase
RowData	cudamatrix/cu-matrix.h	/^  inline const Real* RowData(MatrixIndexT r) const { return data_ + r * stride_; }$/;"	f	class:kaldi::CuMatrixBase
RowRange	cudamatrix/cu-matrix.h	/^  inline CuSubMatrix<Real> RowRange(const MatrixIndexT row_offset,$/;"	f	class:kaldi::CuMatrixBase
SameDim	cudamatrix/cu-matrix.h	/^bool SameDim(const CuMatrixBase<Real> &M, const CuMatrixBase<Real> &N) {$/;"	f	namespace:kaldi
SameDimAndStride	cudamatrix/cu-matrix.h	/^bool SameDimAndStride(const CuMatrixBase<Real> &M, const CuMatrixBase<Real> &N) {$/;"	f	namespace:kaldi
SizeInBytes	cudamatrix/cu-matrix.h	/^  MatrixIndexT SizeInBytes() const { return num_rows_*stride_*sizeof(Real); }$/;"	f	class:kaldi::CuMatrixBase
Stride	cudamatrix/cu-matrix.h	/^  MatrixIndexT Stride() const { return stride_; }$/;"	f	class:kaldi::CuMatrixBase
data_	cudamatrix/cu-matrix.h	/^  Real *data_;       \/\/\/< GPU data pointer (or regular matrix data pointer,$/;"	m	class:kaldi::CuMatrixBase
kaldi	cudamatrix/cu-matrix.h	/^namespace kaldi {$/;"	n
num_cols_	cudamatrix/cu-matrix.h	/^  MatrixIndexT num_cols_;$/;"	m	class:kaldi::CuMatrixBase
num_rows_	cudamatrix/cu-matrix.h	/^  MatrixIndexT num_rows_;$/;"	m	class:kaldi::CuMatrixBase
operator ()	cudamatrix/cu-matrix.h	/^  inline CuValue<Real> operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::CuMatrixBase
operator ()	cudamatrix/cu-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuMatrixBase
operator =	cudamatrix/cu-matrix.h	/^  CuMatrix<Real> &operator = (const CuMatrix<Real> &other) {$/;"	f	class:kaldi::CuMatrix
operator =	cudamatrix/cu-matrix.h	/^  CuMatrix<Real> &operator = (const CuMatrixBase<Real> &other) {$/;"	f	class:kaldi::CuMatrix
operator =	cudamatrix/cu-matrix.h	/^  CuMatrix<Real> &operator = (const MatrixBase<Real> &other) {$/;"	f	class:kaldi::CuMatrix
stride_	cudamatrix/cu-matrix.h	/^  MatrixIndexT stride_;$/;"	m	class:kaldi::CuMatrixBase
~CuMatrix	cudamatrix/cu-matrix.h	/^  ~CuMatrix() { Destroy(); }$/;"	f	class:kaldi::CuMatrix
CU1DBLOCK	cudamatrix/cu-matrixdim.h	63;"	d
CU2DBLOCK	cudamatrix/cu-matrixdim.h	67;"	d
CuBlockMatrixData	cudamatrix/cu-matrixdim.h	/^  } CuBlockMatrixData;$/;"	t	typeref:struct:CuBlockMatrixData_
CuBlockMatrixData_	cudamatrix/cu-matrixdim.h	/^  typedef struct CuBlockMatrixData_ {$/;"	s
Int32Pair	cudamatrix/cu-matrixdim.h	/^  typedef struct Int32Pair {$/;"	s
Int32Pair	cudamatrix/cu-matrixdim.h	/^  } Int32Pair;$/;"	t	typeref:struct:Int32Pair
KALDI_CUDAMATRIX_CU_MATRIXDIM_H_	cudamatrix/cu-matrixdim.h	24;"	d
MatrixDim	cudamatrix/cu-matrixdim.h	/^  } MatrixDim;$/;"	t	typeref:struct:MatrixDim_
MatrixDim_	cudamatrix/cu-matrixdim.h	/^  typedef struct MatrixDim_ {$/;"	s
MatrixElement	cudamatrix/cu-matrixdim.h	/^struct MatrixElement {$/;"	s
MatrixIndexT_cuda	cudamatrix/cu-matrixdim.h	/^  typedef __int32          MatrixIndexT_cuda; \/\/ you'd have to change this if you changed MatrixIndexT from int32.$/;"	t
MatrixIndexT_cuda	cudamatrix/cu-matrixdim.h	/^  typedef int32_t          MatrixIndexT_cuda; \/\/ you'd have to change this if you changed MatrixIndexT from int32.$/;"	t
col_offset	cudamatrix/cu-matrixdim.h	/^    int32_cuda col_offset; \/\/ sum of #cols of previous M_i$/;"	m	struct:CuBlockMatrixData_
cols	cudamatrix/cu-matrixdim.h	/^    int32_cuda cols;$/;"	m	struct:MatrixDim_
column	cudamatrix/cu-matrixdim.h	/^  int32_cuda column;$/;"	m	struct:MatrixElement
first	cudamatrix/cu-matrixdim.h	/^    int32_cuda first;$/;"	m	struct:Int32Pair
int32_cuda	cudamatrix/cu-matrixdim.h	/^  typedef __int32          int32_cuda;$/;"	t
int32_cuda	cudamatrix/cu-matrixdim.h	/^  typedef int32_t          int32_cuda;$/;"	t
matrix_data	cudamatrix/cu-matrixdim.h	/^    void *matrix_data; \/\/ data for M_i.  This is a pointer to either float* or$/;"	m	struct:CuBlockMatrixData_
matrix_dim	cudamatrix/cu-matrixdim.h	/^    MatrixDim matrix_dim; \/\/ dimension of this M_i$/;"	m	struct:CuBlockMatrixData_
row	cudamatrix/cu-matrixdim.h	/^  int32_cuda row;$/;"	m	struct:MatrixElement
row_offset	cudamatrix/cu-matrixdim.h	/^    int32_cuda row_offset; \/\/ sum of #rows of previous M_i$/;"	m	struct:CuBlockMatrixData_
rows	cudamatrix/cu-matrixdim.h	/^    int32_cuda rows;$/;"	m	struct:MatrixDim_
second	cudamatrix/cu-matrixdim.h	/^    int32_cuda second;$/;"	m	struct:Int32Pair
stride	cudamatrix/cu-matrixdim.h	/^    int32_cuda stride;$/;"	m	struct:MatrixDim_
uint32_cuda	cudamatrix/cu-matrixdim.h	/^  typedef uint32_t         uint32_cuda;$/;"	t
uint32_cuda	cudamatrix/cu-matrixdim.h	/^  typedef unsigned __int32 uint32_cuda;$/;"	t
weight	cudamatrix/cu-matrixdim.h	/^  Real weight;$/;"	m	struct:MatrixElement
ApproxEqual	cudamatrix/cu-packed-matrix-test.cc	/^static bool ApproxEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertDiagEqual	cudamatrix/cu-packed-matrix-test.cc	/^static void AssertDiagEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cudamatrix/cu-packed-matrix-test.cc	/^static void AssertEqual(const CuPackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cudamatrix/cu-packed-matrix-test.cc	/^static void AssertEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
CudaPackedMatrixUnitTest	cudamatrix/cu-packed-matrix-test.cc	/^template<typename Real> void CudaPackedMatrixUnitTest() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixAddToDiag	cudamatrix/cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixAddToDiag() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixConstructor	cudamatrix/cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixConstructor() { $/;"	f	namespace:kaldi
UnitTestCuPackedMatrixCopy	cudamatrix/cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixCopy() { $/;"	f	namespace:kaldi
UnitTestCuPackedMatrixScale	cudamatrix/cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixScale() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixScaleDiag	cudamatrix/cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixScaleDiag() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixSetUnit	cudamatrix/cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixSetUnit() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixTrace	cudamatrix/cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixTrace() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-packed-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-packed-matrix-test.cc	/^int main() {$/;"	f
AddPacked	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::AddPacked(const Real alpha, const CuPackedMatrix<Real> &M) {$/;"	f	class:kaldi::CuPackedMatrix
AddToDiag	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::AddToDiag(Real r) {$/;"	f	class:kaldi::CuPackedMatrix
CopyFromPacked	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyFromPacked(const CuPackedMatrix<Real> &src) {$/;"	f	class:kaldi::CuPackedMatrix
CopyFromPacked	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyFromPacked(const PackedMatrix<Real> &src) {$/;"	f	class:kaldi::CuPackedMatrix
CopyToPacked	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyToPacked(PackedMatrix<Real> *dst) const {$/;"	f	class:kaldi::CuPackedMatrix
Destroy	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuPackedMatrix
Read	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuPackedMatrix
Resize	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Resize(MatrixIndexT rows,$/;"	f	class:kaldi::CuPackedMatrix
Scale	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Scale(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
ScaleDiag	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::ScaleDiag(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
SetDiag	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetDiag(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
SetRandn	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetRandn() {$/;"	f	class:kaldi::CuPackedMatrix
SetUnit	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetUnit() {$/;"	f	class:kaldi::CuPackedMatrix
SetZero	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetZero() {$/;"	f	class:kaldi::CuPackedMatrix
Swap	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Swap(PackedMatrix<Real> *mat) {$/;"	f	class:kaldi::CuPackedMatrix
Trace	cudamatrix/cu-packed-matrix.cc	/^Real CuPackedMatrix<Real>::Trace() const {$/;"	f	class:kaldi::CuPackedMatrix
Write	cudamatrix/cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuPackedMatrix
kaldi	cudamatrix/cu-packed-matrix.cc	/^namespace kaldi {$/;"	n	file:
operator <<	cudamatrix/cu-packed-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuPackedMatrix<Real> &mat) {$/;"	f	namespace:kaldi
CuPackedMatrix	cudamatrix/cu-packed-matrix.h	/^  CuPackedMatrix() : data_(NULL), num_rows_(0) {}$/;"	f	class:kaldi::CuPackedMatrix
CuPackedMatrix	cudamatrix/cu-packed-matrix.h	/^  explicit CuPackedMatrix(MatrixIndexT r,$/;"	f	class:kaldi::CuPackedMatrix
CuPackedMatrix	cudamatrix/cu-packed-matrix.h	/^  explicit CuPackedMatrix(const CuPackedMatrix<Real> &orig) : data_(NULL), num_rows_(0) {$/;"	f	class:kaldi::CuPackedMatrix
CuPackedMatrix	cudamatrix/cu-packed-matrix.h	/^  explicit CuPackedMatrix(const PackedMatrix<Real> &orig) : data_(NULL), num_rows_(0) {$/;"	f	class:kaldi::CuPackedMatrix
CuPackedMatrix	cudamatrix/cu-packed-matrix.h	/^class CuPackedMatrix {$/;"	c	namespace:kaldi
Data	cudamatrix/cu-packed-matrix.h	/^  Real* Data() { return data_; }  $/;"	f	class:kaldi::CuPackedMatrix
Data	cudamatrix/cu-packed-matrix.h	/^  const Real* Data() const { return data_; }$/;"	f	class:kaldi::CuPackedMatrix
KALDI_CUDAMATRIX_CU_PACKED_MATRIX_H_	cudamatrix/cu-packed-matrix.h	24;"	d
Mat	cudamatrix/cu-packed-matrix.h	/^  inline PackedMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuPackedMatrix
Mat	cudamatrix/cu-packed-matrix.h	/^  inline const PackedMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuPackedMatrix
NumCols	cudamatrix/cu-packed-matrix.h	/^  inline MatrixIndexT NumCols() const { return num_rows_; }$/;"	f	class:kaldi::CuPackedMatrix
NumRows	cudamatrix/cu-packed-matrix.h	/^  inline MatrixIndexT NumRows() const { return num_rows_; }$/;"	f	class:kaldi::CuPackedMatrix
SizeInBytes	cudamatrix/cu-packed-matrix.h	/^  size_t  SizeInBytes() const {$/;"	f	class:kaldi::CuPackedMatrix
data_	cudamatrix/cu-packed-matrix.h	/^  Real *data_;$/;"	m	class:kaldi::CuPackedMatrix
kaldi	cudamatrix/cu-packed-matrix.h	/^namespace kaldi {$/;"	n
num_rows_	cudamatrix/cu-packed-matrix.h	/^  MatrixIndexT num_rows_;$/;"	m	class:kaldi::CuPackedMatrix
operator ()	cudamatrix/cu-packed-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuPackedMatrix
~CuPackedMatrix	cudamatrix/cu-packed-matrix.h	/^  ~CuPackedMatrix() { Destroy(); }$/;"	f	class:kaldi::CuPackedMatrix
AddGaussNoise	cudamatrix/cu-rand.cc	/^template<typename Real> void CuRand<Real>::AddGaussNoise(CuMatrix<Real> *tgt, Real gscale) {$/;"	f	class:kaldi::CuRand
BinarizeProbs	cudamatrix/cu-rand.cc	/^template<typename Real> void CuRand<Real>::BinarizeProbs(const CuMatrix<Real> &probs, CuMatrix<Real> *states) {$/;"	f	class:kaldi::CuRand
RandGaussian	cudamatrix/cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandGaussian(CuMatrixBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
RandGaussian	cudamatrix/cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandGaussian(CuVectorBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
RandUniform	cudamatrix/cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandUniform(CuMatrixBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
SeedBuffer	cudamatrix/cu-rand.cc	/^void CuRand<Real>::SeedBuffer(MatrixIndexT state_size, uint32 **tgt) {$/;"	f	class:kaldi::CuRand
SeedGpu	cudamatrix/cu-rand.cc	/^void CuRand<Real>::SeedGpu(MatrixIndexT state_size) {$/;"	f	class:kaldi::CuRand
kaldi	cudamatrix/cu-rand.cc	/^namespace kaldi {$/;"	n	file:
~CuRand	cudamatrix/cu-rand.cc	/^CuRand<Real>::~CuRand() {$/;"	f	class:kaldi::CuRand
CuRand	cudamatrix/cu-rand.h	/^  CuRand(): z1_(NULL), z2_(NULL), z3_(NULL), z4_(NULL), state_size_(0) { }$/;"	f	class:kaldi::CuRand
CuRand	cudamatrix/cu-rand.h	/^class CuRand {$/;"	c	namespace:kaldi
KALDI_CUDAMATRIX_CU_RAND_H_	cudamatrix/cu-rand.h	23;"	d
kaldi	cudamatrix/cu-rand.h	/^namespace kaldi {$/;"	n
state_size_	cudamatrix/cu-rand.h	/^  int32 state_size_; \/\/\/< size of the buffers$/;"	m	class:kaldi::CuRand
tmp_	cudamatrix/cu-rand.h	/^  CuMatrix<Real> tmp_; \/\/\/< auxiliary matrix$/;"	m	class:kaldi::CuRand
z1_	cudamatrix/cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
z2_	cudamatrix/cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
z3_	cudamatrix/cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
z4_	cudamatrix/cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
KALDI_CUDAMATRIX_CU_RANDKERNELS_ANSI_H_	cudamatrix/cu-randkernels-ansi.h	23;"	d
KALDI_CUDAMATRIX_CU_RANDKERNELS_H_	cudamatrix/cu-randkernels.h	23;"	d
cuda_binarize_probs	cudamatrix/cu-randkernels.h	/^template<> inline void cuda_binarize_probs<double>(dim3 Gr, dim3 Bl, double *states, const double *probs, double *rand, MatrixDim d) { cudaD_binarize_probs(Gr,Bl,states,probs,rand,d); } $/;"	f	namespace:kaldi
cuda_binarize_probs	cudamatrix/cu-randkernels.h	/^template<> inline void cuda_binarize_probs<float>(dim3 Gr, dim3 Bl, float *states, const float *probs, float *rand, MatrixDim d) { cudaF_binarize_probs(Gr,Bl,states,probs,rand,d); } $/;"	f	namespace:kaldi
cuda_binarize_probs	cudamatrix/cu-randkernels.h	/^template<typename Real> inline void cuda_binarize_probs(dim3 Gr, dim3 Bl, Real *states, const Real *probs, Real *rand, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_gauss_rand	cudamatrix/cu-randkernels.h	/^template<> inline void cuda_gauss_rand<double>(dim3 Gr, dim3 Bl, double *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaD_gauss_rand(Gr,Bl,mat,z1,z2,z3,z4,d); } $/;"	f	namespace:kaldi
cuda_gauss_rand	cudamatrix/cu-randkernels.h	/^template<> inline void cuda_gauss_rand<float>(dim3 Gr, dim3 Bl, float *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaF_gauss_rand(Gr,Bl,mat,z1,z2,z3,z4,d); } $/;"	f	namespace:kaldi
cuda_gauss_rand	cudamatrix/cu-randkernels.h	/^template<typename Real> inline void cuda_gauss_rand(dim3 Gr, dim3 Bl, Real *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_rand	cudamatrix/cu-randkernels.h	/^template<> inline void cuda_rand<double>(dim3 Gr, dim3 Bl, double *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaD_rand(Gr,Bl,mat,z1,z2,z3,z4,d); }$/;"	f	namespace:kaldi
cuda_rand	cudamatrix/cu-randkernels.h	/^template<> inline void cuda_rand<float>(dim3 Gr, dim3 Bl, float *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaF_rand(Gr,Bl,mat,z1,z2,z3,z4,d); }$/;"	f	namespace:kaldi
cuda_rand	cudamatrix/cu-randkernels.h	/^template<typename Real> inline void cuda_rand(dim3 Gr, dim3 Bl, Real *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_vec_gauss_rand	cudamatrix/cu-randkernels.h	/^template<> inline void cuda_vec_gauss_rand<double>(int Gr, int Bl, double *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { cudaD_vec_gauss_rand(Gr,Bl,v,z1,z2,z3,z4,dim); } $/;"	f	namespace:kaldi
cuda_vec_gauss_rand	cudamatrix/cu-randkernels.h	/^template<> inline void cuda_vec_gauss_rand<float>(int Gr, int Bl, float *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { cudaF_vec_gauss_rand(Gr,Bl,v,z1,z2,z3,z4,dim); } $/;"	f	namespace:kaldi
cuda_vec_gauss_rand	cudamatrix/cu-randkernels.h	/^template<typename Real> inline void cuda_vec_gauss_rand(int Gr, int Bl, Real *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-randkernels.h	/^namespace kaldi {$/;"	n
CuSpMatrixSpeedTest	cudamatrix/cu-sp-matrix-speed-test.cc	/^template<typename Real> void CuSpMatrixSpeedTest() {$/;"	f	namespace:kaldi
NameOf	cudamatrix/cu-sp-matrix-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixCopyFromMat	cudamatrix/cu-sp-matrix-speed-test.cc	/^static void UnitTestCuSpMatrixCopyFromMat(int32 dim, SpCopyType copy_type) {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixInvert	cudamatrix/cu-sp-matrix-speed-test.cc	/^static void UnitTestCuSpMatrixInvert(int32 dim) {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-sp-matrix-speed-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-sp-matrix-speed-test.cc	/^int main() {$/;"	f
CudaSpMatrixUnitTest	cudamatrix/cu-sp-matrix-test.cc	/^template<typename Real, typename OtherReal> void CudaSpMatrixUnitTest() {$/;"	f	namespace:kaldi
CudaSpMatrixUnitTest	cudamatrix/cu-sp-matrix-test.cc	/^template<typename Real> void CudaSpMatrixUnitTest() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixAddMat2	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddMat2() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixAddSp	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddSp() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixAddToDiag	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddToDiag() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixAddVec2	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddVec2() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixApproxEqual	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixApproxEqual() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixConstructor	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixConstructor() { $/;"	f	namespace:kaldi
UnitTestCuSpMatrixCopyFromMat	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixCopyFromMat() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixIO	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixIO() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixInvert	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixInvert() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixOperator	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixOperator() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixSetUnit	cudamatrix/cu-sp-matrix-test.cc	/^void UnitTestCuSpMatrixSetUnit() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixTraceSpSp	cudamatrix/cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixTraceSpSp() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-sp-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-sp-matrix-test.cc	/^int main() {$/;"	f
AddMat2	cudamatrix/cu-sp-matrix.cc	/^void CuSpMatrix<Real>::AddMat2(const Real alpha, const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuSpMatrix
AddVec2	cudamatrix/cu-sp-matrix.cc	/^void CuSpMatrix<Real>::AddVec2(const Real alpha, const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuSpMatrix
ApproxEqual	cudamatrix/cu-sp-matrix.cc	/^bool CuSpMatrix<Real>::ApproxEqual(const CuSpMatrix<Real> &B, Real tol) const {$/;"	f	class:kaldi::CuSpMatrix
CopyFromMat	cudamatrix/cu-sp-matrix.cc	/^void CuSpMatrix<Real>::CopyFromMat(const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuSpMatrix
Invert	cudamatrix/cu-sp-matrix.cc	/^void CuSpMatrix<Real>::Invert() {$/;"	f	class:kaldi::CuSpMatrix
IsUnit	cudamatrix/cu-sp-matrix.cc	/^bool CuSpMatrix<Real>::IsUnit(Real tol) const {$/;"	f	class:kaldi::CuSpMatrix
TraceSpSp	cudamatrix/cu-sp-matrix.cc	/^Real TraceSpSp(const CuSpMatrix<Real> &A, const CuSpMatrix<OtherReal> &B) {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-sp-matrix.cc	/^namespace kaldi {$/;"	n	file:
AddSp	cudamatrix/cu-sp-matrix.h	/^  void AddSp(const Real alpha, const CuSpMatrix<Real> &Ma) {$/;"	f	class:kaldi::CuSpMatrix
ApproxEqual	cudamatrix/cu-sp-matrix.h	/^inline bool ApproxEqual(const CuSpMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cudamatrix/cu-sp-matrix.h	/^inline void AssertEqual(const CuSpMatrix<Real> &A,$/;"	f	namespace:kaldi
CopyFromSp	cudamatrix/cu-sp-matrix.h	/^  void CopyFromSp(const CuSpMatrix<Real> &other) {$/;"	f	class:kaldi::CuSpMatrix
CopyFromSp	cudamatrix/cu-sp-matrix.h	/^  void CopyFromSp(const SpMatrix<Real> &other) {$/;"	f	class:kaldi::CuSpMatrix
CopyToSp	cudamatrix/cu-sp-matrix.h	/^  void CopyToSp(SpMatrix<Real> *dst) const { \/\/added const by hxu$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cudamatrix/cu-sp-matrix.h	/^  CuSpMatrix(): CuPackedMatrix<Real>() {}$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cudamatrix/cu-sp-matrix.h	/^  explicit CuSpMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero)$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cudamatrix/cu-sp-matrix.h	/^  explicit CuSpMatrix(const CuMatrixBase<Real> &orig,$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cudamatrix/cu-sp-matrix.h	/^  explicit CuSpMatrix(const CuSpMatrix<Real> &orig)$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cudamatrix/cu-sp-matrix.h	/^  explicit CuSpMatrix(const SpMatrix<Real> &orig)$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cudamatrix/cu-sp-matrix.h	/^class CuSpMatrix : public CuPackedMatrix<Real> {$/;"	c	namespace:kaldi
FrobeniusNorm	cudamatrix/cu-sp-matrix.h	/^  Real FrobeniusNorm() const { return sqrt(TraceSpSp(*this, *this)); }$/;"	f	class:kaldi::CuSpMatrix
KALDI_CUDAMATRIX_CU_SP_MATRIX_H_	cudamatrix/cu-sp-matrix.h	2;"	d
Mat	cudamatrix/cu-sp-matrix.h	/^  inline SpMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuSpMatrix
Mat	cudamatrix/cu-sp-matrix.h	/^  inline const SpMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuSpMatrix
Resize	cudamatrix/cu-sp-matrix.h	/^  inline void Resize(MatrixIndexT nRows, MatrixResizeType resize_type = kSetZero) {$/;"	f	class:kaldi::CuSpMatrix
SpMatrix	cudamatrix/cu-sp-matrix.h	/^SpMatrix<Real>::SpMatrix(const CuSpMatrix<Real> &cu) {$/;"	f	class:kaldi::SpMatrix
kaldi	cudamatrix/cu-sp-matrix.h	/^namespace kaldi {$/;"	n
operator ()	cudamatrix/cu-sp-matrix.h	/^  inline CuValue<Real> operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::CuSpMatrix
operator ()	cudamatrix/cu-sp-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuSpMatrix
~CuSpMatrix	cudamatrix/cu-sp-matrix.h	/^  ~CuSpMatrix() {}  $/;"	f	class:kaldi::CuSpMatrix
CuMatrixUnitTest	cudamatrix/cu-test.cc	/^static void CuMatrixUnitTest() {$/;"	f	namespace:kaldi
InitRand	cudamatrix/cu-test.cc	/^static void InitRand(SpMatrix<Real> *M) {$/;"	f	namespace:kaldi
InitRand	cudamatrix/cu-test.cc	/^static void InitRand(VectorBase<Real> *v) {$/;"	f	namespace:kaldi
UnitInvert	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitInvert() {$/;"	f	namespace:kaldi
UnitTestCholesky	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestCholesky() {$/;"	f	namespace:kaldi
UnitTestConstructor	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestConstructor() {$/;"	f	namespace:kaldi
UnitTestCopyFromMat	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestCopyFromMat() {$/;"	f	namespace:kaldi
UnitTestCopySp	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestCopySp() {$/;"	f	namespace:kaldi
UnitTestInvert	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestInvert() {$/;"	f	namespace:kaldi
UnitTestMatrix	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestMatrix() {$/;"	f	namespace:kaldi
UnitTestMulTp	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestMulTp() {$/;"	f	namespace:kaldi
UnitTestSetZeroAboveDiag	cudamatrix/cu-test.cc	/^static void UnitTestSetZeroAboveDiag() {$/;"	f	namespace:kaldi
UnitTestTrace	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestTrace() {$/;"	f	namespace:kaldi
UnitTestVector	cudamatrix/cu-test.cc	/^template<typename Real> static void UnitTestVector() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-test.cc	/^int main() {$/;"	f
AssertEqual	cudamatrix/cu-tp-matrix-test.cc	/^static void AssertEqual(const CuPackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cudamatrix/cu-tp-matrix-test.cc	/^static void AssertEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
CudaTpMatrixUnitTest	cudamatrix/cu-tp-matrix-test.cc	/^template<typename Real> void CudaTpMatrixUnitTest() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixCholesky	cudamatrix/cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCholesky() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixCopyFromMat	cudamatrix/cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCopyFromMat() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixCopyFromTp	cudamatrix/cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCopyFromTp() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixIO	cudamatrix/cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixIO() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixInvert	cudamatrix/cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixInvert() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-tp-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-tp-matrix-test.cc	/^int main() {$/;"	f
Cholesky	cudamatrix/cu-tp-matrix.cc	/^void CuTpMatrix<Real>::Cholesky(const CuSpMatrix<Real> &orig) {$/;"	f	class:kaldi::CuTpMatrix
CopyFromMat	cudamatrix/cu-tp-matrix.cc	/^void CuTpMatrix<Real>::CopyFromMat(const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuTpMatrix
CopyFromMat	cudamatrix/cu-tp-matrix.cc	/^void TpMatrix<Real>::CopyFromMat(const CuTpMatrix<Real> &other) {$/;"	f	class:kaldi::TpMatrix
CuTpMatrix	cudamatrix/cu-tp-matrix.cc	/^CuTpMatrix<Real>::CuTpMatrix(const CuMatrixBase<Real> &orig, MatrixTransposeType trans):$/;"	f	class:kaldi::CuTpMatrix
Invert	cudamatrix/cu-tp-matrix.cc	/^void CuTpMatrix<Real>::Invert() {$/;"	f	class:kaldi::CuTpMatrix
TpMatrix	cudamatrix/cu-tp-matrix.cc	/^TpMatrix<Real>::TpMatrix(const CuTpMatrix<Real> &cu) {$/;"	f	class:kaldi::TpMatrix
kaldi	cudamatrix/cu-tp-matrix.cc	/^namespace kaldi {$/;"	n	file:
CopyFromTp	cudamatrix/cu-tp-matrix.h	/^  void CopyFromTp(const CuTpMatrix<Real> &other) {$/;"	f	class:kaldi::CuTpMatrix
CopyFromTp	cudamatrix/cu-tp-matrix.h	/^  void CopyFromTp(const TpMatrix<Real> &other) {$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cudamatrix/cu-tp-matrix.h	/^  CuTpMatrix() : CuPackedMatrix<Real>() {}$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cudamatrix/cu-tp-matrix.h	/^  explicit CuTpMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero)$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cudamatrix/cu-tp-matrix.h	/^  explicit CuTpMatrix<Real>(const CuTpMatrix<Real> &orig)$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cudamatrix/cu-tp-matrix.h	/^  explicit CuTpMatrix<Real>(const TpMatrix<Real> &orig)$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cudamatrix/cu-tp-matrix.h	/^class CuTpMatrix : public CuPackedMatrix<Real> {$/;"	c	namespace:kaldi
KALDI_CUDAMATRIX_CU_TP_MATRIX_H_	cudamatrix/cu-tp-matrix.h	20;"	d
Mat	cudamatrix/cu-tp-matrix.h	/^  inline TpMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuTpMatrix
Mat	cudamatrix/cu-tp-matrix.h	/^  inline const TpMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuTpMatrix
kaldi	cudamatrix/cu-tp-matrix.h	/^namespace kaldi {$/;"	n
~CuTpMatrix	cudamatrix/cu-tp-matrix.h	/^  ~CuTpMatrix() {}$/;"	f	class:kaldi::CuTpMatrix
CuValue	cudamatrix/cu-value.h	/^  CuValue(Real *data): data_(data) { }$/;"	f	class:kaldi::CuValue
CuValue	cudamatrix/cu-value.h	/^  CuValue(const CuValue &other): data_(other.data_) { }$/;"	f	class:kaldi::CuValue
CuValue	cudamatrix/cu-value.h	/^class CuValue {$/;"	c	namespace:kaldi
KALDI_CUDAMATRIX_CU_VALUE_H_	cudamatrix/cu-value.h	23;"	d
data_	cudamatrix/cu-value.h	/^  Real *data_;$/;"	m	class:kaldi::CuValue
kaldi	cudamatrix/cu-value.h	/^namespace kaldi {$/;"	n
operator +=	cudamatrix/cu-value.h	/^  inline Real operator += (Real r) { return (*this = r + Real(*this)); }$/;"	f	class:kaldi::CuValue
operator =	cudamatrix/cu-value.h	/^  inline CuValue operator = (const CuValue<Real> &other) {$/;"	f	class:kaldi::CuValue
operator =	cudamatrix/cu-value.h	/^  inline Real operator = (Real r) { \/\/ assignment from Real$/;"	f	class:kaldi::CuValue
operator Real	cudamatrix/cu-value.h	/^  inline operator Real () const { \/\/ assignment to Real$/;"	f	class:kaldi::CuValue
CudaVectorSpeedTest	cudamatrix/cu-vector-speed-test.cc	/^template<typename Real> void CudaVectorSpeedTest() {$/;"	f	namespace:kaldi
NameOf	cudamatrix/cu-vector-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
TestCuVectorAddColSumMat	cudamatrix/cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorAddColSumMat(int32 dim, MatrixTransposeType trans) {$/;"	f	namespace:kaldi
TestCuVectorAddDiagMat2	cudamatrix/cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorAddDiagMat2(int32 dim, MatrixTransposeType trans) {$/;"	f	namespace:kaldi
TestCuVectorAddDiagMatMat	cudamatrix/cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorAddDiagMatMat(int32 dim,$/;"	f	namespace:kaldi
TestCuVectorAddRowSumMat	cudamatrix/cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorAddRowSumMat(int32 dim, MatrixTransposeType trans) {$/;"	f	namespace:kaldi
TestCuVectorSoftmax	cudamatrix/cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorSoftmax(int32 dim) {$/;"	f	namespace:kaldi
TestCuVectorSum	cudamatrix/cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorSum(int32 dim) {$/;"	f	namespace:kaldi
TestCuVectorVecVecOne	cudamatrix/cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorVecVecOne(int32 dim) {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-vector-speed-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-vector-speed-test.cc	/^int main() {$/;"	f
CuVectorUnitTest	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTest() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddColSumMat	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddColSumMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddDiagMat2	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddDiagMat2() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddDiagMatMat	cudamatrix/cu-vector-test.cc	/^static void CuVectorUnitTestAddDiagMatMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddMatVec	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddMatVec() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddRowSumMat	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddRowSumMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddSpVec	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddSpVec() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddVec	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVec() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddVecCross	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecCross() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddVecExtra	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecExtra() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddVecVec	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecVec() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplyExp	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyExp() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplyFloor	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyFloor() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplyLog	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyLog() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplyPow	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyPow() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplySoftMax	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplySoftMax() {$/;"	f	namespace:kaldi
CuVectorUnitTestApproxEqual	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApproxEqual() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyCross	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyCross() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyCross2	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyCross2() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyDiagFromMat	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyDiagFromMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyDiagFromPacked	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyDiagFromPacked() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyFromMat	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyFromMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestInvertElements	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestInvertElements() {$/;"	f	namespace:kaldi
CuVectorUnitTestMax	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestMax() {$/;"	f	namespace:kaldi
CuVectorUnitTestMin	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestMin() {$/;"	f	namespace:kaldi
CuVectorUnitTestNorm	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestNorm() {$/;"	f	namespace:kaldi
CuVectorUnitTestScale	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestScale() {$/;"	f	namespace:kaldi
CuVectorUnitTestSum	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestSum() {$/;"	f	namespace:kaldi
CuVectorUnitTestVecVec	cudamatrix/cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestVecVec() {$/;"	f	namespace:kaldi
UnitTestCuSubVector	cudamatrix/cu-vector-test.cc	/^static void UnitTestCuSubVector() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddTp	cudamatrix/cu-vector-test.cc	/^static void UnitTestCuVectorAddTp() {$/;"	f	namespace:kaldi
UnitTestCuVectorCopyFromVec	cudamatrix/cu-vector-test.cc	/^static void UnitTestCuVectorCopyFromVec() {$/;"	f	namespace:kaldi
UnitTestCuVectorIO	cudamatrix/cu-vector-test.cc	/^static void UnitTestCuVectorIO() {$/;"	f	namespace:kaldi
UnitTestCuVectorMulTp	cudamatrix/cu-vector-test.cc	/^static void UnitTestCuVectorMulTp() {$/;"	f	namespace:kaldi
UnitTestCuVectorReplaceValue	cudamatrix/cu-vector-test.cc	/^template<typename Real> static void UnitTestCuVectorReplaceValue() {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cu-vector-test.cc	/^namespace kaldi {$/;"	n	file:
main	cudamatrix/cu-vector-test.cc	/^int main(int argc, char *argv[]) {$/;"	f
Add	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::Add(Real value) {$/;"	f	class:kaldi::CuVectorBase
AddColSumMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddColSumMat(Real alpha,$/;"	f	class:kaldi::CuVectorBase
AddDiagMat2	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddDiagMat2(Real alpha, const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuVectorBase
AddDiagMatMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddDiagMatMat($/;"	f	class:kaldi::CuVectorBase
AddMatVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddMatVec(const Real alpha,$/;"	f	class:kaldi::CuVectorBase
AddRowSumMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddRowSumMat(Real alpha, const CuMatrixBase<Real> &mat,$/;"	f	class:kaldi::CuVectorBase
AddSpVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddSpVec(const Real alpha,$/;"	f	class:kaldi::CuVectorBase
AddTpVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddTpVec(const Real alpha, const CuTpMatrix<Real> &M,$/;"	f	class:kaldi::CuVectorBase
AddVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddVec(Real alpha, const CuVectorBase<OtherReal> &vec,$/;"	f	class:kaldi::CuVectorBase
AddVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddVec(Real alpha, const CuVectorBase<Real> &vec,$/;"	f	class:kaldi::CuVectorBase
AddVecVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::AddVecVec(Real alpha, const CuVectorBase<Real> &v,$/;"	f	class:kaldi::CuVectorBase
ApplyCeiling	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::ApplyCeiling(Real ceiling_val) {$/;"	f	class:kaldi::CuVectorBase
ApplyExp	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::ApplyExp() {$/;"	f	class:kaldi::CuVectorBase
ApplyFloor	cudamatrix/cu-vector.cc	/^MatrixIndexT CuVectorBase<Real>::ApplyFloor(Real floor_val) {$/;"	f	class:kaldi::CuVectorBase
ApplyLog	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::ApplyLog() {$/;"	f	class:kaldi::CuVectorBase
ApplyPow	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::CuVectorBase
ApplySoftMax	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::ApplySoftMax() {$/;"	f	class:kaldi::CuVectorBase
ApproxEqual	cudamatrix/cu-vector.cc	/^bool CuVectorBase<Real>::ApproxEqual(const CuVectorBase<Real> &other, float tol) const {$/;"	f	class:kaldi::CuVectorBase
CopyColFromMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::CopyColFromMat(const CuMatrixBase<Real> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
CopyColFromMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<double>::CopyColFromMat(const CuMatrixBase<float> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
CopyColFromMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<float>::CopyColFromMat(const CuMatrixBase<double> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
CopyDiagFromMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::CopyDiagFromMat(const CuMatrix<Real> &M) {$/;"	f	class:kaldi::CuVectorBase
CopyDiagFromPacked	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::CopyDiagFromPacked(const CuPackedMatrix<Real> &M) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::CopyFromVec(const CuVectorBase<Real> &src) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::CopyFromVec(const VectorBase<OtherReal> &src) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<double>::CopyFromVec(const CuVectorBase<float> &src) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<float>::CopyFromVec(const CuVectorBase<double> &src) {$/;"	f	class:kaldi::CuVectorBase
CopyRowsFromMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::CopyRowsFromMat(const CuMatrixBase<Real> &mat) {$/;"	f	class:kaldi::CuVectorBase
CopyRowsFromMat	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::CopyRowsFromMat(const MatrixBase<Real> &mat) {$/;"	f	class:kaldi::CuVectorBase
CopyRowsFromVec	cudamatrix/cu-vector.cc	/^void MatrixBase<Real>::CopyRowsFromVec(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::MatrixBase
CopyToVec	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::CopyToVec(VectorBase<OtherReal> *dst) const {$/;"	f	class:kaldi::CuVectorBase
CuVector	cudamatrix/cu-vector.cc	/^CuVector<Real>::CuVector(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuVector
CuVector	cudamatrix/cu-vector.cc	/^CuVector<Real>::CuVector(const VectorBase<Real> &v) {$/;"	f	class:kaldi::CuVector
Destroy	cudamatrix/cu-vector.cc	/^void CuVector<Real>::Destroy() {$/;"	f	class:kaldi::CuVector
InvertElements	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::InvertElements() {$/;"	f	class:kaldi::CuVectorBase
Max	cudamatrix/cu-vector.cc	/^Real CuVectorBase<Real>::Max() const {$/;"	f	class:kaldi::CuVectorBase
Min	cudamatrix/cu-vector.cc	/^Real CuVectorBase<Real>::Min() const {$/;"	f	class:kaldi::CuVectorBase
MulElements	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::MulElements(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuVectorBase
MulTp	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::MulTp(const CuTpMatrix<Real> &M, const MatrixTransposeType trans) {$/;"	f	class:kaldi::CuVectorBase
Norm	cudamatrix/cu-vector.cc	/^Real CuVectorBase<Real>::Norm(Real p) {$/;"	f	class:kaldi::CuVectorBase
Read	cudamatrix/cu-vector.cc	/^void CuVector<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuVector
ReplaceValue	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::ReplaceValue(Real orig, Real changed) {$/;"	f	class:kaldi::CuVectorBase
Resize	cudamatrix/cu-vector.cc	/^void CuVector<Real>::Resize(MatrixIndexT dim, MatrixResizeType t) {$/;"	f	class:kaldi::CuVector
Scale	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::Scale(Real value) {$/;"	f	class:kaldi::CuVectorBase
Set	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::Set(Real value) {$/;"	f	class:kaldi::CuVectorBase
SetRandn	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::SetRandn() {$/;"	f	class:kaldi::CuVectorBase
SetZero	cudamatrix/cu-vector.cc	/^void CuVectorBase<Real>::SetZero() {$/;"	f	class:kaldi::CuVectorBase
Sum	cudamatrix/cu-vector.cc	/^Real CuVectorBase<Real>::Sum() const {$/;"	f	class:kaldi::CuVectorBase
Swap	cudamatrix/cu-vector.cc	/^void CuVector<Real>::Swap(Vector<Real> *vec) {$/;"	f	class:kaldi::CuVector
VecVec	cudamatrix/cu-vector.cc	/^Real VecVec(const CuVectorBase<Real> &A, const CuVectorBase<OtherReal> &B) {$/;"	f	namespace:kaldi
VecVec	cudamatrix/cu-vector.cc	/^Real VecVec(const CuVectorBase<Real> &a,$/;"	f	namespace:kaldi
Write	cudamatrix/cu-vector.cc	/^void CuVector<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuVector
kaldi	cudamatrix/cu-vector.cc	/^namespace kaldi {$/;"	n	file:
operator <<	cudamatrix/cu-vector.cc	/^std::ostream &operator << (std::ostream &out, const CuVectorBase<Real> &vec) {$/;"	f	namespace:kaldi
ApproxEqual	cudamatrix/cu-vector.h	/^bool ApproxEqual(const CuVectorBase<Real> &a,$/;"	f	namespace:kaldi
AssertEqual	cudamatrix/cu-vector.h	/^inline void AssertEqual(CuVectorBase<Real> &a, CuVectorBase<Real> &b,$/;"	f	namespace:kaldi
CopyFromVec	cudamatrix/cu-vector.h	/^void CuVectorBase<Real>::CopyFromVec(const CuVectorBase<OtherReal> &v) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cudamatrix/cu-vector.h	/^void VectorBase<Real>::CopyFromVec(const CuVectorBase<OtherReal> &cu) {$/;"	f	class:kaldi::VectorBase
CuSubVector	cudamatrix/cu-vector.h	/^  CuSubVector(const CuMatrixBase<Real> &matrix, MatrixIndexT row) {$/;"	f	class:kaldi::CuSubVector
CuSubVector	cudamatrix/cu-vector.h	/^  CuSubVector(const CuSubVector &other) : CuVectorBase<Real> () {$/;"	f	class:kaldi::CuSubVector
CuSubVector	cudamatrix/cu-vector.h	/^  CuSubVector(const CuVectorBase<Real> &t, const MatrixIndexT origin,$/;"	f	class:kaldi::CuSubVector
CuSubVector	cudamatrix/cu-vector.h	/^  CuSubVector(const Real* data, MatrixIndexT length) : CuVectorBase<Real> () {$/;"	f	class:kaldi::CuSubVector
CuSubVector	cudamatrix/cu-vector.h	/^class CuSubVector: public CuVectorBase<Real> {$/;"	c	namespace:kaldi
CuVector	cudamatrix/cu-vector.h	/^  CuVector() { }$/;"	f	class:kaldi::CuVector
CuVector	cudamatrix/cu-vector.h	/^  CuVector(MatrixIndexT dim, MatrixResizeType t = kSetZero) { Resize(dim, t); }$/;"	f	class:kaldi::CuVector
CuVector	cudamatrix/cu-vector.h	/^  explicit CuVector(const CuVector<Real> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
CuVector	cudamatrix/cu-vector.h	/^  explicit CuVector(const CuVectorBase<OtherReal> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
CuVector	cudamatrix/cu-vector.h	/^  explicit CuVector(const VectorBase<OtherReal> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
CuVector	cudamatrix/cu-vector.h	/^class CuVector: public CuVectorBase<Real> {$/;"	c	namespace:kaldi
CuVectorBase	cudamatrix/cu-vector.h	/^  CuVectorBase<Real>(): data_(NULL), dim_(0) { }$/;"	f	class:kaldi::CuVectorBase
CuVectorBase	cudamatrix/cu-vector.h	/^class CuVectorBase {$/;"	c	namespace:kaldi
Data	cudamatrix/cu-vector.h	/^  inline Real* Data() { return data_; }$/;"	f	class:kaldi::CuVectorBase
Data	cudamatrix/cu-vector.h	/^  inline const Real* Data() const { return data_; }$/;"	f	class:kaldi::CuVectorBase
Dim	cudamatrix/cu-vector.h	/^  MatrixIndexT Dim() const { return dim_;  }   $/;"	f	class:kaldi::CuVectorBase
KALDI_CUDAMATRIX_CU_VECTOR_H_	cudamatrix/cu-vector.h	26;"	d
Range	cudamatrix/cu-vector.h	/^  CuSubVector<Real> Range(const MatrixIndexT o, const MatrixIndexT l) {$/;"	f	class:kaldi::CuVectorBase
Range	cudamatrix/cu-vector.h	/^  const CuSubVector<Real> Range(const MatrixIndexT o,$/;"	f	class:kaldi::CuVectorBase
Vec	cudamatrix/cu-vector.h	/^  inline VectorBase<Real> &Vec() {$/;"	f	class:kaldi::CuVectorBase
Vec	cudamatrix/cu-vector.h	/^  inline const VectorBase<Real> &Vec() const {$/;"	f	class:kaldi::CuVectorBase
Vector	cudamatrix/cu-vector.h	/^Vector<Real>::Vector(const CuVectorBase<OtherReal> &cu) {$/;"	f	class:kaldi::Vector
data_	cudamatrix/cu-vector.h	/^  Real *data_; \/\/\/< GPU data pointer (or regular data pointer$/;"	m	class:kaldi::CuVectorBase
dim_	cudamatrix/cu-vector.h	/^  MatrixIndexT dim_; \/\/\/< dimension of the vector$/;"	m	class:kaldi::CuVectorBase
kaldi	cudamatrix/cu-vector.h	/^namespace kaldi {$/;"	n
operator ()	cudamatrix/cu-vector.h	/^  inline CuValue<Real> operator() (MatrixIndexT i) {$/;"	f	class:kaldi::CuVectorBase
operator ()	cudamatrix/cu-vector.h	/^  inline Real operator() (MatrixIndexT i) const {$/;"	f	class:kaldi::CuVectorBase
operator =	cudamatrix/cu-vector.h	/^  CuVector<Real> &operator = (const CuVector<Real> &other) {$/;"	f	class:kaldi::CuVector
operator =	cudamatrix/cu-vector.h	/^  CuVector<Real> &operator = (const CuVectorBase<Real> &other) {$/;"	f	class:kaldi::CuVector
operator =	cudamatrix/cu-vector.h	/^  CuVector<Real> &operator = (const VectorBase<Real> &other) {$/;"	f	class:kaldi::CuVector
~CuVector	cudamatrix/cu-vector.h	/^  ~CuVector() { Destroy(); }$/;"	f	class:kaldi::CuVector
KALDI_CUDAMATRIX_CUBLAS_WRAPPERS_H_	cudamatrix/cublas-wrappers.h	20;"	d
cublas_asum	cudamatrix/cublas-wrappers.h	/^inline double cublas_asum(int n, const double* x, int incx) {$/;"	f	namespace:kaldi
cublas_asum	cudamatrix/cublas-wrappers.h	/^inline float cublas_asum(int n, const float* x, int incx) {$/;"	f	namespace:kaldi
cublas_axpy	cudamatrix/cublas-wrappers.h	/^inline void cublas_axpy(int n, double alpha, const double* x, int incx, double* y, int incy) {$/;"	f	namespace:kaldi
cublas_axpy	cudamatrix/cublas-wrappers.h	/^inline void cublas_axpy(int n, float alpha, const float* x, int incx, float* y, int incy) {$/;"	f	namespace:kaldi
cublas_copy	cudamatrix/cublas-wrappers.h	/^inline void cublas_copy(int n, const double* x, int incx,$/;"	f	namespace:kaldi
cublas_copy	cudamatrix/cublas-wrappers.h	/^inline void cublas_copy(int n, const float* x, int incx,$/;"	f	namespace:kaldi
cublas_dot	cudamatrix/cublas-wrappers.h	/^inline double cublas_dot(int n, const double *x, int incx, const double *y, int incy) {$/;"	f	namespace:kaldi
cublas_dot	cudamatrix/cublas-wrappers.h	/^inline float cublas_dot(int n, const float *x, int incx, const float *y, int incy) {$/;"	f	namespace:kaldi
cublas_gemm	cudamatrix/cublas-wrappers.h	/^inline void cublas_gemm(char transa, char transb, int m, int n,int k, double alpha, const double *A, int lda,const double *B, int ldb, double beta, double *C, int ldc) {$/;"	f	namespace:kaldi
cublas_gemm	cudamatrix/cublas-wrappers.h	/^inline void cublas_gemm(char transa, char transb, int m, int n,int k, float alpha, const float *A, int lda,const float *B, int ldb, float beta, float *C, int ldc) {$/;"	f	namespace:kaldi
cublas_gemv	cudamatrix/cublas-wrappers.h	/^inline void cublas_gemv(char trans, int m, int n, double alpha,$/;"	f	namespace:kaldi
cublas_gemv	cudamatrix/cublas-wrappers.h	/^inline void cublas_gemv(char trans, int m, int n, float alpha,$/;"	f	namespace:kaldi
cublas_nrm2	cudamatrix/cublas-wrappers.h	/^inline double cublas_nrm2(int n, const double* x, int incx) {$/;"	f	namespace:kaldi
cublas_nrm2	cudamatrix/cublas-wrappers.h	/^inline float cublas_nrm2(int n, const float* x, int incx) {$/;"	f	namespace:kaldi
cublas_scal	cudamatrix/cublas-wrappers.h	/^inline void cublas_scal(int n, double alpha, double* mat, int incx) {$/;"	f	namespace:kaldi
cublas_scal	cudamatrix/cublas-wrappers.h	/^inline void cublas_scal(int n, float alpha, float* mat, int incx) {$/;"	f	namespace:kaldi
cublas_spmv	cudamatrix/cublas-wrappers.h	/^inline void cublas_spmv(char uplo, int n, double alpha, const double *AP, const double *x,$/;"	f	namespace:kaldi
cublas_spmv	cudamatrix/cublas-wrappers.h	/^inline void cublas_spmv(char uplo, int n, float alpha, const float *AP, const float *x,$/;"	f	namespace:kaldi
cublas_spr	cudamatrix/cublas-wrappers.h	/^inline void cublas_spr(char uplo, int n, double alpha, const double *x,$/;"	f	namespace:kaldi
cublas_spr	cudamatrix/cublas-wrappers.h	/^inline void cublas_spr(char uplo, int n, float alpha, const float *x,$/;"	f	namespace:kaldi
cublas_syrk	cudamatrix/cublas-wrappers.h	/^inline void cublas_syrk(char uplo, char trans, int n, int k,$/;"	f	namespace:kaldi
cublas_tpmv	cudamatrix/cublas-wrappers.h	/^inline void cublas_tpmv(char trans, int n, const double* Ap,$/;"	f	namespace:kaldi
cublas_tpmv	cudamatrix/cublas-wrappers.h	/^inline void cublas_tpmv(char trans, int n,$/;"	f	namespace:kaldi
cublas_trsm	cudamatrix/cublas-wrappers.h	/^inline void cublas_trsm(int m, int n, double alpha, const double* A, int lda, double* B, int ldb) {$/;"	f	namespace:kaldi
cublas_trsm	cudamatrix/cublas-wrappers.h	/^inline void cublas_trsm(int m, int n, float alpha, const float* A, int lda, float* B, int ldb) {$/;"	f	namespace:kaldi
kaldi	cudamatrix/cublas-wrappers.h	/^namespace kaldi {$/;"	n
ADDLIBS	decoder/Makefile	/^ADDLIBS = ..\/transform\/kaldi-transform.a ..\/tree\/kaldi-tree.a ..\/lat\/kaldi-lat.a \\$/;"	m
EXTRA_CXXFLAGS	decoder/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare -O3$/;"	m
LIBNAME	decoder/Makefile	/^LIBNAME = kaldi-decoder$/;"	m
OBJFILES	decoder/Makefile	/^OBJFILES = training-graph-compiler.o lattice-simple-decoder.o lattice-faster-decoder.o \\$/;"	m
TESTFILES	decoder/Makefile	/^TESTFILES = $/;"	m
Arc	decoder/biglm-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::BiglmFasterDecoder
BiglmFasterDecoder	decoder/biglm-faster-decoder.h	/^  BiglmFasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::BiglmFasterDecoder
BiglmFasterDecoder	decoder/biglm-faster-decoder.h	/^class BiglmFasterDecoder {$/;"	c	namespace:kaldi
BiglmFasterDecoderOptions	decoder/biglm-faster-decoder.h	/^  BiglmFasterDecoderOptions() {$/;"	f	struct:kaldi::BiglmFasterDecoderOptions
BiglmFasterDecoderOptions	decoder/biglm-faster-decoder.h	/^struct BiglmFasterDecoderOptions: public FasterDecoderOptions {$/;"	s	namespace:kaldi
ClearToks	decoder/biglm-faster-decoder.h	/^  void ClearToks(Elem *list) {$/;"	f	class:kaldi::BiglmFasterDecoder
ConstructPair	decoder/biglm-faster-decoder.h	/^  inline PairId ConstructPair(StateId fst_state, StateId lm_state) {$/;"	f	class:kaldi::BiglmFasterDecoder
Decode	decoder/biglm-faster-decoder.h	/^  void Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::BiglmFasterDecoder
Elem	decoder/biglm-faster-decoder.h	/^  typedef HashList<PairId, Token*>::Elem Elem;$/;"	t	class:kaldi::BiglmFasterDecoder
GetBestPath	decoder/biglm-faster-decoder.h	/^  bool GetBestPath(fst::MutableFst<LatticeArc> *fst_out,$/;"	f	class:kaldi::BiglmFasterDecoder
GetCutoff	decoder/biglm-faster-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::BiglmFasterDecoder
KALDI_DECODER_BIGLM_FASTER_DECODER_H_	decoder/biglm-faster-decoder.h	21;"	d
Label	decoder/biglm-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::BiglmFasterDecoder
PairId	decoder/biglm-faster-decoder.h	/^  typedef uint64 PairId;$/;"	t	class:kaldi::BiglmFasterDecoder
PairToLmState	decoder/biglm-faster-decoder.h	/^  static inline StateId PairToLmState(PairId state_pair) {$/;"	f	class:kaldi::BiglmFasterDecoder
PairToState	decoder/biglm-faster-decoder.h	/^  static inline StateId PairToState(PairId state_pair) {$/;"	f	class:kaldi::BiglmFasterDecoder
PossiblyResizeHash	decoder/biglm-faster-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::BiglmFasterDecoder
ProcessEmitting	decoder/biglm-faster-decoder.h	/^  BaseFloat ProcessEmitting(DecodableInterface *decodable, int frame) {$/;"	f	class:kaldi::BiglmFasterDecoder
ProcessNonemitting	decoder/biglm-faster-decoder.h	/^  void ProcessNonemitting(BaseFloat cutoff) {$/;"	f	class:kaldi::BiglmFasterDecoder
PropagateLm	decoder/biglm-faster-decoder.h	/^  inline StateId PropagateLm(StateId lm_state,$/;"	f	class:kaldi::BiglmFasterDecoder
ReachedFinal	decoder/biglm-faster-decoder.h	/^  bool ReachedFinal() {$/;"	f	class:kaldi::BiglmFasterDecoder
SetOptions	decoder/biglm-faster-decoder.h	/^  void SetOptions(const BiglmFasterDecoderOptions &opts) { opts_ = opts; }$/;"	f	class:kaldi::BiglmFasterDecoder
StateId	decoder/biglm-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::BiglmFasterDecoder
Token	decoder/biglm-faster-decoder.h	/^    inline Token(const Arc &arc, Token *prev):$/;"	f	class:kaldi::BiglmFasterDecoder::Token
Token	decoder/biglm-faster-decoder.h	/^    inline Token(const Arc &arc, Weight &ac_weight, Token *prev):$/;"	f	class:kaldi::BiglmFasterDecoder::Token
Token	decoder/biglm-faster-decoder.h	/^  class Token {$/;"	c	class:kaldi::BiglmFasterDecoder
TokenDelete	decoder/biglm-faster-decoder.h	/^    inline static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
Weight	decoder/biglm-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::BiglmFasterDecoder
arc_	decoder/biglm-faster-decoder.h	/^    Arc arc_; \/\/ contains only the graph part of the cost,$/;"	m	class:kaldi::BiglmFasterDecoder::Token
fst_	decoder/biglm-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::BiglmFasterDecoder
kaldi	decoder/biglm-faster-decoder.h	/^namespace kaldi {$/;"	n
lm_diff_fst_	decoder/biglm-faster-decoder.h	/^  fst::DeterministicOnDemandFst<fst::StdArc> *lm_diff_fst_;$/;"	m	class:kaldi::BiglmFasterDecoder
operator <	decoder/biglm-faster-decoder.h	/^    inline bool operator < (const Token &other) {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
opts_	decoder/biglm-faster-decoder.h	/^  BiglmFasterDecoderOptions opts_;$/;"	m	class:kaldi::BiglmFasterDecoder
prev_	decoder/biglm-faster-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::BiglmFasterDecoder::Token
queue_	decoder/biglm-faster-decoder.h	/^  std::vector<PairId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::BiglmFasterDecoder
ref_count_	decoder/biglm-faster-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::BiglmFasterDecoder::Token
tmp_array_	decoder/biglm-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::BiglmFasterDecoder
toks_	decoder/biglm-faster-decoder.h	/^  HashList<PairId, Token*> toks_;$/;"	m	class:kaldi::BiglmFasterDecoder
warned_noarc_	decoder/biglm-faster-decoder.h	/^  bool warned_noarc_;$/;"	m	class:kaldi::BiglmFasterDecoder
weight_	decoder/biglm-faster-decoder.h	/^    Weight weight_; \/\/ weight up to current point.$/;"	m	class:kaldi::BiglmFasterDecoder::Token
~BiglmFasterDecoder	decoder/biglm-faster-decoder.h	/^  ~BiglmFasterDecoder() {$/;"	f	class:kaldi::BiglmFasterDecoder
~Token	decoder/biglm-faster-decoder.h	/^    inline ~Token() {$/;"	f	class:kaldi::BiglmFasterDecoder::Token
DecodableMapped	decoder/decodable-mapped.h	/^  DecodableMapped(const std::vector<int32> &index_map, DecodableInterface *d):$/;"	f	class:kaldi::DecodableMapped
DecodableMapped	decoder/decodable-mapped.h	/^class DecodableMapped: public DecodableInterface {$/;"	c	namespace:kaldi
IsLastFrame	decoder/decodable-mapped.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableMapped
KALDI_DECODER_DECODABLE_MAPPED_H_	decoder/decodable-mapped.h	22;"	d
LogLikelihood	decoder/decodable-mapped.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableMapped
NumIndices	decoder/decodable-mapped.h	/^  virtual int32 NumIndices() const { return static_cast<int32>(index_map_.size()) - 1; }$/;"	f	class:kaldi::DecodableMapped
decodable_	decoder/decodable-mapped.h	/^  DecodableInterface *decodable_;$/;"	m	class:kaldi::DecodableMapped
index_map_	decoder/decodable-mapped.h	/^  std::vector<int32> index_map_;$/;"	m	class:kaldi::DecodableMapped
kaldi	decoder/decodable-mapped.h	/^namespace kaldi {$/;"	n
AcceptLoglikes	decoder/decodable-matrix.h	/^  void AcceptLoglikes(Matrix<BaseFloat> *loglikes,$/;"	f	class:kaldi::DecodableMatrixMappedOffset
DecodableMatrixMappedOffset	decoder/decodable-matrix.h	/^  DecodableMatrixMappedOffset(const TransitionModel &tm):$/;"	f	class:kaldi::DecodableMatrixMappedOffset
DecodableMatrixMappedOffset	decoder/decodable-matrix.h	/^class DecodableMatrixMappedOffset: public DecodableInterface {$/;"	c	namespace:kaldi
DecodableMatrixScaled	decoder/decodable-matrix.h	/^  DecodableMatrixScaled(const Matrix<BaseFloat> &likes,$/;"	f	class:kaldi::DecodableMatrixScaled
DecodableMatrixScaled	decoder/decodable-matrix.h	/^class DecodableMatrixScaled: public DecodableInterface {$/;"	c	namespace:kaldi
DecodableMatrixScaledMapped	decoder/decodable-matrix.h	/^  DecodableMatrixScaledMapped(const TransitionModel &tm,$/;"	f	class:kaldi::DecodableMatrixScaledMapped
DecodableMatrixScaledMapped	decoder/decodable-matrix.h	/^class DecodableMatrixScaledMapped: public DecodableInterface {$/;"	c	namespace:kaldi
FirstAvailableFrame	decoder/decodable-matrix.h	/^  int32 FirstAvailableFrame() { return frame_offset_; }$/;"	f	class:kaldi::DecodableMatrixMappedOffset
InputIsFinished	decoder/decodable-matrix.h	/^  void InputIsFinished() { input_is_finished_ = true; }$/;"	f	class:kaldi::DecodableMatrixMappedOffset
IsLastFrame	decoder/decodable-matrix.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableMatrixMappedOffset
IsLastFrame	decoder/decodable-matrix.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableMatrixScaled
IsLastFrame	decoder/decodable-matrix.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableMatrixScaledMapped
KALDI_DECODER_DECODABLE_MATRIX_H_	decoder/decodable-matrix.h	22;"	d
LogLikelihood	decoder/decodable-matrix.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableMatrixMappedOffset
LogLikelihood	decoder/decodable-matrix.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableMatrixScaled
LogLikelihood	decoder/decodable-matrix.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableMatrixScaledMapped
NumFramesReady	decoder/decodable-matrix.h	/^  virtual int32 NumFramesReady() const { return likes_->NumRows(); }$/;"	f	class:kaldi::DecodableMatrixScaledMapped
NumFramesReady	decoder/decodable-matrix.h	/^  virtual int32 NumFramesReady() const { return likes_.NumRows(); }$/;"	f	class:kaldi::DecodableMatrixScaled
NumFramesReady	decoder/decodable-matrix.h	/^  virtual int32 NumFramesReady() const {$/;"	f	class:kaldi::DecodableMatrixMappedOffset
NumFramesReady	decoder/decodable-matrix.h	/^  virtual int32 NumFramesReady() { return frame_offset_ + loglikes_.NumRows(); }$/;"	f	class:kaldi::DecodableMatrixMappedOffset
NumIndices	decoder/decodable-matrix.h	/^  virtual int32 NumIndices() const { return likes_.NumCols(); }$/;"	f	class:kaldi::DecodableMatrixScaled
NumIndices	decoder/decodable-matrix.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableMatrixMappedOffset
NumIndices	decoder/decodable-matrix.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableMatrixScaledMapped
delete_likes_	decoder/decodable-matrix.h	/^  bool delete_likes_;$/;"	m	class:kaldi::DecodableMatrixScaledMapped
frame_offset_	decoder/decodable-matrix.h	/^  int32 frame_offset_;$/;"	m	class:kaldi::DecodableMatrixMappedOffset
input_is_finished_	decoder/decodable-matrix.h	/^  bool input_is_finished_;$/;"	m	class:kaldi::DecodableMatrixMappedOffset
kaldi	decoder/decodable-matrix.h	/^namespace kaldi {$/;"	n
likes_	decoder/decodable-matrix.h	/^  const Matrix<BaseFloat> &likes_;$/;"	m	class:kaldi::DecodableMatrixScaled
likes_	decoder/decodable-matrix.h	/^  const Matrix<BaseFloat> *likes_;$/;"	m	class:kaldi::DecodableMatrixScaledMapped
loglikes_	decoder/decodable-matrix.h	/^  Matrix<BaseFloat> loglikes_;$/;"	m	class:kaldi::DecodableMatrixMappedOffset
scale_	decoder/decodable-matrix.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableMatrixScaled
scale_	decoder/decodable-matrix.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableMatrixScaledMapped
trans_model_	decoder/decodable-matrix.h	/^  const TransitionModel &trans_model_;  \/\/ for tid to pdf mapping$/;"	m	class:kaldi::DecodableMatrixMappedOffset
trans_model_	decoder/decodable-matrix.h	/^  const TransitionModel &trans_model_;  \/\/ for tid to pdf mapping$/;"	m	class:kaldi::DecodableMatrixScaledMapped
~DecodableMatrixMappedOffset	decoder/decodable-matrix.h	/^  virtual ~DecodableMatrixMappedOffset() { }$/;"	f	class:kaldi::DecodableMatrixMappedOffset
~DecodableMatrixScaledMapped	decoder/decodable-matrix.h	/^  virtual ~DecodableMatrixScaledMapped() {$/;"	f	class:kaldi::DecodableMatrixScaledMapped
CheckSizes	decoder/decodable-sum.h	/^  void CheckSizes() {$/;"	f	class:kaldi::DecodableSum
DecodableSum	decoder/decodable-sum.h	/^  DecodableSum($/;"	f	class:kaldi::DecodableSum
DecodableSum	decoder/decodable-sum.h	/^  DecodableSum(DecodableInterface *d1, BaseFloat w1,$/;"	f	class:kaldi::DecodableSum
DecodableSum	decoder/decodable-sum.h	/^class DecodableSum: public DecodableInterface {$/;"	c	namespace:kaldi
DecodableSumScaled	decoder/decodable-sum.h	/^  DecodableSumScaled(DecodableInterface *d1, BaseFloat w1,$/;"	f	class:kaldi::DecodableSumScaled
DecodableSumScaled	decoder/decodable-sum.h	/^  DecodableSumScaled(const std::vector<std::pair<DecodableInterface*, BaseFloat> > &decodables,$/;"	f	class:kaldi::DecodableSumScaled
DecodableSumScaled	decoder/decodable-sum.h	/^class DecodableSumScaled : public DecodableSum {$/;"	c	namespace:kaldi
IsLastFrame	decoder/decodable-sum.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableSum
KALDI_DECODER_DECODABLE_SUM_H_	decoder/decodable-sum.h	22;"	d
LogLikelihood	decoder/decodable-sum.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableSum
LogLikelihood	decoder/decodable-sum.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableSumScaled
NumIndices	decoder/decodable-sum.h	/^  virtual int32 NumIndices() const { return decodables_[0].first->NumIndices(); }$/;"	f	class:kaldi::DecodableSum
decodables_	decoder/decodable-sum.h	/^  std::vector<std::pair<DecodableInterface*, BaseFloat> > decodables_;$/;"	m	class:kaldi::DecodableSum
kaldi	decoder/decodable-sum.h	/^namespace kaldi {$/;"	n
scale_	decoder/decodable-sum.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableSumScaled
AlignUtteranceWrapper	decoder/decoder-wrappers.cc	/^void AlignUtteranceWrapper($/;"	f	namespace:kaldi
DecodeUtteranceLatticeFaster	decoder/decoder-wrappers.cc	/^bool DecodeUtteranceLatticeFaster($/;"	f	namespace:kaldi
DecodeUtteranceLatticeFasterClass	decoder/decoder-wrappers.cc	/^DecodeUtteranceLatticeFasterClass::DecodeUtteranceLatticeFasterClass($/;"	f	class:kaldi::DecodeUtteranceLatticeFasterClass
DecodeUtteranceLatticeSimple	decoder/decoder-wrappers.cc	/^bool DecodeUtteranceLatticeSimple($/;"	f	namespace:kaldi
ModifyGraphForCarefulAlignment	decoder/decoder-wrappers.cc	/^void ModifyGraphForCarefulAlignment($/;"	f	namespace:kaldi
kaldi	decoder/decoder-wrappers.cc	/^namespace kaldi {$/;"	n	file:
operator ()	decoder/decoder-wrappers.cc	/^void DecodeUtteranceLatticeFasterClass::operator () () {$/;"	f	class:kaldi::DecodeUtteranceLatticeFasterClass
~DecodeUtteranceLatticeFasterClass	decoder/decoder-wrappers.cc	/^DecodeUtteranceLatticeFasterClass::~DecodeUtteranceLatticeFasterClass() {$/;"	f	class:kaldi::DecodeUtteranceLatticeFasterClass
AlignConfig	decoder/decoder-wrappers.h	/^  AlignConfig(): beam(200.0), retry_beam(0.0), careful(false) { }$/;"	f	struct:kaldi::AlignConfig
AlignConfig	decoder/decoder-wrappers.h	/^struct AlignConfig {$/;"	s	namespace:kaldi
DecodeUtteranceLatticeFasterClass	decoder/decoder-wrappers.h	/^class DecodeUtteranceLatticeFasterClass {$/;"	c	namespace:kaldi
KALDI_DECODER_DECODER_WRAPPERS_H_	decoder/decoder-wrappers.h	21;"	d
Register	decoder/decoder-wrappers.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::AlignConfig
acoustic_scale_	decoder/decoder-wrappers.h	/^  BaseFloat acoustic_scale_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
alignments_writer_	decoder/decoder-wrappers.h	/^  Int32VectorWriter *alignments_writer_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
allow_partial_	decoder/decoder-wrappers.h	/^  bool allow_partial_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
beam	decoder/decoder-wrappers.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::AlignConfig
careful	decoder/decoder-wrappers.h	/^  bool careful;$/;"	m	struct:kaldi::AlignConfig
clat_	decoder/decoder-wrappers.h	/^  CompactLattice *clat_; \/\/ Stored output, if determinize_ == true.$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
compact_lattice_writer_	decoder/decoder-wrappers.h	/^  CompactLatticeWriter *compact_lattice_writer_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
computed_	decoder/decoder-wrappers.h	/^  bool computed_; \/\/ operator ()  was called.$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
decodable_	decoder/decoder-wrappers.h	/^  DecodableInterface *decodable_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
decoder_	decoder/decoder-wrappers.h	/^  LatticeFasterDecoder *decoder_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
determinize_	decoder/decoder-wrappers.h	/^  bool determinize_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
frame_sum_	decoder/decoder-wrappers.h	/^  int64 *frame_sum_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
kaldi	decoder/decoder-wrappers.h	/^namespace kaldi {$/;"	n
lat_	decoder/decoder-wrappers.h	/^  Lattice *lat_; \/\/ Stored output, if determinize_ == false.$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
lattice_writer_	decoder/decoder-wrappers.h	/^  LatticeWriter *lattice_writer_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
like_sum_	decoder/decoder-wrappers.h	/^  double *like_sum_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
num_done_	decoder/decoder-wrappers.h	/^  int32 *num_done_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
num_err_	decoder/decoder-wrappers.h	/^  int32 *num_err_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
num_partial_	decoder/decoder-wrappers.h	/^  int32 *num_partial_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
partial_	decoder/decoder-wrappers.h	/^  bool partial_; \/\/ decoding was partial.$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
retry_beam	decoder/decoder-wrappers.h	/^  BaseFloat retry_beam;$/;"	m	struct:kaldi::AlignConfig
success_	decoder/decoder-wrappers.h	/^  bool success_; \/\/ decoding succeeded (possibly partial)$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
trans_model_	decoder/decoder-wrappers.h	/^  const TransitionModel *trans_model_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
utt_	decoder/decoder-wrappers.h	/^  std::string utt_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
word_syms_	decoder/decoder-wrappers.h	/^  const fst::SymbolTable *word_syms_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
words_writer_	decoder/decoder-wrappers.h	/^  Int32VectorWriter *words_writer_;$/;"	m	class:kaldi::DecodeUtteranceLatticeFasterClass
AdvanceDecoding	decoder/faster-decoder.cc	/^void FasterDecoder::AdvanceDecoding(DecodableInterface *decodable,$/;"	f	class:kaldi::FasterDecoder
ClearToks	decoder/faster-decoder.cc	/^void FasterDecoder::ClearToks(Elem *list) {$/;"	f	class:kaldi::FasterDecoder
Decode	decoder/faster-decoder.cc	/^void FasterDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::FasterDecoder
FasterDecoder	decoder/faster-decoder.cc	/^FasterDecoder::FasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::FasterDecoder
GetBestPath	decoder/faster-decoder.cc	/^bool FasterDecoder::GetBestPath(fst::MutableFst<LatticeArc> *fst_out,$/;"	f	class:kaldi::FasterDecoder
GetCutoff	decoder/faster-decoder.cc	/^double FasterDecoder::GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::FasterDecoder
InitDecoding	decoder/faster-decoder.cc	/^void FasterDecoder::InitDecoding() {$/;"	f	class:kaldi::FasterDecoder
PossiblyResizeHash	decoder/faster-decoder.cc	/^void FasterDecoder::PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::FasterDecoder
ProcessEmitting	decoder/faster-decoder.cc	/^double FasterDecoder::ProcessEmitting(DecodableInterface *decodable) {$/;"	f	class:kaldi::FasterDecoder
ProcessNonemitting	decoder/faster-decoder.cc	/^void FasterDecoder::ProcessNonemitting(double cutoff) {$/;"	f	class:kaldi::FasterDecoder
ReachedFinal	decoder/faster-decoder.cc	/^bool FasterDecoder::ReachedFinal() {$/;"	f	class:kaldi::FasterDecoder
kaldi	decoder/faster-decoder.cc	/^namespace kaldi {$/;"	n	file:
Arc	decoder/faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::FasterDecoder
Elem	decoder/faster-decoder.h	/^  typedef HashList<StateId, Token*>::Elem Elem;$/;"	t	class:kaldi::FasterDecoder
FasterDecoder	decoder/faster-decoder.h	/^class FasterDecoder {$/;"	c	namespace:kaldi
FasterDecoderOptions	decoder/faster-decoder.h	/^  FasterDecoderOptions(): beam(16.0),$/;"	f	struct:kaldi::FasterDecoderOptions
FasterDecoderOptions	decoder/faster-decoder.h	/^struct FasterDecoderOptions {$/;"	s	namespace:kaldi
KALDI_DECODER_FASTER_DECODER_H_	decoder/faster-decoder.h	22;"	d
Label	decoder/faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::FasterDecoder
NumFramesDecoded	decoder/faster-decoder.h	/^  int32 NumFramesDecoded() const { return num_frames_decoded_; }$/;"	f	class:kaldi::FasterDecoder
Register	decoder/faster-decoder.h	/^  void Register(OptionsItf *po, bool full) {  \/\/\/ if "full", use obscure$/;"	f	struct:kaldi::FasterDecoderOptions
SetOptions	decoder/faster-decoder.h	/^  void SetOptions(const FasterDecoderOptions &config) { config_ = config; }$/;"	f	class:kaldi::FasterDecoder
StateId	decoder/faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::FasterDecoder
Token	decoder/faster-decoder.h	/^    inline Token(const Arc &arc, BaseFloat ac_cost, Token *prev):$/;"	f	class:kaldi::FasterDecoder::Token
Token	decoder/faster-decoder.h	/^    inline Token(const Arc &arc, Token *prev):$/;"	f	class:kaldi::FasterDecoder::Token
Token	decoder/faster-decoder.h	/^  class Token {$/;"	c	class:kaldi::FasterDecoder
TokenDelete	decoder/faster-decoder.h	/^    inline static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::FasterDecoder::Token
Weight	decoder/faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::FasterDecoder
arc_	decoder/faster-decoder.h	/^    Arc arc_; \/\/ contains only the graph part of the cost;$/;"	m	class:kaldi::FasterDecoder::Token
beam	decoder/faster-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::FasterDecoderOptions
beam_delta	decoder/faster-decoder.h	/^  BaseFloat beam_delta;$/;"	m	struct:kaldi::FasterDecoderOptions
config_	decoder/faster-decoder.h	/^  FasterDecoderOptions config_;$/;"	m	class:kaldi::FasterDecoder
cost_	decoder/faster-decoder.h	/^    double cost_;$/;"	m	class:kaldi::FasterDecoder::Token
fst_	decoder/faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::FasterDecoder
hash_ratio	decoder/faster-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::FasterDecoderOptions
kaldi	decoder/faster-decoder.h	/^namespace kaldi {$/;"	n
max_active	decoder/faster-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::FasterDecoderOptions
min_active	decoder/faster-decoder.h	/^  int32 min_active;$/;"	m	struct:kaldi::FasterDecoderOptions
num_frames_decoded_	decoder/faster-decoder.h	/^  int32 num_frames_decoded_;$/;"	m	class:kaldi::FasterDecoder
operator <	decoder/faster-decoder.h	/^    inline bool operator < (const Token &other) {$/;"	f	class:kaldi::FasterDecoder::Token
prev_	decoder/faster-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::FasterDecoder::Token
queue_	decoder/faster-decoder.h	/^  std::vector<StateId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::FasterDecoder
ref_count_	decoder/faster-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::FasterDecoder::Token
tmp_array_	decoder/faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::FasterDecoder
toks_	decoder/faster-decoder.h	/^  HashList<StateId, Token*> toks_;$/;"	m	class:kaldi::FasterDecoder
~FasterDecoder	decoder/faster-decoder.h	/^  ~FasterDecoder() { ClearToks(toks_.Clear()); }$/;"	f	class:kaldi::FasterDecoder
Arc	decoder/lattice-biglm-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
ClearActiveTokens	decoder/lattice-biglm-faster-decoder.h	/^  void ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ConstructPair	decoder/lattice-biglm-faster-decoder.h	/^  inline PairId ConstructPair(StateId fst_state, StateId lm_state) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
Decode	decoder/lattice-biglm-faster-decoder.h	/^  bool Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
DeleteElems	decoder/lattice-biglm-faster-decoder.h	/^  void DeleteElems(Elem *list) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
DeleteForwardLinks	decoder/lattice-biglm-faster-decoder.h	/^    inline void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::Token
Elem	decoder/lattice-biglm-faster-decoder.h	/^  typedef HashList<PairId, Token*>::Elem Elem;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
FindOrAddToken	decoder/lattice-biglm-faster-decoder.h	/^  inline Token *FindOrAddToken(PairId state_pair, int32 frame, BaseFloat tot_cost,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ForwardLink	decoder/lattice-biglm-faster-decoder.h	/^    inline ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
ForwardLink	decoder/lattice-biglm-faster-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
GetBestPath	decoder/lattice-biglm-faster-decoder.h	/^  bool GetBestPath(fst::MutableFst<LatticeArc> *ofst, $/;"	f	class:kaldi::LatticeBiglmFasterDecoder
GetCutoff	decoder/lattice-biglm-faster-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
GetLattice	decoder/lattice-biglm-faster-decoder.h	/^  bool GetLattice(fst::MutableFst<CompactLatticeArc> *ofst,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
GetOptions	decoder/lattice-biglm-faster-decoder.h	/^  LatticeBiglmFasterDecoderConfig GetOptions() { return config_; } $/;"	f	class:kaldi::LatticeBiglmFasterDecoder
GetRawLattice	decoder/lattice-biglm-faster-decoder.h	/^  bool GetRawLattice(fst::MutableFst<LatticeArc> *ofst,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
KALDI_DECODER_LATTICE_BIGLM_FASTER_DECODER_H_	decoder/lattice-biglm-faster-decoder.h	22;"	d
Label	decoder/lattice-biglm-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
LatticeBiglmFasterDecoder	decoder/lattice-biglm-faster-decoder.h	/^  LatticeBiglmFasterDecoder($/;"	f	class:kaldi::LatticeBiglmFasterDecoder
LatticeBiglmFasterDecoder	decoder/lattice-biglm-faster-decoder.h	/^class LatticeBiglmFasterDecoder {$/;"	c	namespace:kaldi
LatticeBiglmFasterDecoderConfig	decoder/lattice-biglm-faster-decoder.h	/^typedef LatticeFasterDecoderConfig LatticeBiglmFasterDecoderConfig;$/;"	t	namespace:kaldi
PairId	decoder/lattice-biglm-faster-decoder.h	/^  typedef uint64 PairId;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
PairToLmState	decoder/lattice-biglm-faster-decoder.h	/^  static inline StateId PairToLmState(PairId state_pair) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PairToState	decoder/lattice-biglm-faster-decoder.h	/^  static inline StateId PairToState(PairId state_pair) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PossiblyResizeHash	decoder/lattice-biglm-faster-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ProcessEmitting	decoder/lattice-biglm-faster-decoder.h	/^  void ProcessEmitting(DecodableInterface *decodable, int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ProcessNonemitting	decoder/lattice-biglm-faster-decoder.h	/^  void ProcessNonemitting(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PropagateLm	decoder/lattice-biglm-faster-decoder.h	/^  inline StateId PropagateLm(StateId lm_state,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneActiveTokens	decoder/lattice-biglm-faster-decoder.h	/^  void PruneActiveTokens(int32 cur_frame, BaseFloat delta) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneActiveTokensFinal	decoder/lattice-biglm-faster-decoder.h	/^  void PruneActiveTokensFinal(int32 cur_frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneForwardLinks	decoder/lattice-biglm-faster-decoder.h	/^  void PruneForwardLinks(int32 frame, bool *extra_costs_changed,$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneForwardLinksFinal	decoder/lattice-biglm-faster-decoder.h	/^  void PruneForwardLinksFinal(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
PruneTokensForFrame	decoder/lattice-biglm-faster-decoder.h	/^  void PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
ReachedFinal	decoder/lattice-biglm-faster-decoder.h	/^  bool ReachedFinal() const { return final_active_; }$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
SetOptions	decoder/lattice-biglm-faster-decoder.h	/^  void SetOptions(const LatticeBiglmFasterDecoderConfig &config) { config_ = config; } $/;"	f	class:kaldi::LatticeBiglmFasterDecoder
StateId	decoder/lattice-biglm-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
Token	decoder/lattice-biglm-faster-decoder.h	/^    inline Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::Token
Token	decoder/lattice-biglm-faster-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
TokenList	decoder/lattice-biglm-faster-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
TokenList	decoder/lattice-biglm-faster-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeBiglmFasterDecoder
Weight	decoder/lattice-biglm-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeBiglmFasterDecoder
acoustic_cost	decoder/lattice-biglm-faster-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
active_toks_	decoder/lattice-biglm-faster-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
config_	decoder/lattice-biglm-faster-decoder.h	/^  LatticeBiglmFasterDecoderConfig config_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
extra_cost	decoder/lattice-biglm-faster-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
final_active_	decoder/lattice-biglm-faster-decoder.h	/^  bool final_active_; \/\/ use this to say whether we found active final tokens$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
final_costs_	decoder/lattice-biglm-faster-decoder.h	/^  std::map<Token*, BaseFloat> final_costs_; \/\/ A cache of final-costs$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
fst_	decoder/lattice-biglm-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
graph_cost	decoder/lattice-biglm-faster-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
ilabel	decoder/lattice-biglm-faster-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
kaldi	decoder/lattice-biglm-faster-decoder.h	/^namespace kaldi {$/;"	n
links	decoder/lattice-biglm-faster-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
lm_diff_fst_	decoder/lattice-biglm-faster-decoder.h	/^  fst::DeterministicOnDemandFst<fst::StdArc> *lm_diff_fst_;  $/;"	m	class:kaldi::LatticeBiglmFasterDecoder
must_prune_forward_links	decoder/lattice-biglm-faster-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
must_prune_tokens	decoder/lattice-biglm-faster-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
next	decoder/lattice-biglm-faster-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
next	decoder/lattice-biglm-faster-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
next_tok	decoder/lattice-biglm-faster-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
num_toks_	decoder/lattice-biglm-faster-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
olabel	decoder/lattice-biglm-faster-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::ForwardLink
queue_	decoder/lattice-biglm-faster-decoder.h	/^  std::vector<PairId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
tmp_array_	decoder/lattice-biglm-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
toks	decoder/lattice-biglm-faster-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::TokenList
toks_	decoder/lattice-biglm-faster-decoder.h	/^  HashList<PairId, Token*> toks_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
tot_cost	decoder/lattice-biglm-faster-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeBiglmFasterDecoder::Token
warned_	decoder/lattice-biglm-faster-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeBiglmFasterDecoder
warned_noarc_	decoder/lattice-biglm-faster-decoder.h	/^  bool warned_noarc_;  $/;"	m	class:kaldi::LatticeBiglmFasterDecoder
~LatticeBiglmFasterDecoder	decoder/lattice-biglm-faster-decoder.h	/^  ~LatticeBiglmFasterDecoder() {$/;"	f	class:kaldi::LatticeBiglmFasterDecoder
AdvanceDecoding	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::AdvanceDecoding(DecodableInterface *decodable,$/;"	f	class:kaldi::LatticeFasterDecoder
ClearActiveTokens	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeFasterDecoder
ComputeFinalCosts	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ComputeFinalCosts($/;"	f	class:kaldi::LatticeFasterDecoder
Decode	decoder/lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeFasterDecoder
DeleteElems	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::DeleteElems(Elem *list) {$/;"	f	class:kaldi::LatticeFasterDecoder
FinalRelativeCost	decoder/lattice-faster-decoder.cc	/^BaseFloat LatticeFasterDecoder::FinalRelativeCost() const {$/;"	f	class:kaldi::LatticeFasterDecoder
FinalizeDecoding	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::FinalizeDecoding() {$/;"	f	class:kaldi::LatticeFasterDecoder
FindOrAddToken	decoder/lattice-faster-decoder.cc	/^inline LatticeFasterDecoder::Token *LatticeFasterDecoder::FindOrAddToken($/;"	f	class:kaldi::LatticeFasterDecoder
GetBestPath	decoder/lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetBestPath(Lattice *olat,$/;"	f	class:kaldi::LatticeFasterDecoder
GetCutoff	decoder/lattice-faster-decoder.cc	/^BaseFloat LatticeFasterDecoder::GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::LatticeFasterDecoder
GetLattice	decoder/lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetLattice(CompactLattice *ofst,$/;"	f	class:kaldi::LatticeFasterDecoder
GetRawLattice	decoder/lattice-faster-decoder.cc	/^bool LatticeFasterDecoder::GetRawLattice(Lattice *ofst,$/;"	f	class:kaldi::LatticeFasterDecoder
InitDecoding	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::InitDecoding() {$/;"	f	class:kaldi::LatticeFasterDecoder
LatticeFasterDecoder	decoder/lattice-faster-decoder.cc	/^LatticeFasterDecoder::LatticeFasterDecoder(const LatticeFasterDecoderConfig &config,$/;"	f	class:kaldi::LatticeFasterDecoder
LatticeFasterDecoder	decoder/lattice-faster-decoder.cc	/^LatticeFasterDecoder::LatticeFasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::LatticeFasterDecoder
PossiblyResizeHash	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::LatticeFasterDecoder
ProcessEmitting	decoder/lattice-faster-decoder.cc	/^BaseFloat LatticeFasterDecoder::ProcessEmitting(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeFasterDecoder
ProcessNonemitting	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::ProcessNonemitting(BaseFloat cutoff) {$/;"	f	class:kaldi::LatticeFasterDecoder
PruneActiveTokens	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneActiveTokens(BaseFloat delta) {$/;"	f	class:kaldi::LatticeFasterDecoder
PruneForwardLinks	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneForwardLinks($/;"	f	class:kaldi::LatticeFasterDecoder
PruneForwardLinksFinal	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneForwardLinksFinal() {$/;"	f	class:kaldi::LatticeFasterDecoder
PruneTokensForFrame	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::PruneTokensForFrame(int32 frame_plus_one) {$/;"	f	class:kaldi::LatticeFasterDecoder
TopSortTokens	decoder/lattice-faster-decoder.cc	/^void LatticeFasterDecoder::TopSortTokens(Token *tok_list,$/;"	f	class:kaldi::LatticeFasterDecoder
kaldi	decoder/lattice-faster-decoder.cc	/^namespace kaldi {$/;"	n	file:
~LatticeFasterDecoder	decoder/lattice-faster-decoder.cc	/^LatticeFasterDecoder::~LatticeFasterDecoder() {$/;"	f	class:kaldi::LatticeFasterDecoder
Arc	decoder/lattice-faster-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeFasterDecoder
Check	decoder/lattice-faster-decoder.h	/^  void Check() const {$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
DeleteForwardLinks	decoder/lattice-faster-decoder.h	/^    inline void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeFasterDecoder::Token
Elem	decoder/lattice-faster-decoder.h	/^  typedef HashList<StateId, Token*>::Elem Elem;$/;"	t	class:kaldi::LatticeFasterDecoder
ForwardLink	decoder/lattice-faster-decoder.h	/^    inline ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeFasterDecoder::ForwardLink
ForwardLink	decoder/lattice-faster-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeFasterDecoder
GetOptions	decoder/lattice-faster-decoder.h	/^  const LatticeFasterDecoderConfig &GetOptions() const {$/;"	f	class:kaldi::LatticeFasterDecoder
KALDI_DECODER_LATTICE_FASTER_DECODER_H_	decoder/lattice-faster-decoder.h	27;"	d
Label	decoder/lattice-faster-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeFasterDecoder
LatticeFasterDecoder	decoder/lattice-faster-decoder.h	/^class LatticeFasterDecoder {$/;"	c	namespace:kaldi
LatticeFasterDecoderConfig	decoder/lattice-faster-decoder.h	/^  LatticeFasterDecoderConfig(): beam(16.0),$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
LatticeFasterDecoderConfig	decoder/lattice-faster-decoder.h	/^struct LatticeFasterDecoderConfig {$/;"	s	namespace:kaldi
NumFramesDecoded	decoder/lattice-faster-decoder.h	/^  inline int32 NumFramesDecoded() const { return active_toks_.size() - 1; }$/;"	f	class:kaldi::LatticeFasterDecoder
ReachedFinal	decoder/lattice-faster-decoder.h	/^  bool ReachedFinal() const {$/;"	f	class:kaldi::LatticeFasterDecoder
Register	decoder/lattice-faster-decoder.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::LatticeFasterDecoderConfig
SetOptions	decoder/lattice-faster-decoder.h	/^  void SetOptions(const LatticeFasterDecoderConfig &config) {$/;"	f	class:kaldi::LatticeFasterDecoder
StateId	decoder/lattice-faster-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeFasterDecoder
Token	decoder/lattice-faster-decoder.h	/^    inline Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeFasterDecoder::Token
Token	decoder/lattice-faster-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeFasterDecoder
TokenList	decoder/lattice-faster-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeFasterDecoder::TokenList
TokenList	decoder/lattice-faster-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeFasterDecoder
Weight	decoder/lattice-faster-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeFasterDecoder
acoustic_cost	decoder/lattice-faster-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
active_toks_	decoder/lattice-faster-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeFasterDecoder
beam	decoder/lattice-faster-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
beam_delta	decoder/lattice-faster-decoder.h	/^  BaseFloat beam_delta; \/\/ has nothing to do with beam_ratio$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
config_	decoder/lattice-faster-decoder.h	/^  LatticeFasterDecoderConfig config_;$/;"	m	class:kaldi::LatticeFasterDecoder
cost_offsets_	decoder/lattice-faster-decoder.h	/^  std::vector<BaseFloat> cost_offsets_; \/\/ This contains, for each$/;"	m	class:kaldi::LatticeFasterDecoder
decoding_finalized_	decoder/lattice-faster-decoder.h	/^  bool decoding_finalized_;$/;"	m	class:kaldi::LatticeFasterDecoder
delete_fst_	decoder/lattice-faster-decoder.h	/^  bool delete_fst_;$/;"	m	class:kaldi::LatticeFasterDecoder
det_opts	decoder/lattice-faster-decoder.h	/^  fst::DeterminizeLatticePhonePrunedOptions det_opts;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
determinize_lattice	decoder/lattice-faster-decoder.h	/^  bool determinize_lattice; \/\/ not inspected by this class... used in$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
extra_cost	decoder/lattice-faster-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
final_best_cost_	decoder/lattice-faster-decoder.h	/^  BaseFloat final_best_cost_;$/;"	m	class:kaldi::LatticeFasterDecoder
final_costs_	decoder/lattice-faster-decoder.h	/^  unordered_map<Token*, BaseFloat> final_costs_;$/;"	m	class:kaldi::LatticeFasterDecoder
final_relative_cost_	decoder/lattice-faster-decoder.h	/^  BaseFloat final_relative_cost_;$/;"	m	class:kaldi::LatticeFasterDecoder
fst_	decoder/lattice-faster-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeFasterDecoder
graph_cost	decoder/lattice-faster-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
hash_ratio	decoder/lattice-faster-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
ilabel	decoder/lattice-faster-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
kaldi	decoder/lattice-faster-decoder.h	/^namespace kaldi {$/;"	n
lattice_beam	decoder/lattice-faster-decoder.h	/^  BaseFloat lattice_beam;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
links	decoder/lattice-faster-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
max_active	decoder/lattice-faster-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
min_active	decoder/lattice-faster-decoder.h	/^  int32 min_active;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
must_prune_forward_links	decoder/lattice-faster-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
must_prune_tokens	decoder/lattice-faster-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
next	decoder/lattice-faster-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
next	decoder/lattice-faster-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
next_tok	decoder/lattice-faster-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
num_toks_	decoder/lattice-faster-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeFasterDecoder
olabel	decoder/lattice-faster-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeFasterDecoder::ForwardLink
prune_interval	decoder/lattice-faster-decoder.h	/^  int32 prune_interval;$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
prune_scale	decoder/lattice-faster-decoder.h	/^  BaseFloat prune_scale;   \/\/ Note: we don't make this configurable on the command line,$/;"	m	struct:kaldi::LatticeFasterDecoderConfig
queue_	decoder/lattice-faster-decoder.h	/^  std::vector<StateId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::LatticeFasterDecoder
tmp_array_	decoder/lattice-faster-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::LatticeFasterDecoder
toks	decoder/lattice-faster-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeFasterDecoder::TokenList
toks_	decoder/lattice-faster-decoder.h	/^  HashList<StateId, Token*> toks_;$/;"	m	class:kaldi::LatticeFasterDecoder
tot_cost	decoder/lattice-faster-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeFasterDecoder::Token
warned_	decoder/lattice-faster-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeFasterDecoder
AdvanceDecoding	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::AdvanceDecoding(DecodableInterface *decodable,$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
BestPathEnd	decoder/lattice-faster-online-decoder.cc	/^LatticeFasterOnlineDecoder::BestPathIterator LatticeFasterOnlineDecoder::BestPathEnd($/;"	f	class:kaldi::LatticeFasterOnlineDecoder
ClearActiveTokens	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
ComputeFinalCosts	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::ComputeFinalCosts($/;"	f	class:kaldi::LatticeFasterOnlineDecoder
Decode	decoder/lattice-faster-online-decoder.cc	/^bool LatticeFasterOnlineDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
DeleteElems	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::DeleteElems(Elem *list) {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
FinalRelativeCost	decoder/lattice-faster-online-decoder.cc	/^BaseFloat LatticeFasterOnlineDecoder::FinalRelativeCost() const {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
FinalizeDecoding	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::FinalizeDecoding() {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
FindOrAddToken	decoder/lattice-faster-online-decoder.cc	/^inline LatticeFasterOnlineDecoder::Token *LatticeFasterOnlineDecoder::FindOrAddToken($/;"	f	class:kaldi::LatticeFasterOnlineDecoder
GetBestPath	decoder/lattice-faster-online-decoder.cc	/^bool LatticeFasterOnlineDecoder::GetBestPath(Lattice *olat,$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
GetCutoff	decoder/lattice-faster-online-decoder.cc	/^BaseFloat LatticeFasterOnlineDecoder::GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
GetRawLattice	decoder/lattice-faster-online-decoder.cc	/^bool LatticeFasterOnlineDecoder::GetRawLattice(Lattice *ofst,$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
GetRawLatticePruned	decoder/lattice-faster-online-decoder.cc	/^bool LatticeFasterOnlineDecoder::GetRawLatticePruned($/;"	f	class:kaldi::LatticeFasterOnlineDecoder
InitDecoding	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::InitDecoding() {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
LatticeFasterOnlineDecoder	decoder/lattice-faster-online-decoder.cc	/^LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder($/;"	f	class:kaldi::LatticeFasterOnlineDecoder
LatticeFasterOnlineDecoder	decoder/lattice-faster-online-decoder.cc	/^LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder(const LatticeFasterDecoderConfig &config,$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
PossiblyResizeHash	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
ProcessEmitting	decoder/lattice-faster-online-decoder.cc	/^BaseFloat LatticeFasterOnlineDecoder::ProcessEmitting($/;"	f	class:kaldi::LatticeFasterOnlineDecoder
ProcessNonemitting	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::ProcessNonemitting(BaseFloat cutoff) {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
PruneActiveTokens	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::PruneActiveTokens(BaseFloat delta) {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
PruneForwardLinks	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::PruneForwardLinks($/;"	f	class:kaldi::LatticeFasterOnlineDecoder
PruneForwardLinksFinal	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::PruneForwardLinksFinal() {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
PruneTokensForFrame	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::PruneTokensForFrame(int32 frame_plus_one) {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
TestGetBestPath	decoder/lattice-faster-online-decoder.cc	/^bool LatticeFasterOnlineDecoder::TestGetBestPath(bool use_final_probs) const {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
TopSortTokens	decoder/lattice-faster-online-decoder.cc	/^void LatticeFasterOnlineDecoder::TopSortTokens(Token *tok_list,$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
TraceBackBestPath	decoder/lattice-faster-online-decoder.cc	/^LatticeFasterOnlineDecoder::BestPathIterator LatticeFasterOnlineDecoder::TraceBackBestPath($/;"	f	class:kaldi::LatticeFasterOnlineDecoder
kaldi	decoder/lattice-faster-online-decoder.cc	/^namespace kaldi {$/;"	n	file:
~LatticeFasterOnlineDecoder	decoder/lattice-faster-online-decoder.cc	/^LatticeFasterOnlineDecoder::~LatticeFasterOnlineDecoder() {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
Arc	decoder/lattice-faster-online-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeFasterOnlineDecoder
BestPathIterator	decoder/lattice-faster-online-decoder.h	/^    BestPathIterator(void *t, int32 f): tok(t), frame(f) { }$/;"	f	struct:kaldi::LatticeFasterOnlineDecoder::BestPathIterator
BestPathIterator	decoder/lattice-faster-online-decoder.h	/^  struct BestPathIterator {$/;"	s	class:kaldi::LatticeFasterOnlineDecoder
DeleteForwardLinks	decoder/lattice-faster-online-decoder.h	/^    inline void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeFasterOnlineDecoder::Token
Done	decoder/lattice-faster-online-decoder.h	/^    bool Done() { return tok == NULL; }$/;"	f	struct:kaldi::LatticeFasterOnlineDecoder::BestPathIterator
Elem	decoder/lattice-faster-online-decoder.h	/^  typedef HashList<StateId, Token*>::Elem Elem;$/;"	t	class:kaldi::LatticeFasterOnlineDecoder
ForwardLink	decoder/lattice-faster-online-decoder.h	/^    inline ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeFasterOnlineDecoder::ForwardLink
ForwardLink	decoder/lattice-faster-online-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeFasterOnlineDecoder
GetOptions	decoder/lattice-faster-online-decoder.h	/^  const LatticeFasterDecoderConfig &GetOptions() const {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
KALDI_DECODER_LATTICE_FASTER_ONLINE_DECODER_H_	decoder/lattice-faster-online-decoder.h	27;"	d
Label	decoder/lattice-faster-online-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeFasterOnlineDecoder
LatticeFasterOnlineDecoder	decoder/lattice-faster-online-decoder.h	/^class LatticeFasterOnlineDecoder {$/;"	c	namespace:kaldi
NumFramesDecoded	decoder/lattice-faster-online-decoder.h	/^  inline int32 NumFramesDecoded() const { return active_toks_.size() - 1; }$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
ReachedFinal	decoder/lattice-faster-online-decoder.h	/^  bool ReachedFinal() const {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
SetOptions	decoder/lattice-faster-online-decoder.h	/^  void SetOptions(const LatticeFasterDecoderConfig &config) {$/;"	f	class:kaldi::LatticeFasterOnlineDecoder
StateId	decoder/lattice-faster-online-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeFasterOnlineDecoder
Token	decoder/lattice-faster-online-decoder.h	/^    inline Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeFasterOnlineDecoder::Token
Token	decoder/lattice-faster-online-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeFasterOnlineDecoder
TokenList	decoder/lattice-faster-online-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeFasterOnlineDecoder::TokenList
TokenList	decoder/lattice-faster-online-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeFasterOnlineDecoder
Weight	decoder/lattice-faster-online-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeFasterOnlineDecoder
acoustic_cost	decoder/lattice-faster-online-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::ForwardLink
active_toks_	decoder/lattice-faster-online-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
backpointer	decoder/lattice-faster-online-decoder.h	/^    Token *backpointer; \/\/ best preceding Token (could be on this frame or a$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::Token
config_	decoder/lattice-faster-online-decoder.h	/^  LatticeFasterDecoderConfig config_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
cost_offsets_	decoder/lattice-faster-online-decoder.h	/^  std::vector<BaseFloat> cost_offsets_; \/\/ This contains, for each$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
decoding_finalized_	decoder/lattice-faster-online-decoder.h	/^  bool decoding_finalized_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
delete_fst_	decoder/lattice-faster-online-decoder.h	/^  bool delete_fst_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
extra_cost	decoder/lattice-faster-online-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::Token
final_best_cost_	decoder/lattice-faster-online-decoder.h	/^  BaseFloat final_best_cost_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
final_costs_	decoder/lattice-faster-online-decoder.h	/^  unordered_map<Token*, BaseFloat> final_costs_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
final_relative_cost_	decoder/lattice-faster-online-decoder.h	/^  BaseFloat final_relative_cost_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
frame	decoder/lattice-faster-online-decoder.h	/^    int32 frame;$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::BestPathIterator
fst_	decoder/lattice-faster-online-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
graph_cost	decoder/lattice-faster-online-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::ForwardLink
ilabel	decoder/lattice-faster-online-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::ForwardLink
kaldi	decoder/lattice-faster-online-decoder.h	/^namespace kaldi {$/;"	n
links	decoder/lattice-faster-online-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::Token
must_prune_forward_links	decoder/lattice-faster-online-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::TokenList
must_prune_tokens	decoder/lattice-faster-online-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::TokenList
next	decoder/lattice-faster-online-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::ForwardLink
next	decoder/lattice-faster-online-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::Token
next_tok	decoder/lattice-faster-online-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::ForwardLink
num_toks_	decoder/lattice-faster-online-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
olabel	decoder/lattice-faster-online-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::ForwardLink
queue_	decoder/lattice-faster-online-decoder.h	/^  std::vector<StateId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
tmp_array_	decoder/lattice-faster-online-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
tok	decoder/lattice-faster-online-decoder.h	/^    void *tok;$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::BestPathIterator
toks	decoder/lattice-faster-online-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::TokenList
toks_	decoder/lattice-faster-online-decoder.h	/^  HashList<StateId, Token*> toks_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
tot_cost	decoder/lattice-faster-online-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeFasterOnlineDecoder::Token
warned_	decoder/lattice-faster-online-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeFasterOnlineDecoder
ClearActiveTokens	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeSimpleDecoder
ComputeFinalCosts	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ComputeFinalCosts($/;"	f	class:kaldi::LatticeSimpleDecoder
Decode	decoder/lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeSimpleDecoder
FinalRelativeCost	decoder/lattice-simple-decoder.cc	/^BaseFloat LatticeSimpleDecoder::FinalRelativeCost() const {$/;"	f	class:kaldi::LatticeSimpleDecoder
FinalizeDecoding	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::FinalizeDecoding() {$/;"	f	class:kaldi::LatticeSimpleDecoder
FindOrAddToken	decoder/lattice-simple-decoder.cc	/^inline LatticeSimpleDecoder::Token *LatticeSimpleDecoder::FindOrAddToken($/;"	f	class:kaldi::LatticeSimpleDecoder
GetBestPath	decoder/lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetBestPath(Lattice *ofst,$/;"	f	class:kaldi::LatticeSimpleDecoder
GetLattice	decoder/lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetLattice($/;"	f	class:kaldi::LatticeSimpleDecoder
GetRawLattice	decoder/lattice-simple-decoder.cc	/^bool LatticeSimpleDecoder::GetRawLattice(Lattice *ofst,$/;"	f	class:kaldi::LatticeSimpleDecoder
InitDecoding	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::InitDecoding() {$/;"	f	class:kaldi::LatticeSimpleDecoder
ProcessEmitting	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ProcessEmitting(DecodableInterface *decodable) {$/;"	f	class:kaldi::LatticeSimpleDecoder
ProcessNonemitting	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::ProcessNonemitting() {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneActiveTokens	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneActiveTokens(BaseFloat delta) {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneCurrentTokens	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneCurrentTokens(BaseFloat beam, unordered_map<StateId, Token*> *toks) {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneForwardLinks	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneForwardLinks($/;"	f	class:kaldi::LatticeSimpleDecoder
PruneForwardLinksFinal	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneForwardLinksFinal() {$/;"	f	class:kaldi::LatticeSimpleDecoder
PruneTokensForFrame	decoder/lattice-simple-decoder.cc	/^void LatticeSimpleDecoder::PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeSimpleDecoder
kaldi	decoder/lattice-simple-decoder.cc	/^namespace kaldi {$/;"	n	file:
Arc	decoder/lattice-simple-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeSimpleDecoder
Check	decoder/lattice-simple-decoder.h	/^  void Check() const {$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
DeleteForwardLinks	decoder/lattice-simple-decoder.h	/^    void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
ForwardLink	decoder/lattice-simple-decoder.h	/^    ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeSimpleDecoder::ForwardLink
ForwardLink	decoder/lattice-simple-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeSimpleDecoder
GetOptions	decoder/lattice-simple-decoder.h	/^  const LatticeSimpleDecoderConfig &GetOptions() const {$/;"	f	class:kaldi::LatticeSimpleDecoder
KALDI_DECODER_LATTICE_SIMPLE_DECODER_H_	decoder/lattice-simple-decoder.h	23;"	d
Label	decoder/lattice-simple-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeSimpleDecoder
LatticeSimpleDecoder	decoder/lattice-simple-decoder.h	/^  LatticeSimpleDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::LatticeSimpleDecoder
LatticeSimpleDecoder	decoder/lattice-simple-decoder.h	/^class LatticeSimpleDecoder {$/;"	c	namespace:kaldi
LatticeSimpleDecoderConfig	decoder/lattice-simple-decoder.h	/^  LatticeSimpleDecoderConfig(): beam(16.0),$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
LatticeSimpleDecoderConfig	decoder/lattice-simple-decoder.h	/^struct LatticeSimpleDecoderConfig {$/;"	s	namespace:kaldi
NumFramesDecoded	decoder/lattice-simple-decoder.h	/^  inline int32 NumFramesDecoded() const { return active_toks_.size() - 1; }  $/;"	f	class:kaldi::LatticeSimpleDecoder
ReachedFinal	decoder/lattice-simple-decoder.h	/^  bool ReachedFinal() const {$/;"	f	class:kaldi::LatticeSimpleDecoder
Register	decoder/lattice-simple-decoder.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::LatticeSimpleDecoderConfig
StateId	decoder/lattice-simple-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeSimpleDecoder
Token	decoder/lattice-simple-decoder.h	/^    Token() {}$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
Token	decoder/lattice-simple-decoder.h	/^    Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeSimpleDecoder::Token
Token	decoder/lattice-simple-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeSimpleDecoder
TokenList	decoder/lattice-simple-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeSimpleDecoder::TokenList
TokenList	decoder/lattice-simple-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeSimpleDecoder
Weight	decoder/lattice-simple-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeSimpleDecoder
acoustic_cost	decoder/lattice-simple-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
active_toks_	decoder/lattice-simple-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeSimpleDecoder
beam	decoder/lattice-simple-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
beam_ratio	decoder/lattice-simple-decoder.h	/^  BaseFloat beam_ratio;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
config_	decoder/lattice-simple-decoder.h	/^  LatticeSimpleDecoderConfig config_;$/;"	m	class:kaldi::LatticeSimpleDecoder
cur_toks_	decoder/lattice-simple-decoder.h	/^  unordered_map<StateId, Token*> cur_toks_;$/;"	m	class:kaldi::LatticeSimpleDecoder
decoding_finalized_	decoder/lattice-simple-decoder.h	/^  bool decoding_finalized_;$/;"	m	class:kaldi::LatticeSimpleDecoder
det_opts	decoder/lattice-simple-decoder.h	/^  fst::DeterminizeLatticePhonePrunedOptions det_opts;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
determinize_lattice	decoder/lattice-simple-decoder.h	/^  bool determinize_lattice; \/\/ not inspected by this class... used in$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
extra_cost	decoder/lattice-simple-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
final_best_cost_	decoder/lattice-simple-decoder.h	/^  BaseFloat final_best_cost_;  $/;"	m	class:kaldi::LatticeSimpleDecoder
final_costs_	decoder/lattice-simple-decoder.h	/^  unordered_map<Token*, BaseFloat> final_costs_;$/;"	m	class:kaldi::LatticeSimpleDecoder
final_relative_cost_	decoder/lattice-simple-decoder.h	/^  BaseFloat final_relative_cost_;$/;"	m	class:kaldi::LatticeSimpleDecoder
fst_	decoder/lattice-simple-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeSimpleDecoder
graph_cost	decoder/lattice-simple-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
ilabel	decoder/lattice-simple-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
kaldi	decoder/lattice-simple-decoder.h	/^namespace kaldi {$/;"	n
lattice_beam	decoder/lattice-simple-decoder.h	/^  BaseFloat lattice_beam;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
links	decoder/lattice-simple-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
must_prune_forward_links	decoder/lattice-simple-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
must_prune_tokens	decoder/lattice-simple-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
next	decoder/lattice-simple-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
next	decoder/lattice-simple-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
next_tok	decoder/lattice-simple-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
num_toks_	decoder/lattice-simple-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeSimpleDecoder
olabel	decoder/lattice-simple-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeSimpleDecoder::ForwardLink
prev_toks_	decoder/lattice-simple-decoder.h	/^  unordered_map<StateId, Token*> prev_toks_;$/;"	m	class:kaldi::LatticeSimpleDecoder
prune_interval	decoder/lattice-simple-decoder.h	/^  int32 prune_interval;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
prune_lattice	decoder/lattice-simple-decoder.h	/^  bool prune_lattice;$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
prune_scale	decoder/lattice-simple-decoder.h	/^  BaseFloat prune_scale;   \/\/ Note: we don't make this configurable on the command line,$/;"	m	struct:kaldi::LatticeSimpleDecoderConfig
toks	decoder/lattice-simple-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeSimpleDecoder::TokenList
tot_cost	decoder/lattice-simple-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeSimpleDecoder::Token
warned_	decoder/lattice-simple-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeSimpleDecoder
~LatticeSimpleDecoder	decoder/lattice-simple-decoder.h	/^  ~LatticeSimpleDecoder() { ClearActiveTokens(); }$/;"	f	class:kaldi::LatticeSimpleDecoder
ClearActiveTokens	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::ClearActiveTokens() { \/\/ a cleanup routine, at utt end\/begin$/;"	f	class:kaldi::LatticeTrackingDecoder
ClearToks	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::ClearToks(Elem *list) {$/;"	f	class:kaldi::LatticeTrackingDecoder
Decode	decoder/lattice-tracking-decoder.cc	/^bool LatticeTrackingDecoder::Decode(DecodableInterface *decodable,$/;"	f	class:kaldi::LatticeTrackingDecoder
DecodeUtteranceLatticeTracking	decoder/lattice-tracking-decoder.cc	/^bool DecodeUtteranceLatticeTracking($/;"	f	namespace:kaldi
FindOrAddToken	decoder/lattice-tracking-decoder.cc	/^inline LatticeTrackingDecoder::Token *LatticeTrackingDecoder::FindOrAddToken($/;"	f	class:kaldi::LatticeTrackingDecoder
GetBestPath	decoder/lattice-tracking-decoder.cc	/^bool LatticeTrackingDecoder::GetBestPath(fst::MutableFst<LatticeArc> *ofst,$/;"	f	class:kaldi::LatticeTrackingDecoder
GetCutoff	decoder/lattice-tracking-decoder.cc	/^BaseFloat LatticeTrackingDecoder::GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::LatticeTrackingDecoder
GetLattice	decoder/lattice-tracking-decoder.cc	/^bool LatticeTrackingDecoder::GetLattice(fst::MutableFst<CompactLatticeArc> *ofst,$/;"	f	class:kaldi::LatticeTrackingDecoder
GetRawLattice	decoder/lattice-tracking-decoder.cc	/^bool LatticeTrackingDecoder::GetRawLattice(fst::MutableFst<LatticeArc> *ofst,$/;"	f	class:kaldi::LatticeTrackingDecoder
LatticeTrackingDecoder	decoder/lattice-tracking-decoder.cc	/^LatticeTrackingDecoder::LatticeTrackingDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::LatticeTrackingDecoder
PossiblyResizeHash	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::LatticeTrackingDecoder
ProcessEmitting	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::ProcessEmitting(DecodableInterface *decodable, int32 frame) {$/;"	f	class:kaldi::LatticeTrackingDecoder
ProcessNonemitting	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::ProcessNonemitting(int32 frame) {$/;"	f	class:kaldi::LatticeTrackingDecoder
PruneActiveTokens	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::PruneActiveTokens(int32 cur_frame, BaseFloat delta) {$/;"	f	class:kaldi::LatticeTrackingDecoder
PruneActiveTokensFinal	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::PruneActiveTokensFinal(int32 cur_frame) {$/;"	f	class:kaldi::LatticeTrackingDecoder
PruneForwardLinks	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::PruneForwardLinks($/;"	f	class:kaldi::LatticeTrackingDecoder
PruneForwardLinksFinal	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::PruneForwardLinksFinal(int32 frame) {$/;"	f	class:kaldi::LatticeTrackingDecoder
PruneTokensForFrame	decoder/lattice-tracking-decoder.cc	/^void LatticeTrackingDecoder::PruneTokensForFrame(int32 frame) {$/;"	f	class:kaldi::LatticeTrackingDecoder
kaldi	decoder/lattice-tracking-decoder.cc	/^namespace kaldi {$/;"	n	file:
Arc	decoder/lattice-tracking-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::LatticeTrackingDecoder
Check	decoder/lattice-tracking-decoder.h	/^  void Check() const {$/;"	f	struct:kaldi::LatticeTrackingDecoderConfig
DeleteForwardLinks	decoder/lattice-tracking-decoder.h	/^    inline void DeleteForwardLinks() {$/;"	f	struct:kaldi::LatticeTrackingDecoder::Token
Elem	decoder/lattice-tracking-decoder.h	/^  typedef HashList<StateId, Token*>::Elem Elem;$/;"	t	class:kaldi::LatticeTrackingDecoder
ForwardLink	decoder/lattice-tracking-decoder.h	/^    inline ForwardLink(Token *next_tok, Label ilabel, Label olabel,$/;"	f	struct:kaldi::LatticeTrackingDecoder::ForwardLink
ForwardLink	decoder/lattice-tracking-decoder.h	/^  struct ForwardLink {$/;"	s	class:kaldi::LatticeTrackingDecoder
GetOptions	decoder/lattice-tracking-decoder.h	/^  LatticeTrackingDecoderConfig GetOptions() {$/;"	f	class:kaldi::LatticeTrackingDecoder
KALDI_DECODER_LATTICE_TRACKING_DECODER_H_	decoder/lattice-tracking-decoder.h	23;"	d
Label	decoder/lattice-tracking-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeTrackingDecoder
LatticeTrackingDecoder	decoder/lattice-tracking-decoder.h	/^class LatticeTrackingDecoder {$/;"	c	namespace:kaldi
LatticeTrackingDecoderConfig	decoder/lattice-tracking-decoder.h	/^  LatticeTrackingDecoderConfig(): beam(16.0),$/;"	f	struct:kaldi::LatticeTrackingDecoderConfig
LatticeTrackingDecoderConfig	decoder/lattice-tracking-decoder.h	/^struct LatticeTrackingDecoderConfig {$/;"	s	namespace:kaldi
ReachedFinal	decoder/lattice-tracking-decoder.h	/^  bool ReachedFinal() const { return final_active_; }$/;"	f	class:kaldi::LatticeTrackingDecoder
Register	decoder/lattice-tracking-decoder.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::LatticeTrackingDecoderConfig
SetOptions	decoder/lattice-tracking-decoder.h	/^  void SetOptions(const LatticeTrackingDecoderConfig &config) {$/;"	f	class:kaldi::LatticeTrackingDecoder
StateId	decoder/lattice-tracking-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeTrackingDecoder
Token	decoder/lattice-tracking-decoder.h	/^    inline Token(BaseFloat tot_cost, BaseFloat extra_cost, ForwardLink *links,$/;"	f	struct:kaldi::LatticeTrackingDecoder::Token
Token	decoder/lattice-tracking-decoder.h	/^  struct Token {$/;"	s	class:kaldi::LatticeTrackingDecoder
TokenList	decoder/lattice-tracking-decoder.h	/^    TokenList(): toks(NULL), must_prune_forward_links(true),$/;"	f	struct:kaldi::LatticeTrackingDecoder::TokenList
TokenList	decoder/lattice-tracking-decoder.h	/^  struct TokenList {$/;"	s	class:kaldi::LatticeTrackingDecoder
Weight	decoder/lattice-tracking-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::LatticeTrackingDecoder
acoustic_cost	decoder/lattice-tracking-decoder.h	/^    BaseFloat acoustic_cost; \/\/ acoustic cost (pre-scaled) of traversing link$/;"	m	struct:kaldi::LatticeTrackingDecoder::ForwardLink
active_toks_	decoder/lattice-tracking-decoder.h	/^  std::vector<TokenList> active_toks_; \/\/ Lists of tokens, indexed by$/;"	m	class:kaldi::LatticeTrackingDecoder
arc_graph_	decoder/lattice-tracking-decoder.h	/^  const fst::StdVectorFst *arc_graph_; \/\/ graph arc lattice from first pass$/;"	m	class:kaldi::LatticeTrackingDecoder
beam	decoder/lattice-tracking-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
beam_delta	decoder/lattice-tracking-decoder.h	/^  BaseFloat beam_delta; \/\/ has nothing to do with beam_ratio$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
config_	decoder/lattice-tracking-decoder.h	/^  LatticeTrackingDecoderConfig config_;$/;"	m	class:kaldi::LatticeTrackingDecoder
cost_offsets_	decoder/lattice-tracking-decoder.h	/^  std::vector<BaseFloat> cost_offsets_; \/\/ This contains, for each$/;"	m	class:kaldi::LatticeTrackingDecoder
det_opts	decoder/lattice-tracking-decoder.h	/^  fst::DeterminizeLatticePhonePrunedOptions det_opts;$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
determinize_lattice	decoder/lattice-tracking-decoder.h	/^  bool determinize_lattice; \/\/ not inspected by this class... used in$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
extra_beam	decoder/lattice-tracking-decoder.h	/^  BaseFloat extra_beam; \/\/ added to beam of tracked tokens from first pass$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
extra_cost	decoder/lattice-tracking-decoder.h	/^    BaseFloat extra_cost; \/\/ >= 0.  After calling PruneForwardLinks, this equals$/;"	m	struct:kaldi::LatticeTrackingDecoder::Token
final_active_	decoder/lattice-tracking-decoder.h	/^  bool final_active_; \/\/ use this to say whether we found active final tokens$/;"	m	class:kaldi::LatticeTrackingDecoder
final_costs_	decoder/lattice-tracking-decoder.h	/^  std::map<Token*, BaseFloat> final_costs_; \/\/ A cache of final-costs$/;"	m	class:kaldi::LatticeTrackingDecoder
fst_	decoder/lattice-tracking-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::LatticeTrackingDecoder
graph_cost	decoder/lattice-tracking-decoder.h	/^    BaseFloat graph_cost; \/\/ graph cost of traversing link (contains LM, etc.)$/;"	m	struct:kaldi::LatticeTrackingDecoder::ForwardLink
hash_ratio	decoder/lattice-tracking-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
ilabel	decoder/lattice-tracking-decoder.h	/^    Label ilabel; \/\/ ilabel on link.$/;"	m	struct:kaldi::LatticeTrackingDecoder::ForwardLink
kaldi	decoder/lattice-tracking-decoder.h	/^namespace kaldi {$/;"	n
lat_state	decoder/lattice-tracking-decoder.h	/^    StateId lat_state; \/\/ current state in graph arc lattice from first pass decoding$/;"	m	struct:kaldi::LatticeTrackingDecoder::Token
lattice_beam	decoder/lattice-tracking-decoder.h	/^  BaseFloat lattice_beam;$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
links	decoder/lattice-tracking-decoder.h	/^    ForwardLink *links; \/\/ Head of singly linked list of ForwardLinks$/;"	m	struct:kaldi::LatticeTrackingDecoder::Token
max_active	decoder/lattice-tracking-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
max_beam	decoder/lattice-tracking-decoder.h	/^  BaseFloat max_beam; \/\/ maximum beam (in case tracked tokens go too far from beam)$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
must_prune_forward_links	decoder/lattice-tracking-decoder.h	/^    bool must_prune_forward_links;$/;"	m	struct:kaldi::LatticeTrackingDecoder::TokenList
must_prune_tokens	decoder/lattice-tracking-decoder.h	/^    bool must_prune_tokens;$/;"	m	struct:kaldi::LatticeTrackingDecoder::TokenList
next	decoder/lattice-tracking-decoder.h	/^    ForwardLink *next; \/\/ next in singly-linked list of forward links from a$/;"	m	struct:kaldi::LatticeTrackingDecoder::ForwardLink
next	decoder/lattice-tracking-decoder.h	/^    Token *next; \/\/ Next in list of tokens for this frame.$/;"	m	struct:kaldi::LatticeTrackingDecoder::Token
next_tok	decoder/lattice-tracking-decoder.h	/^    Token *next_tok; \/\/ the next token [or NULL if represents final-state]$/;"	m	struct:kaldi::LatticeTrackingDecoder::ForwardLink
num_toks_	decoder/lattice-tracking-decoder.h	/^  int32 num_toks_; \/\/ current total #toks allocated...$/;"	m	class:kaldi::LatticeTrackingDecoder
olabel	decoder/lattice-tracking-decoder.h	/^    Label olabel; \/\/ olabel on link.$/;"	m	struct:kaldi::LatticeTrackingDecoder::ForwardLink
prune_interval	decoder/lattice-tracking-decoder.h	/^  int32 prune_interval;$/;"	m	struct:kaldi::LatticeTrackingDecoderConfig
queue_	decoder/lattice-tracking-decoder.h	/^  std::vector<StateId> queue_;  \/\/ temp variable used in ProcessNonemitting,$/;"	m	class:kaldi::LatticeTrackingDecoder
tmp_array_	decoder/lattice-tracking-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::LatticeTrackingDecoder
toks	decoder/lattice-tracking-decoder.h	/^    Token *toks;$/;"	m	struct:kaldi::LatticeTrackingDecoder::TokenList
toks_	decoder/lattice-tracking-decoder.h	/^  HashList<StateId, Token*> toks_;$/;"	m	class:kaldi::LatticeTrackingDecoder
tot_cost	decoder/lattice-tracking-decoder.h	/^    BaseFloat tot_cost; \/\/ would equal weight.Value()... cost up to this point.$/;"	m	struct:kaldi::LatticeTrackingDecoder::Token
warned_	decoder/lattice-tracking-decoder.h	/^  bool warned_;$/;"	m	class:kaldi::LatticeTrackingDecoder
~LatticeTrackingDecoder	decoder/lattice-tracking-decoder.h	/^  ~LatticeTrackingDecoder() { ClearActiveTokens(); }$/;"	f	class:kaldi::LatticeTrackingDecoder
Advance	decoder/nbest-decoder.h	/^    inline Token* Advance(Token *source, Arc &arc, int32 frame,$/;"	f	class:kaldi::NBestDecoder::TokenStore
Arc	decoder/nbest-decoder.h	/^  typedef fst::StdArc Arc;$/;"	t	class:kaldi::NBestDecoder
Clear	decoder/nbest-decoder.h	/^    void Clear() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
ClearToks	decoder/nbest-decoder.h	/^  void ClearToks(Elem *list) {$/;"	f	class:kaldi::NBestDecoder
Combine	decoder/nbest-decoder.h	/^    inline Token* Combine(Token *tok1, Token *tok2) { \/\/ Viterbi version$/;"	f	class:kaldi::NBestDecoder::TokenStore
CombineN	decoder/nbest-decoder.h	/^    inline bool CombineN(Elem *head, Token *new_tok) { \/\/ n-best version$/;"	f	class:kaldi::NBestDecoder::TokenStore
CreateSeq	decoder/nbest-decoder.h	/^    inline SeqToken *CreateSeq(Label input, SeqToken *prev) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
CreateTok	decoder/nbest-decoder.h	/^    inline Token *CreateTok(Label output, Token *prev) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
Decode	decoder/nbest-decoder.h	/^  void Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::NBestDecoder
DeleteSeq	decoder/nbest-decoder.h	/^    inline void DeleteSeq(SeqToken *seq) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
DeleteTok	decoder/nbest-decoder.h	/^    inline void DeleteTok(Token *tok) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
Elem	decoder/nbest-decoder.h	/^    typedef TokenHash::Elem Elem;$/;"	t	class:kaldi::NBestDecoder::TokenStore
Elem	decoder/nbest-decoder.h	/^  typedef TokenHash::Elem Elem;$/;"	t	class:kaldi::NBestDecoder
Equal	decoder/nbest-decoder.h	/^      inline bool Equal(Token *other) { \/\/ compares output sequences of Tokens$/;"	f	class:kaldi::NBestDecoder::TokenStore::Token
GetCutoff	decoder/nbest-decoder.h	/^  BaseFloat GetCutoff(Elem *list_head, size_t *tok_count,$/;"	f	class:kaldi::NBestDecoder
GetNBestLattice	decoder/nbest-decoder.h	/^  bool GetNBestLattice(fst::MutableFst<CompactLatticeArc> *fst_out,$/;"	f	class:kaldi::NBestDecoder
I	decoder/nbest-decoder.h	/^      SeqToken *I; \/\/ sequence I$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
Init	decoder/nbest-decoder.h	/^    void Init(DecodableInterface *decodable, TokenHash *toks, int32 n_best) {$/;"	f	class:kaldi::NBestDecoder::TokenStore
KALDI_DECODER_NBEST_DECODER_H_	decoder/nbest-decoder.h	22;"	d
Label	decoder/nbest-decoder.h	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::NBestDecoder
NBestDecoder	decoder/nbest-decoder.h	/^  NBestDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::NBestDecoder
NBestDecoder	decoder/nbest-decoder.h	/^class NBestDecoder {$/;"	c	namespace:kaldi
NBestDecoderOptions	decoder/nbest-decoder.h	/^  NBestDecoderOptions(): beam(16.0),$/;"	f	struct:kaldi::NBestDecoderOptions
NBestDecoderOptions	decoder/nbest-decoder.h	/^struct NBestDecoderOptions {$/;"	s	namespace:kaldi
NewSeq	decoder/nbest-decoder.h	/^    inline SeqToken *NewSeq() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
PossiblyResizeHash	decoder/nbest-decoder.h	/^  void PossiblyResizeHash(size_t num_toks) {$/;"	f	class:kaldi::NBestDecoder
PropagateEmitting	decoder/nbest-decoder.h	/^  BaseFloat PropagateEmitting(int32 frame) {$/;"	f	class:kaldi::NBestDecoder
PropagateEpsilon	decoder/nbest-decoder.h	/^  void PropagateEpsilon(BaseFloat adaptive_beam) {$/;"	f	class:kaldi::NBestDecoder
ReachedFinal	decoder/nbest-decoder.h	/^  bool ReachedFinal() {$/;"	f	class:kaldi::NBestDecoder
Register	decoder/nbest-decoder.h	/^  void Register(OptionsItf *po, bool full) {  \/\/\/ if "full", use obscure$/;"	f	struct:kaldi::NBestDecoderOptions
SeqToken	decoder/nbest-decoder.h	/^    struct SeqToken { \/\/ an incremental\/relative token inside a full Token$/;"	s	class:kaldi::NBestDecoder::TokenStore
SeqToken	decoder/nbest-decoder.h	/^  typedef TokenStore::SeqToken SeqToken;$/;"	t	class:kaldi::NBestDecoder
SetOptions	decoder/nbest-decoder.h	/^  void SetOptions(const NBestDecoderOptions &opts) { opts_ = opts; }$/;"	f	class:kaldi::NBestDecoder
StateId	decoder/nbest-decoder.h	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::NBestDecoder
StateQueue	decoder/nbest-decoder.h	/^  typedef unordered_set<StateId> StateQueue;$/;"	t	class:kaldi::NBestDecoder
Token	decoder/nbest-decoder.h	/^    class Token {$/;"	c	class:kaldi::NBestDecoder::TokenStore
Token	decoder/nbest-decoder.h	/^  typedef TokenStore::Token Token;$/;"	t	class:kaldi::NBestDecoder
TokenHash	decoder/nbest-decoder.h	/^    typedef HashList<StateId, Token*> TokenHash;$/;"	t	class:kaldi::NBestDecoder::TokenStore
TokenHash	decoder/nbest-decoder.h	/^  typedef HashList<StateId, Token*> TokenHash;$/;"	t	class:kaldi::NBestDecoder
TokenStore	decoder/nbest-decoder.h	/^    TokenStore() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
TokenStore	decoder/nbest-decoder.h	/^  class TokenStore {$/;"	c	class:kaldi::NBestDecoder
Weight	decoder/nbest-decoder.h	/^  typedef Arc::Weight Weight;$/;"	t	class:kaldi::NBestDecoder
allocate_block_size_	decoder/nbest-decoder.h	/^    static const size_t allocate_block_size_ = 8192;$/;"	m	class:kaldi::NBestDecoder::TokenStore
allocated_s_	decoder/nbest-decoder.h	/^    std::vector<SeqToken*> allocated_s_;  \/\/ list of allocated seq tokens$/;"	m	class:kaldi::NBestDecoder::TokenStore
allocated_t_	decoder/nbest-decoder.h	/^    std::vector<Token*> allocated_t_;  \/\/ list of allocated tokens$/;"	m	class:kaldi::NBestDecoder::TokenStore
beam	decoder/nbest-decoder.h	/^  BaseFloat beam;$/;"	m	struct:kaldi::NBestDecoderOptions
beam_delta	decoder/nbest-decoder.h	/^  BaseFloat beam_delta;$/;"	m	struct:kaldi::NBestDecoderOptions
c	decoder/nbest-decoder.h	/^      Weight c; \/\/ c (total weight)$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
ca	decoder/nbest-decoder.h	/^      Weight ca; \/\/ acoustic part of c$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
decodable_	decoder/nbest-decoder.h	/^    DecodableInterface *decodable_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
decodable_	decoder/nbest-decoder.h	/^  DecodableInterface *decodable_;$/;"	m	class:kaldi::NBestDecoder
free_st_head_	decoder/nbest-decoder.h	/^    SeqToken *free_st_head_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
free_t_head_	decoder/nbest-decoder.h	/^    Token *free_t_head_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
fst_	decoder/nbest-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::NBestDecoder
hash	decoder/nbest-decoder.h	/^      unsigned hash; \/\/ hashing the output symbol sequence$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
hash_ratio	decoder/nbest-decoder.h	/^  BaseFloat hash_ratio;$/;"	m	struct:kaldi::NBestDecoderOptions
i	decoder/nbest-decoder.h	/^      Label i;   \/\/ input label i$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
kaldi	decoder/nbest-decoder.h	/^namespace kaldi {$/;"	n
max_active	decoder/nbest-decoder.h	/^  int32 max_active;$/;"	m	struct:kaldi::NBestDecoderOptions
n_best	decoder/nbest-decoder.h	/^  int32 n_best;$/;"	m	struct:kaldi::NBestDecoderOptions
n_best_	decoder/nbest-decoder.h	/^    int32 n_best_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
o	decoder/nbest-decoder.h	/^      Label o; \/\/ o$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
operator <	decoder/nbest-decoder.h	/^      inline bool operator < (const Token &other) {$/;"	f	class:kaldi::NBestDecoder::TokenStore::Token
opts_	decoder/nbest-decoder.h	/^  NBestDecoderOptions opts_;$/;"	m	class:kaldi::NBestDecoder
previous	decoder/nbest-decoder.h	/^      SeqToken *previous;  \/\/ lattice backward pointer (also as linked list)$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
previous	decoder/nbest-decoder.h	/^      Token *previous; \/\/ t'$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
queue_	decoder/nbest-decoder.h	/^  StateQueue queue_; \/\/ used in PropagateEpsilon,$/;"	m	class:kaldi::NBestDecoder
refs	decoder/nbest-decoder.h	/^      int refs;       \/\/ reference counter (for memory management)$/;"	m	struct:kaldi::NBestDecoder::TokenStore::SeqToken
refs	decoder/nbest-decoder.h	/^      int32 refs; \/\/ reference counter (for memory management)$/;"	m	class:kaldi::NBestDecoder::TokenStore::Token
tmp_array_	decoder/nbest-decoder.h	/^  std::vector<BaseFloat> tmp_array_;  \/\/ used in GetCutoff.$/;"	m	class:kaldi::NBestDecoder
token_store_	decoder/nbest-decoder.h	/^  TokenStore token_store_;$/;"	m	class:kaldi::NBestDecoder
toks_	decoder/nbest-decoder.h	/^    TokenHash *toks_;$/;"	m	class:kaldi::NBestDecoder::TokenStore
toks_	decoder/nbest-decoder.h	/^  TokenHash toks_;$/;"	m	class:kaldi::NBestDecoder
~NBestDecoder	decoder/nbest-decoder.h	/^  ~NBestDecoder() {$/;"	f	class:kaldi::NBestDecoder
~TokenStore	decoder/nbest-decoder.h	/^    ~TokenStore() {$/;"	f	class:kaldi::NBestDecoder::TokenStore
AdvanceDecoding	decoder/simple-decoder.cc	/^void SimpleDecoder::AdvanceDecoding(DecodableInterface *decodable,$/;"	f	class:kaldi::SimpleDecoder
ClearToks	decoder/simple-decoder.cc	/^void SimpleDecoder::ClearToks(unordered_map<StateId, Token*> &toks) {$/;"	f	class:kaldi::SimpleDecoder
Decode	decoder/simple-decoder.cc	/^bool SimpleDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::SimpleDecoder
FinalRelativeCost	decoder/simple-decoder.cc	/^BaseFloat SimpleDecoder::FinalRelativeCost() const {$/;"	f	class:kaldi::SimpleDecoder
GetBestPath	decoder/simple-decoder.cc	/^bool SimpleDecoder::GetBestPath(Lattice *fst_out, bool use_final_probs) const {$/;"	f	class:kaldi::SimpleDecoder
InitDecoding	decoder/simple-decoder.cc	/^void SimpleDecoder::InitDecoding() {$/;"	f	class:kaldi::SimpleDecoder
ProcessEmitting	decoder/simple-decoder.cc	/^void SimpleDecoder::ProcessEmitting(DecodableInterface *decodable) {$/;"	f	class:kaldi::SimpleDecoder
ProcessNonemitting	decoder/simple-decoder.cc	/^void SimpleDecoder::ProcessNonemitting() {$/;"	f	class:kaldi::SimpleDecoder
PruneToks	decoder/simple-decoder.cc	/^void SimpleDecoder::PruneToks(BaseFloat beam, unordered_map<StateId, Token*> *toks) {$/;"	f	class:kaldi::SimpleDecoder
ReachedFinal	decoder/simple-decoder.cc	/^bool SimpleDecoder::ReachedFinal() const {$/;"	f	class:kaldi::SimpleDecoder
kaldi	decoder/simple-decoder.cc	/^namespace kaldi {$/;"	n	file:
~SimpleDecoder	decoder/simple-decoder.cc	/^SimpleDecoder::~SimpleDecoder() {$/;"	f	class:kaldi::SimpleDecoder
KALDI_DECODER_SIMPLE_DECODER_H_	decoder/simple-decoder.h	23;"	d
Label	decoder/simple-decoder.h	/^  typedef StdArc::Label Label;$/;"	t	class:kaldi::SimpleDecoder
NumFramesDecoded	decoder/simple-decoder.h	/^  int32 NumFramesDecoded() const { return num_frames_decoded_; }$/;"	f	class:kaldi::SimpleDecoder
SimpleDecoder	decoder/simple-decoder.h	/^  SimpleDecoder(const fst::Fst<fst::StdArc> &fst, BaseFloat beam): fst_(fst), beam_(beam) { }$/;"	f	class:kaldi::SimpleDecoder
SimpleDecoder	decoder/simple-decoder.h	/^class SimpleDecoder {$/;"	c	namespace:kaldi
StateId	decoder/simple-decoder.h	/^  typedef StdArc::StateId StateId;$/;"	t	class:kaldi::SimpleDecoder
StdArc	decoder/simple-decoder.h	/^  typedef fst::StdArc StdArc;$/;"	t	class:kaldi::SimpleDecoder
StdWeight	decoder/simple-decoder.h	/^  typedef StdArc::Weight StdWeight;$/;"	t	class:kaldi::SimpleDecoder
Token	decoder/simple-decoder.h	/^    Token(const StdArc &arc,$/;"	f	class:kaldi::SimpleDecoder::Token
Token	decoder/simple-decoder.h	/^  class Token {$/;"	c	class:kaldi::SimpleDecoder
TokenDelete	decoder/simple-decoder.h	/^    static void TokenDelete(Token *tok) {$/;"	f	class:kaldi::SimpleDecoder::Token
arc_	decoder/simple-decoder.h	/^    LatticeArc arc_; \/\/ We use LatticeArc so that we can separately$/;"	m	class:kaldi::SimpleDecoder::Token
beam_	decoder/simple-decoder.h	/^  BaseFloat beam_;$/;"	m	class:kaldi::SimpleDecoder
cost_	decoder/simple-decoder.h	/^    double cost_; \/\/ accumulated total cost up to this point.$/;"	m	class:kaldi::SimpleDecoder::Token
cur_toks_	decoder/simple-decoder.h	/^  unordered_map<StateId, Token*> cur_toks_;$/;"	m	class:kaldi::SimpleDecoder
fst_	decoder/simple-decoder.h	/^  const fst::Fst<fst::StdArc> &fst_;$/;"	m	class:kaldi::SimpleDecoder
kaldi	decoder/simple-decoder.h	/^namespace kaldi {$/;"	n
num_frames_decoded_	decoder/simple-decoder.h	/^  int32 num_frames_decoded_;$/;"	m	class:kaldi::SimpleDecoder
operator <	decoder/simple-decoder.h	/^    bool operator < (const Token &other) {$/;"	f	class:kaldi::SimpleDecoder::Token
prev_	decoder/simple-decoder.h	/^    Token *prev_;$/;"	m	class:kaldi::SimpleDecoder::Token
prev_toks_	decoder/simple-decoder.h	/^  unordered_map<StateId, Token*> prev_toks_;$/;"	m	class:kaldi::SimpleDecoder
ref_count_	decoder/simple-decoder.h	/^    int32 ref_count_;$/;"	m	class:kaldi::SimpleDecoder::Token
CompileGraph	decoder/training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraph(const fst::VectorFst<fst::StdArc> &word_fst,$/;"	f	class:kaldi::TrainingGraphCompiler
CompileGraphFromText	decoder/training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphFromText($/;"	f	class:kaldi::TrainingGraphCompiler
CompileGraphs	decoder/training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphs($/;"	f	class:kaldi::TrainingGraphCompiler
CompileGraphsFromText	decoder/training-graph-compiler.cc	/^bool TrainingGraphCompiler::CompileGraphsFromText($/;"	f	class:kaldi::TrainingGraphCompiler
TrainingGraphCompiler	decoder/training-graph-compiler.cc	/^TrainingGraphCompiler::TrainingGraphCompiler(const TransitionModel &trans_model,$/;"	f	class:kaldi::TrainingGraphCompiler
kaldi	decoder/training-graph-compiler.cc	/^namespace kaldi {$/;"	n	file:
KALDI_DECODER_TRAINING_GRAPH_COMPILER_H_	decoder/training-graph-compiler.h	20;"	d
Register	decoder/training-graph-compiler.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::TrainingGraphCompilerOptions
TrainingGraphCompiler	decoder/training-graph-compiler.h	/^class TrainingGraphCompiler {$/;"	c	namespace:kaldi
TrainingGraphCompilerOptions	decoder/training-graph-compiler.h	/^  explicit TrainingGraphCompilerOptions(BaseFloat transition_scale = 1.0,$/;"	f	struct:kaldi::TrainingGraphCompilerOptions
TrainingGraphCompilerOptions	decoder/training-graph-compiler.h	/^struct TrainingGraphCompilerOptions {$/;"	s	namespace:kaldi
ctx_dep_	decoder/training-graph-compiler.h	/^  const ContextDependency &ctx_dep_;$/;"	m	class:kaldi::TrainingGraphCompiler
disambig_syms_	decoder/training-graph-compiler.h	/^  std::vector<int32> disambig_syms_; \/\/ disambig symbols (if any) in the phone$/;"	m	class:kaldi::TrainingGraphCompiler
kaldi	decoder/training-graph-compiler.h	/^namespace kaldi {$/;"	n
lex_cache_	decoder/training-graph-compiler.h	/^  fst::TableComposeCache<fst::Fst<fst::StdArc> > lex_cache_;  \/\/ stores matcher..$/;"	m	class:kaldi::TrainingGraphCompiler
lex_fst_	decoder/training-graph-compiler.h	/^  fst::VectorFst<fst::StdArc> *lex_fst_; \/\/ lexicon FST (an input; we take$/;"	m	class:kaldi::TrainingGraphCompiler
opts_	decoder/training-graph-compiler.h	/^  TrainingGraphCompilerOptions opts_;$/;"	m	class:kaldi::TrainingGraphCompiler
reorder	decoder/training-graph-compiler.h	/^  bool reorder;  \/\/ (Dan-style graphs)$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
rm_eps	decoder/training-graph-compiler.h	/^  bool rm_eps;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
self_loop_scale	decoder/training-graph-compiler.h	/^  BaseFloat self_loop_scale;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
trans_model_	decoder/training-graph-compiler.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::TrainingGraphCompiler
transition_scale	decoder/training-graph-compiler.h	/^  BaseFloat transition_scale;$/;"	m	struct:kaldi::TrainingGraphCompilerOptions
~TrainingGraphCompiler	decoder/training-graph-compiler.h	/^  ~TrainingGraphCompiler() { delete lex_fst_; }$/;"	f	class:kaldi::TrainingGraphCompiler
BaseName	doc/cpplint.py	/^  def BaseName(self):$/;"	m	class:FileInfo
Begin	doc/cpplint.py	/^  def Begin(self, function_name):$/;"	m	class:_FunctionState
CanonicalizeAlphabeticalOrder	doc/cpplint.py	/^  def CanonicalizeAlphabeticalOrder(self, header_path):$/;"	m	class:_IncludeState
Check	doc/cpplint.py	/^  def Check(self, error, filename, linenum):$/;"	m	class:_FunctionState
CheckBraces	doc/cpplint.py	/^def CheckBraces(filename, clean_lines, linenum, error):$/;"	f
CheckCStyleCast	doc/cpplint.py	/^def CheckCStyleCast(filename, linenum, line, raw_line, cast_type, pattern,$/;"	f
CheckCheck	doc/cpplint.py	/^def CheckCheck(filename, clean_lines, linenum, error):$/;"	f
CheckComment	doc/cpplint.py	/^def CheckComment(comment, filename, linenum, error):$/;"	f
CheckFinished	doc/cpplint.py	/^  def CheckFinished(self, filename, error):$/;"	m	class:_ClassState
CheckForCopyright	doc/cpplint.py	/^def CheckForCopyright(filename, lines, error):$/;"	f
CheckForFunctionLengths	doc/cpplint.py	/^def CheckForFunctionLengths(filename, clean_lines, linenum,$/;"	f
CheckForHeaderGuard	doc/cpplint.py	/^def CheckForHeaderGuard(filename, lines, error):$/;"	f
CheckForIncludeWhatYouUse	doc/cpplint.py	/^def CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error,$/;"	f
CheckForMultilineCommentsAndStrings	doc/cpplint.py	/^def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):$/;"	f
CheckForNewlineAtEOF	doc/cpplint.py	/^def CheckForNewlineAtEOF(filename, lines, error):$/;"	f
CheckForNonStandardConstructs	doc/cpplint.py	/^def CheckForNonStandardConstructs(filename, clean_lines, linenum,$/;"	f
CheckForUnicodeReplacementCharacters	doc/cpplint.py	/^def CheckForUnicodeReplacementCharacters(filename, lines, error):$/;"	f
CheckHeaderGuardVariants	doc/cpplint.py	/^def CheckHeaderGuardVariants(cppvar, actual_var):$/;"	f
CheckIncludeLine	doc/cpplint.py	/^def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):$/;"	f
CheckInvalidIncrement	doc/cpplint.py	/^def CheckInvalidIncrement(filename, clean_lines, linenum, error):$/;"	f
CheckLanguage	doc/cpplint.py	/^def CheckLanguage(filename, clean_lines, linenum, file_extension, include_state,$/;"	f
CheckNextIncludeOrder	doc/cpplint.py	/^  def CheckNextIncludeOrder(self, header_type):$/;"	m	class:_IncludeState
CheckPosixThreading	doc/cpplint.py	/^def CheckPosixThreading(filename, clean_lines, linenum, error):$/;"	f
CheckSpacing	doc/cpplint.py	/^def CheckSpacing(filename, clean_lines, linenum, error):$/;"	f
CheckSpacingForFunctionCall	doc/cpplint.py	/^def CheckSpacingForFunctionCall(filename, line, linenum, error):$/;"	f
CheckStyle	doc/cpplint.py	/^def CheckStyle(filename, clean_lines, linenum, file_extension, error):$/;"	f
CleanseComments	doc/cpplint.py	/^def CleanseComments(line):$/;"	f
CleansedLines	doc/cpplint.py	/^class CleansedLines(object):$/;"	c
CloseExpression	doc/cpplint.py	/^def CloseExpression(clean_lines, linenum, pos):$/;"	f
Count	doc/cpplint.py	/^  def Count(self):$/;"	m	class:_FunctionState
End	doc/cpplint.py	/^  def End(self):$/;"	m	class:_FunctionState
Error	doc/cpplint.py	/^def Error(filename, linenum, category, confidence, message):$/;"	f
Extension	doc/cpplint.py	/^  def Extension(self):$/;"	m	class:FileInfo
FileInfo	doc/cpplint.py	/^class FileInfo:$/;"	c
FilesBelongToSameModule	doc/cpplint.py	/^def FilesBelongToSameModule(filename_cc, filename_h):$/;"	f
FindNextMultiLineCommentEnd	doc/cpplint.py	/^def FindNextMultiLineCommentEnd(lines, lineix):$/;"	f
FindNextMultiLineCommentStart	doc/cpplint.py	/^def FindNextMultiLineCommentStart(lines, lineix):$/;"	f
FullName	doc/cpplint.py	/^  def FullName(self):$/;"	m	class:FileInfo
GetHeaderGuardCPPVariable	doc/cpplint.py	/^def GetHeaderGuardCPPVariable(filename):$/;"	f
GetLineWidth	doc/cpplint.py	/^def GetLineWidth(line):$/;"	f
GetPreviousNonBlankLine	doc/cpplint.py	/^def GetPreviousNonBlankLine(clean_lines, linenum):$/;"	f
IncrementErrorCount	doc/cpplint.py	/^  def IncrementErrorCount(self, category):$/;"	m	class:_CppLintState
IsBlankLine	doc/cpplint.py	/^def IsBlankLine(line):$/;"	f
IsCppString	doc/cpplint.py	/^def IsCppString(line):$/;"	f
IsErrorSuppressedByNolint	doc/cpplint.py	/^def IsErrorSuppressedByNolint(category, linenum):$/;"	f
IsInAlphabeticalOrder	doc/cpplint.py	/^  def IsInAlphabeticalOrder(self, header_path):$/;"	m	class:_IncludeState
IsSource	doc/cpplint.py	/^  def IsSource(self):$/;"	m	class:FileInfo
Match	doc/cpplint.py	/^def Match(pattern, s):$/;"	f
NoExtension	doc/cpplint.py	/^  def NoExtension(self):$/;"	m	class:FileInfo
NumLines	doc/cpplint.py	/^  def NumLines(self):$/;"	m	class:CleansedLines
ParseArguments	doc/cpplint.py	/^def ParseArguments(args):$/;"	f
ParseNolintSuppressions	doc/cpplint.py	/^def ParseNolintSuppressions(filename, raw_line, linenum, error):$/;"	f
PrintCategories	doc/cpplint.py	/^def PrintCategories():$/;"	f
PrintErrorCounts	doc/cpplint.py	/^  def PrintErrorCounts(self):$/;"	m	class:_CppLintState
PrintUsage	doc/cpplint.py	/^def PrintUsage(message):$/;"	f
ProcessFile	doc/cpplint.py	/^def ProcessFile(filename, vlevel):$/;"	f
ProcessFileData	doc/cpplint.py	/^def ProcessFileData(filename, file_extension, lines, error):$/;"	f
ProcessLine	doc/cpplint.py	/^def ProcessLine(filename, file_extension,$/;"	f
RemoveMultiLineComments	doc/cpplint.py	/^def RemoveMultiLineComments(filename, lines, error):$/;"	f
RemoveMultiLineCommentsFromRange	doc/cpplint.py	/^def RemoveMultiLineCommentsFromRange(lines, begin, end):$/;"	f
ReplaceableCheck	doc/cpplint.py	/^def ReplaceableCheck(operator, macro, line):$/;"	f
RepositoryName	doc/cpplint.py	/^  def RepositoryName(self):$/;"	m	class:FileInfo
ResetErrorCounts	doc/cpplint.py	/^  def ResetErrorCounts(self):$/;"	m	class:_CppLintState
ResetNolintSuppressions	doc/cpplint.py	/^def ResetNolintSuppressions():$/;"	f
Search	doc/cpplint.py	/^def Search(pattern, s):$/;"	f
SetCountingStyle	doc/cpplint.py	/^  def SetCountingStyle(self, counting_style):$/;"	m	class:_CppLintState
SetFilters	doc/cpplint.py	/^  def SetFilters(self, filters):$/;"	m	class:_CppLintState
SetOutputFormat	doc/cpplint.py	/^  def SetOutputFormat(self, output_format):$/;"	m	class:_CppLintState
SetVerboseLevel	doc/cpplint.py	/^  def SetVerboseLevel(self, level):$/;"	m	class:_CppLintState
Split	doc/cpplint.py	/^  def Split(self):$/;"	m	class:FileInfo
UpdateIncludeState	doc/cpplint.py	/^def UpdateIncludeState(filename, include_state, io=codecs):$/;"	f
_CHECK_MACROS	doc/cpplint.py	/^_CHECK_MACROS = [$/;"	v
_CHECK_REPLACEMENT	doc/cpplint.py	/^_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])$/;"	v
_CPP_HEADERS	doc/cpplint.py	/^_CPP_HEADERS = frozenset([$/;"	v
_CPP_SECTION	doc/cpplint.py	/^  _CPP_SECTION = 3$/;"	v	class:_IncludeState
_CPP_SYS_HEADER	doc/cpplint.py	/^_CPP_SYS_HEADER = 2$/;"	v
_C_SECTION	doc/cpplint.py	/^  _C_SECTION = 2$/;"	v	class:_IncludeState
_C_SYS_HEADER	doc/cpplint.py	/^_C_SYS_HEADER = 1$/;"	v
_ClassInfo	doc/cpplint.py	/^class _ClassInfo(object):$/;"	c
_ClassState	doc/cpplint.py	/^class _ClassState(object):$/;"	c
_ClassifyInclude	doc/cpplint.py	/^def _ClassifyInclude(fileinfo, include, is_system):$/;"	f
_CollapseStrings	doc/cpplint.py	/^  def _CollapseStrings(elided):$/;"	m	class:CleansedLines
_CppLintState	doc/cpplint.py	/^class _CppLintState(object):$/;"	c
_DEFAULT_FILTERS	doc/cpplint.py	/^_DEFAULT_FILTERS = [ '-build\/include_alpha' ]$/;"	v
_DropCommonSuffixes	doc/cpplint.py	/^def _DropCommonSuffixes(filename):$/;"	f
_ERROR_CATEGORIES	doc/cpplint.py	/^_ERROR_CATEGORIES = [$/;"	v
_Filters	doc/cpplint.py	/^def _Filters():$/;"	f
_FunctionState	doc/cpplint.py	/^class _FunctionState(object):$/;"	c
_HEADERS_ACCEPTED_BUT_NOT_PROMOTED	doc/cpplint.py	/^_HEADERS_ACCEPTED_BUT_NOT_PROMOTED = {$/;"	v
_HEADERS_CONTAINING_TEMPLATES	doc/cpplint.py	/^_HEADERS_CONTAINING_TEMPLATES = ($/;"	v
_INITIAL_SECTION	doc/cpplint.py	/^  _INITIAL_SECTION = 0$/;"	v	class:_IncludeState
_IncludeError	doc/cpplint.py	/^class _IncludeError(Exception):$/;"	c
_IncludeState	doc/cpplint.py	/^class _IncludeState(dict):$/;"	c
_IsTestFilename	doc/cpplint.py	/^def _IsTestFilename(filename):$/;"	f
_LIKELY_MY_HEADER	doc/cpplint.py	/^_LIKELY_MY_HEADER = 3$/;"	v
_MY_H_SECTION	doc/cpplint.py	/^  _MY_H_SECTION = 1$/;"	v	class:_IncludeState
_NORMAL_TRIGGER	doc/cpplint.py	/^  _NORMAL_TRIGGER = 250  # for --v=0, 500 for --v=1, etc.$/;"	v	class:_FunctionState
_OTHER_HEADER	doc/cpplint.py	/^_OTHER_HEADER = 5$/;"	v
_OTHER_H_SECTION	doc/cpplint.py	/^  _OTHER_H_SECTION = 4$/;"	v	class:_IncludeState
_OutputFormat	doc/cpplint.py	/^def _OutputFormat():$/;"	f
_POSSIBLE_MY_HEADER	doc/cpplint.py	/^_POSSIBLE_MY_HEADER = 4$/;"	v
_RE_FIRST_COMPONENT	doc/cpplint.py	/^_RE_FIRST_COMPONENT = re.compile(r'^[^-_.]+')$/;"	v
_RE_PATTERN_CLEANSE_LINE_C_COMMENTS	doc/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES	doc/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES = re.compile(r'"[^"]*"')$/;"	v
_RE_PATTERN_CLEANSE_LINE_ESCAPES	doc/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_ESCAPES = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES	doc/cpplint.py	/^_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES = re.compile(r"'.'")$/;"	v
_RE_PATTERN_INCLUDE	doc/cpplint.py	/^_RE_PATTERN_INCLUDE = re.compile(r'^\\s*#\\s*include\\s*([<"])([^>"]*)[>"].*$')$/;"	v
_RE_PATTERN_INCLUDE_NEW_STYLE	doc/cpplint.py	/^_RE_PATTERN_INCLUDE_NEW_STYLE = re.compile(r'#include +"[^\/]+\\.h"')$/;"	v
_RE_PATTERN_INVALID_INCREMENT	doc/cpplint.py	/^_RE_PATTERN_INVALID_INCREMENT = re.compile($/;"	v
_RE_PATTERN_STRING	doc/cpplint.py	/^_RE_PATTERN_STRING = re.compile(r'\\bstring\\b')$/;"	v
_RE_PATTERN_TODO	doc/cpplint.py	/^_RE_PATTERN_TODO = re.compile(r'^\/\/(\\s*)TODO(\\(.+?\\))?:?(\\s|$)?')$/;"	v
_RE_SUPPRESSION	doc/cpplint.py	/^_RE_SUPPRESSION = re.compile(r'\\bNOLINT\\b(\\([^)]*\\))?')$/;"	v
_SECTION_NAMES	doc/cpplint.py	/^  _SECTION_NAMES = {$/;"	v	class:_IncludeState
_STL_HEADERS	doc/cpplint.py	/^_STL_HEADERS = frozenset([$/;"	v
_SetCountingStyle	doc/cpplint.py	/^def _SetCountingStyle(level):$/;"	f
_SetFilters	doc/cpplint.py	/^def _SetFilters(filters):$/;"	f
_SetOutputFormat	doc/cpplint.py	/^def _SetOutputFormat(output_format):$/;"	f
_SetVerboseLevel	doc/cpplint.py	/^def _SetVerboseLevel(level):$/;"	f
_ShouldPrintError	doc/cpplint.py	/^def _ShouldPrintError(category, confidence, linenum):$/;"	f
_TEST_TRIGGER	doc/cpplint.py	/^  _TEST_TRIGGER = 400    # about 50% more than _NORMAL_TRIGGER.$/;"	v	class:_FunctionState
_TYPE_NAMES	doc/cpplint.py	/^  _TYPE_NAMES = {$/;"	v	class:_IncludeState
_VerboseLevel	doc/cpplint.py	/^def _VerboseLevel():$/;"	f
__init__	doc/cpplint.py	/^  def __init__(self):$/;"	m	class:_ClassState
__init__	doc/cpplint.py	/^  def __init__(self):$/;"	m	class:_CppLintState
__init__	doc/cpplint.py	/^  def __init__(self):$/;"	m	class:_FunctionState
__init__	doc/cpplint.py	/^  def __init__(self):$/;"	m	class:_IncludeState
__init__	doc/cpplint.py	/^  def __init__(self, filename):$/;"	m	class:FileInfo
__init__	doc/cpplint.py	/^  def __init__(self, lines):$/;"	m	class:CleansedLines
__init__	doc/cpplint.py	/^  def __init__(self, name, linenum):$/;"	m	class:_ClassInfo
_cpplint_state	doc/cpplint.py	/^_cpplint_state = _CppLintState()$/;"	v
_error_suppressions	doc/cpplint.py	/^_error_suppressions = {}$/;"	v
_re_pattern_algorithm_header	doc/cpplint.py	/^_re_pattern_algorithm_header = []$/;"	v
_re_pattern_templates	doc/cpplint.py	/^_re_pattern_templates = []$/;"	v
_regexp_compile_cache	doc/cpplint.py	/^_regexp_compile_cache = {}$/;"	v
main	doc/cpplint.py	/^def main():$/;"	f
threading_list	doc/cpplint.py	/^threading_list = ($/;"	v
ADDLIBS	feat/Makefile	/^ADDLIBS = ..\/transform\/kaldi-transform.a ..\/gmm\/kaldi-gmm.a ..\/tree\/kaldi-tree.a \\$/;"	m
LIBNAME	feat/Makefile	/^LIBNAME = kaldi-feat$/;"	m
OBJFILES	feat/Makefile	/^OBJFILES = feature-functions.o feature-mfcc.o feature-plp.o feature-fbank.o \\$/;"	m
TESTFILES	feat/Makefile	/^TESTFILES = feature-mfcc-test feature-plp-test feature-fbank-test \\$/;"	m
UnitTestFeat	feat/feature-fbank-test.cc	/^static void UnitTestFeat() {$/;"	f	file:
UnitTestHTKCompare1	feat/feature-fbank-test.cc	/^static void UnitTestHTKCompare1() {$/;"	f	file:
UnitTestHTKCompare2	feat/feature-fbank-test.cc	/^static void UnitTestHTKCompare2() {$/;"	f	file:
UnitTestHTKCompare3	feat/feature-fbank-test.cc	/^static void UnitTestHTKCompare3() {$/;"	f	file:
UnitTestHTKCompare4	feat/feature-fbank-test.cc	/^static void UnitTestHTKCompare4() {$/;"	f	file:
UnitTestReadWave	feat/feature-fbank-test.cc	/^static void UnitTestReadWave() {$/;"	f	file:
UnitTestSimple	feat/feature-fbank-test.cc	/^static void UnitTestSimple() {$/;"	f	file:
main	feat/feature-fbank-test.cc	/^int main() {$/;"	f
Compute	feat/feature-fbank.cc	/^void Fbank::Compute(const VectorBase<BaseFloat> &wave,$/;"	f	class:kaldi::Fbank
ComputeInternal	feat/feature-fbank.cc	/^void Fbank::ComputeInternal(const VectorBase<BaseFloat> &wave,$/;"	f	class:kaldi::Fbank
Fbank	feat/feature-fbank.cc	/^Fbank::Fbank(const FbankOptions &opts)$/;"	f	class:kaldi::Fbank
GetMelBanks	feat/feature-fbank.cc	/^const MelBanks *Fbank::GetMelBanks(BaseFloat vtln_warp) {$/;"	f	class:kaldi::Fbank
GetMelBanks	feat/feature-fbank.cc	/^const MelBanks *Fbank::GetMelBanks(BaseFloat vtln_warp,$/;"	f	class:kaldi::Fbank
kaldi	feat/feature-fbank.cc	/^namespace kaldi {$/;"	n	file:
~Fbank	feat/feature-fbank.cc	/^Fbank::~Fbank() {$/;"	f	class:kaldi::Fbank
Dim	feat/feature-fbank.h	/^  int32 Dim() const { return opts_.mel_opts.num_bins; }$/;"	f	class:kaldi::Fbank
Fbank	feat/feature-fbank.h	/^class Fbank {$/;"	c	namespace:kaldi
FbankOptions	feat/feature-fbank.h	/^  FbankOptions(): mel_opts(23),$/;"	f	struct:kaldi::FbankOptions
FbankOptions	feat/feature-fbank.h	/^struct FbankOptions {$/;"	s	namespace:kaldi
KALDI_FEAT_FEATURE_FBANK_H_	feat/feature-fbank.h	21;"	d
Options	feat/feature-fbank.h	/^  typedef FbankOptions Options;$/;"	t	class:kaldi::Fbank
Register	feat/feature-fbank.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FbankOptions
energy_floor	feat/feature-fbank.h	/^  BaseFloat energy_floor;$/;"	m	struct:kaldi::FbankOptions
feature_window_function_	feat/feature-fbank.h	/^  FeatureWindowFunction feature_window_function_;$/;"	m	class:kaldi::Fbank
frame_opts	feat/feature-fbank.h	/^  FrameExtractionOptions frame_opts;$/;"	m	struct:kaldi::FbankOptions
htk_compat	feat/feature-fbank.h	/^  bool htk_compat;  \/\/ If true, put energy last (if using energy)$/;"	m	struct:kaldi::FbankOptions
kaldi	feat/feature-fbank.h	/^namespace kaldi {$/;"	n
log_energy_floor_	feat/feature-fbank.h	/^  BaseFloat log_energy_floor_;$/;"	m	class:kaldi::Fbank
mel_banks_	feat/feature-fbank.h	/^  std::map<BaseFloat, MelBanks*> mel_banks_;  \/\/ BaseFloat is VTLN coefficient.$/;"	m	class:kaldi::Fbank
mel_opts	feat/feature-fbank.h	/^  MelBanksOptions mel_opts;$/;"	m	struct:kaldi::FbankOptions
opts_	feat/feature-fbank.h	/^  FbankOptions opts_;$/;"	m	class:kaldi::Fbank
raw_energy	feat/feature-fbank.h	/^  bool raw_energy;  \/\/ If true, compute energy before preemphasis and windowing$/;"	m	struct:kaldi::FbankOptions
srfft_	feat/feature-fbank.h	/^  SplitRadixRealFft<BaseFloat> *srfft_;$/;"	m	class:kaldi::Fbank
use_energy	feat/feature-fbank.h	/^  bool use_energy;  \/\/ append an extra dimension with energy to the filter banks$/;"	m	struct:kaldi::FbankOptions
use_log_fbank	feat/feature-fbank.h	/^  bool use_log_fbank;  \/\/ if true (default), produce log-filterbank, else linear$/;"	m	struct:kaldi::FbankOptions
UnitTestOnlineCmvn	feat/feature-functions-test.cc	/^void UnitTestOnlineCmvn() {$/;"	f	namespace:kaldi
kaldi	feat/feature-functions-test.cc	/^namespace kaldi {$/;"	n	file:
main	feat/feature-functions-test.cc	/^int main() {$/;"	f
Check	feat/feature-functions.cc	/^void SlidingWindowCmnOptions::Check() const {$/;"	f	class:kaldi::SlidingWindowCmnOptions
ComputeDeltas	feat/feature-functions.cc	/^void ComputeDeltas(const DeltaFeaturesOptions &delta_opts,$/;"	f	namespace:kaldi
ComputeLpc	feat/feature-functions.cc	/^BaseFloat ComputeLpc(const VectorBase<BaseFloat> &autocorr_in,$/;"	f	namespace:kaldi
ComputePowerSpectrum	feat/feature-functions.cc	/^void ComputePowerSpectrum(VectorBase<BaseFloat> *waveform) {$/;"	f	namespace:kaldi
ComputeShiftedDeltas	feat/feature-functions.cc	/^void ComputeShiftedDeltas(const ShiftedDeltaFeaturesOptions &delta_opts,$/;"	f	namespace:kaldi
DeltaFeatures	feat/feature-functions.cc	/^DeltaFeatures::DeltaFeatures(const DeltaFeaturesOptions &opts): opts_(opts) {$/;"	f	class:kaldi::DeltaFeatures
Dither	feat/feature-functions.cc	/^void Dither(VectorBase<BaseFloat> *waveform, BaseFloat dither_value) {$/;"	f	namespace:kaldi
ExtractWaveformRemainder	feat/feature-functions.cc	/^void ExtractWaveformRemainder(const VectorBase<BaseFloat> &wave,$/;"	f	namespace:kaldi
ExtractWindow	feat/feature-functions.cc	/^void ExtractWindow(const VectorBase<BaseFloat> &wave,$/;"	f	namespace:kaldi
FeatureWindowFunction	feat/feature-functions.cc	/^FeatureWindowFunction::FeatureWindowFunction(const FrameExtractionOptions &opts) {$/;"	f	class:kaldi::FeatureWindowFunction
GetEqualLoudnessVector	feat/feature-functions.cc	/^void GetEqualLoudnessVector(const MelBanks &mel_banks,$/;"	f	namespace:kaldi
InitIdftBases	feat/feature-functions.cc	/^void InitIdftBases(int32 n_bases, int32 dimension, Matrix<BaseFloat> *mat_out) {$/;"	f	namespace:kaldi
NumFrames	feat/feature-functions.cc	/^int32 NumFrames(int32 nsamp,$/;"	f	namespace:kaldi
Preemphasize	feat/feature-functions.cc	/^void Preemphasize(VectorBase<BaseFloat> *waveform, BaseFloat preemph_coeff) {$/;"	f	namespace:kaldi
Process	feat/feature-functions.cc	/^void DeltaFeatures::Process(const MatrixBase<BaseFloat> &input_feats,$/;"	f	class:kaldi::DeltaFeatures
Process	feat/feature-functions.cc	/^void ShiftedDeltaFeatures::Process(const MatrixBase<BaseFloat> &input_feats,$/;"	f	class:kaldi::ShiftedDeltaFeatures
ReverseFrames	feat/feature-functions.cc	/^void ReverseFrames(const MatrixBase<BaseFloat> &input_features,$/;"	f	namespace:kaldi
ShiftedDeltaFeatures	feat/feature-functions.cc	/^ShiftedDeltaFeatures::ShiftedDeltaFeatures($/;"	f	class:kaldi::ShiftedDeltaFeatures
SlidingWindowCmn	feat/feature-functions.cc	/^void SlidingWindowCmn(const SlidingWindowCmnOptions &opts,$/;"	f	namespace:kaldi
SlidingWindowCmnInternal	feat/feature-functions.cc	/^void SlidingWindowCmnInternal(const SlidingWindowCmnOptions &opts,$/;"	f	namespace:kaldi
SpliceFrames	feat/feature-functions.cc	/^void SpliceFrames(const MatrixBase<BaseFloat> &input_features,$/;"	f	namespace:kaldi
kaldi	feat/feature-functions.cc	/^namespace kaldi {$/;"	n	file:
DeltaFeatures	feat/feature-functions.h	/^class DeltaFeatures {$/;"	c	namespace:kaldi
DeltaFeaturesOptions	feat/feature-functions.h	/^  DeltaFeaturesOptions(int32 order = 2, int32 window = 2):$/;"	f	struct:kaldi::DeltaFeaturesOptions
DeltaFeaturesOptions	feat/feature-functions.h	/^struct DeltaFeaturesOptions {$/;"	s	namespace:kaldi
FeatureWindowFunction	feat/feature-functions.h	/^  FeatureWindowFunction() {}$/;"	f	struct:kaldi::FeatureWindowFunction
FeatureWindowFunction	feat/feature-functions.h	/^struct FeatureWindowFunction {$/;"	s	namespace:kaldi
FrameExtractionOptions	feat/feature-functions.h	/^  FrameExtractionOptions():$/;"	f	struct:kaldi::FrameExtractionOptions
FrameExtractionOptions	feat/feature-functions.h	/^struct FrameExtractionOptions {$/;"	s	namespace:kaldi
KALDI_FEAT_FEATURE_FUNCTIONS_H_	feat/feature-functions.h	23;"	d
MaxNormalizeEnergy	feat/feature-functions.h	/^inline void MaxNormalizeEnergy(Matrix<BaseFloat> *feats) {$/;"	f	namespace:kaldi
MelBanksOptions	feat/feature-functions.h	/^  explicit MelBanksOptions(int num_bins = 25)$/;"	f	struct:kaldi::MelBanksOptions
MelBanksOptions	feat/feature-functions.h	/^struct MelBanksOptions {$/;"	s	namespace:kaldi
PaddedWindowSize	feat/feature-functions.h	/^  int32 PaddedWindowSize() const {$/;"	f	struct:kaldi::FrameExtractionOptions
Register	feat/feature-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::DeltaFeaturesOptions
Register	feat/feature-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FrameExtractionOptions
Register	feat/feature-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::MelBanksOptions
Register	feat/feature-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::ShiftedDeltaFeaturesOptions
Register	feat/feature-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::SlidingWindowCmnOptions
ShiftedDeltaFeatures	feat/feature-functions.h	/^class ShiftedDeltaFeatures {$/;"	c	namespace:kaldi
ShiftedDeltaFeaturesOptions	feat/feature-functions.h	/^  ShiftedDeltaFeaturesOptions():$/;"	f	struct:kaldi::ShiftedDeltaFeaturesOptions
ShiftedDeltaFeaturesOptions	feat/feature-functions.h	/^struct ShiftedDeltaFeaturesOptions {$/;"	s	namespace:kaldi
SlidingWindowCmnOptions	feat/feature-functions.h	/^  SlidingWindowCmnOptions():$/;"	f	struct:kaldi::SlidingWindowCmnOptions
SlidingWindowCmnOptions	feat/feature-functions.h	/^struct SlidingWindowCmnOptions {$/;"	s	namespace:kaldi
WindowShift	feat/feature-functions.h	/^  int32 WindowShift() const {$/;"	f	struct:kaldi::FrameExtractionOptions
WindowSize	feat/feature-functions.h	/^  int32 WindowSize() const {$/;"	f	struct:kaldi::FrameExtractionOptions
block_shift	feat/feature-functions.h	/^        block_shift;      \/\/ Distance between consecutive blocks$/;"	m	struct:kaldi::ShiftedDeltaFeaturesOptions
center	feat/feature-functions.h	/^  bool center;$/;"	m	struct:kaldi::SlidingWindowCmnOptions
cmn_window	feat/feature-functions.h	/^  int32 cmn_window;$/;"	m	struct:kaldi::SlidingWindowCmnOptions
debug_mel	feat/feature-functions.h	/^  bool debug_mel;$/;"	m	struct:kaldi::MelBanksOptions
dither	feat/feature-functions.h	/^  BaseFloat dither;  \/\/ Amount of dithering, 0.0 means no dither.$/;"	m	struct:kaldi::FrameExtractionOptions
frame_length_ms	feat/feature-functions.h	/^  BaseFloat frame_length_ms;  \/\/ in milliseconds.$/;"	m	struct:kaldi::FrameExtractionOptions
frame_shift_ms	feat/feature-functions.h	/^  BaseFloat frame_shift_ms;  \/\/ in milliseconds.$/;"	m	struct:kaldi::FrameExtractionOptions
high_freq	feat/feature-functions.h	/^  BaseFloat high_freq;  \/\/ an upper frequency cutoff; 0 -> no cutoff, negative$/;"	m	struct:kaldi::MelBanksOptions
htk_mode	feat/feature-functions.h	/^  bool htk_mode;$/;"	m	struct:kaldi::MelBanksOptions
kaldi	feat/feature-functions.h	/^namespace kaldi {$/;"	n
low_freq	feat/feature-functions.h	/^  BaseFloat low_freq;  \/\/ e.g. 20; lower frequency cutoff$/;"	m	struct:kaldi::MelBanksOptions
min_window	feat/feature-functions.h	/^  int32 min_window;$/;"	m	struct:kaldi::SlidingWindowCmnOptions
normalize_variance	feat/feature-functions.h	/^  bool normalize_variance;$/;"	m	struct:kaldi::SlidingWindowCmnOptions
num_bins	feat/feature-functions.h	/^  int32 num_bins;  \/\/ e.g. 25; number of triangular bins$/;"	m	struct:kaldi::MelBanksOptions
num_blocks	feat/feature-functions.h	/^        num_blocks,$/;"	m	struct:kaldi::ShiftedDeltaFeaturesOptions
opts_	feat/feature-functions.h	/^  DeltaFeaturesOptions opts_;$/;"	m	class:kaldi::DeltaFeatures
opts_	feat/feature-functions.h	/^  ShiftedDeltaFeaturesOptions opts_;$/;"	m	class:kaldi::ShiftedDeltaFeatures
order	feat/feature-functions.h	/^  int32 order;$/;"	m	struct:kaldi::DeltaFeaturesOptions
preemph_coeff	feat/feature-functions.h	/^  BaseFloat preemph_coeff;  \/\/ Preemphasis coefficient.$/;"	m	struct:kaldi::FrameExtractionOptions
remove_dc_offset	feat/feature-functions.h	/^  bool remove_dc_offset;  \/\/ Subtract mean of wave before FFT.$/;"	m	struct:kaldi::FrameExtractionOptions
round_to_power_of_two	feat/feature-functions.h	/^  bool round_to_power_of_two;$/;"	m	struct:kaldi::FrameExtractionOptions
samp_freq	feat/feature-functions.h	/^  BaseFloat samp_freq;$/;"	m	struct:kaldi::FrameExtractionOptions
scales_	feat/feature-functions.h	/^  Vector<BaseFloat> scales_;  \/\/ a scaling window for each$/;"	m	class:kaldi::ShiftedDeltaFeatures
scales_	feat/feature-functions.h	/^  std::vector<Vector<BaseFloat> > scales_;  \/\/ a scaling window for each$/;"	m	class:kaldi::DeltaFeatures
snip_edges	feat/feature-functions.h	/^  bool snip_edges;$/;"	m	struct:kaldi::FrameExtractionOptions
vtln_high	feat/feature-functions.h	/^  BaseFloat vtln_high;  \/\/ vtln upper cutoff of warping function: if negative, added$/;"	m	struct:kaldi::MelBanksOptions
vtln_low	feat/feature-functions.h	/^  BaseFloat vtln_low;  \/\/ vtln lower cutoff of warping function.$/;"	m	struct:kaldi::MelBanksOptions
window	feat/feature-functions.h	/^  Vector<BaseFloat> window;$/;"	m	struct:kaldi::FeatureWindowFunction
window	feat/feature-functions.h	/^  int32 window,           \/\/ The time delay and advance$/;"	m	struct:kaldi::ShiftedDeltaFeaturesOptions
window	feat/feature-functions.h	/^  int32 window;  \/\/ e.g. 2; controls window size (window size is 2*window + 1)$/;"	m	struct:kaldi::DeltaFeaturesOptions
window_type	feat/feature-functions.h	/^  std::string window_type;  \/\/ e.g. Hamming window$/;"	m	struct:kaldi::FrameExtractionOptions
UnitTestFeat	feat/feature-mfcc-test.cc	/^static void UnitTestFeat() {$/;"	f	file:
UnitTestHTKCompare1	feat/feature-mfcc-test.cc	/^static void UnitTestHTKCompare1() {$/;"	f	file:
UnitTestHTKCompare2	feat/feature-mfcc-test.cc	/^static void UnitTestHTKCompare2() {$/;"	f	file:
UnitTestHTKCompare3	feat/feature-mfcc-test.cc	/^static void UnitTestHTKCompare3() {$/;"	f	file:
UnitTestHTKCompare4	feat/feature-mfcc-test.cc	/^static void UnitTestHTKCompare4() {$/;"	f	file:
UnitTestHTKCompare5	feat/feature-mfcc-test.cc	/^static void UnitTestHTKCompare5() {$/;"	f	file:
UnitTestHTKCompare6	feat/feature-mfcc-test.cc	/^static void UnitTestHTKCompare6() {$/;"	f	file:
UnitTestReadWave	feat/feature-mfcc-test.cc	/^static void UnitTestReadWave() {$/;"	f	file:
UnitTestSimple	feat/feature-mfcc-test.cc	/^static void UnitTestSimple() {$/;"	f	file:
UnitTestVtln	feat/feature-mfcc-test.cc	/^void UnitTestVtln() {$/;"	f
main	feat/feature-mfcc-test.cc	/^int main() {$/;"	f
Compute	feat/feature-mfcc.cc	/^void Mfcc::Compute(const VectorBase<BaseFloat> &wave,$/;"	f	class:kaldi::Mfcc
ComputeInternal	feat/feature-mfcc.cc	/^void Mfcc::ComputeInternal(const VectorBase<BaseFloat> &wave,$/;"	f	class:kaldi::Mfcc
GetMelBanks	feat/feature-mfcc.cc	/^const MelBanks *Mfcc::GetMelBanks(BaseFloat vtln_warp) {$/;"	f	class:kaldi::Mfcc
GetMelBanks	feat/feature-mfcc.cc	/^const MelBanks *Mfcc::GetMelBanks(BaseFloat vtln_warp, bool *must_delete) const {$/;"	f	class:kaldi::Mfcc
Mfcc	feat/feature-mfcc.cc	/^Mfcc::Mfcc(const MfccOptions &opts)$/;"	f	class:kaldi::Mfcc
kaldi	feat/feature-mfcc.cc	/^namespace kaldi {$/;"	n	file:
~Mfcc	feat/feature-mfcc.cc	/^Mfcc::~Mfcc() {$/;"	f	class:kaldi::Mfcc
Dim	feat/feature-mfcc.h	/^  int32 Dim() const { return opts_.num_ceps; }$/;"	f	class:kaldi::Mfcc
KALDI_FEAT_FEATURE_MFCC_H_	feat/feature-mfcc.h	21;"	d
Mfcc	feat/feature-mfcc.h	/^class Mfcc {$/;"	c	namespace:kaldi
MfccOptions	feat/feature-mfcc.h	/^  MfccOptions() : mel_opts(23),$/;"	f	struct:kaldi::MfccOptions
MfccOptions	feat/feature-mfcc.h	/^struct MfccOptions {$/;"	s	namespace:kaldi
Options	feat/feature-mfcc.h	/^  typedef MfccOptions Options;$/;"	t	class:kaldi::Mfcc
Register	feat/feature-mfcc.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::MfccOptions
cepstral_lifter	feat/feature-mfcc.h	/^  BaseFloat cepstral_lifter;  \/\/ Scaling factor on cepstra for HTK compatibility.$/;"	m	struct:kaldi::MfccOptions
dct_matrix_	feat/feature-mfcc.h	/^  Matrix<BaseFloat> dct_matrix_;  \/\/ matrix we left-multiply by to perform DCT.$/;"	m	class:kaldi::Mfcc
energy_floor	feat/feature-mfcc.h	/^  BaseFloat energy_floor;$/;"	m	struct:kaldi::MfccOptions
feature_window_function_	feat/feature-mfcc.h	/^  FeatureWindowFunction feature_window_function_;$/;"	m	class:kaldi::Mfcc
frame_opts	feat/feature-mfcc.h	/^  FrameExtractionOptions frame_opts;$/;"	m	struct:kaldi::MfccOptions
htk_compat	feat/feature-mfcc.h	/^  bool htk_compat;  \/\/ if true, put energy\/C0 last and introduce a factor of$/;"	m	struct:kaldi::MfccOptions
kaldi	feat/feature-mfcc.h	/^namespace kaldi {$/;"	n
lifter_coeffs_	feat/feature-mfcc.h	/^  Vector<BaseFloat> lifter_coeffs_;$/;"	m	class:kaldi::Mfcc
log_energy_floor_	feat/feature-mfcc.h	/^  BaseFloat log_energy_floor_;$/;"	m	class:kaldi::Mfcc
mel_banks_	feat/feature-mfcc.h	/^  std::map<BaseFloat, MelBanks*> mel_banks_;  \/\/ BaseFloat is VTLN coefficient.$/;"	m	class:kaldi::Mfcc
mel_opts	feat/feature-mfcc.h	/^  MelBanksOptions mel_opts;$/;"	m	struct:kaldi::MfccOptions
num_ceps	feat/feature-mfcc.h	/^  int32 num_ceps;  \/\/ e.g. 13: num cepstral coeffs, counting zero.$/;"	m	struct:kaldi::MfccOptions
opts_	feat/feature-mfcc.h	/^  MfccOptions opts_;$/;"	m	class:kaldi::Mfcc
raw_energy	feat/feature-mfcc.h	/^  bool raw_energy;  \/\/ If true, compute energy before preemphasis and windowing$/;"	m	struct:kaldi::MfccOptions
srfft_	feat/feature-mfcc.h	/^  SplitRadixRealFft<BaseFloat> *srfft_;$/;"	m	class:kaldi::Mfcc
use_energy	feat/feature-mfcc.h	/^  bool use_energy;  \/\/ use energy; else C0$/;"	m	struct:kaldi::MfccOptions
UnitTestFeat	feat/feature-plp-test.cc	/^static void UnitTestFeat() {$/;"	f	file:
UnitTestHTKCompare1	feat/feature-plp-test.cc	/^static void UnitTestHTKCompare1() {$/;"	f	file:
UnitTestSimple	feat/feature-plp-test.cc	/^static void UnitTestSimple() {$/;"	f	file:
main	feat/feature-plp-test.cc	/^int main() {$/;"	f
Compute	feat/feature-plp.cc	/^void Plp::Compute(const VectorBase<BaseFloat> &wave,$/;"	f	class:kaldi::Plp
ComputeInternal	feat/feature-plp.cc	/^void Plp::ComputeInternal(const VectorBase<BaseFloat> &wave,$/;"	f	class:kaldi::Plp
GetEqualLoudness	feat/feature-plp.cc	/^const Vector<BaseFloat> *Plp::GetEqualLoudness(BaseFloat vtln_warp) {$/;"	f	class:kaldi::Plp
GetEqualLoudness	feat/feature-plp.cc	/^const Vector<BaseFloat> *Plp::GetEqualLoudness(BaseFloat vtln_warp,$/;"	f	class:kaldi::Plp
GetMelBanks	feat/feature-plp.cc	/^const MelBanks *Plp::GetMelBanks(BaseFloat vtln_warp) {$/;"	f	class:kaldi::Plp
GetMelBanks	feat/feature-plp.cc	/^const MelBanks *Plp::GetMelBanks(BaseFloat vtln_warp, bool *must_delete) const {$/;"	f	class:kaldi::Plp
Plp	feat/feature-plp.cc	/^Plp::Plp(const PlpOptions &opts)$/;"	f	class:kaldi::Plp
kaldi	feat/feature-plp.cc	/^namespace kaldi {$/;"	n	file:
~Plp	feat/feature-plp.cc	/^Plp::~Plp() {$/;"	f	class:kaldi::Plp
Dim	feat/feature-plp.h	/^  int32 Dim() const { return opts_.num_ceps; }$/;"	f	class:kaldi::Plp
KALDI_FEAT_FEATURE_PLP_H_	feat/feature-plp.h	21;"	d
Options	feat/feature-plp.h	/^  typedef PlpOptions Options;$/;"	t	class:kaldi::Plp
Plp	feat/feature-plp.h	/^class Plp {$/;"	c	namespace:kaldi
PlpOptions	feat/feature-plp.h	/^  PlpOptions() : mel_opts(23),$/;"	f	struct:kaldi::PlpOptions
PlpOptions	feat/feature-plp.h	/^struct PlpOptions {$/;"	s	namespace:kaldi
Register	feat/feature-plp.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::PlpOptions
cepstral_lifter	feat/feature-plp.h	/^  int32 cepstral_lifter;$/;"	m	struct:kaldi::PlpOptions
cepstral_scale	feat/feature-plp.h	/^  BaseFloat cepstral_scale;$/;"	m	struct:kaldi::PlpOptions
compress_factor	feat/feature-plp.h	/^  BaseFloat compress_factor;$/;"	m	struct:kaldi::PlpOptions
energy_floor	feat/feature-plp.h	/^  BaseFloat energy_floor;$/;"	m	struct:kaldi::PlpOptions
equal_loudness_	feat/feature-plp.h	/^  std::map<BaseFloat, Vector<BaseFloat>* > equal_loudness_;$/;"	m	class:kaldi::Plp
feature_window_function_	feat/feature-plp.h	/^  FeatureWindowFunction feature_window_function_;$/;"	m	class:kaldi::Plp
frame_opts	feat/feature-plp.h	/^  FrameExtractionOptions frame_opts;$/;"	m	struct:kaldi::PlpOptions
htk_compat	feat/feature-plp.h	/^  bool htk_compat;  \/\/ if true, put energy\/C0 last and introduce a factor of$/;"	m	struct:kaldi::PlpOptions
idft_bases_	feat/feature-plp.h	/^  Matrix<BaseFloat> idft_bases_;$/;"	m	class:kaldi::Plp
kaldi	feat/feature-plp.h	/^namespace kaldi {$/;"	n
lifter_coeffs_	feat/feature-plp.h	/^  Vector<BaseFloat> lifter_coeffs_;$/;"	m	class:kaldi::Plp
log_energy_floor_	feat/feature-plp.h	/^  BaseFloat log_energy_floor_;$/;"	m	class:kaldi::Plp
lpc_order	feat/feature-plp.h	/^  int32 lpc_order;$/;"	m	struct:kaldi::PlpOptions
mel_banks_	feat/feature-plp.h	/^  std::map<BaseFloat, MelBanks*> mel_banks_;  \/\/ BaseFloat is VTLN coefficient.$/;"	m	class:kaldi::Plp
mel_opts	feat/feature-plp.h	/^  MelBanksOptions mel_opts;$/;"	m	struct:kaldi::PlpOptions
num_ceps	feat/feature-plp.h	/^  int32 num_ceps;  \/\/ num cepstra including zero$/;"	m	struct:kaldi::PlpOptions
opts_	feat/feature-plp.h	/^  PlpOptions opts_;$/;"	m	class:kaldi::Plp
raw_energy	feat/feature-plp.h	/^  bool raw_energy;  \/\/ If true, compute energy before preemphasis and windowing$/;"	m	struct:kaldi::PlpOptions
srfft_	feat/feature-plp.h	/^  SplitRadixRealFft<BaseFloat> *srfft_;$/;"	m	class:kaldi::Plp
use_energy	feat/feature-plp.h	/^  bool use_energy;  \/\/ use energy; else C0$/;"	m	struct:kaldi::PlpOptions
UnitTestCompareWithDeltaFeatures	feat/feature-sdc-test.cc	/^static void UnitTestCompareWithDeltaFeatures(Matrix<BaseFloat> &raw_features, int32 window) {$/;"	f	file:
UnitTestEndEffects	feat/feature-sdc-test.cc	/^static void UnitTestEndEffects(Matrix<BaseFloat> &raw_features, int32 window, $/;"	f	file:
UnitTestParams	feat/feature-sdc-test.cc	/^static void UnitTestParams(Matrix<BaseFloat> &raw_features, int32 window, $/;"	f	file:
main	feat/feature-sdc-test.cc	/^int main() {$/;"	f
Compute	feat/feature-spectrogram.cc	/^void Spectrogram::Compute(const VectorBase<BaseFloat> &wave,$/;"	f	class:kaldi::Spectrogram
Spectrogram	feat/feature-spectrogram.cc	/^Spectrogram::Spectrogram(const SpectrogramOptions &opts)$/;"	f	class:kaldi::Spectrogram
kaldi	feat/feature-spectrogram.cc	/^namespace kaldi {$/;"	n	file:
~Spectrogram	feat/feature-spectrogram.cc	/^Spectrogram::~Spectrogram() {$/;"	f	class:kaldi::Spectrogram
KALDI_FEAT_FEATURE_SPECTROGRAM_H_	feat/feature-spectrogram.h	22;"	d
Register	feat/feature-spectrogram.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::SpectrogramOptions
Spectrogram	feat/feature-spectrogram.h	/^class Spectrogram {$/;"	c	namespace:kaldi
SpectrogramOptions	feat/feature-spectrogram.h	/^  SpectrogramOptions() :$/;"	f	struct:kaldi::SpectrogramOptions
SpectrogramOptions	feat/feature-spectrogram.h	/^struct SpectrogramOptions {$/;"	s	namespace:kaldi
energy_floor	feat/feature-spectrogram.h	/^  BaseFloat energy_floor;$/;"	m	struct:kaldi::SpectrogramOptions
feature_window_function_	feat/feature-spectrogram.h	/^  FeatureWindowFunction feature_window_function_;$/;"	m	class:kaldi::Spectrogram
frame_opts	feat/feature-spectrogram.h	/^  FrameExtractionOptions frame_opts;$/;"	m	struct:kaldi::SpectrogramOptions
kaldi	feat/feature-spectrogram.h	/^namespace kaldi {$/;"	n
log_energy_floor_	feat/feature-spectrogram.h	/^  BaseFloat log_energy_floor_;$/;"	m	class:kaldi::Spectrogram
opts_	feat/feature-spectrogram.h	/^  SpectrogramOptions opts_;$/;"	m	class:kaldi::Spectrogram
raw_energy	feat/feature-spectrogram.h	/^  bool raw_energy;  \/\/ If true, compute energy before preemphasis and windowing$/;"	m	struct:kaldi::SpectrogramOptions
srfft_	feat/feature-spectrogram.h	/^  SplitRadixRealFft<BaseFloat> *srfft_;$/;"	m	class:kaldi::Spectrogram
Compute	feat/mel-computations.cc	/^void MelBanks::Compute(const VectorBase<BaseFloat> &power_spectrum,$/;"	f	class:kaldi::MelBanks
ComputeLifterCoeffs	feat/mel-computations.cc	/^void ComputeLifterCoeffs(BaseFloat Q, VectorBase<BaseFloat> *coeffs) {$/;"	f	namespace:kaldi
Durbin	feat/mel-computations.cc	/^BaseFloat Durbin(int n, const BaseFloat *pAC, BaseFloat *pLP, BaseFloat *pTmp) {$/;"	f	namespace:kaldi
Lpc2Cepstrum	feat/mel-computations.cc	/^void Lpc2Cepstrum(int n, const BaseFloat *pLPC, BaseFloat *pCepst) {$/;"	f	namespace:kaldi
MelBanks	feat/mel-computations.cc	/^MelBanks::MelBanks(const MelBanksOptions &opts,$/;"	f	class:kaldi::MelBanks
VtlnWarpFreq	feat/mel-computations.cc	/^BaseFloat MelBanks::VtlnWarpFreq(BaseFloat vtln_low_cutoff,  \/\/ upper+lower frequency cutoffs for VTLN.$/;"	f	class:kaldi::MelBanks
VtlnWarpMelFreq	feat/mel-computations.cc	/^BaseFloat MelBanks::VtlnWarpMelFreq(BaseFloat vtln_low_cutoff,  \/\/ upper+lower frequency cutoffs for VTLN.$/;"	f	class:kaldi::MelBanks
kaldi	feat/mel-computations.cc	/^namespace kaldi {$/;"	n	file:
GetCenterFreqs	feat/mel-computations.h	/^  const Vector<BaseFloat> &GetCenterFreqs() const { return center_freqs_; }$/;"	f	class:kaldi::MelBanks
InverseMelScale	feat/mel-computations.h	/^  static inline BaseFloat InverseMelScale(BaseFloat mel_freq) {$/;"	f	class:kaldi::MelBanks
KALDI_FEAT_MEL_COMPUTATIONS_H_	feat/mel-computations.h	21;"	d
MelBanks	feat/mel-computations.h	/^class MelBanks {$/;"	c	namespace:kaldi
MelScale	feat/mel-computations.h	/^  static inline BaseFloat MelScale(BaseFloat freq) {$/;"	f	class:kaldi::MelBanks
NumBins	feat/mel-computations.h	/^  int32 NumBins() const { return bins_.size(); }$/;"	f	class:kaldi::MelBanks
bins_	feat/mel-computations.h	/^  std::vector<std::pair<int32, Vector<BaseFloat> > > bins_;$/;"	m	class:kaldi::MelBanks
center_freqs_	feat/mel-computations.h	/^  Vector<BaseFloat> center_freqs_;$/;"	m	class:kaldi::MelBanks
debug_	feat/mel-computations.h	/^  bool debug_;$/;"	m	class:kaldi::MelBanks
htk_mode_	feat/mel-computations.h	/^  bool htk_mode_;$/;"	m	class:kaldi::MelBanks
kaldi	feat/mel-computations.h	/^namespace kaldi {$/;"	n
AssertEqual	feat/online-feature-test.cc	/^template<class Real> static void AssertEqual(const Matrix<Real> &A,$/;"	f	namespace:kaldi
GetOutput	feat/online-feature-test.cc	/^void GetOutput(OnlineFeatureInterface *a,$/;"	f	namespace:kaldi
RandomSplit	feat/online-feature-test.cc	/^bool RandomSplit(int32 wav_dim,$/;"	f	namespace:kaldi
TestOnlineAppendFeature	feat/online-feature-test.cc	/^void TestOnlineAppendFeature() {$/;"	f	namespace:kaldi
TestOnlineDeltaFeature	feat/online-feature-test.cc	/^void TestOnlineDeltaFeature() {$/;"	f	namespace:kaldi
TestOnlineMatrixCacheFeature	feat/online-feature-test.cc	/^void TestOnlineMatrixCacheFeature() {$/;"	f	namespace:kaldi
TestOnlineMfcc	feat/online-feature-test.cc	/^void TestOnlineMfcc() {$/;"	f	namespace:kaldi
TestOnlinePlp	feat/online-feature-test.cc	/^void TestOnlinePlp() {$/;"	f	namespace:kaldi
TestOnlineSpliceFrames	feat/online-feature-test.cc	/^void TestOnlineSpliceFrames() {$/;"	f	namespace:kaldi
TestOnlineTransform	feat/online-feature-test.cc	/^void TestOnlineTransform() {$/;"	f	namespace:kaldi
kaldi	feat/online-feature-test.cc	/^namespace kaldi {$/;"	n	file:
main	feat/online-feature-test.cc	/^int main() {$/;"	f
AcceptWaveform	feat/online-feature.cc	/^void OnlineGenericBaseFeature<C>::AcceptWaveform(BaseFloat sampling_rate,$/;"	f	class:kaldi::OnlineGenericBaseFeature
CacheFrame	feat/online-feature.cc	/^void OnlineCmvn::CacheFrame(int32 frame, const Matrix<double> &stats) {$/;"	f	class:kaldi::OnlineCmvn
ClearCache	feat/online-feature.cc	/^void OnlineCacheFeature::ClearCache() {$/;"	f	class:kaldi::OnlineCacheFeature
ComputeStatsForFrame	feat/online-feature.cc	/^void OnlineCmvn::ComputeStatsForFrame(int32 frame,$/;"	f	class:kaldi::OnlineCmvn
Dim	feat/online-feature.cc	/^int32 OnlineDeltaFeature::Dim() const {$/;"	f	class:kaldi::OnlineDeltaFeature
Freeze	feat/online-feature.cc	/^void OnlineCmvn::Freeze(int32 cur_frame) {$/;"	f	class:kaldi::OnlineCmvn
GetFrame	feat/online-feature.cc	/^void OnlineAppendFeature::GetFrame(int32 frame, VectorBase<BaseFloat> *feat) {$/;"	f	class:kaldi::OnlineAppendFeature
GetFrame	feat/online-feature.cc	/^void OnlineCacheFeature::GetFrame(int32 frame, VectorBase<BaseFloat> *feat) {$/;"	f	class:kaldi::OnlineCacheFeature
GetFrame	feat/online-feature.cc	/^void OnlineCmvn::GetFrame(int32 frame,$/;"	f	class:kaldi::OnlineCmvn
GetFrame	feat/online-feature.cc	/^void OnlineDeltaFeature::GetFrame(int32 frame,$/;"	f	class:kaldi::OnlineDeltaFeature
GetFrame	feat/online-feature.cc	/^void OnlineGenericBaseFeature<C>::GetFrame(int32 frame,$/;"	f	class:kaldi::OnlineGenericBaseFeature
GetFrame	feat/online-feature.cc	/^void OnlineSpliceFrames::GetFrame(int32 frame, VectorBase<BaseFloat> *feat) {$/;"	f	class:kaldi::OnlineSpliceFrames
GetFrame	feat/online-feature.cc	/^void OnlineTransform::GetFrame(int32 frame, VectorBase<BaseFloat> *feat) {$/;"	f	class:kaldi::OnlineTransform
GetMostRecentCachedFrame	feat/online-feature.cc	/^void OnlineCmvn::GetMostRecentCachedFrame(int32 frame,$/;"	f	class:kaldi::OnlineCmvn
GetState	feat/online-feature.cc	/^void OnlineCmvn::GetState(int32 cur_frame,$/;"	f	class:kaldi::OnlineCmvn
InitRingBufferIfNeeded	feat/online-feature.cc	/^void OnlineCmvn::InitRingBufferIfNeeded() {$/;"	f	class:kaldi::OnlineCmvn
IsLastFrame	feat/online-feature.cc	/^bool OnlineGenericBaseFeature<C>::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineGenericBaseFeature
NumFramesReady	feat/online-feature.cc	/^int32 OnlineDeltaFeature::NumFramesReady() const {$/;"	f	class:kaldi::OnlineDeltaFeature
NumFramesReady	feat/online-feature.cc	/^int32 OnlineSpliceFrames::NumFramesReady() const {$/;"	f	class:kaldi::OnlineSpliceFrames
OnlineCmvn	feat/online-feature.cc	/^OnlineCmvn::OnlineCmvn(const OnlineCmvnOptions &opts,$/;"	f	class:kaldi::OnlineCmvn
OnlineCmvnState	feat/online-feature.cc	/^OnlineCmvnState::OnlineCmvnState(const OnlineCmvnState &other):$/;"	f	class:kaldi::OnlineCmvnState
OnlineDeltaFeature	feat/online-feature.cc	/^OnlineDeltaFeature::OnlineDeltaFeature(const DeltaFeaturesOptions &opts,$/;"	f	class:kaldi::OnlineDeltaFeature
OnlineGenericBaseFeature	feat/online-feature.cc	/^OnlineGenericBaseFeature<C>::OnlineGenericBaseFeature($/;"	f	class:kaldi::OnlineGenericBaseFeature
OnlineTransform	feat/online-feature.cc	/^OnlineTransform::OnlineTransform(const MatrixBase<BaseFloat> &transform,$/;"	f	class:kaldi::OnlineTransform
Read	feat/online-feature.cc	/^void OnlineCmvnState::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::OnlineCmvnState
SetState	feat/online-feature.cc	/^void OnlineCmvn::SetState(const OnlineCmvnState &cmvn_state) {$/;"	f	class:kaldi::OnlineCmvn
SmoothOnlineCmvnStats	feat/online-feature.cc	/^void OnlineCmvn::SmoothOnlineCmvnStats(const MatrixBase<double> &speaker_stats,$/;"	f	class:kaldi::OnlineCmvn
Write	feat/online-feature.cc	/^void OnlineCmvnState::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::OnlineCmvnState
kaldi	feat/online-feature.cc	/^namespace kaldi {$/;"	n	file:
~OnlineCmvn	feat/online-feature.cc	/^OnlineCmvn::~OnlineCmvn() {$/;"	f	class:kaldi::OnlineCmvn
Check	feat/online-feature.h	/^  void Check() {$/;"	f	struct:kaldi::OnlineCmvnOptions
Dim	feat/online-feature.h	/^  virtual int32 Dim() const { return mat_.NumCols(); }$/;"	f	class:kaldi::OnlineMatrixFeature
Dim	feat/online-feature.h	/^  virtual int32 Dim() const { return mfcc_or_plp_.Dim(); }$/;"	f	class:kaldi::OnlineGenericBaseFeature
Dim	feat/online-feature.h	/^  virtual int32 Dim() const { return offset_.Dim(); }$/;"	f	class:kaldi::OnlineTransform
Dim	feat/online-feature.h	/^  virtual int32 Dim() const { return src1_->Dim() + src2_->Dim(); }$/;"	f	class:kaldi::OnlineAppendFeature
Dim	feat/online-feature.h	/^  virtual int32 Dim() const { return src_->Dim(); }$/;"	f	class:kaldi::OnlineCacheFeature
Dim	feat/online-feature.h	/^  virtual int32 Dim() const { return src_->Dim(); }$/;"	f	class:kaldi::OnlineCmvn
Dim	feat/online-feature.h	/^  virtual int32 Dim() const {$/;"	f	class:kaldi::OnlineSpliceFrames
GetFrame	feat/online-feature.h	/^  virtual void GetFrame(int32 frame, VectorBase<BaseFloat> *feat) {$/;"	f	class:kaldi::OnlineMatrixFeature
InputFinished	feat/online-feature.h	/^  virtual void InputFinished() { input_finished_= true; }$/;"	f	class:kaldi::OnlineGenericBaseFeature
IsLastFrame	feat/online-feature.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineAppendFeature
IsLastFrame	feat/online-feature.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineCacheFeature
IsLastFrame	feat/online-feature.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineCmvn
IsLastFrame	feat/online-feature.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineDeltaFeature
IsLastFrame	feat/online-feature.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineMatrixFeature
IsLastFrame	feat/online-feature.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineSpliceFrames
IsLastFrame	feat/online-feature.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineTransform
KALDI_FEAT_ONLINE_FEATURE_H_	feat/online-feature.h	24;"	d
NumFramesReady	feat/online-feature.h	/^  virtual int32 NumFramesReady() const { return mat_.NumRows(); }$/;"	f	class:kaldi::OnlineMatrixFeature
NumFramesReady	feat/online-feature.h	/^  virtual int32 NumFramesReady() const { return num_frames_; }$/;"	f	class:kaldi::OnlineGenericBaseFeature
NumFramesReady	feat/online-feature.h	/^  virtual int32 NumFramesReady() const { return src_->NumFramesReady(); }$/;"	f	class:kaldi::OnlineCacheFeature
NumFramesReady	feat/online-feature.h	/^  virtual int32 NumFramesReady() const { return src_->NumFramesReady(); }$/;"	f	class:kaldi::OnlineCmvn
NumFramesReady	feat/online-feature.h	/^  virtual int32 NumFramesReady() const { return src_->NumFramesReady(); }$/;"	f	class:kaldi::OnlineTransform
NumFramesReady	feat/online-feature.h	/^  virtual int32 NumFramesReady() const {$/;"	f	class:kaldi::OnlineAppendFeature
OnlineAppendFeature	feat/online-feature.h	/^  OnlineAppendFeature(OnlineFeatureInterface *src1,$/;"	f	class:kaldi::OnlineAppendFeature
OnlineAppendFeature	feat/online-feature.h	/^class OnlineAppendFeature: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineCacheFeature	feat/online-feature.h	/^  explicit OnlineCacheFeature(OnlineFeatureInterface *src): src_(src) { }$/;"	f	class:kaldi::OnlineCacheFeature
OnlineCacheFeature	feat/online-feature.h	/^class OnlineCacheFeature: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineCmvn	feat/online-feature.h	/^class OnlineCmvn: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineCmvnOptions	feat/online-feature.h	/^  OnlineCmvnOptions():$/;"	f	struct:kaldi::OnlineCmvnOptions
OnlineCmvnOptions	feat/online-feature.h	/^struct OnlineCmvnOptions {$/;"	s	namespace:kaldi
OnlineCmvnState	feat/online-feature.h	/^  OnlineCmvnState() { }$/;"	f	struct:kaldi::OnlineCmvnState
OnlineCmvnState	feat/online-feature.h	/^  explicit OnlineCmvnState(const Matrix<double> &global_stats):$/;"	f	struct:kaldi::OnlineCmvnState
OnlineCmvnState	feat/online-feature.h	/^struct OnlineCmvnState {$/;"	s	namespace:kaldi
OnlineDeltaFeature	feat/online-feature.h	/^class OnlineDeltaFeature: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineFbank	feat/online-feature.h	/^typedef OnlineGenericBaseFeature<Fbank> OnlineFbank;$/;"	t	namespace:kaldi
OnlineGenericBaseFeature	feat/online-feature.h	/^class OnlineGenericBaseFeature: public OnlineBaseFeature {$/;"	c	namespace:kaldi
OnlineMatrixFeature	feat/online-feature.h	/^  explicit OnlineMatrixFeature(const MatrixBase<BaseFloat> &mat): mat_(mat) { }$/;"	f	class:kaldi::OnlineMatrixFeature
OnlineMatrixFeature	feat/online-feature.h	/^class OnlineMatrixFeature: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineMfcc	feat/online-feature.h	/^typedef OnlineGenericBaseFeature<Mfcc> OnlineMfcc;$/;"	t	namespace:kaldi
OnlinePlp	feat/online-feature.h	/^typedef OnlineGenericBaseFeature<Plp> OnlinePlp;$/;"	t	namespace:kaldi
OnlineSpliceFrames	feat/online-feature.h	/^  OnlineSpliceFrames(const OnlineSpliceOptions &opts,$/;"	f	class:kaldi::OnlineSpliceFrames
OnlineSpliceFrames	feat/online-feature.h	/^class OnlineSpliceFrames: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineSpliceOptions	feat/online-feature.h	/^  OnlineSpliceOptions(): left_context(4), right_context(4) { }$/;"	f	struct:kaldi::OnlineSpliceOptions
OnlineSpliceOptions	feat/online-feature.h	/^struct OnlineSpliceOptions {$/;"	s	namespace:kaldi
OnlineTransform	feat/online-feature.h	/^class OnlineTransform: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
Register	feat/online-feature.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::OnlineCmvnOptions
Register	feat/online-feature.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::OnlineSpliceOptions
cache_	feat/online-feature.h	/^  std::vector<Vector<BaseFloat>* > cache_;$/;"	m	class:kaldi::OnlineCacheFeature
cached_stats_modulo_	feat/online-feature.h	/^  std::vector<Matrix<double>*> cached_stats_modulo_;$/;"	m	class:kaldi::OnlineCmvn
cached_stats_ring_	feat/online-feature.h	/^  std::vector<std::pair<int32, Matrix<double> > > cached_stats_ring_;$/;"	m	class:kaldi::OnlineCmvn
cmn_window	feat/online-feature.h	/^  int32 cmn_window;$/;"	m	struct:kaldi::OnlineCmvnOptions
delta_features_	feat/online-feature.h	/^  DeltaFeatures delta_features_;  \/\/ This class contains just a few$/;"	m	class:kaldi::OnlineDeltaFeature
features_	feat/online-feature.h	/^  Matrix<BaseFloat> features_;$/;"	m	class:kaldi::OnlineGenericBaseFeature
frozen_state	feat/online-feature.h	/^  Matrix<double> frozen_state;$/;"	m	struct:kaldi::OnlineCmvnState
frozen_state_	feat/online-feature.h	/^  Matrix<double> frozen_state_;  \/\/ If the user called Freeze(), this variable$/;"	m	class:kaldi::OnlineCmvn
global_cmvn_stats	feat/online-feature.h	/^  Matrix<double> global_cmvn_stats;$/;"	m	struct:kaldi::OnlineCmvnState
global_frames	feat/online-feature.h	/^  int32 global_frames;  \/\/ must be <= speaker_frames.$/;"	m	struct:kaldi::OnlineCmvnOptions
input_finished_	feat/online-feature.h	/^  bool input_finished_;$/;"	m	class:kaldi::OnlineGenericBaseFeature
kaldi	feat/online-feature.h	/^namespace kaldi {$/;"	n
left_context	feat/online-feature.h	/^  int32 left_context;$/;"	m	struct:kaldi::OnlineSpliceOptions
left_context_	feat/online-feature.h	/^  int32 left_context_;$/;"	m	class:kaldi::OnlineSpliceFrames
linear_term_	feat/online-feature.h	/^  Matrix<BaseFloat> linear_term_;$/;"	m	class:kaldi::OnlineTransform
mat_	feat/online-feature.h	/^  const MatrixBase<BaseFloat> &mat_;$/;"	m	class:kaldi::OnlineMatrixFeature
mfcc_or_plp_	feat/online-feature.h	/^  C mfcc_or_plp_;  \/\/ class that does the MFCC or PLP computation$/;"	m	class:kaldi::OnlineGenericBaseFeature
modulus	feat/online-feature.h	/^  int32 modulus;  \/\/ not configurable from command line, relates to how the$/;"	m	struct:kaldi::OnlineCmvnOptions
normalize_mean	feat/online-feature.h	/^  bool normalize_mean;  \/\/ Must be true if normalize_variance==true.$/;"	m	struct:kaldi::OnlineCmvnOptions
normalize_variance	feat/online-feature.h	/^  bool normalize_variance;$/;"	m	struct:kaldi::OnlineCmvnOptions
num_frames_	feat/online-feature.h	/^  int32 num_frames_;$/;"	m	class:kaldi::OnlineGenericBaseFeature
offset_	feat/online-feature.h	/^  Vector<BaseFloat> offset_;$/;"	m	class:kaldi::OnlineTransform
opts_	feat/online-feature.h	/^  DeltaFeaturesOptions opts_;$/;"	m	class:kaldi::OnlineDeltaFeature
opts_	feat/online-feature.h	/^  OnlineCmvnOptions opts_;$/;"	m	class:kaldi::OnlineCmvn
orig_state_	feat/online-feature.h	/^  OnlineCmvnState orig_state_;   \/\/ reflects the state before we saw this$/;"	m	class:kaldi::OnlineCmvn
right_context	feat/online-feature.h	/^  int32 right_context;$/;"	m	struct:kaldi::OnlineSpliceOptions
right_context_	feat/online-feature.h	/^  int32 right_context_;$/;"	m	class:kaldi::OnlineSpliceFrames
ring_buffer_size	feat/online-feature.h	/^  int32 ring_buffer_size;  \/\/ not configurable from command line; size of ring$/;"	m	struct:kaldi::OnlineCmvnOptions
sampling_frequency_	feat/online-feature.h	/^  BaseFloat sampling_frequency_;$/;"	m	class:kaldi::OnlineGenericBaseFeature
skip_dims	feat/online-feature.h	/^  std::string skip_dims; \/\/ Colon-separated list of dimensions to skip normalization$/;"	m	struct:kaldi::OnlineCmvnOptions
skip_dims_	feat/online-feature.h	/^  std::vector<int32> skip_dims_; \/\/ Skip CMVN for these dimensions.  Derived from opts_.$/;"	m	class:kaldi::OnlineCmvn
speaker_cmvn_stats	feat/online-feature.h	/^  Matrix<double> speaker_cmvn_stats;$/;"	m	struct:kaldi::OnlineCmvnState
speaker_frames	feat/online-feature.h	/^  int32 speaker_frames;  \/\/ must be <= cmn_window$/;"	m	struct:kaldi::OnlineCmvnOptions
src1_	feat/online-feature.h	/^  OnlineFeatureInterface *src1_;$/;"	m	class:kaldi::OnlineAppendFeature
src2_	feat/online-feature.h	/^  OnlineFeatureInterface *src2_;$/;"	m	class:kaldi::OnlineAppendFeature
src_	feat/online-feature.h	/^  OnlineFeatureInterface *src_;  \/\/ Not owned here$/;"	m	class:kaldi::OnlineCacheFeature
src_	feat/online-feature.h	/^  OnlineFeatureInterface *src_;  \/\/ Not owned here$/;"	m	class:kaldi::OnlineCmvn
src_	feat/online-feature.h	/^  OnlineFeatureInterface *src_;  \/\/ Not owned here$/;"	m	class:kaldi::OnlineDeltaFeature
src_	feat/online-feature.h	/^  OnlineFeatureInterface *src_;  \/\/ Not owned here$/;"	m	class:kaldi::OnlineSpliceFrames
src_	feat/online-feature.h	/^  OnlineFeatureInterface *src_;  \/\/ Not owned here$/;"	m	class:kaldi::OnlineTransform
waveform_remainder_	feat/online-feature.h	/^  Vector<BaseFloat> waveform_remainder_;$/;"	m	class:kaldi::OnlineGenericBaseFeature
~OnlineAppendFeature	feat/online-feature.h	/^  virtual ~OnlineAppendFeature() {  }$/;"	f	class:kaldi::OnlineAppendFeature
~OnlineCacheFeature	feat/online-feature.h	/^  virtual ~OnlineCacheFeature() { ClearCache(); }$/;"	f	class:kaldi::OnlineCacheFeature
ConvertIntToString	feat/pitch-functions-test.cc	/^std::string ConvertIntToString(const int &number) {$/;"	f	namespace:kaldi
DirExist	feat/pitch-functions-test.cc	/^bool DirExist(const std::string &dirname) {$/;"	f	namespace:kaldi
UnitTestComputeGPE	feat/pitch-functions-test.cc	/^static void UnitTestComputeGPE() {$/;"	f	namespace:kaldi
UnitTestDelay	feat/pitch-functions-test.cc	/^static void UnitTestDelay() {$/;"	f	namespace:kaldi
UnitTestDiffSampleRate	feat/pitch-functions-test.cc	/^void UnitTestDiffSampleRate() {$/;"	f	namespace:kaldi
UnitTestFeatNoKeele	feat/pitch-functions-test.cc	/^static void UnitTestFeatNoKeele() {$/;"	f	namespace:kaldi
UnitTestFeatWithKeele	feat/pitch-functions-test.cc	/^static void UnitTestFeatWithKeele() {$/;"	f	namespace:kaldi
UnitTestKeele	feat/pitch-functions-test.cc	/^static void UnitTestKeele() {$/;"	f	namespace:kaldi
UnitTestKeeleNccfBallast	feat/pitch-functions-test.cc	/^static void UnitTestKeeleNccfBallast() {$/;"	f	namespace:kaldi
UnitTestPenaltyFactor	feat/pitch-functions-test.cc	/^static void UnitTestPenaltyFactor() {$/;"	f	namespace:kaldi
UnitTestPieces	feat/pitch-functions-test.cc	/^static void UnitTestPieces() {$/;"	f	namespace:kaldi
UnitTestPitchExtractionSpeed	feat/pitch-functions-test.cc	/^static void UnitTestPitchExtractionSpeed() {$/;"	f	namespace:kaldi
UnitTestPitchExtractorCompareKeele	feat/pitch-functions-test.cc	/^static void UnitTestPitchExtractorCompareKeele() {$/;"	f	namespace:kaldi
UnitTestProcess	feat/pitch-functions-test.cc	/^void UnitTestProcess() {$/;"	f	namespace:kaldi
UnitTestSearch	feat/pitch-functions-test.cc	/^static void UnitTestSearch() {$/;"	f	namespace:kaldi
UnitTestSimple	feat/pitch-functions-test.cc	/^static void UnitTestSimple() {$/;"	f	namespace:kaldi
kaldi	feat/pitch-functions-test.cc	/^namespace kaldi {$/;"	n	file:
main	feat/pitch-functions-test.cc	/^int main() {$/;"	f
AcceptWaveform	feat/pitch-functions.cc	/^void OnlinePitchFeature::AcceptWaveform($/;"	f	class:kaldi::OnlinePitchFeature
AcceptWaveform	feat/pitch-functions.cc	/^void OnlinePitchFeatureImpl::AcceptWaveform($/;"	f	class:kaldi::OnlinePitchFeatureImpl
AppendVector	feat/pitch-functions.cc	/^inline void AppendVector(const VectorBase<Real> &src, Vector<Real> *dst) {$/;"	f	namespace:kaldi
Cleanup	feat/pitch-functions.cc	/^void PitchFrameInfo::Cleanup(PitchFrameInfo *prev_frame) {$/;"	f	class:kaldi::PitchFrameInfo
ComputeAndProcessKaldiPitch	feat/pitch-functions.cc	/^void ComputeAndProcessKaldiPitch($/;"	f	namespace:kaldi
ComputeBacktraces	feat/pitch-functions.cc	/^void PitchFrameInfo::ComputeBacktraces($/;"	f	class:kaldi::PitchFrameInfo
ComputeCorrelation	feat/pitch-functions.cc	/^void ComputeCorrelation(const VectorBase<BaseFloat> &wave,$/;"	f	namespace:kaldi
ComputeKaldiPitch	feat/pitch-functions.cc	/^void ComputeKaldiPitch(const PitchExtractionOptions &opts,$/;"	f	namespace:kaldi
ComputeKaldiPitchFirstPass	feat/pitch-functions.cc	/^void ComputeKaldiPitchFirstPass($/;"	f	namespace:kaldi
ComputeLatency	feat/pitch-functions.cc	/^int32 PitchFrameInfo::ComputeLatency(int32 max_latency) {$/;"	f	class:kaldi::PitchFrameInfo
ComputeLocalCost	feat/pitch-functions.cc	/^void ComputeLocalCost(const VectorBase<BaseFloat> &nccf_pitch,$/;"	f	namespace:kaldi
ComputeNccf	feat/pitch-functions.cc	/^void ComputeNccf(const VectorBase<BaseFloat> &inner_prod,$/;"	f	namespace:kaldi
Dim	feat/pitch-functions.cc	/^  int32 Dim() const { return 2; }$/;"	f	class:kaldi::OnlinePitchFeatureImpl
ExtractFrame	feat/pitch-functions.cc	/^void OnlinePitchFeatureImpl::ExtractFrame($/;"	f	class:kaldi::OnlinePitchFeatureImpl
GetDeltaPitchFeature	feat/pitch-functions.cc	/^BaseFloat OnlineProcessPitch::GetDeltaPitchFeature(int32 frame) {$/;"	f	class:kaldi::OnlineProcessPitch
GetFrame	feat/pitch-functions.cc	/^void OnlinePitchFeature::GetFrame(int32 frame, VectorBase<BaseFloat> *feat) {$/;"	f	class:kaldi::OnlinePitchFeature
GetFrame	feat/pitch-functions.cc	/^void OnlinePitchFeatureImpl::GetFrame(int32 frame,$/;"	f	class:kaldi::OnlinePitchFeatureImpl
GetFrame	feat/pitch-functions.cc	/^void OnlineProcessPitch::GetFrame(int32 frame,$/;"	f	class:kaldi::OnlineProcessPitch
GetNormalizationWindow	feat/pitch-functions.cc	/^void OnlineProcessPitch::GetNormalizationWindow(int32 t,$/;"	f	class:kaldi::OnlineProcessPitch
GetNormalizedLogPitchFeature	feat/pitch-functions.cc	/^BaseFloat OnlineProcessPitch::GetNormalizedLogPitchFeature(int32 frame) {$/;"	f	class:kaldi::OnlineProcessPitch
GetPovFeature	feat/pitch-functions.cc	/^BaseFloat OnlineProcessPitch::GetPovFeature(int32 frame) const {$/;"	f	class:kaldi::OnlineProcessPitch
GetRawLogPitchFeature	feat/pitch-functions.cc	/^BaseFloat OnlineProcessPitch::GetRawLogPitchFeature(int32 frame) const {$/;"	f	class:kaldi::OnlineProcessPitch
InputFinished	feat/pitch-functions.cc	/^void OnlinePitchFeature::InputFinished() {$/;"	f	class:kaldi::OnlinePitchFeature
InputFinished	feat/pitch-functions.cc	/^void OnlinePitchFeatureImpl::InputFinished() {$/;"	f	class:kaldi::OnlinePitchFeatureImpl
IsLastFrame	feat/pitch-functions.cc	/^bool OnlinePitchFeature::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlinePitchFeature
IsLastFrame	feat/pitch-functions.cc	/^bool OnlinePitchFeatureImpl::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlinePitchFeatureImpl
NccfInfo	feat/pitch-functions.cc	/^  NccfInfo(BaseFloat avg_norm_prod,$/;"	f	struct:kaldi::NccfInfo
NccfInfo	feat/pitch-functions.cc	/^struct NccfInfo {$/;"	s	namespace:kaldi	file:
NccfToPov	feat/pitch-functions.cc	/^BaseFloat NccfToPov(BaseFloat n) {$/;"	f	namespace:kaldi
NccfToPovFeature	feat/pitch-functions.cc	/^BaseFloat NccfToPovFeature(BaseFloat n) {$/;"	f	namespace:kaldi
NumFramesAvailable	feat/pitch-functions.cc	/^int32 OnlinePitchFeatureImpl::NumFramesAvailable($/;"	f	class:kaldi::OnlinePitchFeatureImpl
NumFramesReady	feat/pitch-functions.cc	/^int32 OnlinePitchFeature::NumFramesReady() const {$/;"	f	class:kaldi::OnlinePitchFeature
NumFramesReady	feat/pitch-functions.cc	/^int32 OnlinePitchFeatureImpl::NumFramesReady() const {$/;"	f	class:kaldi::OnlinePitchFeatureImpl
NumFramesReady	feat/pitch-functions.cc	/^int32 OnlineProcessPitch::NumFramesReady() const {$/;"	f	class:kaldi::OnlineProcessPitch
OnlinePitchFeature	feat/pitch-functions.cc	/^OnlinePitchFeature::OnlinePitchFeature(const PitchExtractionOptions &opts)$/;"	f	class:kaldi::OnlinePitchFeature
OnlinePitchFeatureImpl	feat/pitch-functions.cc	/^OnlinePitchFeatureImpl::OnlinePitchFeatureImpl($/;"	f	class:kaldi::OnlinePitchFeatureImpl
OnlinePitchFeatureImpl	feat/pitch-functions.cc	/^class OnlinePitchFeatureImpl {$/;"	c	namespace:kaldi	file:
OnlineProcessPitch	feat/pitch-functions.cc	/^OnlineProcessPitch::OnlineProcessPitch($/;"	f	class:kaldi::OnlineProcessPitch
PitchFrameInfo	feat/pitch-functions.cc	/^PitchFrameInfo::PitchFrameInfo(PitchFrameInfo *prev_info):$/;"	f	class:kaldi::PitchFrameInfo
PitchFrameInfo	feat/pitch-functions.cc	/^PitchFrameInfo::PitchFrameInfo(int32 num_states)$/;"	f	class:kaldi::PitchFrameInfo
PitchFrameInfo	feat/pitch-functions.cc	/^class PitchFrameInfo {$/;"	c	namespace:kaldi	file:
ProcessPitch	feat/pitch-functions.cc	/^void ProcessPitch(const ProcessPitchOptions &opts,$/;"	f	namespace:kaldi
RecomputeBacktraces	feat/pitch-functions.cc	/^void OnlinePitchFeatureImpl::RecomputeBacktraces() {$/;"	f	class:kaldi::OnlinePitchFeatureImpl
SelectLags	feat/pitch-functions.cc	/^void SelectLags(const PitchExtractionOptions &opts,$/;"	f	namespace:kaldi
SetBestState	feat/pitch-functions.cc	/^void PitchFrameInfo::SetBestState($/;"	f	class:kaldi::PitchFrameInfo
SetNccfPov	feat/pitch-functions.cc	/^void PitchFrameInfo::SetNccfPov(const VectorBase<BaseFloat> &nccf_pov) {$/;"	f	class:kaldi::PitchFrameInfo
StateInfo	feat/pitch-functions.cc	/^    StateInfo(): backpointer(0), pov_nccf(0.0) { }$/;"	f	struct:kaldi::PitchFrameInfo::StateInfo
StateInfo	feat/pitch-functions.cc	/^  struct StateInfo {$/;"	s	class:kaldi::PitchFrameInfo	file:
UpdateNormalizationStats	feat/pitch-functions.cc	/^void OnlineProcessPitch::UpdateNormalizationStats(int32 frame) {$/;"	f	class:kaldi::OnlineProcessPitch
UpdateRemainder	feat/pitch-functions.cc	/^void OnlinePitchFeatureImpl::UpdateRemainder($/;"	f	class:kaldi::OnlinePitchFeatureImpl
avg_norm_prod	feat/pitch-functions.cc	/^  BaseFloat avg_norm_prod; \/\/ average value of e1 * e2.$/;"	m	struct:kaldi::NccfInfo	file:
backpointer	feat/pitch-functions.cc	/^    int32 backpointer;$/;"	m	struct:kaldi::PitchFrameInfo::StateInfo	file:
cur_best_state_	feat/pitch-functions.cc	/^  int32 cur_best_state_;$/;"	m	class:kaldi::PitchFrameInfo	file:
downsampled_samples_processed_	feat/pitch-functions.cc	/^  int64 downsampled_samples_processed_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
downsampled_signal_remainder_	feat/pitch-functions.cc	/^  Vector<BaseFloat> downsampled_signal_remainder_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
forward_cost_	feat/pitch-functions.cc	/^  Vector<BaseFloat> forward_cost_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
forward_cost_remainder_	feat/pitch-functions.cc	/^  double forward_cost_remainder_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
frame_info_	feat/pitch-functions.cc	/^  std::vector<PitchFrameInfo*> frame_info_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
frames_latency_	feat/pitch-functions.cc	/^  int32 frames_latency_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
input_finished_	feat/pitch-functions.cc	/^  bool input_finished_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
kRawFeatureDim	feat/pitch-functions.cc	/^const int32 OnlineProcessPitch::kRawFeatureDim;$/;"	m	class:kaldi::OnlineProcessPitch	file:
kaldi	feat/pitch-functions.cc	/^namespace kaldi {$/;"	n	file:
lag_nccf_	feat/pitch-functions.cc	/^  std::vector<std::pair<int32, BaseFloat> > lag_nccf_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
lags_	feat/pitch-functions.cc	/^  Vector<BaseFloat> lags_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
mean_square_energy	feat/pitch-functions.cc	/^  BaseFloat mean_square_energy;  \/\/ mean_square energy we used when computing the$/;"	m	struct:kaldi::NccfInfo	file:
nccf_first_lag_	feat/pitch-functions.cc	/^  int32 nccf_first_lag_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
nccf_info_	feat/pitch-functions.cc	/^  std::vector<NccfInfo*> nccf_info_;  $/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
nccf_last_lag_	feat/pitch-functions.cc	/^  int32 nccf_last_lag_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
nccf_pitch_resampled	feat/pitch-functions.cc	/^  Vector<BaseFloat> nccf_pitch_resampled;  \/\/ resampled nccf_pitch$/;"	m	struct:kaldi::NccfInfo	file:
nccf_resampler_	feat/pitch-functions.cc	/^  ArbitraryResample *nccf_resampler_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
opts_	feat/pitch-functions.cc	/^  PitchExtractionOptions opts_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
pitch_use_naive_search	feat/pitch-functions.cc	/^bool pitch_use_naive_search = false;  \/\/ This is used in unit-tests.$/;"	m	namespace:kaldi	file:
pov_nccf	feat/pitch-functions.cc	/^    BaseFloat pov_nccf;$/;"	m	struct:kaldi::PitchFrameInfo::StateInfo	file:
prev_info_	feat/pitch-functions.cc	/^  PitchFrameInfo *prev_info_;$/;"	m	class:kaldi::PitchFrameInfo	file:
signal_resampler_	feat/pitch-functions.cc	/^  LinearResample *signal_resampler_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
signal_sum_	feat/pitch-functions.cc	/^  double signal_sum_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
signal_sumsq_	feat/pitch-functions.cc	/^  double signal_sumsq_;$/;"	m	class:kaldi::OnlinePitchFeatureImpl	file:
state_info_	feat/pitch-functions.cc	/^  std::vector<StateInfo> state_info_;$/;"	m	class:kaldi::PitchFrameInfo	file:
state_offset_	feat/pitch-functions.cc	/^  int32 state_offset_;$/;"	m	class:kaldi::PitchFrameInfo	file:
~OnlinePitchFeature	feat/pitch-functions.cc	/^OnlinePitchFeature::~OnlinePitchFeature() {$/;"	f	class:kaldi::OnlinePitchFeature
~OnlinePitchFeatureImpl	feat/pitch-functions.cc	/^OnlinePitchFeatureImpl::~OnlinePitchFeatureImpl() {$/;"	f	class:kaldi::OnlinePitchFeatureImpl
Dim	feat/pitch-functions.h	/^  virtual int32 Dim() const { return 2; \/* (NCCF, pitch) *\/ }$/;"	f	class:kaldi::OnlinePitchFeature
Dim	feat/pitch-functions.h	/^  virtual int32 Dim() const { return dim_; }$/;"	f	class:kaldi::OnlineProcessPitch
IsLastFrame	feat/pitch-functions.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineProcessPitch
KALDI_FEAT_PITCH_FUNCTIONS_H_	feat/pitch-functions.h	23;"	d
NccfWindowShift	feat/pitch-functions.h	/^  int32 NccfWindowShift() const {$/;"	f	struct:kaldi::PitchExtractionOptions
NccfWindowSize	feat/pitch-functions.h	/^  int32 NccfWindowSize() const {$/;"	f	struct:kaldi::PitchExtractionOptions
NormalizationStats	feat/pitch-functions.h	/^    NormalizationStats(): cur_num_frames(-1), input_finished(false),$/;"	f	struct:kaldi::OnlineProcessPitch::NormalizationStats
NormalizationStats	feat/pitch-functions.h	/^  struct NormalizationStats {$/;"	s	class:kaldi::OnlineProcessPitch
OnlinePitchFeature	feat/pitch-functions.h	/^class OnlinePitchFeature: public OnlineBaseFeature {$/;"	c	namespace:kaldi
OnlineProcessPitch	feat/pitch-functions.h	/^class OnlineProcessPitch: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
PitchExtractionOptions	feat/pitch-functions.h	/^  PitchExtractionOptions():$/;"	f	struct:kaldi::PitchExtractionOptions
PitchExtractionOptions	feat/pitch-functions.h	/^struct PitchExtractionOptions {$/;"	s	namespace:kaldi
ProcessPitchOptions	feat/pitch-functions.h	/^  ProcessPitchOptions() :$/;"	f	struct:kaldi::ProcessPitchOptions
ProcessPitchOptions	feat/pitch-functions.h	/^struct ProcessPitchOptions {$/;"	s	namespace:kaldi
Register	feat/pitch-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::PitchExtractionOptions
Register	feat/pitch-functions.h	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::ProcessPitchOptions
add_delta_pitch	feat/pitch-functions.h	/^  bool add_delta_pitch;$/;"	m	struct:kaldi::ProcessPitchOptions
add_normalized_log_pitch	feat/pitch-functions.h	/^  bool add_normalized_log_pitch;  $/;"	m	struct:kaldi::ProcessPitchOptions
add_pov_feature	feat/pitch-functions.h	/^  bool add_pov_feature;  $/;"	m	struct:kaldi::ProcessPitchOptions
add_raw_log_pitch	feat/pitch-functions.h	/^  bool add_raw_log_pitch;$/;"	m	struct:kaldi::ProcessPitchOptions
cur_num_frames	feat/pitch-functions.h	/^    int32 cur_num_frames;      \/\/ value of src_->NumFramesReady() when$/;"	m	struct:kaldi::OnlineProcessPitch::NormalizationStats
delay	feat/pitch-functions.h	/^  int32 delay;$/;"	m	struct:kaldi::ProcessPitchOptions
delta_feature_noise_	feat/pitch-functions.h	/^  std::vector<BaseFloat> delta_feature_noise_;$/;"	m	class:kaldi::OnlineProcessPitch
delta_pitch	feat/pitch-functions.h	/^  BaseFloat delta_pitch;        \/\/ the pitch tolerance in pruning lags$/;"	m	struct:kaldi::PitchExtractionOptions
delta_pitch_noise_stddev	feat/pitch-functions.h	/^  BaseFloat delta_pitch_noise_stddev;  \/\/ stddev of noise we add to delta-pitch$/;"	m	struct:kaldi::ProcessPitchOptions
delta_pitch_scale	feat/pitch-functions.h	/^  BaseFloat delta_pitch_scale;$/;"	m	struct:kaldi::ProcessPitchOptions
delta_window	feat/pitch-functions.h	/^  int32 delta_window;$/;"	m	struct:kaldi::ProcessPitchOptions
dim_	feat/pitch-functions.h	/^  int32 dim_;  \/\/ Output feature dimension, set in initializer.$/;"	m	class:kaldi::OnlineProcessPitch
frame_length_ms	feat/pitch-functions.h	/^  BaseFloat frame_length_ms;    \/\/ in milliseconds.$/;"	m	struct:kaldi::PitchExtractionOptions
frame_shift_ms	feat/pitch-functions.h	/^  BaseFloat frame_shift_ms;     \/\/ in milliseconds.$/;"	m	struct:kaldi::PitchExtractionOptions
frames_per_chunk	feat/pitch-functions.h	/^  int32 frames_per_chunk;$/;"	m	struct:kaldi::PitchExtractionOptions
impl_	feat/pitch-functions.h	/^  OnlinePitchFeatureImpl *impl_;$/;"	m	class:kaldi::OnlinePitchFeature
input_finished	feat/pitch-functions.h	/^    bool input_finished;       \/\/ true if input data was finished when$/;"	m	struct:kaldi::OnlineProcessPitch::NormalizationStats
kRawFeatureDim	feat/pitch-functions.h	/^  static const int32 kRawFeatureDim = 2;  \/\/ input: (nccf, pitch)$/;"	m	class:kaldi::OnlineProcessPitch
kaldi	feat/pitch-functions.h	/^namespace kaldi {$/;"	n
lowpass_cutoff	feat/pitch-functions.h	/^  BaseFloat lowpass_cutoff;     \/\/ cutoff frequency for Low pass filter$/;"	m	struct:kaldi::PitchExtractionOptions
lowpass_filter_width	feat/pitch-functions.h	/^  int32 lowpass_filter_width;   \/\/ Integer that determines filter width of$/;"	m	struct:kaldi::PitchExtractionOptions
max_f0	feat/pitch-functions.h	/^  BaseFloat max_f0;             \/\/ max f0 to search (Hz)$/;"	m	struct:kaldi::PitchExtractionOptions
max_frames_latency	feat/pitch-functions.h	/^  int32 max_frames_latency;$/;"	m	struct:kaldi::PitchExtractionOptions
min_f0	feat/pitch-functions.h	/^  BaseFloat min_f0;             \/\/ min f0 to search (Hz)$/;"	m	struct:kaldi::PitchExtractionOptions
nccf_ballast	feat/pitch-functions.h	/^  BaseFloat nccf_ballast;       \/\/ Increasing this factor reduces NCCF for$/;"	m	struct:kaldi::PitchExtractionOptions
nccf_ballast_online	feat/pitch-functions.h	/^  bool nccf_ballast_online;$/;"	m	struct:kaldi::PitchExtractionOptions
normalization_left_context	feat/pitch-functions.h	/^  int32 normalization_left_context;    \/\/ left-context used for sliding-window$/;"	m	struct:kaldi::ProcessPitchOptions
normalization_right_context	feat/pitch-functions.h	/^  int32 normalization_right_context;   \/\/ this should be reduced in online$/;"	m	struct:kaldi::ProcessPitchOptions
normalization_stats_	feat/pitch-functions.h	/^  std::vector<NormalizationStats> normalization_stats_;$/;"	m	class:kaldi::OnlineProcessPitch
opts_	feat/pitch-functions.h	/^  ProcessPitchOptions opts_;$/;"	m	class:kaldi::OnlineProcessPitch
penalty_factor	feat/pitch-functions.h	/^  BaseFloat penalty_factor;     \/\/ cost factor for FO change$/;"	m	struct:kaldi::PitchExtractionOptions
pitch_scale	feat/pitch-functions.h	/^  BaseFloat pitch_scale;  \/\/ the final normalized-log-pitch feature is scaled$/;"	m	struct:kaldi::ProcessPitchOptions
pov_offset	feat/pitch-functions.h	/^  BaseFloat pov_offset;   \/\/ An offset that can be added to the final POV$/;"	m	struct:kaldi::ProcessPitchOptions
pov_scale	feat/pitch-functions.h	/^  BaseFloat pov_scale;    \/\/ the final POV feature is scaled with this value$/;"	m	struct:kaldi::ProcessPitchOptions
preemph_coeff	feat/pitch-functions.h	/^  BaseFloat preemph_coeff;      \/\/ Preemphasis coefficient. [use is deprecated.]$/;"	m	struct:kaldi::PitchExtractionOptions
recompute_frame	feat/pitch-functions.h	/^  int32 recompute_frame;$/;"	m	struct:kaldi::PitchExtractionOptions
resample_freq	feat/pitch-functions.h	/^  BaseFloat resample_freq;      \/\/ Integer that determines filter width when$/;"	m	struct:kaldi::PitchExtractionOptions
samp_freq	feat/pitch-functions.h	/^  BaseFloat samp_freq;          \/\/ sample frequency in hertz$/;"	m	struct:kaldi::PitchExtractionOptions
simulate_first_pass_online	feat/pitch-functions.h	/^  bool simulate_first_pass_online;$/;"	m	struct:kaldi::PitchExtractionOptions
snip_edges	feat/pitch-functions.h	/^  bool snip_edges;$/;"	m	struct:kaldi::PitchExtractionOptions
soft_min_f0	feat/pitch-functions.h	/^  BaseFloat soft_min_f0;        \/\/ Minimum f0, applied in soft way, must not$/;"	m	struct:kaldi::PitchExtractionOptions
src_	feat/pitch-functions.h	/^  OnlineFeatureInterface *src_;$/;"	m	class:kaldi::OnlineProcessPitch
sum_log_pitch_pov	feat/pitch-functions.h	/^    double sum_log_pitch_pov;  \/\/ sum of log(pitch) * pov over relevant range$/;"	m	struct:kaldi::OnlineProcessPitch::NormalizationStats
sum_pov	feat/pitch-functions.h	/^    double sum_pov;            \/\/ sum of pov over relevant range$/;"	m	struct:kaldi::OnlineProcessPitch::NormalizationStats
upsample_filter_width	feat/pitch-functions.h	/^  int32 upsample_filter_width;  \/\/ Integer that determines filter width when$/;"	m	struct:kaldi::PitchExtractionOptions
~OnlineProcessPitch	feat/pitch-functions.h	/^  virtual ~OnlineProcessPitch() {  }$/;"	f	class:kaldi::OnlineProcessPitch
TestFunction	feat/resample-test.cc	/^  explicit TestFunction(double frequency):$/;"	f	class:TestFunction
TestFunction	feat/resample-test.cc	/^class TestFunction {$/;"	c	file:
UnitTestArbitraryResample	feat/resample-test.cc	/^void UnitTestArbitraryResample() {$/;"	f
UnitTestLinearResample	feat/resample-test.cc	/^void UnitTestLinearResample() {$/;"	f
UnitTestLinearResample2	feat/resample-test.cc	/^void UnitTestLinearResample2() {$/;"	f
cos_magnitude_	feat/resample-test.cc	/^  double cos_magnitude_;$/;"	m	class:TestFunction	file:
frequency_	feat/resample-test.cc	/^  double frequency_;$/;"	m	class:TestFunction	file:
main	feat/resample-test.cc	/^int main() {$/;"	f
operator ()	feat/resample-test.cc	/^  double operator() (double t) const {$/;"	f	class:TestFunction
sin_magnitude_	feat/resample-test.cc	/^  double sin_magnitude_;$/;"	m	class:TestFunction	file:
ArbitraryResample	feat/resample.cc	/^ArbitraryResample::ArbitraryResample($/;"	f	class:kaldi::ArbitraryResample
FilterFunc	feat/resample.cc	/^BaseFloat ArbitraryResample::FilterFunc(BaseFloat t) const {$/;"	f	class:kaldi::ArbitraryResample
FilterFunc	feat/resample.cc	/^BaseFloat LinearResample::FilterFunc(BaseFloat t) const {$/;"	f	class:kaldi::LinearResample
GetIndexes	feat/resample.cc	/^void LinearResample::GetIndexes(int64 samp_out,$/;"	f	class:kaldi::LinearResample
GetNumOutputSamples	feat/resample.cc	/^int64 LinearResample::GetNumOutputSamples(int64 input_num_samp,$/;"	f	class:kaldi::LinearResample
LinearResample	feat/resample.cc	/^LinearResample::LinearResample(int32 samp_rate_in_hz,$/;"	f	class:kaldi::LinearResample
Resample	feat/resample.cc	/^void ArbitraryResample::Resample(const MatrixBase<BaseFloat> &input,$/;"	f	class:kaldi::ArbitraryResample
Resample	feat/resample.cc	/^void ArbitraryResample::Resample(const VectorBase<BaseFloat> &input,$/;"	f	class:kaldi::ArbitraryResample
Resample	feat/resample.cc	/^void LinearResample::Resample(const VectorBase<BaseFloat> &input,$/;"	f	class:kaldi::LinearResample
Reset	feat/resample.cc	/^void LinearResample::Reset() {$/;"	f	class:kaldi::LinearResample
SetIndexes	feat/resample.cc	/^void ArbitraryResample::SetIndexes(const Vector<BaseFloat> &sample_points) {$/;"	f	class:kaldi::ArbitraryResample
SetIndexesAndWeights	feat/resample.cc	/^void LinearResample::SetIndexesAndWeights() {$/;"	f	class:kaldi::LinearResample
SetRemainder	feat/resample.cc	/^void LinearResample::SetRemainder(const VectorBase<BaseFloat> &input) {$/;"	f	class:kaldi::LinearResample
SetWeights	feat/resample.cc	/^void ArbitraryResample::SetWeights(const Vector<BaseFloat> &sample_points) {$/;"	f	class:kaldi::ArbitraryResample
kaldi	feat/resample.cc	/^namespace kaldi {$/;"	n	file:
ArbitraryResample	feat/resample.h	/^class ArbitraryResample {$/;"	c	namespace:kaldi
KALDI_FEAT_RESAMPLE_H_	feat/resample.h	23;"	d
LinearResample	feat/resample.h	/^class LinearResample {$/;"	c	namespace:kaldi
NumSamplesIn	feat/resample.h	/^  int32 NumSamplesIn() const { return num_samples_in_; }$/;"	f	class:kaldi::ArbitraryResample
NumSamplesOut	feat/resample.h	/^  int32 NumSamplesOut() const { return weights_.size(); }$/;"	f	class:kaldi::ArbitraryResample
filter_cutoff_	feat/resample.h	/^  BaseFloat filter_cutoff_;$/;"	m	class:kaldi::ArbitraryResample
filter_cutoff_	feat/resample.h	/^  BaseFloat filter_cutoff_;$/;"	m	class:kaldi::LinearResample
first_index_	feat/resample.h	/^  std::vector<int32> first_index_;  \/\/ The first input-sample index that we sum$/;"	m	class:kaldi::ArbitraryResample
first_index_	feat/resample.h	/^  std::vector<int32> first_index_;$/;"	m	class:kaldi::LinearResample
input_remainder_	feat/resample.h	/^  Vector<BaseFloat> input_remainder_;  \/\/\/< A small trailing part of the$/;"	m	class:kaldi::LinearResample
input_sample_offset_	feat/resample.h	/^  int64 input_sample_offset_;  \/\/\/< The number of input samples we have$/;"	m	class:kaldi::LinearResample
input_samples_in_unit_	feat/resample.h	/^  int32 input_samples_in_unit_;   \/\/\/< The number of input samples in the$/;"	m	class:kaldi::LinearResample
kaldi	feat/resample.h	/^namespace kaldi {$/;"	n
num_samples_in_	feat/resample.h	/^  int32 num_samples_in_;$/;"	m	class:kaldi::ArbitraryResample
num_zeros_	feat/resample.h	/^  int32 num_zeros_;$/;"	m	class:kaldi::ArbitraryResample
num_zeros_	feat/resample.h	/^  int32 num_zeros_;$/;"	m	class:kaldi::LinearResample
output_sample_offset_	feat/resample.h	/^  int64 output_sample_offset_;  \/\/\/< The number of samples we have already$/;"	m	class:kaldi::LinearResample
output_samples_in_unit_	feat/resample.h	/^  int32 output_samples_in_unit_;  \/\/\/< The number of output samples in the$/;"	m	class:kaldi::LinearResample
samp_rate_in_	feat/resample.h	/^  BaseFloat samp_rate_in_;$/;"	m	class:kaldi::ArbitraryResample
samp_rate_in_	feat/resample.h	/^  int32 samp_rate_in_;$/;"	m	class:kaldi::LinearResample
samp_rate_out_	feat/resample.h	/^  int32 samp_rate_out_;$/;"	m	class:kaldi::LinearResample
weights_	feat/resample.h	/^  std::vector<Vector<BaseFloat> > weights_;$/;"	m	class:kaldi::ArbitraryResample
weights_	feat/resample.h	/^  std::vector<Vector<BaseFloat> > weights_;$/;"	m	class:kaldi::LinearResample
AddFreqToSignal	feat/sinusoid-detection-test.cc	/^void AddFreqToSignal(BaseFloat base_freq,$/;"	f	namespace:kaldi
AddSinusoidSimple	feat/sinusoid-detection-test.cc	/^void AddSinusoidSimple(BaseFloat samp_freq,$/;"	f	namespace:kaldi
GenerateDtmfTestCase	feat/sinusoid-detection-test.cc	/^void GenerateDtmfTestCase($/;"	f	namespace:kaldi
UnitTestAddSinusoid	feat/sinusoid-detection-test.cc	/^void UnitTestAddSinusoid() {$/;"	f	namespace:kaldi
UnitTestQuadraticMaximize	feat/sinusoid-detection-test.cc	/^void UnitTestQuadraticMaximize() {$/;"	f	namespace:kaldi
UnitTestQuadraticMaximizeEqualSpaced	feat/sinusoid-detection-test.cc	/^void UnitTestQuadraticMaximizeEqualSpaced() {$/;"	f	namespace:kaldi
UnitTestSinusoidDetector	feat/sinusoid-detection-test.cc	/^void UnitTestSinusoidDetector() {$/;"	f	namespace:kaldi
UnitTestSinusoidDetectorNoisy	feat/sinusoid-detection-test.cc	/^void UnitTestSinusoidDetectorNoisy() {$/;"	f	namespace:kaldi
UnitTestToneDetection2	feat/sinusoid-detection-test.cc	/^void UnitTestToneDetection2() {$/;"	f	namespace:kaldi
kaldi	feat/sinusoid-detection-test.cc	/^namespace kaldi {$/;"	n	file:
main	feat/sinusoid-detection-test.cc	/^int main() {$/;"	f
AcceptWaveform	feat/sinusoid-detection.cc	/^void MultiSinusoidDetector::AcceptWaveform($/;"	f	class:kaldi::MultiSinusoidDetector
AddSinusoid	feat/sinusoid-detection.cc	/^void AddSinusoid(BaseFloat samp_freq,$/;"	f	namespace:kaldi
ComputeBinInfo	feat/sinusoid-detection.cc	/^void SinusoidDetector::ComputeBinInfo($/;"	f	class:kaldi::SinusoidDetector
ComputeCoarseInfo	feat/sinusoid-detection.cc	/^void SinusoidDetector::ComputeCoarseInfo($/;"	f	class:kaldi::SinusoidDetector
ComputeCoefficients	feat/sinusoid-detection.cc	/^void SinusoidDetector::ComputeCoefficients() {$/;"	f	class:kaldi::SinusoidDetector
CreateCosAndSin	feat/sinusoid-detection.cc	/^void SinusoidDetector::CreateCosAndSin(BaseFloat samp_freq,$/;"	f	class:kaldi::SinusoidDetector
DetectSinusoid	feat/sinusoid-detection.cc	/^BaseFloat SinusoidDetector::DetectSinusoid($/;"	f	class:kaldi::SinusoidDetector
DetectSinusoids	feat/sinusoid-detection.cc	/^void DetectSinusoids(const VectorBase<BaseFloat> &signal,$/;"	f	namespace:kaldi
DetectedOneFrequency	feat/sinusoid-detection.cc	/^bool MultiSinusoidDetector::DetectedOneFrequency($/;"	f	class:kaldi::MultiSinusoidDetector
DetectedTwoFrequency	feat/sinusoid-detection.cc	/^bool MultiSinusoidDetector::DetectedTwoFrequency($/;"	f	class:kaldi::MultiSinusoidDetector
Done	feat/sinusoid-detection.cc	/^bool MultiSinusoidDetector::Done() const {$/;"	f	class:kaldi::MultiSinusoidDetector
FindCandidateBins	feat/sinusoid-detection.cc	/^void SinusoidDetector::FindCandidateBins($/;"	f	class:kaldi::SinusoidDetector
FindCandidateBins2	feat/sinusoid-detection.cc	/^void SinusoidDetector::FindCandidateBins2($/;"	f	class:kaldi::SinusoidDetector
FineOptimizeFrequency	feat/sinusoid-detection.cc	/^void SinusoidDetector::FineOptimizeFrequency($/;"	f	class:kaldi::SinusoidDetector
GetNextFrame	feat/sinusoid-detection.cc	/^void MultiSinusoidDetector::GetNextFrame(MultiSinusoidDetectorOutput *output) {$/;"	f	class:kaldi::MultiSinusoidDetector
GetNextFrameOfSignal	feat/sinusoid-detection.cc	/^void MultiSinusoidDetector::GetNextFrameOfSignal(Vector<BaseFloat> *frame) {$/;"	f	class:kaldi::MultiSinusoidDetector
MultiSinusoidDetector	feat/sinusoid-detection.cc	/^MultiSinusoidDetector::MultiSinusoidDetector($/;"	f	class:kaldi::MultiSinusoidDetector
NumSubsampledSamplesReady	feat/sinusoid-detection.cc	/^int32 MultiSinusoidDetector::NumSubsampledSamplesReady(int32 max_samp) const {$/;"	f	class:kaldi::MultiSinusoidDetector
OptimizeFrequency	feat/sinusoid-detection.cc	/^BaseFloat SinusoidDetector::OptimizeFrequency($/;"	f	class:kaldi::SinusoidDetector
QuadraticInterpolate	feat/sinusoid-detection.cc	/^BaseFloat SinusoidDetector::QuadraticInterpolate($/;"	f	class:kaldi::SinusoidDetector
QuadraticMaximize	feat/sinusoid-detection.cc	/^void SinusoidDetector::QuadraticMaximize($/;"	f	class:kaldi::SinusoidDetector
QuadraticMaximizeEqualSpaced	feat/sinusoid-detection.cc	/^void SinusoidDetector::QuadraticMaximizeEqualSpaced($/;"	f	class:kaldi::SinusoidDetector
Reset	feat/sinusoid-detection.cc	/^void MultiSinusoidDetector::Reset() {$/;"	f	class:kaldi::MultiSinusoidDetector
SelfTest	feat/sinusoid-detection.cc	/^void SinusoidDetector::SelfTest($/;"	f	class:kaldi::SinusoidDetector
SinusoidDetector	feat/sinusoid-detection.cc	/^SinusoidDetector::SinusoidDetector(BaseFloat samp_freq,$/;"	f	class:kaldi::SinusoidDetector
WaveformFinished	feat/sinusoid-detection.cc	/^void MultiSinusoidDetector::WaveformFinished() {$/;"	f	class:kaldi::MultiSinusoidDetector
kaldi	feat/sinusoid-detection.cc	/^namespace kaldi {$/;"	n	file:
Check	feat/sinusoid-detection.h	/^  void Check() const {$/;"	f	struct:kaldi::MultiSinusoidDetectorConfig
FrameShiftSecs	feat/sinusoid-detection.h	/^  BaseFloat FrameShiftSecs() const { return 0.001 * config_.frame_shift_ms; }$/;"	f	class:kaldi::MultiSinusoidDetector
InfoForBin	feat/sinusoid-detection.h	/^    InfoForBin(): valid(false) { }$/;"	f	struct:kaldi::SinusoidDetector::InfoForBin
InfoForBin	feat/sinusoid-detection.h	/^  struct InfoForBin {$/;"	s	class:kaldi::SinusoidDetector
KALDI_FEAT_SINUSOID_DETECTION_H_	feat/sinusoid-detection.h	19;"	d
M_	feat/sinusoid-detection.h	/^  Matrix<BaseFloat> M_;$/;"	m	class:kaldi::SinusoidDetector
Minv_	feat/sinusoid-detection.h	/^  Matrix<BaseFloat> Minv_;$/;"	m	class:kaldi::SinusoidDetector
MultiSinusoidDetector	feat/sinusoid-detection.h	/^class MultiSinusoidDetector {$/;"	c	namespace:kaldi
MultiSinusoidDetectorConfig	feat/sinusoid-detection.h	/^  MultiSinusoidDetectorConfig():$/;"	f	struct:kaldi::MultiSinusoidDetectorConfig
MultiSinusoidDetectorConfig	feat/sinusoid-detection.h	/^struct MultiSinusoidDetectorConfig {$/;"	s	namespace:kaldi
MultiSinusoidDetectorOutput	feat/sinusoid-detection.h	/^  MultiSinusoidDetectorOutput(): tot_energy(0.0), freq1(0.0),$/;"	f	struct:kaldi::MultiSinusoidDetectorOutput
MultiSinusoidDetectorOutput	feat/sinusoid-detection.h	/^struct MultiSinusoidDetectorOutput {$/;"	s	namespace:kaldi
OptimizedInfo	feat/sinusoid-detection.h	/^  struct OptimizedInfo {$/;"	s	class:kaldi::SinusoidDetector
Register	feat/sinusoid-detection.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::MultiSinusoidDetectorConfig
SamplingFrequency	feat/sinusoid-detection.h	/^  BaseFloat SamplingFrequency() const { return sample_freq_; }$/;"	f	class:kaldi::MultiSinusoidDetector
Sinusoid	feat/sinusoid-detection.h	/^  Sinusoid() {}$/;"	f	struct:kaldi::Sinusoid
Sinusoid	feat/sinusoid-detection.h	/^  Sinusoid(BaseFloat a, BaseFloat f, BaseFloat p):$/;"	f	struct:kaldi::Sinusoid
Sinusoid	feat/sinusoid-detection.h	/^struct Sinusoid {$/;"	s	namespace:kaldi
SinusoidDetector	feat/sinusoid-detection.h	/^class SinusoidDetector {$/;"	c	namespace:kaldi
amplitude	feat/sinusoid-detection.h	/^  BaseFloat amplitude;$/;"	m	struct:kaldi::Sinusoid
bin	feat/sinusoid-detection.h	/^    int32 bin;$/;"	m	struct:kaldi::SinusoidDetector::OptimizedInfo
config_	feat/sinusoid-detection.h	/^  MultiSinusoidDetectorConfig config_;$/;"	m	class:kaldi::MultiSinusoidDetector
cos_	feat/sinusoid-detection.h	/^  Matrix<BaseFloat> cos_;$/;"	m	class:kaldi::SinusoidDetector
cos_coeff	feat/sinusoid-detection.h	/^    BaseFloat cos_coeff;$/;"	m	struct:kaldi::SinusoidDetector::OptimizedInfo
cos_dot	feat/sinusoid-detection.h	/^    BaseFloat cos_dot;  \/\/ dot product of signal with cosine on left frequency$/;"	m	struct:kaldi::SinusoidDetector::InfoForBin
detector_	feat/sinusoid-detection.h	/^  SinusoidDetector detector_;$/;"	m	class:kaldi::MultiSinusoidDetector
energy	feat/sinusoid-detection.h	/^    BaseFloat energy;  \/\/ energy.$/;"	m	struct:kaldi::SinusoidDetector::InfoForBin
energy	feat/sinusoid-detection.h	/^    BaseFloat energy;$/;"	m	struct:kaldi::SinusoidDetector::OptimizedInfo
energy1	feat/sinusoid-detection.h	/^  BaseFloat energy1; \/\/ Energy of lower frequency divided by total energy, or 0$/;"	m	struct:kaldi::MultiSinusoidDetectorOutput
energy2	feat/sinusoid-detection.h	/^  BaseFloat energy2; \/\/ Energy of higher frequency divided by total energy, or 0$/;"	m	struct:kaldi::MultiSinusoidDetectorOutput
factor1_	feat/sinusoid-detection.h	/^  BaseFloat factor1_;  \/\/ When we search the range between two FFT bins, we$/;"	m	class:kaldi::SinusoidDetector
factor2_	feat/sinusoid-detection.h	/^  BaseFloat factor2_;  \/\/ As factor1, but for searches within a half-fft-bin$/;"	m	class:kaldi::SinusoidDetector
fft_	feat/sinusoid-detection.h	/^  SplitRadixRealFft<BaseFloat> fft_;  \/\/ Object used to compute FFT of padded_signal_.$/;"	m	class:kaldi::SinusoidDetector
frame_length_ms	feat/sinusoid-detection.h	/^  BaseFloat frame_length_ms;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
frame_shift_ms	feat/sinusoid-detection.h	/^  BaseFloat frame_shift_ms;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
freq	feat/sinusoid-detection.h	/^  BaseFloat freq;$/;"	m	struct:kaldi::Sinusoid
freq1	feat/sinusoid-detection.h	/^  BaseFloat freq1;  \/\/ Lower frequency detected, or 0 if none detected.$/;"	m	struct:kaldi::MultiSinusoidDetectorOutput
freq2	feat/sinusoid-detection.h	/^  BaseFloat freq2;  \/\/ Lower frequency detected, or 0 if zero or one$/;"	m	struct:kaldi::MultiSinusoidDetectorOutput
kaldi	feat/sinusoid-detection.h	/^namespace kaldi {$/;"	n
max_freq	feat/sinusoid-detection.h	/^  BaseFloat max_freq;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
min_freq	feat/sinusoid-detection.h	/^  BaseFloat min_freq;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
num_samples_	feat/sinusoid-detection.h	/^  int32 num_samples_;$/;"	m	class:kaldi::SinusoidDetector
num_samples_padded_	feat/sinusoid-detection.h	/^  int32 num_samples_padded_;  \/\/ Number of samples, after zero-padding to power of 2.$/;"	m	class:kaldi::SinusoidDetector
offset	feat/sinusoid-detection.h	/^    BaseFloat offset;$/;"	m	struct:kaldi::SinusoidDetector::OptimizedInfo
one_freq_min_energy	feat/sinusoid-detection.h	/^  BaseFloat one_freq_min_energy;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
phase	feat/sinusoid-detection.h	/^  BaseFloat phase;$/;"	m	struct:kaldi::Sinusoid
resampler_	feat/sinusoid-detection.h	/^  LinearResample resampler_;$/;"	m	class:kaldi::MultiSinusoidDetector
samp_freq_	feat/sinusoid-detection.h	/^  BaseFloat samp_freq_;$/;"	m	class:kaldi::SinusoidDetector
sample_freq_	feat/sinusoid-detection.h	/^  int32 sample_freq_;$/;"	m	class:kaldi::MultiSinusoidDetector
samples_consumed_	feat/sinusoid-detection.h	/^  int32 samples_consumed_;$/;"	m	class:kaldi::MultiSinusoidDetector
samples_per_frame_subsampled_	feat/sinusoid-detection.h	/^  int32 samples_per_frame_subsampled_;  \/\/ (samples per frame at subsampled$/;"	m	class:kaldi::MultiSinusoidDetector
samples_shift_subsampled_	feat/sinusoid-detection.h	/^  int32 samples_shift_subsampled_;  \/\/ (samples per frame-shift at subsampled$/;"	m	class:kaldi::MultiSinusoidDetector
sin_	feat/sinusoid-detection.h	/^  Matrix<BaseFloat> sin_;$/;"	m	class:kaldi::SinusoidDetector
sin_coeff	feat/sinusoid-detection.h	/^    BaseFloat sin_coeff;$/;"	m	struct:kaldi::SinusoidDetector::OptimizedInfo
sin_dot	feat/sinusoid-detection.h	/^    BaseFloat sin_dot;  \/\/ dot product of signal with sine on left frequency$/;"	m	struct:kaldi::SinusoidDetector::InfoForBin
subsample_filter_cutoff	feat/sinusoid-detection.h	/^  BaseFloat subsample_filter_cutoff;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
subsample_filter_zeros	feat/sinusoid-detection.h	/^  int32 subsample_filter_zeros;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
subsample_freq	feat/sinusoid-detection.h	/^  int32 subsample_freq;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
subsampled_signal_	feat/sinusoid-detection.h	/^  std::deque<Vector<BaseFloat>* > subsampled_signal_;$/;"	m	class:kaldi::MultiSinusoidDetector
tot_energy	feat/sinusoid-detection.h	/^  BaseFloat tot_energy;  \/\/ Total energy per sample of this frame (sum-square of$/;"	m	struct:kaldi::MultiSinusoidDetectorOutput
two_freq_min_energy	feat/sinusoid-detection.h	/^  BaseFloat two_freq_min_energy;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
two_freq_min_total_energy	feat/sinusoid-detection.h	/^  BaseFloat two_freq_min_total_energy;$/;"	m	struct:kaldi::MultiSinusoidDetectorConfig
valid	feat/sinusoid-detection.h	/^    bool valid;$/;"	m	struct:kaldi::SinusoidDetector::InfoForBin
waveform_finished_	feat/sinusoid-detection.h	/^  bool waveform_finished_;$/;"	m	class:kaldi::MultiSinusoidDetector
Expect4ByteTag	feat/wave-reader.cc	/^void WaveData::Expect4ByteTag(std::istream &is, const char *expected) {$/;"	f	class:kaldi::WaveData
Read	feat/wave-reader.cc	/^void WaveData::Read(std::istream &is) {$/;"	f	class:kaldi::WaveData
Read4ByteTag	feat/wave-reader.cc	/^void WaveData::Read4ByteTag(std::istream &is, char *dest) {$/;"	f	class:kaldi::WaveData
ReadUint16	feat/wave-reader.cc	/^uint16 WaveData::ReadUint16(std::istream &is, bool swap) {$/;"	f	class:kaldi::WaveData
ReadUint32	feat/wave-reader.cc	/^uint32 WaveData::ReadUint32(std::istream &is, bool swap) {$/;"	f	class:kaldi::WaveData
Write	feat/wave-reader.cc	/^void WaveData::Write(std::ostream &os) const {$/;"	f	class:kaldi::WaveData
WriteUint16	feat/wave-reader.cc	/^void WaveData::WriteUint16(std::ostream &os, int16 i) {$/;"	f	class:kaldi::WaveData
WriteUint32	feat/wave-reader.cc	/^void WaveData::WriteUint32(std::ostream &os, int32 i) {$/;"	f	class:kaldi::WaveData
kaldi	feat/wave-reader.cc	/^namespace kaldi {$/;"	n	file:
Clear	feat/wave-reader.h	/^  void Clear() { t_.Clear(); }$/;"	f	class:kaldi::WaveHolder
Clear	feat/wave-reader.h	/^  void Clear() {$/;"	f	class:kaldi::WaveData
Copy	feat/wave-reader.h	/^  void Copy(const T &t) { t_.CopyFrom(t); }$/;"	f	class:kaldi::WaveHolder
CopyFrom	feat/wave-reader.h	/^  void CopyFrom(const WaveData &other) {$/;"	f	class:kaldi::WaveData
Data	feat/wave-reader.h	/^  const Matrix<BaseFloat> &Data() const { return data_; }$/;"	f	class:kaldi::WaveData
Duration	feat/wave-reader.h	/^  BaseFloat Duration() const { return data_.NumCols()\/samp_freq_; }$/;"	f	class:kaldi::WaveData
IsReadInBinary	feat/wave-reader.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::WaveHolder
KALDI_FEAT_WAVE_READER_H_	feat/wave-reader.h	44;"	d
Read	feat/wave-reader.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::WaveHolder
SampFreq	feat/wave-reader.h	/^  BaseFloat SampFreq() const { return samp_freq_; }$/;"	f	class:kaldi::WaveData
T	feat/wave-reader.h	/^  typedef WaveData T;$/;"	t	class:kaldi::WaveHolder
Value	feat/wave-reader.h	/^  const T &Value() { return t_; }$/;"	f	class:kaldi::WaveHolder
WaveData	feat/wave-reader.h	/^  WaveData() : samp_freq_(0.0) {}$/;"	f	class:kaldi::WaveData
WaveData	feat/wave-reader.h	/^  WaveData(BaseFloat samp_freq, const MatrixBase<BaseFloat> &data)$/;"	f	class:kaldi::WaveData
WaveData	feat/wave-reader.h	/^class WaveData {$/;"	c	namespace:kaldi
WaveHolder	feat/wave-reader.h	/^  WaveHolder() {}$/;"	f	class:kaldi::WaveHolder
WaveHolder	feat/wave-reader.h	/^  WaveHolder(const WaveHolder &other): t_(other.t_) {}$/;"	f	class:kaldi::WaveHolder
WaveHolder	feat/wave-reader.h	/^class WaveHolder {$/;"	c	namespace:kaldi
Write	feat/wave-reader.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::WaveHolder
data_	feat/wave-reader.h	/^  Matrix<BaseFloat> data_;$/;"	m	class:kaldi::WaveData
kBlockSize	feat/wave-reader.h	/^  static const uint32 kBlockSize = 1048576;  \/\/ 1024 * 1024, use 1M bytes$/;"	m	class:kaldi::WaveData
kaldi	feat/wave-reader.h	/^namespace kaldi {$/;"	n
operator =	feat/wave-reader.h	/^  WaveHolder &operator = (const WaveHolder &other) {$/;"	f	class:kaldi::WaveHolder
samp_freq_	feat/wave-reader.h	/^  BaseFloat samp_freq_;$/;"	m	class:kaldi::WaveData
t_	feat/wave-reader.h	/^  T t_;$/;"	m	class:kaldi::WaveHolder
ADDLIBS	featbin/Makefile	/^ADDLIBS = ..\/lm\/kaldi-lm.a ..\/decoder\/kaldi-decoder.a ..\/lat\/kaldi-lat.a \\$/;"	m
BINFILES	featbin/Makefile	/^BINFILES = compute-mfcc-feats compute-plp-feats compute-fbank-feats \\$/;"	m
EXTRA_CXXFLAGS	featbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	featbin/Makefile	/^OBJFILES = $/;"	m
TESTFILES	featbin/Makefile	/^TESTFILES =$/;"	m
main	featbin/add-deltas-sdc.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/add-deltas.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/append-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
AppendVectorToFeats	featbin/append-vector-to-feats.cc	/^void AppendVectorToFeats(const Matrix<BaseFloat> &in,$/;"	f	namespace:kaldi
kaldi	featbin/append-vector-to-feats.cc	/^namespace kaldi {$/;"	n	file:
main	featbin/append-vector-to-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/apply-cmvn-sliding.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/apply-cmvn.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/compare-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/compose-transforms.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/compute-and-process-kaldi-pitch-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccCmvnStatsForPair	featbin/compute-cmvn-stats-two-channel.cc	/^void AccCmvnStatsForPair(const std::string &utt1, const std::string &utt2,$/;"	f	namespace:kaldi
GetUtterancePairs	featbin/compute-cmvn-stats-two-channel.cc	/^void GetUtterancePairs(const std::string &reco2file_and_channel_rxfilename,$/;"	f	namespace:kaldi
kaldi	featbin/compute-cmvn-stats-two-channel.cc	/^namespace kaldi {$/;"	n	file:
main	featbin/compute-cmvn-stats-two-channel.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccCmvnStatsWrapper	featbin/compute-cmvn-stats.cc	/^bool AccCmvnStatsWrapper(std::string utt,$/;"	f	namespace:kaldi
kaldi	featbin/compute-cmvn-stats.cc	/^namespace kaldi {$/;"	n	file:
main	featbin/compute-cmvn-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/compute-fbank-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/compute-kaldi-pitch-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/compute-mfcc-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/compute-plp-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/compute-spectrogram-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/copy-feats-to-htk.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/copy-feats-to-sphinx.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/copy-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/detect-sinusoids.cc	/^int main(int argc, char *argv[]) {$/;"	f
IncreaseTransformDimension	featbin/extend-transform-dim.cc	/^void IncreaseTransformDimension(int32 new_dimension,$/;"	f	namespace:kaldi
kaldi	featbin/extend-transform-dim.cc	/^namespace kaldi {$/;"	n	file:
main	featbin/extend-transform-dim.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/extract-feature-segments.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/extract-rows.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/extract-segments.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/feat-to-dim.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/feat-to-len.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/fmpe-acc-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/fmpe-apply-transform.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/fmpe-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/fmpe-est.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/fmpe-init.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/fmpe-sum-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
IncreaseTransformDimension	featbin/get-full-lda-mat.cc	/^void IncreaseTransformDimension(int32 new_dimension,$/;"	f	namespace:kaldi
kaldi	featbin/get-full-lda-mat.cc	/^namespace kaldi {$/;"	n	file:
main	featbin/get-full-lda-mat.cc	/^int main(int argc, char *argv[]) {$/;"	f
Backtrace	featbin/interpolate-pitch.cc	/^  void Backtrace(Matrix<BaseFloat> *mat, PitchInterpolatorStats *stats) {$/;"	f	class:kaldi::PitchInterpolator	file:
Check	featbin/interpolate-pitch.cc	/^  void Check() const {$/;"	f	struct:kaldi::PitchInterpolatorOptions
ComputeTransitionProb	featbin/interpolate-pitch.cc	/^  void ComputeTransitionProb(int32 t) {$/;"	f	class:kaldi::PitchInterpolator	file:
Forward	featbin/interpolate-pitch.cc	/^  void Forward() {$/;"	f	class:kaldi::PitchInterpolator	file:
InitValues	featbin/interpolate-pitch.cc	/^  void InitValues(const Matrix<BaseFloat> &mat) {$/;"	f	class:kaldi::PitchInterpolator	file:
LinearlyInterpolatePitch	featbin/interpolate-pitch.cc	/^void LinearlyInterpolatePitch(Matrix<BaseFloat> *mat) {$/;"	f	namespace:kaldi
MultiplyObsProb	featbin/interpolate-pitch.cc	/^  void MultiplyObsProb(int32 t) {$/;"	f	class:kaldi::PitchInterpolator	file:
PitchInterpolator	featbin/interpolate-pitch.cc	/^  PitchInterpolator(const PitchInterpolatorOptions &opts,$/;"	f	class:kaldi::PitchInterpolator
PitchInterpolator	featbin/interpolate-pitch.cc	/^class PitchInterpolator {$/;"	c	namespace:kaldi	file:
PitchInterpolatorOptions	featbin/interpolate-pitch.cc	/^  PitchInterpolatorOptions(): pitch_interval(4.0),$/;"	f	struct:kaldi::PitchInterpolatorOptions
PitchInterpolatorOptions	featbin/interpolate-pitch.cc	/^struct PitchInterpolatorOptions {$/;"	s	namespace:kaldi	file:
PitchInterpolatorStats	featbin/interpolate-pitch.cc	/^  PitchInterpolatorStats(): num_frames_tot(0), num_frames_zero(0),$/;"	f	struct:kaldi::PitchInterpolatorStats
PitchInterpolatorStats	featbin/interpolate-pitch.cc	/^struct PitchInterpolatorStats {$/;"	s	namespace:kaldi	file:
Print	featbin/interpolate-pitch.cc	/^  void Print() {$/;"	f	struct:kaldi::PitchInterpolatorStats
Register	featbin/interpolate-pitch.cc	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::PitchInterpolatorOptions
back_pointers_	featbin/interpolate-pitch.cc	/^  std::vector<std::vector<int32> > back_pointers_; \/\/ at each t, points to best pitch$/;"	m	class:kaldi::PitchInterpolator	file:
interpolator_factor	featbin/interpolate-pitch.cc	/^  BaseFloat interpolator_factor; \/\/ This affects the tendency of the algorithm to$/;"	m	struct:kaldi::PitchInterpolatorOptions	file:
kaldi	featbin/interpolate-pitch.cc	/^namespace kaldi {$/;"	n	file:
log_alpha_	featbin/interpolate-pitch.cc	/^  Vector<BaseFloat> log_alpha_;$/;"	m	class:kaldi::PitchInterpolator	file:
main	featbin/interpolate-pitch.cc	/^int main(int argc, char *argv[]) {$/;"	f
max_pitch_change_per_frame	featbin/interpolate-pitch.cc	/^  BaseFloat max_pitch_change_per_frame;$/;"	m	struct:kaldi::PitchInterpolatorOptions	file:
max_voicing_prob	featbin/interpolate-pitch.cc	/^  BaseFloat max_voicing_prob; \/\/ p(voicing) we use at the end of the range when it was observed$/;"	m	struct:kaldi::PitchInterpolatorOptions	file:
min_pitch_	featbin/interpolate-pitch.cc	/^  std::vector<BaseFloat> min_pitch_; \/\/ Bottom of discretization range...$/;"	m	class:kaldi::PitchInterpolator	file:
num_frames_	featbin/interpolate-pitch.cc	/^  int32 num_frames_; \/\/ number of frames;$/;"	m	class:kaldi::PitchInterpolator	file:
num_frames_changed	featbin/interpolate-pitch.cc	/^  int64 num_frames_changed; \/\/ #frames that were not zero originally, but$/;"	m	struct:kaldi::PitchInterpolatorStats	file:
num_frames_tot	featbin/interpolate-pitch.cc	/^  int64 num_frames_tot;$/;"	m	struct:kaldi::PitchInterpolatorStats	file:
num_frames_zero	featbin/interpolate-pitch.cc	/^  int64 num_frames_zero; \/\/ #frames that were zero in original pitch.$/;"	m	struct:kaldi::PitchInterpolatorStats	file:
num_pitches_	featbin/interpolate-pitch.cc	/^  int32 num_pitches_; \/\/ Number of discrete pitch intervals.$/;"	m	class:kaldi::PitchInterpolator	file:
opts_	featbin/interpolate-pitch.cc	/^  const PitchInterpolatorOptions &opts_;$/;"	m	class:kaldi::PitchInterpolator	file:
p_voicing_	featbin/interpolate-pitch.cc	/^  std::vector<BaseFloat> p_voicing_; \/\/ p(voicing) times max_voicing_prob_; or zero if$/;"	m	class:kaldi::PitchInterpolator	file:
pitch_	featbin/interpolate-pitch.cc	/^  std::vector<int32> pitch_; \/\/ observed pitch, discretized; [it's don't-care if algorithm had no$/;"	m	class:kaldi::PitchInterpolator	file:
pitch_interval	featbin/interpolate-pitch.cc	/^  BaseFloat pitch_interval; \/\/ Discretization interval [affects efficiency]$/;"	m	struct:kaldi::PitchInterpolatorOptions	file:
prev_log_alpha_	featbin/interpolate-pitch.cc	/^  Vector<BaseFloat> prev_log_alpha_;$/;"	m	class:kaldi::PitchInterpolator	file:
main	featbin/modify-cmvn-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
AppendFeats	featbin/paste-feats.cc	/^bool AppendFeats(const std::vector<Matrix<BaseFloat> > &in,$/;"	f	namespace:kaldi
kaldi	featbin/paste-feats.cc	/^namespace kaldi {$/;"	n	file:
main	featbin/paste-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/process-kaldi-pitch-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
ProcessPovFeatures	featbin/process-pitch-feats.cc	/^void ProcessPovFeatures(Matrix<BaseFloat> *mat) {$/;"	f	namespace:kaldi
SetToMovingAverage	featbin/process-pitch-feats.cc	/^void SetToMovingAverage(int32 average_window_size,$/;"	f	namespace:kaldi
SubtractMovingAverage	featbin/process-pitch-feats.cc	/^void SubtractMovingAverage(int32 normalization_window_size,$/;"	f	namespace:kaldi
TakeLogOfPitch	featbin/process-pitch-feats.cc	/^void TakeLogOfPitch(Matrix<BaseFloat> *mat) {$/;"	f	namespace:kaldi
kaldi	featbin/process-pitch-feats.cc	/^namespace kaldi {$/;"	n	file:
main	featbin/process-pitch-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/remove-mean.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/reverse-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/select-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/splice-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/subsample-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
CopyExcludedFeats	featbin/subset-feats.cc	/^int32 CopyExcludedFeats(std::string filename,$/;"	f
CopyIncludedFeats	featbin/subset-feats.cc	/^int32 CopyIncludedFeats(std::string filename,$/;"	f
main	featbin/subset-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/transform-feats-regtree.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/transform-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/wav-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	featbin/wav-to-duration.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	fgmmbin/Makefile	/^ADDLIBS = ..\/decoder\/kaldi-decoder.a ..\/lat\/kaldi-lat.a ..\/feat\/kaldi-feat.a \\$/;"	m
BINFILES	fgmmbin/Makefile	/^BINFILES = fgmm-global-acc-stats fgmm-global-sum-accs fgmm-global-est \\$/;"	m
EXTRA_CXXFLAGS	fgmmbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	fgmmbin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	fgmmbin/Makefile	/^TESTFILES =$/;"	m
main	fgmmbin/fgmm-global-acc-stats-twofeats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-acc-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-est.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-get-frame-likes.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-gselect-to-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
MergeFullGmm	fgmmbin/fgmm-global-merge.cc	/^void MergeFullGmm(const FullGmm &src, FullGmm *dst) {$/;"	f	namespace:kaldi
kaldi	fgmmbin/fgmm-global-merge.cc	/^namespace kaldi {$/;"	n	file:
main	fgmmbin/fgmm-global-merge.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-mixdown.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-sum-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-global-to-gmm.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fgmmbin/fgmm-gselect.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	fstbin/Makefile	/^ADDLIBS = ..\/fstext\/kaldi-fstext.a ..\/matrix\/kaldi-matrix.a ..\/base\/kaldi-base.a \\$/;"	m
BINFILES	fstbin/Makefile	/^BINFILES = fstdeterminizestar  \\$/;"	m
EXTRA_CXXFLAGS	fstbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
LIBFILE	fstbin/Makefile	/^LIBFILE = $/;"	m
OBJFILES	fstbin/Makefile	/^OBJFILES = $/;"	m
TESTFILES	fstbin/Makefile	/^TESTFILES = $/;"	m
main	fstbin/fstaddselfloops.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstaddsubsequentialloop.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstcomposecontext.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstcopy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstdeterminizelog.cc	/^int main(int argc, char *argv[]) {$/;"	f
debug_location	fstbin/fstdeterminizestar.cc	/^bool debug_location = false;$/;"	v
main	fstbin/fstdeterminizestar.cc	/^int main(int argc, char *argv[]) {$/;"	f
signal_handler	fstbin/fstdeterminizestar.cc	/^void signal_handler(int) {$/;"	f
main	fstbin/fstfactor.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstisstochastic.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstmakecontextfst.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstmakecontextsyms.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstminimizeencoded.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstphicompose.cc	/^int main(int argc, char *argv[]) {$/;"	f
debug_location	fstbin/fstpropfinal.cc	/^bool debug_location = false;$/;"	v
main	fstbin/fstpropfinal.cc	/^int main(int argc, char *argv[]) {$/;"	f
signal_handler	fstbin/fstpropfinal.cc	/^void signal_handler(int) {$/;"	f
main	fstbin/fstpushspecial.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstrand.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstrhocompose.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstrmepslocal.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fstrmsymbols.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fsts-to-transcripts.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	fstbin/fsttablecompose.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	fstext/Makefile	/^ADDLIBS =  ..\/tree\/kaldi-tree.a ..\/matrix\/kaldi-matrix.a \\$/;"	m
EXTRA_CXXFLAGS	fstext/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
LIBNAME	fstext/Makefile	/^LIBNAME = kaldi-fstext$/;"	m
OBJFILES	fstext/Makefile	/^OBJFILES = push-special.o$/;"	m
TESTFILES	fstext/Makefile	/^TESTFILES = determinize-star-test \\$/;"	m
AddSubsequentialLoop	fstext/context-fst-inl.h	/^void AddSubsequentialLoop(typename Arc::Label subseq_symbol,$/;"	f	namespace:fst
ComposeContext	fstext/context-fst-inl.h	/^inline void ComposeContext(vector<int32> &disambig_syms_in,$/;"	f	namespace:fst
ContextFst	fstext/context-fst-inl.h	/^ContextFst<Arc, LabelT>::ContextFst(const ContextFst<Arc, LabelT> &fst, bool reset) {$/;"	f	class:fst::ContextFst
ContextFstImpl	fstext/context-fst-inl.h	/^ContextFstImpl<Arc, LabelT>::ContextFstImpl(Label subsequential_symbol,  \/\/ epsilon not allowed.$/;"	f	class:fst::ContextFstImpl
ContextFstImpl	fstext/context-fst-inl.h	/^ContextFstImpl<Arc, LabelT>::ContextFstImpl(const ContextFstImpl &other):$/;"	f	class:fst::ContextFstImpl
CreateArc	fstext/context-fst-inl.h	/^bool ContextFstImpl<Arc, LabelT>::CreateArc(StateId s,$/;"	f	class:fst::ContextFstImpl
CreateDisambigArc	fstext/context-fst-inl.h	/^void ContextFstImpl<Arc, LabelT>::CreateDisambigArc(StateId s,$/;"	f	class:fst::ContextFstImpl
CreateILabelInfoSymbolTable	fstext/context-fst-inl.h	/^SymbolTable *CreateILabelInfoSymbolTable(const vector<vector<I> > &info,$/;"	f	namespace:fst
CreatePhoneOrEpsArc	fstext/context-fst-inl.h	/^bool ContextFstImpl<Arc, LabelT>::CreatePhoneOrEpsArc(StateId src,$/;"	f	class:fst::ContextFstImpl
Expand	fstext/context-fst-inl.h	/^void ContextFstImpl<Arc, LabelT>::Expand(StateId s) {  \/\/ expands arcs only [not final state weight].$/;"	f	class:fst::ContextFstImpl
Final	fstext/context-fst-inl.h	/^typename ContextFstImpl<Arc, LabelT>::Weight ContextFstImpl<Arc, LabelT>::Final(StateId s) {$/;"	f	class:fst::ContextFstImpl
Find	fstext/context-fst-inl.h	/^bool ContextMatcher<Arc, LabelT>::Find(typename Arc::Label match_label) {$/;"	f	class:fst::ContextMatcher
FindLabel	fstext/context-fst-inl.h	/^ContextFstImpl<Arc, LabelT>::FindLabel(const vector<LabelT> &label_vec) {$/;"	f	class:fst::ContextFstImpl
FindState	fstext/context-fst-inl.h	/^   ContextFstImpl<Arc, LabelT>::FindState(const vector<LabelT> &seq) {$/;"	f	class:fst::ContextFstImpl
InitArcIterator	fstext/context-fst-inl.h	/^void ContextFstImpl<Arc, LabelT>::InitArcIterator(StateId s, ArcIteratorData<Arc> *data) {$/;"	f	class:fst::ContextFstImpl
KALDI_FSTEXT_CONTEXT_FST_INL_H_	fstext/context-fst-inl.h	21;"	d
NumArcs	fstext/context-fst-inl.h	/^size_t ContextFstImpl<Arc, LabelT>::NumArcs(StateId s) {$/;"	f	class:fst::ContextFstImpl
NumInputEpsilons	fstext/context-fst-inl.h	/^size_t ContextFstImpl<Arc, LabelT>::NumInputEpsilons(StateId s) {$/;"	f	class:fst::ContextFstImpl
ReadILabelInfo	fstext/context-fst-inl.h	/^void ReadILabelInfo(std::istream &is, bool binary,$/;"	f	namespace:fst
Start	fstext/context-fst-inl.h	/^typename ContextFstImpl<Arc, LabelT>::StateId ContextFstImpl<Arc, LabelT>::Start() {$/;"	f	class:fst::ContextFstImpl
WriteILabelInfo	fstext/context-fst-inl.h	/^void WriteILabelInfo(std::ostream &os, bool binary,$/;"	f	namespace:fst
fst	fstext/context-fst-inl.h	/^namespace fst {$/;"	n
CheckPhones	fstext/context-fst-test.cc	/^static float CheckPhones(const VectorFst<Arc> &linear_fst,$/;"	f	namespace:fst
GenAcceptorFromSequence	fstext/context-fst-test.cc	/^static VectorFst<Arc> *GenAcceptorFromSequence(const vector<typename Arc::Label> &symbols, float cost) {$/;"	f	namespace:fst
GenRandPhoneSeq	fstext/context-fst-test.cc	/^static VectorFst<Arc> *GenRandPhoneSeq(vector<typename Arc::Label> &phone_syms,$/;"	f	namespace:fst
TestContextFst	fstext/context-fst-test.cc	/^template<class Arc> static void TestContextFst(bool verbose, bool use_matcher) {$/;"	f	namespace:fst
fst	fstext/context-fst-test.cc	/^namespace fst$/;"	n	file:
main	fstext/context-fst-test.cc	/^int main() {$/;"	f
ArcIterator	fstext/context-fst.h	/^  ArcIterator(const ContextFst<A> &fst, StateId s)$/;"	f	class:fst::ArcIterator
ArcIterator	fstext/context-fst.h	/^class ArcIterator< ContextFst<A> >$/;"	c	namespace:fst
ComposeContextFst	fstext/context-fst.h	/^void ComposeContextFst(const ContextFst<Arc, LabelT> &ifst1, const Fst<Arc> &ifst2,$/;"	f	namespace:fst
ContextF	fstext/context-fst.h	/^  typedef ContextFst<Arc, LabelT> ContextF;$/;"	t	class:fst::ContextMatcher
ContextFst	fstext/context-fst.h	/^  ContextFst(Label subsequential_symbol,  \/\/ epsilon not allowed.$/;"	f	class:fst::ContextFst
ContextFst	fstext/context-fst.h	/^class ContextFst : public Fst<Arc> {$/;"	c	namespace:fst
ContextFstImpl	fstext/context-fst.h	/^class ContextFstImpl : public CacheImpl<Arc> {$/;"	c	namespace:fst
ContextMatcher	fstext/context-fst.h	/^  ContextMatcher(const ContextMatcher<Arc, LabelT> &matcher, bool safe)$/;"	f	class:fst::ContextMatcher
ContextMatcher	fstext/context-fst.h	/^  ContextMatcher(const FST &fst, MatchType match_type)$/;"	f	class:fst::ContextMatcher
ContextMatcher	fstext/context-fst.h	/^class ContextMatcher : public MatcherBase<Arc> {  \/\/ CAREFUL: templated on arc, not on FST like normal Matcher.$/;"	c	namespace:fst
Copy	fstext/context-fst.h	/^  virtual ContextFst<Arc>  *Copy(bool reset = false) const {$/;"	f	class:fst::ContextFst
Copy	fstext/context-fst.h	/^  virtual ContextMatcher<Arc, LabelT> *Copy(bool safe = false) const {$/;"	f	class:fst::ContextMatcher
CreateArc	fstext/context-fst.h	/^  bool CreateArc(StateId s, Label olabel, Arc *oarc) const {$/;"	f	class:fst::ContextFst
Done	fstext/context-fst.h	/^  bool Done() const {$/;"	f	class:fst::ContextMatcher
Done_	fstext/context-fst.h	/^  virtual bool Done_() const { return Done(); }$/;"	f	class:fst::ContextMatcher
FST	fstext/context-fst.h	/^  typedef Fst<Arc> FST;  \/\/ basic FST type that we get passed$/;"	t	class:fst::ContextMatcher
Final	fstext/context-fst.h	/^  virtual Weight Final(StateId s) const { return impl_->Final(s); }$/;"	f	class:fst::ContextFst
Find_	fstext/context-fst.h	/^  virtual bool Find_(Label label) { return Find(label); }$/;"	f	class:fst::ContextMatcher
GetFst	fstext/context-fst.h	/^  virtual const FST &GetFst() const { return *fst_; }$/;"	f	class:fst::ContextMatcher
GetImpl	fstext/context-fst.h	/^  ContextFstImpl<Arc, LabelT> *GetImpl() const { return impl_; }$/;"	f	class:fst::ContextFst
ILabelInfo	fstext/context-fst.h	/^  const vector<vector<LabelT> > &ILabelInfo() { return ilabel_info_; }$/;"	f	class:fst::ContextFstImpl
ILabelInfo	fstext/context-fst.h	/^  const vector<vector<LabelT> > &ILabelInfo() { return impl_->ILabelInfo(); }$/;"	f	class:fst::ContextFst
InitArcIterator	fstext/context-fst.h	/^  virtual void InitArcIterator(StateId s, ArcIteratorData<Arc> *data) const {$/;"	f	class:fst::ContextFst
InitStateIterator	fstext/context-fst.h	/^void ContextFst<A, I>::InitStateIterator(StateIteratorData<A> *data) const {$/;"	f	class:fst::ContextFst
InputSymbols	fstext/context-fst.h	/^  virtual const SymbolTable* InputSymbols() const {$/;"	f	class:fst::ContextFst
IsDisambigSymbol	fstext/context-fst.h	/^  bool IsDisambigSymbol(Label lab) {  return (disambig_syms_.count(lab) != 0); }$/;"	f	class:fst::ContextFstImpl
IsPhoneSymbol	fstext/context-fst.h	/^  bool IsPhoneSymbol(Label lab) {  return (phone_syms_.count(lab) != 0); }$/;"	f	class:fst::ContextFstImpl
KALDI_FSTEXT_CONTEXT_FST_H_	fstext/context-fst.h	43;"	d
Label	fstext/context-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::ContextFst
Label	fstext/context-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::ContextFstImpl
Label	fstext/context-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::ContextMatcher
N_	fstext/context-fst.h	/^  int N_;$/;"	m	class:fst::ContextFstImpl
Next	fstext/context-fst.h	/^  void Next() {  \/\/ we only ever get one arc so just set ready_ to false.$/;"	f	class:fst::ContextMatcher
Next_	fstext/context-fst.h	/^  virtual void Next_() { Next(); }$/;"	f	class:fst::ContextMatcher
NumArcs	fstext/context-fst.h	/^  size_t NumArcs(StateId s) const { return impl_->NumArcs(s); }$/;"	f	class:fst::ContextFst
NumInputEpsilons	fstext/context-fst.h	/^  size_t NumInputEpsilons(StateId s) const {$/;"	f	class:fst::ContextFst
NumOutputEpsilons	fstext/context-fst.h	/^  size_t NumOutputEpsilons(StateId s) const {$/;"	f	class:fst::ContextFst
NumOutputEpsilons	fstext/context-fst.h	/^  size_t NumOutputEpsilons(StateId s) { return 0; }$/;"	f	class:fst::ContextFstImpl
NumStates	fstext/context-fst.h	/^  StateId NumStates() const { return impl_->NumStates(); }$/;"	f	class:fst::ContextFst
OutputSymbols	fstext/context-fst.h	/^  virtual const SymbolTable* OutputSymbols() const {$/;"	f	class:fst::ContextFst
P_	fstext/context-fst.h	/^  int P_;$/;"	m	class:fst::ContextFstImpl
Properties	fstext/context-fst.h	/^  virtual uint64 Properties(uint64 mask, bool test) const {$/;"	f	class:fst::ContextFst
Properties	fstext/context-fst.h	/^  virtual uint64 Properties(uint64 props) const { return props; } \/\/ simple matcher that does$/;"	f	class:fst::ContextMatcher
SetState	fstext/context-fst.h	/^  void SetState(StateId s) {$/;"	f	class:fst::ContextMatcher
SetState_	fstext/context-fst.h	/^  virtual void SetState_(StateId s) { SetState(s); }$/;"	f	class:fst::ContextMatcher
Start	fstext/context-fst.h	/^  virtual StateId Start() const { return impl_->Start(); }$/;"	f	class:fst::ContextFst
State	fstext/context-fst.h	/^  typedef CacheState<Arc> State;$/;"	t	class:fst::ContextFst
State	fstext/context-fst.h	/^  typedef typename Store::State State;$/;"	t	class:fst::ContextFst
State	fstext/context-fst.h	/^  typedef typename Store::State State;$/;"	t	class:fst::ContextFstImpl
StateId	fstext/context-fst.h	/^  typedef typename A::StateId StateId;$/;"	t	class:fst::ArcIterator
StateId	fstext/context-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::ContextFst
StateId	fstext/context-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::ContextFstImpl
StateId	fstext/context-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::ContextMatcher
StateIterator	fstext/context-fst.h	/^  explicit StateIterator(const ContextFst<A> &fst)$/;"	f	class:fst::StateIterator
StateIterator	fstext/context-fst.h	/^class StateIterator< ContextFst<A> >$/;"	c	namespace:fst
Store	fstext/context-fst.h	/^  typedef DefaultCacheStore<Arc> Store;$/;"	t	class:fst::ContextFst
Store	fstext/context-fst.h	/^  typedef DefaultCacheStore<Arc> Store;$/;"	t	class:fst::ContextFstImpl
Type	fstext/context-fst.h	/^  virtual MatchType Type(bool test) const {$/;"	f	class:fst::ContextMatcher
Type	fstext/context-fst.h	/^  virtual const string& Type() const { return impl_->Type(); }$/;"	f	class:fst::ContextFst
Value	fstext/context-fst.h	/^  const Arc& Value() const {$/;"	f	class:fst::ContextMatcher
Value_	fstext/context-fst.h	/^  virtual const Arc& Value_() const { return Value(); }$/;"	f	class:fst::ContextMatcher
VectorToLabelIter	fstext/context-fst.h	/^  typedef typename VectorToLabelType::const_iterator VectorToLabelIter;$/;"	t	class:fst::ContextFstImpl
VectorToLabelType	fstext/context-fst.h	/^                        Label, kaldi::VectorHasher<LabelT> > VectorToLabelType;$/;"	t	class:fst::ContextFstImpl
VectorToStateIter	fstext/context-fst.h	/^  typedef typename VectorToStateType::const_iterator VectorToStateIter;$/;"	t	class:fst::ContextFstImpl
VectorToStateType	fstext/context-fst.h	/^                        StateId, kaldi::VectorHasher<LabelT> > VectorToStateType;$/;"	t	class:fst::ContextFstImpl
Weight	fstext/context-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::ContextFst
Weight	fstext/context-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::ContextFstImpl
Weight	fstext/context-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::ContextMatcher
arc_	fstext/context-fst.h	/^  Arc arc_;                       \/\/ Current arc.$/;"	m	class:fst::ContextMatcher
current_loop_	fstext/context-fst.h	/^  bool current_loop_;             \/\/ Current arc is the implicit loop$/;"	m	class:fst::ContextMatcher
disambig_syms_	fstext/context-fst.h	/^  kaldi::ConstIntegerSet<Label> disambig_syms_;$/;"	m	class:fst::ContextFstImpl
fst	fstext/context-fst.h	/^namespace fst {$/;"	n
fst_	fstext/context-fst.h	/^  const FST *fst_;$/;"	m	class:fst::ContextMatcher
ilabel_info_	fstext/context-fst.h	/^  vector<vector<LabelT> > ilabel_info_;$/;"	m	class:fst::ContextFstImpl
ilabel_map_	fstext/context-fst.h	/^  VectorToLabelType ilabel_map_;$/;"	m	class:fst::ContextFstImpl
impl_	fstext/context-fst.h	/^  ContextFstImpl<Arc, LabelT> *impl_;  \/\/ protected so CacheStateIterator$/;"	m	class:fst::ContextFst
match_label_	fstext/context-fst.h	/^  Label match_label_;             \/\/ Current label to be matched$/;"	m	class:fst::ContextMatcher
match_type_	fstext/context-fst.h	/^  MatchType match_type_;          \/\/ Type of match to perform$/;"	m	class:fst::ContextMatcher
phone_syms_	fstext/context-fst.h	/^  kaldi::ConstIntegerSet<Label> phone_syms_;$/;"	m	class:fst::ContextFstImpl
pseudo_eps_symbol_	fstext/context-fst.h	/^  int pseudo_eps_symbol_;  \/\/ This is the symbol we put on epsilon arcs at the start$/;"	m	class:fst::ContextFstImpl
ready_	fstext/context-fst.h	/^  bool ready_;                     \/\/ True if arc is waiting to be output.$/;"	m	class:fst::ContextMatcher
s_	fstext/context-fst.h	/^  StateId s_;                     \/\/ Current state.$/;"	m	class:fst::ContextMatcher
separator_	fstext/context-fst.h	/^  std::string separator_;$/;"	m	class:fst::ContextFstImpl
state_map_	fstext/context-fst.h	/^  VectorToStateType state_map_;$/;"	m	class:fst::ContextFstImpl
state_seqs_	fstext/context-fst.h	/^  vector<vector<LabelT> > state_seqs_;$/;"	m	class:fst::ContextFstImpl
subsequential_symbol_	fstext/context-fst.h	/^  Label subsequential_symbol_;$/;"	m	class:fst::ContextFstImpl
~ContextFst	fstext/context-fst.h	/^  virtual ~ContextFst() { if (!impl_->DecrRefCount()) delete impl_;  }$/;"	f	class:fst::ContextFst
~ContextFstImpl	fstext/context-fst.h	/^  ~ContextFstImpl() { }$/;"	f	class:fst::ContextFstImpl
~ContextMatcher	fstext/context-fst.h	/^  virtual ~ContextMatcher() {$/;"	f	class:fst::ContextMatcher
BackoffDeterministicOnDemandFst	fstext/deterministic-fst-inl.h	/^BackoffDeterministicOnDemandFst<Arc>::BackoffDeterministicOnDemandFst($/;"	f	class:fst::BackoffDeterministicOnDemandFst
CacheDeterministicOnDemandFst	fstext/deterministic-fst-inl.h	/^CacheDeterministicOnDemandFst<Arc>::CacheDeterministicOnDemandFst($/;"	f	class:fst::CacheDeterministicOnDemandFst
ComposeDeterministicOnDemandFst	fstext/deterministic-fst-inl.h	/^ComposeDeterministicOnDemandFst<Arc>::ComposeDeterministicOnDemandFst($/;"	f	class:fst::ComposeDeterministicOnDemandFst
Final	fstext/deterministic-fst-inl.h	/^typename Arc::Weight BackoffDeterministicOnDemandFst<Arc>::Final(StateId state) {$/;"	f	class:fst::BackoffDeterministicOnDemandFst
Final	fstext/deterministic-fst-inl.h	/^typename Arc::Weight ComposeDeterministicOnDemandFst<Arc>::Final(StateId s) {$/;"	f	class:fst::ComposeDeterministicOnDemandFst
Final	fstext/deterministic-fst-inl.h	/^typename Arc::Weight LmExampleDeterministicOnDemandFst<Arc>::Final(StateId s) {$/;"	f	class:fst::LmExampleDeterministicOnDemandFst
Final	fstext/deterministic-fst-inl.h	/^typename Arc::Weight UnweightedNgramFst<Arc>::Final(StateId state) {$/;"	f	class:fst::UnweightedNgramFst
GetArc	fstext/deterministic-fst-inl.h	/^bool BackoffDeterministicOnDemandFst<Arc>::GetArc($/;"	f	class:fst::BackoffDeterministicOnDemandFst
GetArc	fstext/deterministic-fst-inl.h	/^bool CacheDeterministicOnDemandFst<Arc>::GetArc(StateId s, Label ilabel,$/;"	f	class:fst::CacheDeterministicOnDemandFst
GetArc	fstext/deterministic-fst-inl.h	/^bool ComposeDeterministicOnDemandFst<Arc>::GetArc(StateId s, Label ilabel,$/;"	f	class:fst::ComposeDeterministicOnDemandFst
GetArc	fstext/deterministic-fst-inl.h	/^bool LmExampleDeterministicOnDemandFst<Arc>::GetArc($/;"	f	class:fst::LmExampleDeterministicOnDemandFst
GetArc	fstext/deterministic-fst-inl.h	/^bool UnweightedNgramFst<Arc>::GetArc($/;"	f	class:fst::UnweightedNgramFst
GetBackoffState	fstext/deterministic-fst-inl.h	/^BackoffDeterministicOnDemandFst<Arc>::GetBackoffState(StateId s,$/;"	f	class:fst::BackoffDeterministicOnDemandFst
GetIndex	fstext/deterministic-fst-inl.h	/^inline size_t CacheDeterministicOnDemandFst<Arc>::GetIndex($/;"	f	class:fst::CacheDeterministicOnDemandFst
KALDI_FSTEXT_DETERMINISTIC_FST_INL_H_	fstext/deterministic-fst-inl.h	22;"	d
LmExampleDeterministicOnDemandFst	fstext/deterministic-fst-inl.h	/^LmExampleDeterministicOnDemandFst<Arc>::LmExampleDeterministicOnDemandFst($/;"	f	class:fst::LmExampleDeterministicOnDemandFst
UnweightedNgramFst	fstext/deterministic-fst-inl.h	/^UnweightedNgramFst<Arc>::UnweightedNgramFst(int n): n_(n) {$/;"	f	class:fst::UnweightedNgramFst
fst	fstext/deterministic-fst-inl.h	/^namespace fst {$/;"	n
CreateBackoffFst	fstext/deterministic-fst-test.cc	/^StdVectorFst* CreateBackoffFst() {$/;"	f	namespace:fst
CreateResultFst	fstext/deterministic-fst-test.cc	/^StdVectorFst* CreateResultFst() {$/;"	f	namespace:fst
DeleteTestFst	fstext/deterministic-fst-test.cc	/^void DeleteTestFst(StdVectorFst *fst) {$/;"	f	namespace:fst
FileExists	fstext/deterministic-fst-test.cc	/^bool FileExists(string strFilename) { $/;"	f	namespace:fst
Label	fstext/deterministic-fst-test.cc	/^typedef fst::StdArc::Label   Label;$/;"	t	namespace:fst	file:
StateId	fstext/deterministic-fst-test.cc	/^typedef fst::StdArc::StateId StateId;$/;"	t	namespace:fst	file:
StdArc	fstext/deterministic-fst-test.cc	/^typedef fst::StdArc          StdArc;$/;"	t	namespace:fst	file:
StdVectorFst	fstext/deterministic-fst-test.cc	/^typedef fst::StdVectorFst    StdVectorFst;$/;"	t	namespace:fst	file:
TestBackoffAndCache	fstext/deterministic-fst-test.cc	/^void TestBackoffAndCache() {$/;"	f	namespace:fst
TestCompose	fstext/deterministic-fst-test.cc	/^void TestCompose() {$/;"	f	namespace:fst
WalkSinglePath	fstext/deterministic-fst-test.cc	/^Weight WalkSinglePath(StdVectorFst *ifst, DeterministicOnDemandFst<StdArc> *dfst) {$/;"	f	namespace:fst
Weight	fstext/deterministic-fst-test.cc	/^typedef fst::StdArc::Weight  Weight;$/;"	t	namespace:fst	file:
fst	fstext/deterministic-fst-test.cc	/^namespace fst {$/;"	n	file:
main	fstext/deterministic-fst-test.cc	/^int main() {$/;"	f
BackoffDeterministicOnDemandFst	fstext/deterministic-fst.h	/^class BackoffDeterministicOnDemandFst: public DeterministicOnDemandFst<Arc> {$/;"	c	namespace:fst
CacheDeterministicOnDemandFst	fstext/deterministic-fst.h	/^class CacheDeterministicOnDemandFst: public DeterministicOnDemandFst<Arc> {$/;"	c	namespace:fst
ComposeDeterministicOnDemandFst	fstext/deterministic-fst.h	/^class ComposeDeterministicOnDemandFst: public DeterministicOnDemandFst<Arc> {$/;"	c	namespace:fst
DeterministicOnDemandFst	fstext/deterministic-fst.h	/^class DeterministicOnDemandFst {$/;"	c	namespace:fst
Final	fstext/deterministic-fst.h	/^  virtual Weight Final(StateId s) { return fst_->Final(s); }$/;"	f	class:fst::CacheDeterministicOnDemandFst
KALDI_FSTEXT_DETERMINISTIC_FST_H_	fstext/deterministic-fst.h	42;"	d
Label	fstext/deterministic-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::BackoffDeterministicOnDemandFst
Label	fstext/deterministic-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::CacheDeterministicOnDemandFst
Label	fstext/deterministic-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::ComposeDeterministicOnDemandFst
Label	fstext/deterministic-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::DeterministicOnDemandFst
Label	fstext/deterministic-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::LmExampleDeterministicOnDemandFst
Label	fstext/deterministic-fst.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::UnweightedNgramFst
LmExampleDeterministicOnDemandFst	fstext/deterministic-fst.h	/^class LmExampleDeterministicOnDemandFst: public DeterministicOnDemandFst<Arc> {$/;"	c	namespace:fst
MapType	fstext/deterministic-fst.h	/^    StateId, kaldi::VectorHasher<Label> > MapType;$/;"	t	class:fst::UnweightedNgramFst
MapType	fstext/deterministic-fst.h	/^  typedef unordered_map<std::pair<StateId, StateId>, StateId, kaldi::PairHasher<StateId> > MapType;$/;"	t	class:fst::ComposeDeterministicOnDemandFst
MapType	fstext/deterministic-fst.h	/^  typedef unordered_map<std::vector<Label>, StateId, kaldi::VectorHasher<Label> > MapType;$/;"	t	class:fst::LmExampleDeterministicOnDemandFst
Start	fstext/deterministic-fst.h	/^  StateId Start() { return fst_.Start(); }$/;"	f	class:fst::BackoffDeterministicOnDemandFst
Start	fstext/deterministic-fst.h	/^  StateId Start() { return start_state_; };$/;"	f	class:fst::UnweightedNgramFst
Start	fstext/deterministic-fst.h	/^  virtual StateId Start() { return fst_->Start(); }$/;"	f	class:fst::CacheDeterministicOnDemandFst
Start	fstext/deterministic-fst.h	/^  virtual StateId Start() { return start_state_; }$/;"	f	class:fst::ComposeDeterministicOnDemandFst
Start	fstext/deterministic-fst.h	/^  virtual StateId Start() { return start_state_; }$/;"	f	class:fst::LmExampleDeterministicOnDemandFst
StateId	fstext/deterministic-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::BackoffDeterministicOnDemandFst
StateId	fstext/deterministic-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::CacheDeterministicOnDemandFst
StateId	fstext/deterministic-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::ComposeDeterministicOnDemandFst
StateId	fstext/deterministic-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::DeterministicOnDemandFst
StateId	fstext/deterministic-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::LmExampleDeterministicOnDemandFst
StateId	fstext/deterministic-fst.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::UnweightedNgramFst
UnweightedNgramFst	fstext/deterministic-fst.h	/^class UnweightedNgramFst: public DeterministicOnDemandFst<Arc> {$/;"	c	namespace:fst
Weight	fstext/deterministic-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::BackoffDeterministicOnDemandFst
Weight	fstext/deterministic-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::CacheDeterministicOnDemandFst
Weight	fstext/deterministic-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::ComposeDeterministicOnDemandFst
Weight	fstext/deterministic-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::DeterministicOnDemandFst
Weight	fstext/deterministic-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::LmExampleDeterministicOnDemandFst
Weight	fstext/deterministic-fst.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::UnweightedNgramFst
bos_symbol_	fstext/deterministic-fst.h	/^  Label bos_symbol_; \/\/ beginning of sentence symbol$/;"	m	class:fst::LmExampleDeterministicOnDemandFst
cached_arcs_	fstext/deterministic-fst.h	/^  std::vector<std::pair<StateId, Arc> > cached_arcs_;$/;"	m	class:fst::CacheDeterministicOnDemandFst
eos_symbol_	fstext/deterministic-fst.h	/^  Label eos_symbol_; \/\/ end of sentence symbol.$/;"	m	class:fst::LmExampleDeterministicOnDemandFst
fst	fstext/deterministic-fst.h	/^namespace fst {$/;"	n
fst1_	fstext/deterministic-fst.h	/^  DeterministicOnDemandFst<Arc> *fst1_;$/;"	m	class:fst::ComposeDeterministicOnDemandFst
fst2_	fstext/deterministic-fst.h	/^  DeterministicOnDemandFst<Arc> *fst2_;$/;"	m	class:fst::ComposeDeterministicOnDemandFst
fst_	fstext/deterministic-fst.h	/^  DeterministicOnDemandFst<Arc> *fst_;$/;"	m	class:fst::CacheDeterministicOnDemandFst
fst_	fstext/deterministic-fst.h	/^  const Fst<Arc> &fst_;$/;"	m	class:fst::BackoffDeterministicOnDemandFst
lm	fstext/deterministic-fst.h	/^  void *lm; \/\/ wouldn't really be void.$/;"	m	class:fst::LmExampleDeterministicOnDemandFst
lm_	fstext/deterministic-fst.h	/^  void *lm_;$/;"	m	class:fst::LmExampleDeterministicOnDemandFst
n_	fstext/deterministic-fst.h	/^  int n_;$/;"	m	class:fst::UnweightedNgramFst
next_state_	fstext/deterministic-fst.h	/^  StateId next_state_;$/;"	m	class:fst::ComposeDeterministicOnDemandFst
num_cached_arcs_	fstext/deterministic-fst.h	/^  StateId num_cached_arcs_;  $/;"	m	class:fst::CacheDeterministicOnDemandFst
start_state_	fstext/deterministic-fst.h	/^  StateId start_state_;$/;"	m	class:fst::ComposeDeterministicOnDemandFst
start_state_	fstext/deterministic-fst.h	/^  StateId start_state_;$/;"	m	class:fst::LmExampleDeterministicOnDemandFst
start_state_	fstext/deterministic-fst.h	/^  StateId start_state_;$/;"	m	class:fst::UnweightedNgramFst
state_map_	fstext/deterministic-fst.h	/^  MapType state_map_;$/;"	m	class:fst::ComposeDeterministicOnDemandFst
state_map_	fstext/deterministic-fst.h	/^  MapType state_map_;$/;"	m	class:fst::LmExampleDeterministicOnDemandFst
state_map_	fstext/deterministic-fst.h	/^  MapType state_map_;$/;"	m	class:fst::UnweightedNgramFst
state_vec_	fstext/deterministic-fst.h	/^  std::vector<std::pair<StateId, StateId> > state_vec_; \/\/ maps from$/;"	m	class:fst::ComposeDeterministicOnDemandFst
state_vec_	fstext/deterministic-fst.h	/^  std::vector<std::vector<Label> > state_vec_; \/\/ maps from history-state to pair.$/;"	m	class:fst::LmExampleDeterministicOnDemandFst
state_vec_	fstext/deterministic-fst.h	/^  std::vector<std::vector<Label> > state_vec_;$/;"	m	class:fst::UnweightedNgramFst
~DeterministicOnDemandFst	fstext/deterministic-fst.h	/^  virtual ~DeterministicOnDemandFst() { }$/;"	f	class:fst::DeterministicOnDemandFst
Arc	fstext/determinize-lattice-inl.h	/^  typedef ArcTpl<Weight> Arc; \/\/ arc in non-compact version of lattice $/;"	t	class:fst::LatticeDeterminizer
CheckMemoryUsage	fstext/determinize-lattice-inl.h	/^  bool CheckMemoryUsage() {$/;"	f	class:fst::LatticeDeterminizer
CommonPrefix	fstext/determinize-lattice-inl.h	/^  const Entry *CommonPrefix (const Entry *a, const Entry *b) {$/;"	f	class:fst::LatticeStringRepository
CompactArc	fstext/determinize-lattice-inl.h	/^  typedef ArcTpl<CompactWeight> CompactArc; \/\/ arc in compact, acceptor form of lattice$/;"	t	class:fst::LatticeDeterminizer
CompactWeight	fstext/determinize-lattice-inl.h	/^  typedef CompactLatticeWeightTpl<Weight, IntType> CompactWeight;$/;"	t	class:fst::LatticeDeterminizer
Compare	fstext/determinize-lattice-inl.h	/^  inline int Compare(const Weight &a_w, StringId a_str,$/;"	f	class:fst::LatticeDeterminizer
Concatenate	fstext/determinize-lattice-inl.h	/^  const Entry *Concatenate (const Entry *a, const Entry *b) {$/;"	f	class:fst::LatticeStringRepository
ConvertFromVector	fstext/determinize-lattice-inl.h	/^  const Entry *ConvertFromVector(const vector<IntType> &vec) {$/;"	f	class:fst::LatticeStringRepository
ConvertToMinimal	fstext/determinize-lattice-inl.h	/^  void ConvertToMinimal(vector<Element> *subset) {$/;"	f	class:fst::LatticeDeterminizer
ConvertToVector	fstext/determinize-lattice-inl.h	/^  void ConvertToVector(const Entry *entry, vector<IntType> *out) const {$/;"	f	class:fst::LatticeStringRepository
Debug	fstext/determinize-lattice-inl.h	/^  void Debug() {  \/\/ this function called if you send a signal$/;"	f	class:fst::LatticeDeterminizer
Destroy	fstext/determinize-lattice-inl.h	/^  void Destroy() {$/;"	f	class:fst::LatticeStringRepository
Determinize	fstext/determinize-lattice-inl.h	/^  bool Determinize(bool *debug_ptr) {$/;"	f	class:fst::LatticeDeterminizer
DeterminizeLattice	fstext/determinize-lattice-inl.h	/^bool DeterminizeLattice(const Fst<ArcTpl<Weight> > &ifst,$/;"	f	namespace:fst
DeterminizeLattice	fstext/determinize-lattice-inl.h	/^bool DeterminizeLattice(const Fst<ArcTpl<Weight> >&ifst,$/;"	f	namespace:fst
Element	fstext/determinize-lattice-inl.h	/^  struct Element {$/;"	s	class:fst::LatticeDeterminizer
EmptyString	fstext/determinize-lattice-inl.h	/^  inline const Entry *EmptyString() { return NULL; }  $/;"	f	class:fst::LatticeStringRepository
Entry	fstext/determinize-lattice-inl.h	/^    Entry() { }$/;"	f	struct:fst::LatticeStringRepository::Entry
Entry	fstext/determinize-lattice-inl.h	/^    Entry(const Entry &e): parent(e.parent), i(e.i) {}$/;"	f	struct:fst::LatticeStringRepository::Entry
Entry	fstext/determinize-lattice-inl.h	/^  struct Entry {$/;"	s	class:fst::LatticeStringRepository
EntryEqual	fstext/determinize-lattice-inl.h	/^  class EntryEqual {$/;"	c	class:fst::LatticeStringRepository
EntryKey	fstext/determinize-lattice-inl.h	/^  class EntryKey { \/\/ Hash function object.$/;"	c	class:fst::LatticeStringRepository
EpsilonClosure	fstext/determinize-lattice-inl.h	/^  void EpsilonClosure(vector<Element> *subset) {$/;"	f	class:fst::LatticeDeterminizer
FreeMostMemory	fstext/determinize-lattice-inl.h	/^  void FreeMostMemory() {$/;"	f	class:fst::LatticeDeterminizer
InitialSubsetHash	fstext/determinize-lattice-inl.h	/^                        SubsetKey, SubsetEqual> InitialSubsetHash;$/;"	t	class:fst::LatticeDeterminizer
InitialToStateId	fstext/determinize-lattice-inl.h	/^  OutputStateId InitialToStateId(const vector<Element> &subset_in,$/;"	f	class:fst::LatticeDeterminizer
InitializeDeterminization	fstext/determinize-lattice-inl.h	/^  void InitializeDeterminization() {    $/;"	f	class:fst::LatticeDeterminizer
InputStateId	fstext/determinize-lattice-inl.h	/^  typedef typename Arc::StateId InputStateId;  \/\/ state in the input FST.$/;"	t	class:fst::LatticeDeterminizer
IsIsymbolOrFinal	fstext/determinize-lattice-inl.h	/^  bool IsIsymbolOrFinal(InputStateId state) { \/\/ returns true if this state$/;"	f	class:fst::LatticeDeterminizer
IsPrefixOf	fstext/determinize-lattice-inl.h	/^  bool IsPrefixOf(const Entry *a, const Entry *b) const {$/;"	f	class:fst::LatticeStringRepository
IsymbolOrFinal	fstext/determinize-lattice-inl.h	/^  enum IsymbolOrFinal { OSF_UNKNOWN = 0, OSF_NO = 1, OSF_YES = 2 };$/;"	g	class:fst::LatticeDeterminizer
KALDI_FSTEXT_DETERMINIZE_LATTICE_INL_H_	fstext/determinize-lattice-inl.h	22;"	d
Label	fstext/determinize-lattice-inl.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::LatticeDeterminizer
LatticeDeterminizer	fstext/determinize-lattice-inl.h	/^  LatticeDeterminizer(const Fst<Arc> &ifst,$/;"	f	class:fst::LatticeDeterminizer
LatticeDeterminizer	fstext/determinize-lattice-inl.h	/^template<class Weight, class IntType> class LatticeDeterminizer {$/;"	c	namespace:fst
LatticeStringRepository	fstext/determinize-lattice-inl.h	/^  LatticeStringRepository() { new_entry_ = new Entry; }$/;"	f	class:fst::LatticeStringRepository
LatticeStringRepository	fstext/determinize-lattice-inl.h	/^template<class IntType> class LatticeStringRepository {$/;"	c	namespace:fst
MakeSubsetUnique	fstext/determinize-lattice-inl.h	/^  void MakeSubsetUnique(vector<Element> *subset) {$/;"	f	class:fst::LatticeDeterminizer
MemSize	fstext/determinize-lattice-inl.h	/^  int32 MemSize() const {$/;"	f	class:fst::LatticeStringRepository
MinimalSubsetHash	fstext/determinize-lattice-inl.h	/^                        SubsetKey, SubsetEqual> MinimalSubsetHash;$/;"	t	class:fst::LatticeDeterminizer
MinimalToStateId	fstext/determinize-lattice-inl.h	/^  OutputStateId MinimalToStateId(const vector<Element> &subset) {$/;"	f	class:fst::LatticeDeterminizer
NormalizeSubset	fstext/determinize-lattice-inl.h	/^  void NormalizeSubset(vector<Element> *elems,$/;"	f	class:fst::LatticeDeterminizer
OSF_NO	fstext/determinize-lattice-inl.h	/^  enum IsymbolOrFinal { OSF_UNKNOWN = 0, OSF_NO = 1, OSF_YES = 2 };$/;"	e	enum:fst::LatticeDeterminizer::IsymbolOrFinal
OSF_UNKNOWN	fstext/determinize-lattice-inl.h	/^  enum IsymbolOrFinal { OSF_UNKNOWN = 0, OSF_NO = 1, OSF_YES = 2 };$/;"	e	enum:fst::LatticeDeterminizer::IsymbolOrFinal
OSF_YES	fstext/determinize-lattice-inl.h	/^  enum IsymbolOrFinal { OSF_UNKNOWN = 0, OSF_NO = 1, OSF_YES = 2 };$/;"	e	enum:fst::LatticeDeterminizer::IsymbolOrFinal
Output	fstext/determinize-lattice-inl.h	/^  void  Output(MutableFst<Arc> *ofst, bool destroy = true) {$/;"	f	class:fst::LatticeDeterminizer
Output	fstext/determinize-lattice-inl.h	/^  void Output(MutableFst<CompactArc>  *ofst, bool destroy = true) {$/;"	f	class:fst::LatticeDeterminizer
OutputStateId	fstext/determinize-lattice-inl.h	/^  typedef typename Arc::StateId OutputStateId;  \/\/ same as above but distinguish$/;"	t	class:fst::LatticeDeterminizer
PairComparator	fstext/determinize-lattice-inl.h	/^  class PairComparator {$/;"	c	class:fst::LatticeDeterminizer
ProcessFinal	fstext/determinize-lattice-inl.h	/^  void ProcessFinal(OutputStateId output_state) {$/;"	f	class:fst::LatticeDeterminizer
ProcessState	fstext/determinize-lattice-inl.h	/^  void ProcessState(OutputStateId output_state) {$/;"	f	class:fst::LatticeDeterminizer
ProcessTransition	fstext/determinize-lattice-inl.h	/^  void ProcessTransition(OutputStateId state, Label ilabel, vector<Element> *subset) {$/;"	f	class:fst::LatticeDeterminizer
ProcessTransitions	fstext/determinize-lattice-inl.h	/^  void ProcessTransitions(OutputStateId output_state) {$/;"	f	class:fst::LatticeDeterminizer
Rebuild	fstext/determinize-lattice-inl.h	/^  void Rebuild(const std::vector<const Entry*> &to_keep) {$/;"	f	class:fst::LatticeStringRepository
RebuildHelper	fstext/determinize-lattice-inl.h	/^  void RebuildHelper(const Entry *to_add, SetType *tmp_set) {$/;"	f	class:fst::LatticeStringRepository
RebuildRepository	fstext/determinize-lattice-inl.h	/^  void RebuildRepository() { \/\/ rebuild the string repository,    $/;"	f	class:fst::LatticeDeterminizer
ReduceToCommonPrefix	fstext/determinize-lattice-inl.h	/^  void ReduceToCommonPrefix(const Entry *a,$/;"	f	class:fst::LatticeStringRepository
RemovePrefix	fstext/determinize-lattice-inl.h	/^  const Entry *RemovePrefix(const Entry *a, size_t n) {$/;"	f	class:fst::LatticeStringRepository
SetType	fstext/determinize-lattice-inl.h	/^  typedef unordered_set<const Entry*, EntryKey, EntryEqual> SetType;$/;"	t	class:fst::LatticeStringRepository
Size	fstext/determinize-lattice-inl.h	/^  inline size_t Size(const Entry *entry) const {$/;"	f	class:fst::LatticeStringRepository
StateId	fstext/determinize-lattice-inl.h	/^  typedef typename Arc::StateId StateId;  \/\/ use this when we don't know if it's input or output.$/;"	t	class:fst::LatticeDeterminizer
StringId	fstext/determinize-lattice-inl.h	/^  typedef const typename StringRepositoryType::Entry* StringId;$/;"	t	class:fst::LatticeDeterminizer
StringRepositoryType	fstext/determinize-lattice-inl.h	/^  typedef LatticeStringRepository<IntType> StringRepositoryType;$/;"	t	class:fst::LatticeDeterminizer
SubsetEqual	fstext/determinize-lattice-inl.h	/^    SubsetEqual(): delta_(kDelta) {}$/;"	f	class:fst::LatticeDeterminizer::SubsetEqual
SubsetEqual	fstext/determinize-lattice-inl.h	/^    SubsetEqual(float delta): delta_(delta) {}$/;"	f	class:fst::LatticeDeterminizer::SubsetEqual
SubsetEqual	fstext/determinize-lattice-inl.h	/^  class SubsetEqual {$/;"	c	class:fst::LatticeDeterminizer
SubsetEqualStates	fstext/determinize-lattice-inl.h	/^  class SubsetEqualStates {$/;"	c	class:fst::LatticeDeterminizer
SubsetKey	fstext/determinize-lattice-inl.h	/^  class SubsetKey {$/;"	c	class:fst::LatticeDeterminizer
Successor	fstext/determinize-lattice-inl.h	/^  const Entry *Successor(const Entry *parent, IntType i) {$/;"	f	class:fst::LatticeStringRepository
TempArc	fstext/determinize-lattice-inl.h	/^  struct TempArc {$/;"	s	class:fst::LatticeDeterminizer
all_elems_tmp_	fstext/determinize-lattice-inl.h	/^  vector<pair<Label, Element> > all_elems_tmp_; \/\/ temporary vector used in ProcessTransitions.$/;"	m	class:fst::LatticeDeterminizer
delta_	fstext/determinize-lattice-inl.h	/^    float delta_;$/;"	m	class:fst::LatticeDeterminizer::SubsetEqual
determinized_	fstext/determinize-lattice-inl.h	/^  bool determinized_; \/\/ set to true when user called Determinize(); used to make$/;"	m	class:fst::LatticeDeterminizer
equal_	fstext/determinize-lattice-inl.h	/^  SubsetEqual equal_;  \/\/ object that compares subsets-- only data member is delta_.$/;"	m	class:fst::LatticeDeterminizer
fst	fstext/determinize-lattice-inl.h	/^namespace fst {$/;"	n
hasher_	fstext/determinize-lattice-inl.h	/^  SubsetKey hasher_;  \/\/ object that computes keys-- has no data members.$/;"	m	class:fst::LatticeDeterminizer
i	fstext/determinize-lattice-inl.h	/^    IntType i;$/;"	m	struct:fst::LatticeStringRepository::Entry
ifst_	fstext/determinize-lattice-inl.h	/^  const Fst<Arc> *ifst_;$/;"	m	class:fst::LatticeDeterminizer
ilabel	fstext/determinize-lattice-inl.h	/^    Label ilabel;$/;"	m	struct:fst::LatticeDeterminizer::TempArc
initial_hash_	fstext/determinize-lattice-inl.h	/^  InitialSubsetHash initial_hash_;   \/\/ hash from Subset to Element, which$/;"	m	class:fst::LatticeDeterminizer
isymbol_or_final_	fstext/determinize-lattice-inl.h	/^  vector<char> isymbol_or_final_; \/\/ A kind of cache; it says whether$/;"	m	class:fst::LatticeDeterminizer
minimal_hash_	fstext/determinize-lattice-inl.h	/^  MinimalSubsetHash minimal_hash_;  \/\/ hash from Subset to OutputStateId.  Subset is "minimal$/;"	m	class:fst::LatticeDeterminizer
new_entry_	fstext/determinize-lattice-inl.h	/^  Entry *new_entry_; \/\/ We always have a pre-allocated Entry ready to use,$/;"	m	class:fst::LatticeStringRepository
nextstate	fstext/determinize-lattice-inl.h	/^    OutputStateId nextstate;  \/\/ or kNoState for final weights.$/;"	m	struct:fst::LatticeDeterminizer::TempArc
num_arcs_	fstext/determinize-lattice-inl.h	/^  int num_arcs_; \/\/ keep track of memory usage: number of arcs in output_arcs_$/;"	m	class:fst::LatticeDeterminizer
num_elems_	fstext/determinize-lattice-inl.h	/^  int num_elems_; \/\/ keep track of memory usage: number of elems in output_states_$/;"	m	class:fst::LatticeDeterminizer
operator !=	fstext/determinize-lattice-inl.h	/^    bool operator != (const Element &other) const {$/;"	f	struct:fst::LatticeDeterminizer::Element
operator ()	fstext/determinize-lattice-inl.h	/^    bool operator ()(const vector<Element> * s1, const vector<Element> * s2) const {$/;"	f	class:fst::LatticeDeterminizer::SubsetEqual
operator ()	fstext/determinize-lattice-inl.h	/^    bool operator ()(const vector<Element> * s1, const vector<Element> * s2) const {$/;"	f	class:fst::LatticeDeterminizer::SubsetEqualStates
operator ()	fstext/determinize-lattice-inl.h	/^    inline bool operator () (const pair<Label, Element> &p1, const pair<Label, Element> &p2) {$/;"	f	class:fst::LatticeDeterminizer::PairComparator
operator ()	fstext/determinize-lattice-inl.h	/^    inline bool operator()(const Entry *e1, const Entry *e2) const {$/;"	f	class:fst::LatticeStringRepository::EntryEqual
operator ()	fstext/determinize-lattice-inl.h	/^    inline size_t operator()(const Entry *entry) const {$/;"	f	class:fst::LatticeStringRepository::EntryKey
operator ()	fstext/determinize-lattice-inl.h	/^    size_t operator ()(const vector<Element> * subset) const {  \/\/ hashes only the state and string.$/;"	f	class:fst::LatticeDeterminizer::SubsetKey
operator ==	fstext/determinize-lattice-inl.h	/^    inline bool operator == (const Entry &other) const {$/;"	f	struct:fst::LatticeStringRepository::Entry
opts_	fstext/determinize-lattice-inl.h	/^  DeterminizeLatticeOptions opts_;$/;"	m	class:fst::LatticeDeterminizer
output_arcs_	fstext/determinize-lattice-inl.h	/^  vector<vector<TempArc> > output_arcs_;  \/\/ essentially an FST in our format.$/;"	m	class:fst::LatticeDeterminizer
output_states_	fstext/determinize-lattice-inl.h	/^  vector<vector<Element>* > output_states_; \/\/ maps from output state to$/;"	m	class:fst::LatticeDeterminizer
parent	fstext/determinize-lattice-inl.h	/^    const Entry *parent; \/\/ NULL for empty string.$/;"	m	struct:fst::LatticeStringRepository::Entry
queue_	fstext/determinize-lattice-inl.h	/^  vector<OutputStateId> queue_; \/\/ Queue of output-states to process.  Starts with$/;"	m	class:fst::LatticeDeterminizer
repository_	fstext/determinize-lattice-inl.h	/^  LatticeStringRepository<IntType> repository_;  \/\/ defines a compact and fast way of$/;"	m	class:fst::LatticeDeterminizer
set_	fstext/determinize-lattice-inl.h	/^  SetType set_;$/;"	m	class:fst::LatticeStringRepository
state	fstext/determinize-lattice-inl.h	/^    StateId state; \/\/ use StateId as this is usually InputStateId but in one case$/;"	m	struct:fst::LatticeDeterminizer::Element
string	fstext/determinize-lattice-inl.h	/^    StringId string;  \/\/ Look it up in the StringRepository, it's a sequence of Labels.$/;"	m	struct:fst::LatticeDeterminizer::TempArc
string	fstext/determinize-lattice-inl.h	/^    StringId string;$/;"	m	struct:fst::LatticeDeterminizer::Element
weight	fstext/determinize-lattice-inl.h	/^    Weight weight;$/;"	m	struct:fst::LatticeDeterminizer::Element
weight	fstext/determinize-lattice-inl.h	/^    Weight weight;$/;"	m	struct:fst::LatticeDeterminizer::TempArc
~LatticeDeterminizer	fstext/determinize-lattice-inl.h	/^  ~LatticeDeterminizer() {$/;"	f	class:fst::LatticeDeterminizer
~LatticeStringRepository	fstext/determinize-lattice-inl.h	/^  ~LatticeStringRepository() { Destroy(); }$/;"	f	class:fst::LatticeStringRepository
TestDeterminizeLattice	fstext/determinize-lattice-test.cc	/^template<class Arc> void TestDeterminizeLattice() {$/;"	f	namespace:fst
TestDeterminizeLattice2	fstext/determinize-lattice-test.cc	/^template<class Arc> void TestDeterminizeLattice2() {$/;"	f	namespace:fst
TestLatticeStringRepository	fstext/determinize-lattice-test.cc	/^void TestLatticeStringRepository() {$/;"	f	namespace:fst
fst	fstext/determinize-lattice-test.cc	/^namespace fst {$/;"	n	file:
main	fstext/determinize-lattice-test.cc	/^int main() {$/;"	f
DeterminizeLatticeOptions	fstext/determinize-lattice.h	/^  DeterminizeLatticeOptions(): delta(kDelta),$/;"	f	struct:fst::DeterminizeLatticeOptions
DeterminizeLatticeOptions	fstext/determinize-lattice.h	/^struct DeterminizeLatticeOptions {$/;"	s	namespace:fst
KALDI_FSTEXT_DETERMINIZE_LATTICE_H_	fstext/determinize-lattice.h	21;"	d
delta	fstext/determinize-lattice.h	/^  float delta; \/\/ A small offset used to measure equality of weights.$/;"	m	struct:fst::DeterminizeLatticeOptions
fst	fstext/determinize-lattice.h	/^namespace fst {$/;"	n
max_loop	fstext/determinize-lattice.h	/^  int max_loop; \/\/ If >0, can be used to detect non-determinizable input$/;"	m	struct:fst::DeterminizeLatticeOptions
max_mem	fstext/determinize-lattice.h	/^  int max_mem; \/\/ If >0, determinization will fail and return false$/;"	m	struct:fst::DeterminizeLatticeOptions
Debug	fstext/determinize-star-inl.h	/^  void Debug() {  \/\/ this function called if you send a signal$/;"	f	class:fst::DeterminizerStar
Destroy	fstext/determinize-star-inl.h	/^  void Destroy() {$/;"	f	class:fst::StringRepository
Determinize	fstext/determinize-star-inl.h	/^  void Determinize(bool *debug_ptr) {$/;"	f	class:fst::DeterminizerStar
DeterminizeStar	fstext/determinize-star-inl.h	/^bool DeterminizeStar(Fst<Arc> &ifst, MutableFst<Arc> *ofst,$/;"	f	namespace:fst
DeterminizeStar	fstext/determinize-star-inl.h	/^bool DeterminizeStar(Fst<Arc> &ifst, MutableFst<GallicArc<Arc> > *ofst, float delta,$/;"	f	namespace:fst
DeterminizerStar	fstext/determinize-star-inl.h	/^  DeterminizerStar(const Fst<Arc> &ifst, float delta = kDelta,$/;"	f	class:fst::DeterminizerStar
DeterminizerStar	fstext/determinize-star-inl.h	/^template<class Arc> class DeterminizerStar {$/;"	c	namespace:fst
Element	fstext/determinize-star-inl.h	/^  struct Element {$/;"	s	class:fst::DeterminizerStar
EpsilonClosure	fstext/determinize-star-inl.h	/^  void EpsilonClosure(const vector<Element> & input_subset,$/;"	f	class:fst::DeterminizerStar
FreeMostMemory	fstext/determinize-star-inl.h	/^  void FreeMostMemory() {$/;"	f	class:fst::DeterminizerStar
IdOfEmpty	fstext/determinize-star-inl.h	/^  StringId IdOfEmpty() { return no_symbol; }$/;"	f	class:fst::StringRepository
IdOfLabel	fstext/determinize-star-inl.h	/^  StringId IdOfLabel(Label l) {$/;"	f	class:fst::StringRepository
IdOfSeq	fstext/determinize-star-inl.h	/^  StringId IdOfSeq(const vector<Label> &v) {  \/\/ also works for sizes 0 and 1.$/;"	f	class:fst::StringRepository
IdOfSeqInternal	fstext/determinize-star-inl.h	/^  StringId IdOfSeqInternal(const vector<Label> &v) {$/;"	f	class:fst::StringRepository
InputStateId	fstext/determinize-star-inl.h	/^  typedef typename Arc::StateId InputStateId;$/;"	t	class:fst::DeterminizerStar
IsEmptyString	fstext/determinize-star-inl.h	/^  inline bool IsEmptyString(StringId id) {$/;"	f	class:fst::StringRepository
IsPartial	fstext/determinize-star-inl.h	/^  bool IsPartial() {$/;"	f	class:fst::DeterminizerStar
KALDI_FSTEXT_DETERMINIZE_STAR_INL_H_	fstext/determinize-star-inl.h	21;"	d
Label	fstext/determinize-star-inl.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::DeterminizerStar
MapType	fstext/determinize-star-inl.h	/^  typedef unordered_map<const vector<Label>*, StringId, VectorKey, VectorEqual> MapType;$/;"	t	class:fst::StringRepository
Output	fstext/determinize-star-inl.h	/^  void  Output(MutableFst<Arc> *ofst, bool destroy = true) {$/;"	f	class:fst::DeterminizerStar
Output	fstext/determinize-star-inl.h	/^  void Output(MutableFst<GallicArc<Arc> >  *ofst, bool destroy = true) {$/;"	f	class:fst::DeterminizerStar
OutputStateId	fstext/determinize-star-inl.h	/^  typedef typename Arc::StateId OutputStateId;  \/\/ same as above but distinguish states in output Fst.$/;"	t	class:fst::DeterminizerStar
PairComparator	fstext/determinize-star-inl.h	/^  class PairComparator {$/;"	c	class:fst::DeterminizerStar
ProcessFinal	fstext/determinize-star-inl.h	/^  void ProcessFinal(const vector<Element> &closed_subset, OutputStateId state) {$/;"	f	class:fst::DeterminizerStar
ProcessSubset	fstext/determinize-star-inl.h	/^  void ProcessSubset(const pair<vector<Element>*, OutputStateId> & pair) {$/;"	f	class:fst::DeterminizerStar
ProcessTransition	fstext/determinize-star-inl.h	/^  void ProcessTransition(OutputStateId state, Label ilabel, vector<Element> *subset) {$/;"	f	class:fst::DeterminizerStar
ProcessTransitions	fstext/determinize-star-inl.h	/^  void ProcessTransitions(const vector<Element> &closed_subset, OutputStateId state) {$/;"	f	class:fst::DeterminizerStar
Q_	fstext/determinize-star-inl.h	/^  deque<pair<vector<Element>*, OutputStateId> > Q_;  \/\/ queue of subsets to be processed.$/;"	m	class:fst::DeterminizerStar
RemovePrefix	fstext/determinize-star-inl.h	/^  StringId RemovePrefix(StringId id, size_t prefix_len) {$/;"	f	class:fst::StringRepository
SeqOfId	fstext/determinize-star-inl.h	/^  void SeqOfId(StringId id, vector<Label> *v) {$/;"	f	class:fst::StringRepository
StringId	fstext/determinize-star-inl.h	/^  typedef typename Arc::Label StringId;  \/\/ Id type used in the StringRepository$/;"	t	class:fst::DeterminizerStar
StringRepository	fstext/determinize-star-inl.h	/^  StringRepository() {$/;"	f	class:fst::StringRepository
StringRepository	fstext/determinize-star-inl.h	/^template<class Label, class StringId> class StringRepository {$/;"	c	namespace:fst
StringRepositoryType	fstext/determinize-star-inl.h	/^  typedef StringRepository<Label, StringId> StringRepositoryType;$/;"	t	class:fst::DeterminizerStar
SubsetEqual	fstext/determinize-star-inl.h	/^    SubsetEqual(): delta_(kDelta) {}$/;"	f	class:fst::DeterminizerStar::SubsetEqual
SubsetEqual	fstext/determinize-star-inl.h	/^    SubsetEqual(float delta): delta_(delta) {}$/;"	f	class:fst::DeterminizerStar::SubsetEqual
SubsetEqual	fstext/determinize-star-inl.h	/^  class SubsetEqual {$/;"	c	class:fst::DeterminizerStar
SubsetEqualStates	fstext/determinize-star-inl.h	/^  class SubsetEqualStates {$/;"	c	class:fst::DeterminizerStar
SubsetHash	fstext/determinize-star-inl.h	/^  typedef unordered_map<const vector<Element>*, OutputStateId, SubsetKey, SubsetEqual> SubsetHash;$/;"	t	class:fst::DeterminizerStar
SubsetKey	fstext/determinize-star-inl.h	/^  class SubsetKey {$/;"	c	class:fst::DeterminizerStar
SubsetToStateId	fstext/determinize-star-inl.h	/^  OutputStateId SubsetToStateId(const vector<Element> &subset) {  \/\/ may add the subset to the queue.$/;"	f	class:fst::DeterminizerStar
TempArc	fstext/determinize-star-inl.h	/^  struct TempArc {$/;"	s	class:fst::DeterminizerStar
VectorEqual	fstext/determinize-star-inl.h	/^  class VectorEqual {  \/\/ Equality-operator function object.$/;"	c	class:fst::StringRepository
VectorKey	fstext/determinize-star-inl.h	/^  class VectorKey { \/\/ Hash function object.$/;"	c	class:fst::StringRepository
Weight	fstext/determinize-star-inl.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::DeterminizerStar
allow_partial_	fstext/determinize-star-inl.h	/^  bool allow_partial_;  \/\/ output paritial results or not$/;"	m	class:fst::DeterminizerStar
delta_	fstext/determinize-star-inl.h	/^    float delta_;$/;"	m	class:fst::DeterminizerStar::SubsetEqual
delta_	fstext/determinize-star-inl.h	/^  float delta_;$/;"	m	class:fst::DeterminizerStar
determinized_	fstext/determinize-star-inl.h	/^  bool determinized_; \/\/ used to check usage.$/;"	m	class:fst::DeterminizerStar
equal_	fstext/determinize-star-inl.h	/^  SubsetEqual equal_;  \/\/ object that compares subsets-- only data member is delta_.$/;"	m	class:fst::DeterminizerStar
fst	fstext/determinize-star-inl.h	/^namespace fst {$/;"	n
hash_	fstext/determinize-star-inl.h	/^  SubsetHash hash_;  \/\/ hash from Subset to StateId in final Fst.$/;"	m	class:fst::DeterminizerStar
hasher_	fstext/determinize-star-inl.h	/^  SubsetKey hasher_;  \/\/ object that computes keys-- has no data members.$/;"	m	class:fst::DeterminizerStar
ifst_	fstext/determinize-star-inl.h	/^  const Fst<Arc> *ifst_;$/;"	m	class:fst::DeterminizerStar
ilabel	fstext/determinize-star-inl.h	/^    Label ilabel;$/;"	m	struct:fst::DeterminizerStar::TempArc
is_partial_	fstext/determinize-star-inl.h	/^  bool is_partial_;     \/\/ if we get partial results or not$/;"	m	class:fst::DeterminizerStar
map_	fstext/determinize-star-inl.h	/^  MapType map_;$/;"	m	class:fst::StringRepository
max_states_	fstext/determinize-star-inl.h	/^  int max_states_;$/;"	m	class:fst::DeterminizerStar
nextstate	fstext/determinize-star-inl.h	/^    OutputStateId nextstate;  \/\/ or kNoState for final weights.$/;"	m	struct:fst::DeterminizerStar::TempArc
no_symbol	fstext/determinize-star-inl.h	/^  StringId no_symbol;  \/\/ = (numeric_limits<StringId>::max() \/ 2); \/\/ reserved for empty sequence.$/;"	m	class:fst::StringRepository
operator !=	fstext/determinize-star-inl.h	/^    bool operator != (const Element &other) const  {$/;"	f	struct:fst::DeterminizerStar::Element
operator ()	fstext/determinize-star-inl.h	/^    bool operator ()(const vector<Element> * s1, const vector<Element> * s2) const {$/;"	f	class:fst::DeterminizerStar::SubsetEqual
operator ()	fstext/determinize-star-inl.h	/^    bool operator ()(const vector<Element> * s1, const vector<Element> * s2) const {$/;"	f	class:fst::DeterminizerStar::SubsetEqualStates
operator ()	fstext/determinize-star-inl.h	/^    inline bool operator () (const pair<Label, Element> &p1, const pair<Label, Element> &p2) {$/;"	f	class:fst::DeterminizerStar::PairComparator
operator ()	fstext/determinize-star-inl.h	/^    size_t operator ()(const vector<Element> * subset) const {  \/\/ hashes only the state and string.$/;"	f	class:fst::DeterminizerStar::SubsetKey
operator ()	fstext/determinize-star-inl.h	/^    size_t operator()(const vector<Label> *vec) const {$/;"	f	class:fst::StringRepository::VectorKey
operator ()	fstext/determinize-star-inl.h	/^    size_t operator()(const vector<Label> *vec1, const vector<Label> *vec2) const {$/;"	f	class:fst::StringRepository::VectorEqual
ostring	fstext/determinize-star-inl.h	/^    StringId ostring;  \/\/ Look it up in the StringRepository, it's a sequence of Labels.$/;"	m	struct:fst::DeterminizerStar::TempArc
output_arcs_	fstext/determinize-star-inl.h	/^  vector<vector<TempArc> > output_arcs_;  \/\/ essentially an FST in our format.$/;"	m	class:fst::DeterminizerStar
repository_	fstext/determinize-star-inl.h	/^  StringRepository<Label, StringId> repository_;  \/\/ associate integer id's with sequences of labels.$/;"	m	class:fst::DeterminizerStar
single_symbol_range	fstext/determinize-star-inl.h	/^  StringId single_symbol_range;  \/\/ =  numeric_limits<StringId>::max() - single_symbol_start;$/;"	m	class:fst::StringRepository
single_symbol_start	fstext/determinize-star-inl.h	/^  StringId single_symbol_start;  \/\/ =  (numeric_limits<StringId>::max() \/ 2) + 1;$/;"	m	class:fst::StringRepository
state	fstext/determinize-star-inl.h	/^    InputStateId state;$/;"	m	struct:fst::DeterminizerStar::Element
string	fstext/determinize-star-inl.h	/^    StringId string;$/;"	m	struct:fst::DeterminizerStar::Element
string_end	fstext/determinize-star-inl.h	/^  StringId string_end;  \/\/ = (numeric_limits<StringId>::max() \/ 2) - 1; \/\/ all hash values must be <= this.$/;"	m	class:fst::StringRepository
string_start	fstext/determinize-star-inl.h	/^  static const StringId string_start = (StringId) 0;  \/\/ This must not change.  It's assumed.$/;"	m	class:fst::StringRepository
vec_	fstext/determinize-star-inl.h	/^  vector<vector<Label>* > vec_;$/;"	m	class:fst::StringRepository
weight	fstext/determinize-star-inl.h	/^    Weight weight;$/;"	m	struct:fst::DeterminizerStar::Element
weight	fstext/determinize-star-inl.h	/^    Weight weight;$/;"	m	struct:fst::DeterminizerStar::TempArc
~DeterminizerStar	fstext/determinize-star-inl.h	/^  ~DeterminizerStar() {$/;"	f	class:fst::DeterminizerStar
~StringRepository	fstext/determinize-star-inl.h	/^  ~StringRepository() {$/;"	f	class:fst::StringRepository
TestDeterminize	fstext/determinize-star-test.cc	/^template<class Arc>  void TestDeterminize() {$/;"	f	namespace:fst
TestDeterminize2	fstext/determinize-star-test.cc	/^template<class Arc>  void TestDeterminize2() {$/;"	f	namespace:fst
TestDeterminizeGeneral	fstext/determinize-star-test.cc	/^template<class Arc> void TestDeterminizeGeneral() {$/;"	f	namespace:fst
TestMinimize	fstext/determinize-star-test.cc	/^template<class Arc>  void TestMinimize() {$/;"	f	namespace:fst
TestPush	fstext/determinize-star-test.cc	/^template<class Arc>  void TestPush() {$/;"	f	namespace:fst
TestStringRepository	fstext/determinize-star-test.cc	/^template<class Arc, class inttype> void TestStringRepository() {$/;"	f	namespace:fst
fst	fstext/determinize-star-test.cc	/^namespace fst$/;"	n	file:
main	fstext/determinize-star-test.cc	/^int main() {$/;"	f
KALDI_FSTEXT_DETERMINIZE_STAR_H_	fstext/determinize-star.h	22;"	d
fst	fstext/determinize-star.h	/^namespace fst {$/;"	n
ComputeStateInfo	fstext/epsilon-property-inl.h	/^void ComputeStateInfo(const VectorFst<Arc> &fst,$/;"	f	namespace:fst
EnsureEpsilonProperty	fstext/epsilon-property-inl.h	/^void EnsureEpsilonProperty(VectorFst<Arc> *fst) {$/;"	f	namespace:fst
KALDI_FSTEXT_EPSILON_PROPERTY_INL_H_	fstext/epsilon-property-inl.h	21;"	d
fst	fstext/epsilon-property-inl.h	/^namespace fst {$/;"	n
TestEnsureEpsilonProperty	fstext/epsilon-property-test.cc	/^void TestEnsureEpsilonProperty() {$/;"	f	namespace:fst
fst	fstext/epsilon-property-test.cc	/^namespace fst {$/;"	n	file:
main	fstext/epsilon-property-test.cc	/^int main() {$/;"	f
KALDI_FSTEXT_EPSILON_PROPERTY_H_	fstext/epsilon-property.h	21;"	d
fst	fstext/epsilon-property.h	/^namespace fst {$/;"	n
kStateHasEpsilonArcsEntering	fstext/epsilon-property.h	/^  kStateHasEpsilonArcsEntering = 0x1,$/;"	e	enum:fst::__anon15
kStateHasEpsilonArcsLeaving	fstext/epsilon-property.h	/^  kStateHasEpsilonArcsLeaving = 0x4,$/;"	e	enum:fst::__anon15
kStateHasNonEpsilonArcsEntering	fstext/epsilon-property.h	/^  kStateHasNonEpsilonArcsEntering = 0x2,$/;"	e	enum:fst::__anon15
kStateHasNonEpsilonArcsLeaving	fstext/epsilon-property.h	/^  kStateHasNonEpsilonArcsLeaving = 0x8$/;"	e	enum:fst::__anon15
CreateFactorFst	fstext/factor-inl.h	/^void CreateFactorFst(const vector<vector<I> > &sequences,$/;"	f	namespace:fst
CreateMapFst	fstext/factor-inl.h	/^void CreateMapFst(const vector<I> &symbol_map,$/;"	f	namespace:fst
ExpandInputSequences	fstext/factor-inl.h	/^void ExpandInputSequences(const vector<vector<I> > &sequences,$/;"	f	namespace:fst
Factor	fstext/factor-inl.h	/^void Factor(const Fst<Arc> &fst, MutableFst<Arc> *ofst,$/;"	f	namespace:fst
Factor	fstext/factor-inl.h	/^void Factor(const Fst<Arc> &fst, MutableFst<Arc> *ofst1,$/;"	f	namespace:fst
FinalAction	fstext/factor-inl.h	/^  MapFinalAction FinalAction() { return MAP_NO_SUPERFINAL; }$/;"	f	class:fst::RemoveSomeInputSymbolsMapper
GetStateProperties	fstext/factor-inl.h	/^void GetStateProperties(const Fst<Arc> &fst,$/;"	f	namespace:fst
InputSymbolsAction	fstext/factor-inl.h	/^  MapSymbolsAction InputSymbolsAction() { return MAP_CLEAR_SYMBOLS; }$/;"	f	class:fst::RemoveSomeInputSymbolsMapper
KALDI_FSTEXT_FACTOR_INL_H_	fstext/factor-inl.h	21;"	d
OutputSymbolsAction	fstext/factor-inl.h	/^  MapSymbolsAction OutputSymbolsAction() { return MAP_COPY_SYMBOLS; }$/;"	f	class:fst::RemoveSomeInputSymbolsMapper
Properties	fstext/factor-inl.h	/^  uint64 Properties(uint64 props) const {$/;"	f	class:fst::RemoveSomeInputSymbolsMapper
RemoveSomeInputSymbolsMapper	fstext/factor-inl.h	/^  RemoveSomeInputSymbolsMapper(const vector<I> &to_remove):$/;"	f	class:fst::RemoveSomeInputSymbolsMapper
RemoveSomeInputSymbolsMapper	fstext/factor-inl.h	/^class RemoveSomeInputSymbolsMapper {$/;"	c	namespace:fst
fst	fstext/factor-inl.h	/^namespace fst {$/;"	n
operator ()	fstext/factor-inl.h	/^  Arc operator ()(const Arc &arc_in) {$/;"	f	class:fst::RemoveSomeInputSymbolsMapper
to_remove_set_	fstext/factor-inl.h	/^  kaldi::ConstIntegerSet<I> to_remove_set_;$/;"	m	class:fst::RemoveSomeInputSymbolsMapper
TestFactor	fstext/factor-test.cc	/^template<class Arc> static void TestFactor() {$/;"	f	namespace:fst
fst	fstext/factor-test.cc	/^namespace fst$/;"	n	file:
main	fstext/factor-test.cc	/^int main() {$/;"	f
BackArc	fstext/factor.h	/^  bool BackArc(StateId, const Arc&) { return true; }$/;"	f	class:fst::DfsOrderVisitor
DfsOrderVisitor	fstext/factor.h	/^  DfsOrderVisitor(vector<StateId> *order): order_(order) { order->clear(); }$/;"	f	class:fst::DfsOrderVisitor
DfsOrderVisitor	fstext/factor.h	/^class DfsOrderVisitor {$/;"	c	namespace:fst
FinishState	fstext/factor.h	/^  void FinishState(StateId, StateId, const Arc *) { }$/;"	f	class:fst::DfsOrderVisitor
FinishVisit	fstext/factor.h	/^  void FinishVisit() { }$/;"	f	class:fst::DfsOrderVisitor
ForwardOrCrossArc	fstext/factor.h	/^  bool ForwardOrCrossArc(StateId, const Arc&) { return true; }$/;"	f	class:fst::DfsOrderVisitor
InitState	fstext/factor.h	/^  bool InitState(StateId s, StateId) { order_->push_back(s); return true; }$/;"	f	class:fst::DfsOrderVisitor
InitVisit	fstext/factor.h	/^  void InitVisit(const Fst<Arc> &fst) {}$/;"	f	class:fst::DfsOrderVisitor
KALDI_FSTEXT_FACTOR_H_	fstext/factor.h	21;"	d
StateId	fstext/factor.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::DfsOrderVisitor
StatePropertiesEnum	fstext/factor.h	/^enum  StatePropertiesEnum$/;"	g	namespace:fst
StatePropertiesType	fstext/factor.h	/^typedef unsigned char StatePropertiesType;$/;"	t	namespace:fst
TreeArc	fstext/factor.h	/^  bool TreeArc(StateId, const Arc&) { return true; }$/;"	f	class:fst::DfsOrderVisitor
fst	fstext/factor.h	/^namespace fst {$/;"	n
kStateArcsIn	fstext/factor.h	/^  kStateArcsIn = 0x4,$/;"	e	enum:fst::StatePropertiesEnum
kStateArcsOut	fstext/factor.h	/^  kStateArcsOut = 0x10,$/;"	e	enum:fst::StatePropertiesEnum
kStateFinal	fstext/factor.h	/^{ kStateFinal = 0x1,$/;"	e	enum:fst::StatePropertiesEnum
kStateIlabelsOut	fstext/factor.h	/^  kStateIlabelsOut = 0x80 }; $/;"	e	enum:fst::StatePropertiesEnum
kStateInitial	fstext/factor.h	/^  kStateInitial = 0x2,$/;"	e	enum:fst::StatePropertiesEnum
kStateMultipleArcsIn	fstext/factor.h	/^  kStateMultipleArcsIn = 0x8,$/;"	e	enum:fst::StatePropertiesEnum
kStateMultipleArcsOut	fstext/factor.h	/^  kStateMultipleArcsOut = 0x20,$/;"	e	enum:fst::StatePropertiesEnum
kStateOlabelsOut	fstext/factor.h	/^  kStateOlabelsOut = 0x40,$/;"	e	enum:fst::StatePropertiesEnum
order_	fstext/factor.h	/^  vector<StateId> *order_;$/;"	m	class:fst::DfsOrderVisitor
KALDI_FSTEXT_FST_TEST_UTILS_H_	fstext/fst-test-utils.h	21;"	d
KALDI_FSTEXT_FSTEXT_LIB_H_	fstext/fstext-lib.h	21;"	d
ApplyProbabilityScale	fstext/fstext-utils-inl.h	/^void ApplyProbabilityScale(float scale, MutableFst<Arc> *fst) {$/;"	f	namespace:fst
Arg	fstext/fstext-utils-inl.h	/^  typedef T Arg;$/;"	t	struct:fst::IdentityFunction
ClearSymbols	fstext/fstext-utils-inl.h	/^void ClearSymbols(bool clear_input,$/;"	f	namespace:fst
ComposeDeterministicOnDemand	fstext/fstext-utils-inl.h	/^void ComposeDeterministicOnDemand(const Fst<Arc> &fst1,$/;"	f	namespace:fst
ConvertNbestToVector	fstext/fstext-utils-inl.h	/^void ConvertNbestToVector(const Fst<Arc> &fst,$/;"	f	namespace:fst
DeterminizeInLog	fstext/fstext-utils-inl.h	/^void DeterminizeInLog(VectorFst<StdArc> *fst) {$/;"	f	namespace:fst
DeterminizeStarInLog	fstext/fstext-utils-inl.h	/^void DeterminizeStarInLog(VectorFst<StdArc> *fst, float delta, bool *debug_ptr, int max_states) {$/;"	f	namespace:fst
EqualAlign	fstext/fstext-utils-inl.h	/^bool EqualAlign(const Fst<Arc> &ifst,$/;"	f	namespace:fst
FinalAction	fstext/fstext-utils-inl.h	/^  MapFinalAction FinalAction() { return MAP_NO_SUPERFINAL; }$/;"	f	class:fst::MapInputSymbolsMapper
FindSelfLoopWithILabel	fstext/fstext-utils-inl.h	/^ssize_t FindSelfLoopWithILabel(const Fst<Arc> &fst, typename Arc::StateId s) {$/;"	f	namespace:fst
FollowingInputSymbolsAreSame	fstext/fstext-utils-inl.h	/^bool FollowingInputSymbolsAreSame(bool end_is_epsilon, const Fst<Arc> &fst) {$/;"	f	namespace:fst
FollowingInputSymbolsAreSameClass	fstext/fstext-utils-inl.h	/^bool FollowingInputSymbolsAreSameClass(bool end_is_epsilon, const Fst<Arc> &fst, const F &f) {$/;"	f	namespace:fst
GetInputSymbols	fstext/fstext-utils-inl.h	/^void GetInputSymbols(const Fst<Arc> &fst,$/;"	f	namespace:fst
GetLinearSymbolSequence	fstext/fstext-utils-inl.h	/^bool GetLinearSymbolSequence(const Fst<Arc> &fst,$/;"	f	namespace:fst
GetLinearSymbolSequences	fstext/fstext-utils-inl.h	/^bool GetLinearSymbolSequences(const Fst<Arc> &fst,$/;"	f	namespace:fst
GetOutputSymbols	fstext/fstext-utils-inl.h	/^void GetOutputSymbols(const Fst<Arc> &fst,$/;"	f	namespace:fst
GetSymbols	fstext/fstext-utils-inl.h	/^void GetSymbols(const SymbolTable &symtab,$/;"	f	namespace:fst
HighestNumberedInputSymbol	fstext/fstext-utils-inl.h	/^typename Arc::Label HighestNumberedInputSymbol(const Fst<Arc> &fst) {$/;"	f	namespace:fst
HighestNumberedOutputSymbol	fstext/fstext-utils-inl.h	/^typename Arc::Label HighestNumberedOutputSymbol(const Fst<Arc> &fst) {$/;"	f	namespace:fst
IdentityFunction	fstext/fstext-utils-inl.h	/^template<class T> struct IdentityFunction {$/;"	s	namespace:fst
InputSymbolsAction	fstext/fstext-utils-inl.h	/^  MapSymbolsAction InputSymbolsAction() { return MAP_CLEAR_SYMBOLS; }$/;"	f	class:fst::MapInputSymbolsMapper
IsStochasticFst	fstext/fstext-utils-inl.h	/^bool IsStochasticFst(const Fst<Arc> &fst,$/;"	f	namespace:fst
IsStochasticFst	fstext/fstext-utils-inl.h	/^bool IsStochasticFst(const Fst<LogArc> &fst,$/;"	f	namespace:fst
IsStochasticFstInLog	fstext/fstext-utils-inl.h	/^bool IsStochasticFstInLog(const VectorFst<StdArc> &fst,$/;"	f	namespace:fst
KALDI_FSTEXT_FSTEXT_UTILS_INL_H_	fstext/fstext-utils-inl.h	22;"	d
MakeFollowingInputSymbolsSame	fstext/fstext-utils-inl.h	/^void MakeFollowingInputSymbolsSame(bool end_is_epsilon, MutableFst<Arc> *fst) {$/;"	f	namespace:fst
MakeFollowingInputSymbolsSameClass	fstext/fstext-utils-inl.h	/^void MakeFollowingInputSymbolsSameClass(bool end_is_epsilon, MutableFst<Arc> *fst, const F &f) {$/;"	f	namespace:fst
MakeLinearAcceptor	fstext/fstext-utils-inl.h	/^void MakeLinearAcceptor(const vector<I> &labels, MutableFst<Arc> *ofst) {$/;"	f	namespace:fst
MakeLinearAcceptorWithAlternatives	fstext/fstext-utils-inl.h	/^void MakeLinearAcceptorWithAlternatives(const vector<vector<I> > &labels,$/;"	f	namespace:fst
MakeLoopFst	fstext/fstext-utils-inl.h	/^VectorFst<Arc>* MakeLoopFst(const vector<const ExpandedFst<Arc> *> &fsts) {$/;"	f	namespace:fst
MakePrecedingInputSymbolsSame	fstext/fstext-utils-inl.h	/^void MakePrecedingInputSymbolsSame(bool start_is_epsilon, MutableFst<Arc> *fst) {$/;"	f	namespace:fst
MakePrecedingInputSymbolsSameClass	fstext/fstext-utils-inl.h	/^void MakePrecedingInputSymbolsSameClass(bool start_is_epsilon, MutableFst<Arc> *fst, const F &f) {$/;"	f	namespace:fst
MapInputSymbols	fstext/fstext-utils-inl.h	/^void MapInputSymbols(const vector<I> &symbol_mapping,$/;"	f	namespace:fst
MapInputSymbolsMapper	fstext/fstext-utils-inl.h	/^  MapInputSymbolsMapper(const vector<I> &to_remove, bool copy) {$/;"	f	class:fst::MapInputSymbolsMapper
MapInputSymbolsMapper	fstext/fstext-utils-inl.h	/^class MapInputSymbolsMapper {$/;"	c	namespace:fst
NbestAsFsts	fstext/fstext-utils-inl.h	/^void NbestAsFsts(const Fst<Arc> &fst,$/;"	f	namespace:fst
NumArcs	fstext/fstext-utils-inl.h	/^typename Arc::StateId NumArcs(const ExpandedFst<Arc> &fst) {$/;"	f	namespace:fst
OutputSymbolsAction	fstext/fstext-utils-inl.h	/^  MapSymbolsAction OutputSymbolsAction() { return MAP_COPY_SYMBOLS; }$/;"	f	class:fst::MapInputSymbolsMapper
PhiCompose	fstext/fstext-utils-inl.h	/^void PhiCompose(const Fst<Arc> &fst1,$/;"	f	namespace:fst
PrecedingInputSymbolsAreSame	fstext/fstext-utils-inl.h	/^bool PrecedingInputSymbolsAreSame(bool start_is_epsilon, const Fst<Arc> &fst) {$/;"	f	namespace:fst
PrecedingInputSymbolsAreSameClass	fstext/fstext-utils-inl.h	/^bool PrecedingInputSymbolsAreSameClass(bool start_is_epsilon, const Fst<Arc> &fst, const F &f) {$/;"	f	namespace:fst
PropagateFinal	fstext/fstext-utils-inl.h	/^void PropagateFinal(typename Arc::Label phi_label,$/;"	f	namespace:fst
PropagateFinalInternal	fstext/fstext-utils-inl.h	/^void PropagateFinalInternal($/;"	f	namespace:fst
Properties	fstext/fstext-utils-inl.h	/^  uint64 Properties(uint64 props) const {  \/\/ Not tested.$/;"	f	class:fst::MapInputSymbolsMapper
ReadFstKaldi	fstext/fstext-utils-inl.h	/^inline VectorFst<StdArc> *ReadFstKaldi(std::string rxfilename) {$/;"	f	namespace:fst
RemoveSomeInputSymbols	fstext/fstext-utils-inl.h	/^void RemoveSomeInputSymbols(const vector<I> &to_remove,$/;"	f	namespace:fst
RemoveUselessArcs	fstext/fstext-utils-inl.h	/^void RemoveUselessArcs(MutableFst<Arc> *fst) {$/;"	f	namespace:fst
RemoveWeights	fstext/fstext-utils-inl.h	/^void RemoveWeights(MutableFst<Arc> *ifst) {$/;"	f	namespace:fst
Result	fstext/fstext-utils-inl.h	/^  typedef T Result;$/;"	t	struct:fst::IdentityFunction
RhoCompose	fstext/fstext-utils-inl.h	/^void RhoCompose(const Fst<Arc> &fst1,$/;"	f	namespace:fst
SafeDeterminizeMinimizeWrapper	fstext/fstext-utils-inl.h	/^void SafeDeterminizeMinimizeWrapper(MutableFst<Arc> *ifst, VectorFst<Arc> *ofst, float delta) {$/;"	f	namespace:fst
SafeDeterminizeMinimizeWrapperInLog	fstext/fstext-utils-inl.h	/^void SafeDeterminizeMinimizeWrapperInLog(VectorFst<StdArc> *ifst, VectorFst<StdArc> *ofst, float delta) {$/;"	f	namespace:fst
SafeDeterminizeWrapper	fstext/fstext-utils-inl.h	/^void SafeDeterminizeWrapper(MutableFst<Arc> *ifst, MutableFst<Arc> *ofst, float delta) {$/;"	f	namespace:fst
SafeDeterminizeWrapperInLog	fstext/fstext-utils-inl.h	/^void SafeDeterminizeWrapperInLog(VectorFst<StdArc> *ifst, VectorFst<StdArc> *ofst, float delta) {$/;"	f	namespace:fst
WriteFstKaldi	fstext/fstext-utils-inl.h	/^inline void WriteFstKaldi(const VectorFst<StdArc> &fst,$/;"	f	namespace:fst
fst	fstext/fstext-utils-inl.h	/^namespace fst {$/;"	n
operator ()	fstext/fstext-utils-inl.h	/^  Arc operator ()(const Arc &arc_in) {$/;"	f	class:fst::MapInputSymbolsMapper
operator ()	fstext/fstext-utils-inl.h	/^  T operator () (const T &t) const { return t; }$/;"	f	struct:fst::IdentityFunction
owned	fstext/fstext-utils-inl.h	/^  bool owned;$/;"	m	class:fst::MapInputSymbolsMapper
symbol_mapping_	fstext/fstext-utils-inl.h	/^  const vector<I> *symbol_mapping_;$/;"	m	class:fst::MapInputSymbolsMapper
~MapInputSymbolsMapper	fstext/fstext-utils-inl.h	/^  ~MapInputSymbolsMapper() { if (owned && symbol_mapping_ != NULL) delete symbol_mapping_; }$/;"	f	class:fst::MapInputSymbolsMapper
Arg	fstext/fstext-utils-test.cc	/^  typedef typename Arc::Label Arg;$/;"	t	struct:fst::TestFunctor	file:
MakeLoopFstCompare	fstext/fstext-utils-test.cc	/^VectorFst<Arc>* MakeLoopFstCompare(const vector<const ExpandedFst<Arc> *> &fsts) {$/;"	f	namespace:fst
Print	fstext/fstext-utils-test.cc	/^template<class Arc> void Print(const Fst<Arc> &fst, std::string message) {$/;"	f	namespace:fst
Result	fstext/fstext-utils-test.cc	/^  typedef int32 Result;$/;"	t	struct:fst::TestFunctor	file:
TestAcceptorMinimize	fstext/fstext-utils-test.cc	/^template<class Arc>  void TestAcceptorMinimize() {$/;"	f	namespace:fst
TestDeterminizeStarInLog	fstext/fstext-utils-test.cc	/^template<class Arc>  void TestDeterminizeStarInLog() {$/;"	f	namespace:fst
TestEqualAlign	fstext/fstext-utils-test.cc	/^void TestEqualAlign() {$/;"	f	namespace:fst
TestFunctor	fstext/fstext-utils-test.cc	/^struct TestFunctor {$/;"	s	namespace:fst	file:
TestMakeLinearAcceptor	fstext/fstext-utils-test.cc	/^void TestMakeLinearAcceptor() {$/;"	f	namespace:fst
TestMakeLoopFst	fstext/fstext-utils-test.cc	/^template<class Arc>  void TestMakeLoopFst() {$/;"	f	namespace:fst
TestMakeSymbolsSame	fstext/fstext-utils-test.cc	/^template<class Arc>  void TestMakeSymbolsSame() {$/;"	f	namespace:fst
TestMakeSymbolsSameClass	fstext/fstext-utils-test.cc	/^template<class Arc>  void TestMakeSymbolsSameClass() {$/;"	f	namespace:fst
TestPushInLog	fstext/fstext-utils-test.cc	/^void TestPushInLog() {  \/\/ also tests SafeDeterminizeMinimizeWrapper().$/;"	f	namespace:fst
TestRemoveUselessArcs	fstext/fstext-utils-test.cc	/^void TestRemoveUselessArcs() {$/;"	f	namespace:fst
TestSafeDeterminizeWrapper	fstext/fstext-utils-test.cc	/^template<class Arc>  void TestSafeDeterminizeWrapper() {  \/\/ also tests SafeDeterminizeMinimizeWrapper().$/;"	f	namespace:fst
fst	fstext/fstext-utils-test.cc	/^namespace fst$/;"	n	file:
main	fstext/fstext-utils-test.cc	/^int main() {$/;"	f
operator ()	fstext/fstext-utils-test.cc	/^  Result operator () (Arg a) const {$/;"	f	struct:fst::TestFunctor
Clear	fstext/fstext-utils.h	/^  void Clear() {$/;"	f	class:fst::VectorFstTplHolder
Copy	fstext/fstext-utils.h	/^  void Copy(const T &t) {  \/\/ copies it into the holder.$/;"	f	class:fst::VectorFstTplHolder
IsReadInBinary	fstext/fstext-utils.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:fst::VectorFstTplHolder
KALDI_FSTEXT_FSTEXT_UTILS_H_	fstext/fstext-utils.h	23;"	d
MinimizeEncoded	fstext/fstext-utils.h	/^void MinimizeEncoded(VectorFst<Arc> *fst, float delta = kDelta) {$/;"	f	namespace:fst
PushInLog	fstext/fstext-utils.h	/^void PushInLog(VectorFst<StdArc> *fst, uint32 ptype, float delta = kDelta) {$/;"	f	namespace:fst
Read	fstext/fstext-utils.h	/^  bool Read(std::istream &is) {$/;"	f	class:fst::VectorFstTplHolder
StateId	fstext/fstext-utils.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::VectorFstTplHolder
StrToWeight	fstext/fstext-utils.h	/^  static bool StrToWeight(const std::string &s, bool allow_zero, Weight *w) {$/;"	f	class:fst::VectorFstTplHolder
T	fstext/fstext-utils.h	/^  typedef VectorFst<Arc> T;$/;"	t	class:fst::VectorFstTplHolder
Value	fstext/fstext-utils.h	/^  const T &Value() {$/;"	f	class:fst::VectorFstTplHolder
VectorFstHolder	fstext/fstext-utils.h	/^typedef VectorFstTplHolder<StdArc> VectorFstHolder;$/;"	t	namespace:fst
VectorFstTplHolder	fstext/fstext-utils.h	/^  VectorFstTplHolder(): t_(NULL) { }$/;"	f	class:fst::VectorFstTplHolder
VectorFstTplHolder	fstext/fstext-utils.h	/^class VectorFstTplHolder {$/;"	c	namespace:fst
Weight	fstext/fstext-utils.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::VectorFstTplHolder
Write	fstext/fstext-utils.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:fst::VectorFstTplHolder
fst	fstext/fstext-utils.h	/^namespace fst {$/;"	n
t_	fstext/fstext-utils.h	/^  T *t_;$/;"	m	class:fst::VectorFstTplHolder
~VectorFstTplHolder	fstext/fstext-utils.h	/^  ~VectorFstTplHolder() { Clear(); }$/;"	f	class:fst::VectorFstTplHolder
CompactLatticeHasAlignment	fstext/lattice-utils-inl.h	/^bool CompactLatticeHasAlignment($/;"	f	namespace:fst
ConvertLattice	fstext/lattice-utils-inl.h	/^void ConvertLattice($/;"	f	namespace:fst
KALDI_FSTEXT_LATTICE_UTILS_INL_H_	fstext/lattice-utils-inl.h	21;"	d
RemoveAlignmentsFromCompactLattice	fstext/lattice-utils-inl.h	/^void RemoveAlignmentsFromCompactLattice($/;"	f	namespace:fst
ScaleLattice	fstext/lattice-utils-inl.h	/^void ScaleLattice($/;"	f	namespace:fst
fst	fstext/lattice-utils-inl.h	/^namespace fst {$/;"	n
TestConvert	fstext/lattice-utils-test.cc	/^template<class Weight, class Int> void TestConvert(bool invert) {$/;"	f	namespace:fst
TestConvert2	fstext/lattice-utils-test.cc	/^template<class Int> void TestConvert2() {$/;"	f	namespace:fst
TestConvertPair	fstext/lattice-utils-test.cc	/^template<class Weight, class Int> void TestConvertPair(bool invert) {$/;"	f	namespace:fst
TestScalePair	fstext/lattice-utils-test.cc	/^template<class Weight, class Int> void TestScalePair(bool invert) {$/;"	f	namespace:fst
TestShortestPath	fstext/lattice-utils-test.cc	/^template<class Weight, class Int> void TestShortestPath() {$/;"	f	namespace:fst
fst	fstext/lattice-utils-test.cc	/^namespace fst {$/;"	n	file:
main	fstext/lattice-utils-test.cc	/^int main() {$/;"	f
AcousticLatticeScale	fstext/lattice-utils.h	/^inline vector<vector<double> > AcousticLatticeScale(double acwt) {$/;"	f	namespace:fst
ConvertLattice	fstext/lattice-utils.h	/^void ConvertLattice(const ExpandedFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<double>, Int> > > &ifst,$/;"	f	namespace:fst
ConvertLattice	fstext/lattice-utils.h	/^void ConvertLattice(const ExpandedFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, Int> > > &ifst,$/;"	f	namespace:fst
ConvertLattice	fstext/lattice-utils.h	/^void ConvertLattice(const ExpandedFst<ArcTpl<LatticeWeightTpl<double> > > &ifst,$/;"	f	namespace:fst
ConvertLattice	fstext/lattice-utils.h	/^void ConvertLattice(const ExpandedFst<ArcTpl<LatticeWeightTpl<float> > > &ifst,$/;"	f	namespace:fst
DefaultLatticeScale	fstext/lattice-utils.h	/^inline vector<vector<double> > DefaultLatticeScale() {$/;"	f	namespace:fst
FinalAction	fstext/lattice-utils.h	/^  MapFinalAction FinalAction() { return MAP_NO_SUPERFINAL; }$/;"	f	class:fst::LatticeToStdMapper
FinalAction	fstext/lattice-utils.h	/^  MapFinalAction FinalAction() { return MAP_NO_SUPERFINAL; }$/;"	f	class:fst::StdToLatticeMapper
GraphLatticeScale	fstext/lattice-utils.h	/^inline vector<vector<double> > GraphLatticeScale(double lmwt) {$/;"	f	namespace:fst
InputSymbolsAction	fstext/lattice-utils.h	/^  MapSymbolsAction InputSymbolsAction() { return MAP_COPY_SYMBOLS; }$/;"	f	class:fst::LatticeToStdMapper
InputSymbolsAction	fstext/lattice-utils.h	/^  MapSymbolsAction InputSymbolsAction() { return MAP_COPY_SYMBOLS; }$/;"	f	class:fst::StdToLatticeMapper
KALDI_FSTEXT_LATTICE_UTILS_H_	fstext/lattice-utils.h	22;"	d
LatticeArc	fstext/lattice-utils.h	/^  typedef ArcTpl<LatticeWeight> LatticeArc;$/;"	t	class:fst::LatticeToStdMapper
LatticeArc	fstext/lattice-utils.h	/^  typedef ArcTpl<LatticeWeight> LatticeArc;$/;"	t	class:fst::StdToLatticeMapper
LatticeScale	fstext/lattice-utils.h	/^inline vector<vector<double> > LatticeScale(double lmwt, double acwt) {$/;"	f	namespace:fst
LatticeToStdMapper	fstext/lattice-utils.h	/^class LatticeToStdMapper {$/;"	c	namespace:fst
LatticeWeight	fstext/lattice-utils.h	/^  typedef LatticeWeightTpl<Int> LatticeWeight;$/;"	t	class:fst::LatticeToStdMapper
LatticeWeight	fstext/lattice-utils.h	/^  typedef LatticeWeightTpl<Int> LatticeWeight;$/;"	t	class:fst::StdToLatticeMapper
OutputSymbolsAction	fstext/lattice-utils.h	/^  MapSymbolsAction OutputSymbolsAction() { return MAP_COPY_SYMBOLS; }$/;"	f	class:fst::LatticeToStdMapper
OutputSymbolsAction	fstext/lattice-utils.h	/^  MapSymbolsAction OutputSymbolsAction() { return MAP_COPY_SYMBOLS; }$/;"	f	class:fst::StdToLatticeMapper
Properties	fstext/lattice-utils.h	/^  uint64 Properties(uint64 props) { return props; }$/;"	f	class:fst::LatticeToStdMapper
Properties	fstext/lattice-utils.h	/^  uint64 Properties(uint64 props) { return props; }$/;"	f	class:fst::StdToLatticeMapper
StdToLatticeMapper	fstext/lattice-utils.h	/^class StdToLatticeMapper {$/;"	c	namespace:fst
fst	fstext/lattice-utils.h	/^namespace fst {$/;"	n
operator ()	fstext/lattice-utils.h	/^  LatticeArc operator()(const StdArc &arc) {$/;"	f	class:fst::StdToLatticeMapper
operator ()	fstext/lattice-utils.h	/^  StdArc operator()(const LatticeArc &arc) {$/;"	f	class:fst::LatticeToStdMapper
BaseFloat	fstext/lattice-weight-test.cc	/^typedef float BaseFloat;$/;"	t	namespace:fst	file:
CompactLatticeWeight	fstext/lattice-weight-test.cc	/^typedef CompactLatticeWeightTpl<LatticeWeight, int32> CompactLatticeWeight;$/;"	t	namespace:fst	file:
CompactLatticeWeightCommonDivisor	fstext/lattice-weight-test.cc	/^  CompactLatticeWeightCommonDivisor;$/;"	t	namespace:fst	file:
CompactLatticeWeightTest	fstext/lattice-weight-test.cc	/^void CompactLatticeWeightTest() {$/;"	f	namespace:fst
LatticeWeight	fstext/lattice-weight-test.cc	/^typedef LatticeWeightTpl<BaseFloat> LatticeWeight;$/;"	t	namespace:fst	file:
LatticeWeightTest	fstext/lattice-weight-test.cc	/^void LatticeWeightTest() {$/;"	f	namespace:fst
RandomCompactLatticeWeight	fstext/lattice-weight-test.cc	/^CompactLatticeWeight RandomCompactLatticeWeight() {$/;"	f	namespace:fst
RandomLatticeWeight	fstext/lattice-weight-test.cc	/^LatticeWeight RandomLatticeWeight() {$/;"	f	namespace:fst
fst	fstext/lattice-weight-test.cc	/^namespace fst {$/;"	n	file:
main	fstext/lattice-weight-test.cc	/^int main() {$/;"	f
ApproxEqual	fstext/lattice-weight.h	/^inline bool ApproxEqual(const CompactLatticeWeightTpl<WeightType, IntType> &w1,$/;"	f	namespace:fst
ApproxEqual	fstext/lattice-weight.h	/^inline bool ApproxEqual(const LatticeWeightTpl<FloatType> &w1,$/;"	f	namespace:fst
CompactLatticeWeightCommonDivisorTpl	fstext/lattice-weight.h	/^class CompactLatticeWeightCommonDivisorTpl {$/;"	c	namespace:fst
CompactLatticeWeightTpl	fstext/lattice-weight.h	/^  CompactLatticeWeightTpl() { }$/;"	f	class:fst::CompactLatticeWeightTpl
CompactLatticeWeightTpl	fstext/lattice-weight.h	/^  CompactLatticeWeightTpl(const WeightType &w, const vector<IntType> &s):$/;"	f	class:fst::CompactLatticeWeightTpl
CompactLatticeWeightTpl	fstext/lattice-weight.h	/^class CompactLatticeWeightTpl {$/;"	c	namespace:fst
Compare	fstext/lattice-weight.h	/^inline int Compare (const CompactLatticeWeightTpl<WeightType, IntType> &w1,$/;"	f	namespace:fst
Compare	fstext/lattice-weight.h	/^inline int Compare (const LatticeWeightTpl<FloatType> &w1,$/;"	f	namespace:fst
Compare	fstext/lattice-weight.h	/^inline int Compare(const TropicalWeight &w1,$/;"	f	namespace:fst
ConvertLatticeWeight	fstext/lattice-weight.h	/^inline void ConvertLatticeWeight($/;"	f	namespace:fst
ConvertToCost	fstext/lattice-weight.h	/^inline double ConvertToCost(const CompactLatticeWeightTpl<LatticeWeightTpl<Float>, Int> &w) {$/;"	f	namespace:fst
ConvertToCost	fstext/lattice-weight.h	/^inline double ConvertToCost(const LatticeWeightTpl<Float> &w) {$/;"	f	namespace:fst
ConvertToCost	fstext/lattice-weight.h	/^inline double ConvertToCost(const TropicalWeightTpl<Float> &w) {$/;"	f	namespace:fst
Divide	fstext/lattice-weight.h	/^inline CompactLatticeWeightTpl<WeightType, IntType> Divide(const CompactLatticeWeightTpl<WeightType, IntType> &w1,$/;"	f	namespace:fst
Divide	fstext/lattice-weight.h	/^inline LatticeWeightTpl<FloatType> Divide(const LatticeWeightTpl<FloatType> &w1,$/;"	f	namespace:fst
GetIntSizeString	fstext/lattice-weight.h	/^  inline static string GetIntSizeString() {$/;"	f	class:fst::CompactLatticeWeightTpl
Hash	fstext/lattice-weight.h	/^  size_t Hash() const {$/;"	f	class:fst::CompactLatticeWeightTpl
Hash	fstext/lattice-weight.h	/^  size_t Hash() const {$/;"	f	class:fst::LatticeWeightTpl
KALDI_FSTEXT_LATTICE_WEIGHT_H_	fstext/lattice-weight.h	22;"	d
LatticeWeightTpl	fstext/lattice-weight.h	/^  LatticeWeightTpl() { }$/;"	f	class:fst::LatticeWeightTpl
LatticeWeightTpl	fstext/lattice-weight.h	/^  LatticeWeightTpl(T a, T b): value1_(a), value2_(b) {}$/;"	f	class:fst::LatticeWeightTpl
LatticeWeightTpl	fstext/lattice-weight.h	/^  LatticeWeightTpl(const LatticeWeightTpl &other): value1_(other.value1_), value2_(other.value2_) { }$/;"	f	class:fst::LatticeWeightTpl
LatticeWeightTpl	fstext/lattice-weight.h	/^class LatticeWeightTpl {$/;"	c	namespace:fst
Member	fstext/lattice-weight.h	/^  bool Member() const {$/;"	f	class:fst::CompactLatticeWeightTpl
Member	fstext/lattice-weight.h	/^  bool Member() const {$/;"	f	class:fst::LatticeWeightTpl
NaturalLess	fstext/lattice-weight.h	/^class NaturalLess<CompactLatticeWeightTpl<LatticeWeightTpl<FloatType>, IntType> > {$/;"	c	namespace:fst
NaturalLess	fstext/lattice-weight.h	/^class NaturalLess<LatticeWeightTpl<FloatType> > {$/;"	c	namespace:fst
NoWeight	fstext/lattice-weight.h	/^  static const CompactLatticeWeightTpl<WeightType, IntType> NoWeight() {$/;"	f	class:fst::CompactLatticeWeightTpl
NoWeight	fstext/lattice-weight.h	/^  static const LatticeWeightTpl NoWeight() {$/;"	f	class:fst::LatticeWeightTpl
One	fstext/lattice-weight.h	/^  static const CompactLatticeWeightTpl<WeightType, IntType> One() {$/;"	f	class:fst::CompactLatticeWeightTpl
One	fstext/lattice-weight.h	/^  static const LatticeWeightTpl One() {$/;"	f	class:fst::LatticeWeightTpl
Plus	fstext/lattice-weight.h	/^inline CompactLatticeWeightTpl<WeightType, IntType> Plus($/;"	f	namespace:fst
Plus	fstext/lattice-weight.h	/^inline LatticeWeightTpl<FloatType> Plus(const LatticeWeightTpl<FloatType> &w1,$/;"	f	namespace:fst
Properties	fstext/lattice-weight.h	/^  static uint64 Properties() {$/;"	f	class:fst::CompactLatticeWeightTpl
Properties	fstext/lattice-weight.h	/^  static uint64 Properties() {$/;"	f	class:fst::LatticeWeightTpl
Quantize	fstext/lattice-weight.h	/^  CompactLatticeWeightTpl Quantize(float delta = kDelta) const {$/;"	f	class:fst::CompactLatticeWeightTpl
Quantize	fstext/lattice-weight.h	/^  LatticeWeightTpl Quantize(float delta = kDelta) const {$/;"	f	class:fst::LatticeWeightTpl
Read	fstext/lattice-weight.h	/^  istream &Read(istream &strm) {$/;"	f	class:fst::CompactLatticeWeightTpl
Read	fstext/lattice-weight.h	/^  istream &Read(istream &strm) {$/;"	f	class:fst::LatticeWeightTpl
ReadFloatType	fstext/lattice-weight.h	/^  inline static void ReadFloatType(istream &strm, T &f) {$/;"	f	class:fst::LatticeWeightTpl
ReadNoParen	fstext/lattice-weight.h	/^  inline istream &ReadNoParen($/;"	f	class:fst::LatticeWeightTpl
Reverse	fstext/lattice-weight.h	/^  CompactLatticeWeightTpl<WeightType, IntType> Reverse() const {$/;"	f	class:fst::CompactLatticeWeightTpl
Reverse	fstext/lattice-weight.h	/^  LatticeWeightTpl<FloatType> Reverse() const {$/;"	f	class:fst::LatticeWeightTpl
ReverseWeight	fstext/lattice-weight.h	/^  typedef CompactLatticeWeightTpl<WeightType, IntType> ReverseWeight;$/;"	t	class:fst::CompactLatticeWeightTpl
ReverseWeight	fstext/lattice-weight.h	/^  typedef LatticeWeightTpl ReverseWeight;$/;"	t	class:fst::LatticeWeightTpl
ScaleTupleWeight	fstext/lattice-weight.h	/^                  TropicalWeightTpl<FloatType> > ScaleTupleWeight($/;"	f	namespace:fst
ScaleTupleWeight	fstext/lattice-weight.h	/^inline CompactLatticeWeightTpl<Weight, IntType> ScaleTupleWeight($/;"	f	namespace:fst
ScaleTupleWeight	fstext/lattice-weight.h	/^inline LatticeWeightTpl<FloatType> ScaleTupleWeight($/;"	f	namespace:fst
SetString	fstext/lattice-weight.h	/^  void SetString(const vector<IntType> &s) { string_ = s; }$/;"	f	class:fst::CompactLatticeWeightTpl
SetValue1	fstext/lattice-weight.h	/^  inline void SetValue1(T f) { value1_ = f; }$/;"	f	class:fst::LatticeWeightTpl
SetValue2	fstext/lattice-weight.h	/^  inline void SetValue2(T f) { value2_ = f; }$/;"	f	class:fst::LatticeWeightTpl
SetWeight	fstext/lattice-weight.h	/^  void SetWeight(const W &w) { weight_ = w; }$/;"	f	class:fst::CompactLatticeWeightTpl
String	fstext/lattice-weight.h	/^  const vector<IntType> &String() const { return string_; }$/;"	f	class:fst::CompactLatticeWeightTpl
T	fstext/lattice-weight.h	/^  typedef FloatType T; \/\/ normally float.$/;"	t	class:fst::LatticeWeightTpl
Times	fstext/lattice-weight.h	/^inline CompactLatticeWeightTpl<WeightType, IntType> Times($/;"	f	namespace:fst
Times	fstext/lattice-weight.h	/^inline LatticeWeightTpl<FloatType> Times(const LatticeWeightTpl<FloatType> &w1,$/;"	f	namespace:fst
Type	fstext/lattice-weight.h	/^  static const string &Type() {$/;"	f	class:fst::CompactLatticeWeightTpl
Type	fstext/lattice-weight.h	/^  static const string &Type() {$/;"	f	class:fst::LatticeWeightTpl
Value1	fstext/lattice-weight.h	/^  inline T Value1() const { return value1_; }$/;"	f	class:fst::LatticeWeightTpl
Value2	fstext/lattice-weight.h	/^  inline T Value2() const { return value2_; }$/;"	f	class:fst::LatticeWeightTpl
W	fstext/lattice-weight.h	/^  typedef WeightType W;$/;"	t	class:fst::CompactLatticeWeightTpl
Weight	fstext/lattice-weight.h	/^  const W &Weight() const { return weight_; }$/;"	f	class:fst::CompactLatticeWeightTpl
Weight	fstext/lattice-weight.h	/^  typedef CompactLatticeWeightTpl<BaseWeightType, IntType> Weight;$/;"	t	class:fst::CompactLatticeWeightCommonDivisorTpl
Weight	fstext/lattice-weight.h	/^  typedef CompactLatticeWeightTpl<LatticeWeightTpl<FloatType>, IntType> Weight;$/;"	t	class:fst::NaturalLess
Weight	fstext/lattice-weight.h	/^  typedef LatticeWeightTpl<FloatType> Weight;$/;"	t	class:fst::NaturalLess
Write	fstext/lattice-weight.h	/^  ostream &Write(ostream &strm) const {$/;"	f	class:fst::CompactLatticeWeightTpl
Write	fstext/lattice-weight.h	/^  ostream &Write(ostream &strm) const {$/;"	f	class:fst::LatticeWeightTpl
WriteFloatType	fstext/lattice-weight.h	/^  inline static void WriteFloatType(ostream &strm, const T &f) {$/;"	f	class:fst::LatticeWeightTpl
Zero	fstext/lattice-weight.h	/^  static const CompactLatticeWeightTpl<WeightType, IntType> Zero() {$/;"	f	class:fst::CompactLatticeWeightTpl
Zero	fstext/lattice-weight.h	/^  static const LatticeWeightTpl Zero() {$/;"	f	class:fst::LatticeWeightTpl
fst	fstext/lattice-weight.h	/^namespace fst {$/;"	n
operator !=	fstext/lattice-weight.h	/^inline bool operator!=(const CompactLatticeWeightTpl<WeightType, IntType> &w1,$/;"	f	namespace:fst
operator !=	fstext/lattice-weight.h	/^inline bool operator!=(const LatticeWeightTpl<FloatType> &wa,$/;"	f	namespace:fst
operator ()	fstext/lattice-weight.h	/^  Weight operator()(const Weight &w1, const Weight &w2) const {$/;"	f	class:fst::CompactLatticeWeightCommonDivisorTpl
operator ()	fstext/lattice-weight.h	/^  bool operator()(const Weight &w1, const Weight &w2) const {$/;"	f	class:fst::NaturalLess
operator <<	fstext/lattice-weight.h	/^inline ostream &operator <<(ostream &strm, const CompactLatticeWeightTpl<WeightType, IntType> &w) {$/;"	f	namespace:fst
operator <<	fstext/lattice-weight.h	/^inline ostream &operator <<(ostream &strm, const LatticeWeightTpl<FloatType> &w) {$/;"	f	namespace:fst
operator =	fstext/lattice-weight.h	/^  CompactLatticeWeightTpl &operator=(const CompactLatticeWeightTpl<WeightType, IntType> &w) {$/;"	f	class:fst::CompactLatticeWeightTpl
operator =	fstext/lattice-weight.h	/^  LatticeWeightTpl &operator=(const LatticeWeightTpl &w) {$/;"	f	class:fst::LatticeWeightTpl
operator ==	fstext/lattice-weight.h	/^inline bool operator==(const CompactLatticeWeightTpl<WeightType, IntType> &w1,$/;"	f	namespace:fst
operator ==	fstext/lattice-weight.h	/^inline bool operator==(const LatticeWeightTpl<FloatType> &wa,$/;"	f	namespace:fst
operator >>	fstext/lattice-weight.h	/^inline istream &operator >>(istream &strm, CompactLatticeWeightTpl<WeightType, IntType> &w) {$/;"	f	namespace:fst
operator >>	fstext/lattice-weight.h	/^inline istream &operator >>(istream &strm, LatticeWeightTpl<FloatType> &w1) {$/;"	f	namespace:fst
string_	fstext/lattice-weight.h	/^  vector<IntType> string_; $/;"	m	class:fst::CompactLatticeWeightTpl
value1_	fstext/lattice-weight.h	/^  T value1_;$/;"	m	class:fst::LatticeWeightTpl
value2_	fstext/lattice-weight.h	/^  T value2_;$/;"	m	class:fst::LatticeWeightTpl
weight_	fstext/lattice-weight.h	/^  W weight_;$/;"	m	class:fst::CompactLatticeWeightTpl
AddSelfLoops	fstext/pre-determinize-inl.h	/^template<class Arc> void AddSelfLoops(MutableFst<Arc> *fst, vector<typename Arc::Label> &isyms,$/;"	f	namespace:fst
Closure	fstext/pre-determinize-inl.h	/^template<class Arc> void Closure(MutableFst<Arc> *fst, std::set<typename Arc::StateId> *S,$/;"	f	namespace:fst::pre_determinize_helpers
CopySetToVector	fstext/pre-determinize-inl.h	/^template<class T> void CopySetToVector(const std::set<T> s, vector<T> *v) {$/;"	f	namespace:fst::pre_determinize_helpers
CreateNewSymbols	fstext/pre-determinize-inl.h	/^template<class Label> void CreateNewSymbols(SymbolTable *input_sym_table, int nSym,$/;"	f	namespace:fst
CreateSuperFinal	fstext/pre-determinize-inl.h	/^typename Arc::StateId CreateSuperFinal(MutableFst<Arc> *fst) {$/;"	f	namespace:fst
DeleteISymbols	fstext/pre-determinize-inl.h	/^int64 DeleteISymbols(MutableFst<Arc> *fst, vector<typename Arc::Label> isyms) {$/;"	f	namespace:fst
HasBannedPrefixPlusDigits	fstext/pre-determinize-inl.h	/^inline bool HasBannedPrefixPlusDigits(SymbolTable *symTable, std::string prefix, std::string *bad_sym) {$/;"	f	namespace:fst::pre_determinize_helpers
InsertMember	fstext/pre-determinize-inl.h	/^vector<T>* InsertMember(const vector<T> m, vector<vector<T>*> *S) {$/;"	f	namespace:fst::pre_determinize_helpers
KALDI_FSTEXT_PRE_DETERMINIZE_INL_H_	fstext/pre-determinize-inl.h	21;"	d
PreDeterminize	fstext/pre-determinize-inl.h	/^void PreDeterminize(MutableFst<Arc> *fst,$/;"	f	namespace:fst
fst	fstext/pre-determinize-inl.h	/^namespace fst {$/;"	n
pre_determinize_helpers	fstext/pre-determinize-inl.h	/^namespace pre_determinize_helpers {$/;"	n	namespace:fst
TestAddSelfLoops	fstext/pre-determinize-test.cc	/^template<class Arc>  void TestAddSelfLoops() {$/;"	f	namespace:fst
TestPreDeterminize	fstext/pre-determinize-test.cc	/^template<class Arc>  void TestPreDeterminize() {$/;"	f	namespace:fst
fst	fstext/pre-determinize-test.cc	/^namespace fst$/;"	n	file:
main	fstext/pre-determinize-test.cc	/^int main() {$/;"	f
KALDI_FSTEXT_PRE_DETERMINIZE_H_	fstext/pre-determinize.h	21;"	d
fst	fstext/pre-determinize.h	/^namespace fst {$/;"	n
Done	fstext/prune-special-inl.h	/^  bool Done(const Task &task) {$/;"	f	class:fst::PruneSpecialClass
GetOutputStateId	fstext/prune-special-inl.h	/^  inline OutputStateId GetOutputStateId(InputStateId istate,$/;"	f	class:fst::PruneSpecialClass
InputStateId	fstext/prune-special-inl.h	/^  typedef typename Arc::StateId InputStateId;$/;"	t	class:fst::PruneSpecialClass
KALDI_FSTEXT_PRUNE_SPECIAL_INL_H_	fstext/prune-special-inl.h	22;"	d
Label	fstext/prune-special-inl.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::PruneSpecialClass
OutputStateId	fstext/prune-special-inl.h	/^  typedef typename Arc::StateId OutputStateId;$/;"	t	class:fst::PruneSpecialClass
ProcessState	fstext/prune-special-inl.h	/^  inline OutputStateId ProcessState(InputStateId istate, const Weight &weight) {$/;"	f	class:fst::PruneSpecialClass
ProcessTask	fstext/prune-special-inl.h	/^  void ProcessTask(const Task &task) {$/;"	f	class:fst::PruneSpecialClass
PruneSpecial	fstext/prune-special-inl.h	/^void PruneSpecial(const Fst<Arc> &ifst,$/;"	f	namespace:fst
PruneSpecialClass	fstext/prune-special-inl.h	/^  PruneSpecialClass(const Fst<Arc> &ifst,$/;"	f	class:fst::PruneSpecialClass
PruneSpecialClass	fstext/prune-special-inl.h	/^template<class Arc> class PruneSpecialClass {$/;"	c	namespace:fst
Task	fstext/prune-special-inl.h	/^    Task(InputStateId istate, OutputStateId ostate, size_t position,$/;"	f	struct:fst::PruneSpecialClass::Task
Task	fstext/prune-special-inl.h	/^  struct Task {$/;"	s	class:fst::PruneSpecialClass
Weight	fstext/prune-special-inl.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::PruneSpecialClass
beam_	fstext/prune-special-inl.h	/^  Weight beam_;$/;"	m	class:fst::PruneSpecialClass
best_weight_	fstext/prune-special-inl.h	/^  Weight best_weight_; \/\/ if not Zero(), then we have now processed a successful path$/;"	m	class:fst::PruneSpecialClass
fst	fstext/prune-special-inl.h	/^namespace fst {$/;"	n
ifst_	fstext/prune-special-inl.h	/^  const Fst<Arc> &ifst_;$/;"	m	class:fst::PruneSpecialClass
istate	fstext/prune-special-inl.h	/^    InputStateId istate;$/;"	m	struct:fst::PruneSpecialClass::Task
max_states_	fstext/prune-special-inl.h	/^  size_t max_states_;$/;"	m	class:fst::PruneSpecialClass
ofst_	fstext/prune-special-inl.h	/^  VectorFst<Arc> *ofst_;$/;"	m	class:fst::PruneSpecialClass
operator <	fstext/prune-special-inl.h	/^    bool operator < (const Task &other) const {$/;"	f	struct:fst::PruneSpecialClass::Task
ostate	fstext/prune-special-inl.h	/^    OutputStateId ostate; \/\/ could be looked up; this is for speed.$/;"	m	struct:fst::PruneSpecialClass::Task
position	fstext/prune-special-inl.h	/^    size_t position; \/\/ arc position, or -1 if final-prob.$/;"	m	struct:fst::PruneSpecialClass::Task
queue_	fstext/prune-special-inl.h	/^  std::priority_queue<Task> queue_;$/;"	m	class:fst::PruneSpecialClass
state_map_	fstext/prune-special-inl.h	/^  unordered_map<InputStateId, OutputStateId> state_map_;$/;"	m	class:fst::PruneSpecialClass
weight	fstext/prune-special-inl.h	/^    Weight weight;$/;"	m	struct:fst::PruneSpecialClass::Task
TestPruneSpecial	fstext/prune-special-test.cc	/^static void TestPruneSpecial() {$/;"	f	namespace:fst
fst	fstext/prune-special-test.cc	/^namespace fst {$/;"	n	file:
main	fstext/prune-special-test.cc	/^int main() {$/;"	f
KALDI_FSTEXT_PRUNE_SPECIAL_H_	fstext/prune-special.h	22;"	d
fst	fstext/prune-special.h	/^namespace fst {$/;"	n
TestPushSpecial	fstext/push-special-test.cc	/^static void TestPushSpecial() {$/;"	f	namespace:fst
fst	fstext/push-special-test.cc	/^namespace fst$/;"	n	file:
main	fstext/push-special-test.cc	/^int main() {$/;"	f
Arc	fstext/push-special.cc	/^  typedef StdArc Arc;$/;"	t	class:fst::PushSpecialClass	file:
Iterate	fstext/push-special.cc	/^  void Iterate(float delta) {$/;"	f	class:fst::PushSpecialClass	file:
ModifyFst	fstext/push-special.cc	/^  void ModifyFst() {$/;"	f	class:fst::PushSpecialClass	file:
PushSpecial	fstext/push-special.cc	/^void PushSpecial(VectorFst<StdArc> *fst, float delta) {$/;"	f	namespace:fst
PushSpecialClass	fstext/push-special.cc	/^  PushSpecialClass(VectorFst<StdArc> *fst,$/;"	f	class:fst::PushSpecialClass
PushSpecialClass	fstext/push-special.cc	/^class PushSpecialClass {$/;"	c	namespace:fst	file:
StateId	fstext/push-special.cc	/^  typedef Arc::StateId StateId;$/;"	t	class:fst::PushSpecialClass	file:
TestAccuracy	fstext/push-special.cc	/^  double TestAccuracy() { \/\/ returns the error (the difference$/;"	f	class:fst::PushSpecialClass	file:
Weight	fstext/push-special.cc	/^  typedef Arc::Weight Weight;$/;"	t	class:fst::PushSpecialClass	file:
fst	fstext/push-special.cc	/^namespace fst {$/;"	n	file:
fst_	fstext/push-special.cc	/^  VectorFst<StdArc> *fst_;$/;"	m	class:fst::PushSpecialClass	file:
initial_state_	fstext/push-special.cc	/^  StateId initial_state_;$/;"	m	class:fst::PushSpecialClass	file:
lambda_	fstext/push-special.cc	/^  double lambda_; \/\/ our current estimate of the top eigenvalue.$/;"	m	class:fst::PushSpecialClass	file:
num_states_	fstext/push-special.cc	/^  StateId num_states_;$/;"	m	class:fst::PushSpecialClass	file:
occ_	fstext/push-special.cc	/^  std::vector<double> occ_; \/\/ the top eigenvector of (matrix of weights) transposed.$/;"	m	class:fst::PushSpecialClass	file:
pred_	fstext/push-special.cc	/^  std::vector<std::vector<std::pair<StateId, double> > > pred_; \/\/ List of transitions$/;"	m	class:fst::PushSpecialClass	file:
KALDI_FSTEXT_PUSH_SPECIAL_H_	fstext/push-special.h	21;"	d
fst	fstext/push-special.h	/^namespace fst {$/;"	n
KALDI_FSTEXT_RAND_FST_H_	fstext/rand-fst.h	21;"	d
RandFst	fstext/rand-fst.h	/^template<class Arc> VectorFst<Arc>* RandFst(RandFstOptions opts = RandFstOptions() ) {$/;"	f	namespace:fst
RandFstOptions	fstext/rand-fst.h	/^  RandFstOptions() {  \/\/ Initializes the options randomly.$/;"	f	struct:fst::RandFstOptions
RandFstOptions	fstext/rand-fst.h	/^struct RandFstOptions {$/;"	s	namespace:fst
RandPairFst	fstext/rand-fst.h	/^template<class Arc> VectorFst<Arc>* RandPairFst(RandFstOptions opts = RandFstOptions() ) {$/;"	f	namespace:fst
acyclic	fstext/rand-fst.h	/^  bool acyclic;$/;"	m	struct:fst::RandFstOptions
allow_empty	fstext/rand-fst.h	/^  bool allow_empty;$/;"	m	struct:fst::RandFstOptions
fst	fstext/rand-fst.h	/^namespace fst {$/;"	n
n_arcs	fstext/rand-fst.h	/^  size_t n_arcs;$/;"	m	struct:fst::RandFstOptions
n_final	fstext/rand-fst.h	/^  size_t n_final;$/;"	m	struct:fst::RandFstOptions
n_states	fstext/rand-fst.h	/^  size_t n_states;$/;"	m	struct:fst::RandFstOptions
n_syms	fstext/rand-fst.h	/^  size_t n_syms;$/;"	m	struct:fst::RandFstOptions
weight_multiplier	fstext/rand-fst.h	/^  float weight_multiplier;$/;"	m	struct:fst::RandFstOptions
KALDI_FSTEXT_REMAP_LEAVES_H_	fstext/remap-leaves.h	21;"	d
fst	fstext/remap-leaves.h	/^namespace fst {$/;"	n
CanCombineArcs	fstext/remove-eps-local-inl.h	/^  bool CanCombineArcs(const Arc &a, const Arc &b, Arc *c) {$/;"	f	class:fst::RemoveEpsLocalClass
CanCombineFinal	fstext/remove-eps-local-inl.h	/^  static bool CanCombineFinal(const Arc &a, Weight final_prob, Weight *final_prob_out) {$/;"	f	class:fst::RemoveEpsLocalClass
CheckNumArcs	fstext/remove-eps-local-inl.h	/^  bool CheckNumArcs() {  \/\/ check num arcs in\/out of each state, at end.  Debug.$/;"	f	class:fst::RemoveEpsLocalClass
GetArc	fstext/remove-eps-local-inl.h	/^  inline void GetArc(StateId s, size_t pos, Arc *arc) const {$/;"	f	class:fst::RemoveEpsLocalClass
InitNumArcs	fstext/remove-eps-local-inl.h	/^  void InitNumArcs() {  \/\/ init num transitions in\/out of each state.$/;"	f	class:fst::RemoveEpsLocalClass
KALDI_FSTEXT_REMOVE_EPS_LOCAL_INL_H_	fstext/remove-eps-local-inl.h	22;"	d
Label	fstext/remove-eps-local-inl.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::RemoveEpsLocalClass
RemoveEps	fstext/remove-eps-local-inl.h	/^  void RemoveEps(StateId s, size_t pos) {$/;"	f	class:fst::RemoveEpsLocalClass
RemoveEpsLocal	fstext/remove-eps-local-inl.h	/^void RemoveEpsLocal(MutableFst<Arc> *fst) {$/;"	f	namespace:fst
RemoveEpsLocalClass	fstext/remove-eps-local-inl.h	/^  RemoveEpsLocalClass(MutableFst<Arc> *fst):$/;"	f	class:fst::RemoveEpsLocalClass
RemoveEpsLocalClass	fstext/remove-eps-local-inl.h	/^class RemoveEpsLocalClass {$/;"	c	namespace:fst
RemoveEpsLocalSpecial	fstext/remove-eps-local-inl.h	/^void RemoveEpsLocalSpecial(MutableFst<StdArc> *fst) {$/;"	f	namespace:fst
RemoveEpsPattern1	fstext/remove-eps-local-inl.h	/^  void RemoveEpsPattern1(StateId s, size_t pos, Arc arc) {$/;"	f	class:fst::RemoveEpsLocalClass
RemoveEpsPattern2	fstext/remove-eps-local-inl.h	/^  void RemoveEpsPattern2(StateId s, size_t pos, Arc arc) {$/;"	f	class:fst::RemoveEpsLocalClass
Reweight	fstext/remove-eps-local-inl.h	/^  void Reweight(StateId s, size_t pos, Weight reweight) {$/;"	f	class:fst::RemoveEpsLocalClass
ReweightPlusDefault	fstext/remove-eps-local-inl.h	/^struct ReweightPlusDefault {$/;"	s	namespace:fst
ReweightPlusLogArc	fstext/remove-eps-local-inl.h	/^struct ReweightPlusLogArc {$/;"	s	namespace:fst
SetArc	fstext/remove-eps-local-inl.h	/^  inline void SetArc(StateId s, size_t pos, const Arc &arc) {$/;"	f	class:fst::RemoveEpsLocalClass
StateId	fstext/remove-eps-local-inl.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::RemoveEpsLocalClass
Weight	fstext/remove-eps-local-inl.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::RemoveEpsLocalClass
fst	fstext/remove-eps-local-inl.h	/^namespace fst {$/;"	n
fst_	fstext/remove-eps-local-inl.h	/^  MutableFst<Arc> *fst_;$/;"	m	class:fst::RemoveEpsLocalClass
non_coacc_state_	fstext/remove-eps-local-inl.h	/^  StateId non_coacc_state_;  \/\/  use this to delete arcs: make it nextstate$/;"	m	class:fst::RemoveEpsLocalClass
num_arcs_in_	fstext/remove-eps-local-inl.h	/^  vector<StateId> num_arcs_in_;   \/\/ The number of arcs into the state, plus one$/;"	m	class:fst::RemoveEpsLocalClass
num_arcs_out_	fstext/remove-eps-local-inl.h	/^  vector<StateId> num_arcs_out_;  \/\/ The number of arcs out of the state, plus$/;"	m	class:fst::RemoveEpsLocalClass
operator ()	fstext/remove-eps-local-inl.h	/^  inline TropicalWeight operator () (const TropicalWeight &a,$/;"	f	struct:fst::ReweightPlusLogArc
operator ()	fstext/remove-eps-local-inl.h	/^  inline Weight operator () (const Weight &a, const Weight &b) {$/;"	f	struct:fst::ReweightPlusDefault
reweight_plus_	fstext/remove-eps-local-inl.h	/^  ReweightPlus reweight_plus_;$/;"	m	class:fst::RemoveEpsLocalClass
TestRemoveEpsLocal	fstext/remove-eps-local-test.cc	/^template<class Arc> static void TestRemoveEpsLocal() {$/;"	f	namespace:fst
TestRemoveEpsLocalSpecial	fstext/remove-eps-local-test.cc	/^static void TestRemoveEpsLocalSpecial() {$/;"	f	namespace:fst
fst	fstext/remove-eps-local-test.cc	/^namespace fst$/;"	n	file:
main	fstext/remove-eps-local-test.cc	/^int main() {$/;"	f
KALDI_FSTEXT_REMOVE_EPS_LOCAL_H_	fstext/remove-eps-local.h	22;"	d
fst	fstext/remove-eps-local.h	/^namespace fst {$/;"	n
ComputeTotalWeight	fstext/rescale-inl.h	/^ComputeTotalWeight(ExpandedFst<Arc> &fst, typename Arc::Weight max_weight, float delta) {$/;"	f	namespace:fst
KALDI_FSTEXT_RESCALE_INL_H_	fstext/rescale-inl.h	21;"	d
Rescale	fstext/rescale-inl.h	/^inline void Rescale(MutableFst<Arc> *fst, typename Arc::Weight rescale) {$/;"	f	namespace:fst
RescaleToStochastic	fstext/rescale-inl.h	/^inline LogWeight RescaleToStochastic(MutableFst<LogArc> *fst,$/;"	f	namespace:fst
fst	fstext/rescale-inl.h	/^namespace fst {$/;"	n
TestComputeTotalWeight	fstext/rescale-test.cc	/^template<class Arc> void TestComputeTotalWeight() {$/;"	f	namespace:fst
TestRescaleToStochastic	fstext/rescale-test.cc	/^void TestRescaleToStochastic() {$/;"	f	namespace:fst
fst	fstext/rescale-test.cc	/^namespace fst$/;"	n	file:
main	fstext/rescale-test.cc	/^int main() {$/;"	f
KALDI_FSTEXT_RESCALE_H_	fstext/rescale.h	21;"	d
fst	fstext/rescale.h	/^namespace fst {$/;"	n
TestTableMatcher	fstext/table-matcher-test.cc	/^template<class Arc>  void TestTableMatcher(bool connect, bool left) {$/;"	f	namespace:fst
TestTableMatcherCacheLeft	fstext/table-matcher-test.cc	/^template<class Arc>  void TestTableMatcherCacheLeft(bool connect) {$/;"	f	namespace:fst
TestTableMatcherCacheRight	fstext/table-matcher-test.cc	/^template<class Arc>  void TestTableMatcherCacheRight(bool connect) {$/;"	f	namespace:fst
fst	fstext/table-matcher-test.cc	/^namespace fst{$/;"	n	file:
main	fstext/table-matcher-test.cc	/^int main() {$/;"	f
Arc	fstext/table-matcher.h	/^  typedef typename F::Arc Arc;$/;"	t	class:fst::TableMatcher
Arc	fstext/table-matcher.h	/^  typedef typename F::Arc Arc;$/;"	t	class:fst::TableMatcherImpl
ArcId	fstext/table-matcher.h	/^  typedef StateId ArcId;  \/\/ Use this type to store arc offsets [it's actually size_t$/;"	t	class:fst::TableMatcher
ArcId	fstext/table-matcher.h	/^  typedef StateId ArcId;  \/\/ Use this type to store arc offsets [it's actually size_t$/;"	t	class:fst::TableMatcherImpl
Copy	fstext/table-matcher.h	/^  virtual TableMatcher<FST, BackoffMatcher> *Copy(bool safe = false) const {$/;"	f	class:fst::TableMatcher
Copy	fstext/table-matcher.h	/^  virtual TableMatcherImpl<FST> *Copy(bool safe = false) const {$/;"	f	class:fst::TableMatcherImpl
DecrRefCount	fstext/table-matcher.h	/^  int DecrRefCount() {$/;"	f	class:fst::TableMatcherImpl
Done	fstext/table-matcher.h	/^  bool Done() const { return impl_->Done(); }$/;"	f	class:fst::TableMatcher
Done	fstext/table-matcher.h	/^  bool Done() const {$/;"	f	class:fst::TableMatcherImpl
Done_	fstext/table-matcher.h	/^  virtual bool Done_() const { return Done(); }$/;"	f	class:fst::TableMatcherImpl
Done_	fstext/table-matcher.h	/^  virtual bool Done_() const { return impl_->Done(); }$/;"	f	class:fst::TableMatcher
FST	fstext/table-matcher.h	/^  typedef F FST;$/;"	t	class:fst::TableMatcher
FST	fstext/table-matcher.h	/^  typedef F FST;$/;"	t	class:fst::TableMatcherImpl
Find	fstext/table-matcher.h	/^  bool Find(Label match_label) { return impl_->Find(match_label); }$/;"	f	class:fst::TableMatcher
Find	fstext/table-matcher.h	/^  bool Find(Label match_label) {$/;"	f	class:fst::TableMatcherImpl
Find_	fstext/table-matcher.h	/^  virtual bool Find_(Label label) { return Find(label); }$/;"	f	class:fst::TableMatcherImpl
Find_	fstext/table-matcher.h	/^  virtual bool Find_(Label label) { return impl_->Find(label); }$/;"	f	class:fst::TableMatcher
GetFst	fstext/table-matcher.h	/^  virtual const FST &GetFst() const { return *fst_; }$/;"	f	class:fst::TableMatcherImpl
GetFst	fstext/table-matcher.h	/^  virtual const FST &GetFst() const { return impl_->GetFst(); }$/;"	f	class:fst::TableMatcher
IncrRefCount	fstext/table-matcher.h	/^  int IncrRefCount() {$/;"	f	class:fst::TableMatcherImpl
KALDI_FSTEXT_TABLE_MATCHER_H_	fstext/table-matcher.h	21;"	d
Label	fstext/table-matcher.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::TableMatcher
Label	fstext/table-matcher.h	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::TableMatcherImpl
Next	fstext/table-matcher.h	/^  void Next() { return impl_->Next(); }$/;"	f	class:fst::TableMatcher
Next	fstext/table-matcher.h	/^  void Next() {$/;"	f	class:fst::TableMatcherImpl
Next_	fstext/table-matcher.h	/^  virtual void Next_() { Next(); }$/;"	f	class:fst::TableMatcherImpl
Next_	fstext/table-matcher.h	/^  virtual void Next_() { impl_->Next(); }$/;"	f	class:fst::TableMatcher
Properties	fstext/table-matcher.h	/^  virtual uint64 Properties(uint64 props) const { return impl_->Properties(props); } \/\/ simple matcher that does$/;"	f	class:fst::TableMatcher
Properties	fstext/table-matcher.h	/^  virtual uint64 Properties(uint64 props) const { return props; } \/\/ simple matcher that does$/;"	f	class:fst::TableMatcherImpl
RefCount	fstext/table-matcher.h	/^  int RefCount() const {$/;"	f	class:fst::TableMatcherImpl
SetState	fstext/table-matcher.h	/^  void SetState(StateId s) { return impl_->SetState(s); }$/;"	f	class:fst::TableMatcher
SetState	fstext/table-matcher.h	/^  void SetState(StateId s) {$/;"	f	class:fst::TableMatcherImpl
SetState_	fstext/table-matcher.h	/^  virtual void SetState_(StateId s) { SetState(s); }$/;"	f	class:fst::TableMatcherImpl
SetState_	fstext/table-matcher.h	/^  virtual void SetState_(StateId s) { impl_->SetState(s); }$/;"	f	class:fst::TableMatcher
StateId	fstext/table-matcher.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::TableMatcher
StateId	fstext/table-matcher.h	/^  typedef typename Arc::StateId StateId;$/;"	t	class:fst::TableMatcherImpl
TableCompose	fstext/table-matcher.h	/^void TableCompose(const Fst<Arc> &ifst1, const Fst<Arc> &ifst2,$/;"	f	namespace:fst
TableComposeCache	fstext/table-matcher.h	/^  TableComposeCache(const TableComposeOptions &opts = TableComposeOptions()): matcher (NULL), opts(opts) {}$/;"	f	struct:fst::TableComposeCache
TableComposeCache	fstext/table-matcher.h	/^struct TableComposeCache {$/;"	s	namespace:fst
TableComposeOptions	fstext/table-matcher.h	/^  TableComposeOptions() : connect(true), filter_type(SEQUENCE_FILTER),$/;"	f	struct:fst::TableComposeOptions
TableComposeOptions	fstext/table-matcher.h	/^  explicit TableComposeOptions(const TableMatcherOptions &mo,$/;"	f	struct:fst::TableComposeOptions
TableComposeOptions	fstext/table-matcher.h	/^struct TableComposeOptions: public TableMatcherOptions {$/;"	s	namespace:fst
TableMatcher	fstext/table-matcher.h	/^  TableMatcher(const FST &fst, MatchType match_type,$/;"	f	class:fst::TableMatcher
TableMatcher	fstext/table-matcher.h	/^  TableMatcher(const TableMatcher<FST, BackoffMatcher> &matcher, bool safe):$/;"	f	class:fst::TableMatcher
TableMatcher	fstext/table-matcher.h	/^class TableMatcher : public MatcherBase<typename F::Arc> {$/;"	c	namespace:fst
TableMatcherImpl	fstext/table-matcher.h	/^  TableMatcherImpl(const FST &fst, MatchType match_type,$/;"	f	class:fst::TableMatcherImpl
TableMatcherImpl	fstext/table-matcher.h	/^class TableMatcherImpl : public MatcherBase<typename F::Arc> {$/;"	c	namespace:fst
TableMatcherOptions	fstext/table-matcher.h	/^  TableMatcherOptions(): table_ratio(0.25), min_table_size(4) { }$/;"	f	struct:fst::TableMatcherOptions
TableMatcherOptions	fstext/table-matcher.h	/^struct TableMatcherOptions {$/;"	s	namespace:fst
Type	fstext/table-matcher.h	/^  virtual MatchType Type(bool test) const { return impl_->Type(test);  }$/;"	f	class:fst::TableMatcher
Type	fstext/table-matcher.h	/^  virtual MatchType Type(bool test) const {$/;"	f	class:fst::TableMatcherImpl
Value	fstext/table-matcher.h	/^  const Arc &Value() {  return impl_->Value(); }$/;"	f	class:fst::TableMatcher
Value	fstext/table-matcher.h	/^  const Arc &Value() {$/;"	f	class:fst::TableMatcherImpl
Value	fstext/table-matcher.h	/^  const Arc& Value() const { return impl_->Value(); }$/;"	f	class:fst::TableMatcher
Value	fstext/table-matcher.h	/^  const Arc& Value() const {$/;"	f	class:fst::TableMatcherImpl
Value_	fstext/table-matcher.h	/^  virtual const Arc& Value_() const { return Value(); }$/;"	f	class:fst::TableMatcherImpl
Value_	fstext/table-matcher.h	/^  virtual const Arc& Value_() const { return impl_->Value(); }$/;"	f	class:fst::TableMatcher
Weight	fstext/table-matcher.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::TableMatcher
Weight	fstext/table-matcher.h	/^  typedef typename Arc::Weight Weight;$/;"	t	class:fst::TableMatcherImpl
aiter_	fstext/table-matcher.h	/^  ArcIterator<FST> *aiter_;$/;"	m	class:fst::TableMatcherImpl
backoff_matcher_	fstext/table-matcher.h	/^  BackoffMatcher backoff_matcher_;$/;"	m	class:fst::TableMatcherImpl
connect	fstext/table-matcher.h	/^  bool connect;  \/\/ Connect output$/;"	m	struct:fst::TableComposeOptions
current_loop_	fstext/table-matcher.h	/^  bool current_loop_;$/;"	m	class:fst::TableMatcherImpl
filter_type	fstext/table-matcher.h	/^  ComposeFilter filter_type;  \/\/ Which pre-defined filter to use$/;"	m	struct:fst::TableComposeOptions
fst	fstext/table-matcher.h	/^namespace fst {$/;"	n
fst_	fstext/table-matcher.h	/^  FST *fst_;$/;"	m	class:fst::TableMatcherImpl
impl_	fstext/table-matcher.h	/^  TableMatcherImpl<F, BackoffMatcher> *impl_;$/;"	m	class:fst::TableMatcher
loop_	fstext/table-matcher.h	/^  Arc loop_;$/;"	m	class:fst::TableMatcherImpl
match_label_	fstext/table-matcher.h	/^  Label match_label_;$/;"	m	class:fst::TableMatcherImpl
match_type_	fstext/table-matcher.h	/^  MatchType match_type_;$/;"	m	class:fst::TableMatcherImpl
matcher	fstext/table-matcher.h	/^  TableMatcher<F> *matcher;$/;"	m	struct:fst::TableComposeCache
min_table_size	fstext/table-matcher.h	/^  int min_table_size;$/;"	m	struct:fst::TableMatcherOptions
opts	fstext/table-matcher.h	/^  TableComposeOptions opts;$/;"	m	struct:fst::TableComposeCache
opts_	fstext/table-matcher.h	/^  TableMatcherOptions opts_;$/;"	m	class:fst::TableMatcherImpl
ref_count_	fstext/table-matcher.h	/^  RefCounter ref_count_;        \/\/ Reference count$/;"	m	class:fst::TableMatcherImpl
s_	fstext/table-matcher.h	/^  StateId s_;$/;"	m	class:fst::TableMatcherImpl
table_match_type	fstext/table-matcher.h	/^  MatchType table_match_type;$/;"	m	struct:fst::TableComposeOptions
table_ratio	fstext/table-matcher.h	/^  float table_ratio;  \/\/ we construct the table if it would be at least this full.$/;"	m	struct:fst::TableMatcherOptions
tables_	fstext/table-matcher.h	/^  vector<vector<ArcId> *> tables_;$/;"	m	class:fst::TableMatcherImpl
~TableComposeCache	fstext/table-matcher.h	/^  ~TableComposeCache() { if (matcher) delete(matcher); }$/;"	f	struct:fst::TableComposeCache
~TableMatcher	fstext/table-matcher.h	/^  virtual ~TableMatcher() {$/;"	f	class:fst::TableMatcher
~TableMatcherImpl	fstext/table-matcher.h	/^  virtual ~TableMatcherImpl() {$/;"	f	class:fst::TableMatcherImpl
TestFactor	fstext/trivial-factor-weight-test.cc	/^template<class Arc>  void TestFactor() {$/;"	f	namespace:fst
TestStringRepository	fstext/trivial-factor-weight-test.cc	/^template<class Arc, class inttype> void TestStringRepository() {$/;"	f	namespace:fst
fst	fstext/trivial-factor-weight-test.cc	/^namespace fst$/;"	n	file:
main	fstext/trivial-factor-weight-test.cc	/^int main() {$/;"	f
Arc	fstext/trivial-factor-weight.h	/^  typedef A Arc;$/;"	t	class:fst::TrivialFactorWeightFst
Arc	fstext/trivial-factor-weight.h	/^  typedef A Arc;$/;"	t	class:fst::TrivialFactorWeightFstImpl
ArcIterator	fstext/trivial-factor-weight.h	/^  ArcIterator(const TrivialFactorWeightFst<A, F> &fst, StateId s)$/;"	f	class:fst::ArcIterator
ArcIterator	fstext/trivial-factor-weight.h	/^class ArcIterator< TrivialFactorWeightFst<A, F> >$/;"	c	namespace:fst
Copy	fstext/trivial-factor-weight.h	/^  virtual TrivialFactorWeightFst<A, F> *Copy(bool copy = false) const {$/;"	f	class:fst::TrivialFactorWeightFst
Element	fstext/trivial-factor-weight.h	/^    Element() {}$/;"	f	struct:fst::TrivialFactorWeightFstImpl::Element
Element	fstext/trivial-factor-weight.h	/^    Element(StateId s, Weight w) : state(s), weight(w) {}$/;"	f	struct:fst::TrivialFactorWeightFstImpl::Element
Element	fstext/trivial-factor-weight.h	/^  struct Element {$/;"	s	class:fst::TrivialFactorWeightFstImpl
ElementEqual	fstext/trivial-factor-weight.h	/^  class ElementEqual {$/;"	c	class:fst::TrivialFactorWeightFstImpl
ElementKey	fstext/trivial-factor-weight.h	/^  class ElementKey {$/;"	c	class:fst::TrivialFactorWeightFstImpl
ElementMap	fstext/trivial-factor-weight.h	/^  typedef unordered_map<Element, StateId, ElementKey, ElementEqual> ElementMap;$/;"	t	class:fst::TrivialFactorWeightFstImpl
Expand	fstext/trivial-factor-weight.h	/^  void Expand(StateId s) {$/;"	f	class:fst::TrivialFactorWeightFstImpl
FactorIterator	fstext/trivial-factor-weight.h	/^  typedef F FactorIterator;$/;"	t	class:fst::TrivialFactorWeightFstImpl
Final	fstext/trivial-factor-weight.h	/^  Weight Final(StateId s) {$/;"	f	class:fst::TrivialFactorWeightFstImpl
FindState	fstext/trivial-factor-weight.h	/^  StateId FindState(const Element &e) {$/;"	f	class:fst::TrivialFactorWeightFstImpl
GetImpl	fstext/trivial-factor-weight.h	/^  Impl *GetImpl() const { return ImplToFst<Impl>::GetImpl(); }$/;"	f	class:fst::TrivialFactorWeightFst
Impl	fstext/trivial-factor-weight.h	/^  typedef TrivialFactorWeightFstImpl<A, F> Impl;$/;"	t	class:fst::TrivialFactorWeightFst
InitArcIterator	fstext/trivial-factor-weight.h	/^  virtual void InitArcIterator(StateId s, ArcIteratorData<A> *data) const {$/;"	f	class:fst::TrivialFactorWeightFst
InitArcIterator	fstext/trivial-factor-weight.h	/^  void InitArcIterator(StateId s, ArcIteratorData<A> *data) {$/;"	f	class:fst::TrivialFactorWeightFstImpl
InitStateIterator	fstext/trivial-factor-weight.h	/^void TrivialFactorWeightFst<A, F>::InitStateIterator(StateIteratorData<A> *data) const$/;"	f	class:fst::TrivialFactorWeightFst
KALDI_FSTEXT_TRIVIAL_FACTOR_WEIGHT_H_	fstext/trivial-factor-weight.h	44;"	d
Label	fstext/trivial-factor-weight.h	/^  typedef typename A::Label Label;$/;"	t	class:fst::TrivialFactorWeightFstImpl
Label	fstext/trivial-factor-weight.h	/^  typedef typename Arc::Label Label;$/;"	t	struct:fst::TrivialFactorWeightOptions
NumArcs	fstext/trivial-factor-weight.h	/^  size_t NumArcs(StateId s) {$/;"	f	class:fst::TrivialFactorWeightFstImpl
NumInputEpsilons	fstext/trivial-factor-weight.h	/^  size_t NumInputEpsilons(StateId s) {$/;"	f	class:fst::TrivialFactorWeightFstImpl
NumOutputEpsilons	fstext/trivial-factor-weight.h	/^  size_t NumOutputEpsilons(StateId s) {$/;"	f	class:fst::TrivialFactorWeightFstImpl
Start	fstext/trivial-factor-weight.h	/^  StateId Start() {$/;"	f	class:fst::TrivialFactorWeightFstImpl
State	fstext/trivial-factor-weight.h	/^  typedef CacheState<A> State;$/;"	t	class:fst::TrivialFactorWeightFst
State	fstext/trivial-factor-weight.h	/^  typedef typename Store::State State;$/;"	t	class:fst::TrivialFactorWeightFst
State	fstext/trivial-factor-weight.h	/^  typedef typename Store::State State;$/;"	t	class:fst::TrivialFactorWeightFstImpl
StateId	fstext/trivial-factor-weight.h	/^  typedef typename A::StateId StateId;$/;"	t	class:fst::ArcIterator
StateId	fstext/trivial-factor-weight.h	/^  typedef typename A::StateId StateId;$/;"	t	class:fst::TrivialFactorWeightFst
StateId	fstext/trivial-factor-weight.h	/^  typedef typename A::StateId StateId;$/;"	t	class:fst::TrivialFactorWeightFstImpl
StateIterator	fstext/trivial-factor-weight.h	/^  explicit StateIterator(const TrivialFactorWeightFst<A, F> &fst)$/;"	f	class:fst::StateIterator
StateIterator	fstext/trivial-factor-weight.h	/^class StateIterator< TrivialFactorWeightFst<A, F> >$/;"	c	namespace:fst
Store	fstext/trivial-factor-weight.h	/^  typedef DefaultCacheStore<A> Store;$/;"	t	class:fst::TrivialFactorWeightFstImpl
Store	fstext/trivial-factor-weight.h	/^  typedef DefaultCacheStore<Arc> Store;$/;"	t	class:fst::TrivialFactorWeightFst
TrivialFactorWeightFst	fstext/trivial-factor-weight.h	/^  TrivialFactorWeightFst(const Fst<A> &fst)$/;"	f	class:fst::TrivialFactorWeightFst
TrivialFactorWeightFst	fstext/trivial-factor-weight.h	/^  TrivialFactorWeightFst(const Fst<A> &fst,  const TrivialFactorWeightOptions<A> &opts)$/;"	f	class:fst::TrivialFactorWeightFst
TrivialFactorWeightFst	fstext/trivial-factor-weight.h	/^  TrivialFactorWeightFst(const TrivialFactorWeightFst<A, F> &fst, bool copy)$/;"	f	class:fst::TrivialFactorWeightFst
TrivialFactorWeightFst	fstext/trivial-factor-weight.h	/^class TrivialFactorWeightFst : public ImplToFst< TrivialFactorWeightFstImpl<A, F> > {$/;"	c	namespace:fst
TrivialFactorWeightFstImpl	fstext/trivial-factor-weight.h	/^  TrivialFactorWeightFstImpl(const Fst<A> &fst, const TrivialFactorWeightOptions<A> &opts)$/;"	f	class:fst::TrivialFactorWeightFstImpl
TrivialFactorWeightFstImpl	fstext/trivial-factor-weight.h	/^  TrivialFactorWeightFstImpl(const TrivialFactorWeightFstImpl<A, F> &impl)$/;"	f	class:fst::TrivialFactorWeightFstImpl
TrivialFactorWeightFstImpl	fstext/trivial-factor-weight.h	/^class TrivialFactorWeightFstImpl$/;"	c	namespace:fst
TrivialFactorWeightOptions	fstext/trivial-factor-weight.h	/^  TrivialFactorWeightOptions(): delta(kDelta), extra_ilabel(0), extra_olabel(0) {}$/;"	f	struct:fst::TrivialFactorWeightOptions
TrivialFactorWeightOptions	fstext/trivial-factor-weight.h	/^  TrivialFactorWeightOptions(const CacheOptions &opts, float d,$/;"	f	struct:fst::TrivialFactorWeightOptions
TrivialFactorWeightOptions	fstext/trivial-factor-weight.h	/^  explicit TrivialFactorWeightOptions($/;"	f	struct:fst::TrivialFactorWeightOptions
TrivialFactorWeightOptions	fstext/trivial-factor-weight.h	/^struct TrivialFactorWeightOptions : CacheOptions {$/;"	s	namespace:fst
Weight	fstext/trivial-factor-weight.h	/^  typedef typename A::Weight Weight;$/;"	t	class:fst::TrivialFactorWeightFst
Weight	fstext/trivial-factor-weight.h	/^  typedef typename A::Weight Weight;$/;"	t	class:fst::TrivialFactorWeightFstImpl
delta	fstext/trivial-factor-weight.h	/^  float delta;$/;"	m	struct:fst::TrivialFactorWeightOptions
delta_	fstext/trivial-factor-weight.h	/^  float delta_;$/;"	m	class:fst::TrivialFactorWeightFstImpl
element_map_	fstext/trivial-factor-weight.h	/^  ElementMap element_map_;    \/\/ mapping Elements to Fst state$/;"	m	class:fst::TrivialFactorWeightFstImpl
elements_	fstext/trivial-factor-weight.h	/^  vector<Element> elements_;  \/\/ mapping Fst state to Elements$/;"	m	class:fst::TrivialFactorWeightFstImpl
extra_ilabel	fstext/trivial-factor-weight.h	/^  Label extra_ilabel;  \/\/ input label of extra arcs$/;"	m	struct:fst::TrivialFactorWeightOptions
extra_ilabel_	fstext/trivial-factor-weight.h	/^  Label extra_ilabel_;        \/\/ ilabel of arc created when factoring final w's$/;"	m	class:fst::TrivialFactorWeightFstImpl
extra_olabel	fstext/trivial-factor-weight.h	/^  Label extra_olabel;  \/\/ output label of extra arcs$/;"	m	struct:fst::TrivialFactorWeightOptions
extra_olabel_	fstext/trivial-factor-weight.h	/^  Label extra_olabel_;        \/\/ olabel of arc created when factoring final w's$/;"	m	class:fst::TrivialFactorWeightFstImpl
fst	fstext/trivial-factor-weight.h	/^namespace fst {$/;"	n
fst_	fstext/trivial-factor-weight.h	/^  const Fst<A> *fst_;$/;"	m	class:fst::TrivialFactorWeightFstImpl
kPrime	fstext/trivial-factor-weight.h	/^    static const int kPrime = 7853;$/;"	m	class:fst::TrivialFactorWeightFstImpl::ElementKey
mode_	fstext/trivial-factor-weight.h	/^  uint32 mode_;               \/\/ factoring arc and\/or final weights$/;"	m	class:fst::TrivialFactorWeightFstImpl
operator ()	fstext/trivial-factor-weight.h	/^    bool operator()(const Element &x, const Element &y) const {$/;"	f	class:fst::TrivialFactorWeightFstImpl::ElementEqual
operator ()	fstext/trivial-factor-weight.h	/^    size_t operator()(const Element &x) const {$/;"	f	class:fst::TrivialFactorWeightFstImpl::ElementKey
state	fstext/trivial-factor-weight.h	/^    StateId state;     \/\/ Input state Id$/;"	m	struct:fst::TrivialFactorWeightFstImpl::Element
weight	fstext/trivial-factor-weight.h	/^    Weight weight;     \/\/ Residual weight$/;"	m	struct:fst::TrivialFactorWeightFstImpl::Element
~TrivialFactorWeightFstImpl	fstext/trivial-factor-weight.h	/^  ~TrivialFactorWeightFstImpl() {$/;"	f	class:fst::TrivialFactorWeightFstImpl
ADDLIBS	gmm/Makefile	/^ADDLIBS = ..\/tree\/kaldi-tree.a ..\/thread\/kaldi-thread.a ..\/util\/kaldi-util.a \\$/;"	m
LIBNAME	gmm/Makefile	/^LIBNAME = kaldi-gmm$/;"	m
OBJFILES	gmm/Makefile	/^OBJFILES = diag-gmm.o diag-gmm-normal.o mle-diag-gmm.o am-diag-gmm.o \\$/;"	m
OPENFST_CXXFLAGS	gmm/Makefile	/^OPENFST_CXXFLAGS = $/;"	m
OPENFST_LDLIBS	gmm/Makefile	/^OPENFST_LDLIBS = $/;"	m
TESTFILES	gmm/Makefile	/^TESTFILES = diag-gmm-test mle-diag-gmm-test full-gmm-test mle-full-gmm-test \\$/;"	m
TestAmDiagGmmIO	gmm/am-diag-gmm-test.cc	/^void TestAmDiagGmmIO(const AmDiagGmm &am_gmm) {$/;"	f
TestClustering	gmm/am-diag-gmm-test.cc	/^void TestClustering(const AmDiagGmm &am_gmm) {$/;"	f
TestSplitStates	gmm/am-diag-gmm-test.cc	/^void TestSplitStates(const AmDiagGmm &am_gmm) {$/;"	f
UnitTestAmDiagGmm	gmm/am-diag-gmm-test.cc	/^void UnitTestAmDiagGmm() {$/;"	f
main	gmm/am-diag-gmm-test.cc	/^int main() {$/;"	f
AddPdf	gmm/am-diag-gmm.cc	/^void AmDiagGmm::AddPdf(const DiagGmm &gmm) {$/;"	f	class:kaldi::AmDiagGmm
Check	gmm/am-diag-gmm.cc	/^void UbmClusteringOptions::Check() {$/;"	f	class:kaldi::UbmClusteringOptions
ClusterGaussiansToUbm	gmm/am-diag-gmm.cc	/^void ClusterGaussiansToUbm(const AmDiagGmm &am,$/;"	f	namespace:kaldi
ComputeGconsts	gmm/am-diag-gmm.cc	/^int32 AmDiagGmm::ComputeGconsts() {$/;"	f	class:kaldi::AmDiagGmm
CopyFromAmDiagGmm	gmm/am-diag-gmm.cc	/^void AmDiagGmm::CopyFromAmDiagGmm(const AmDiagGmm &other) {$/;"	f	class:kaldi::AmDiagGmm
Init	gmm/am-diag-gmm.cc	/^void AmDiagGmm::Init(const DiagGmm &proto, int32 num_pdfs) {$/;"	f	class:kaldi::AmDiagGmm
MergeByCount	gmm/am-diag-gmm.cc	/^void AmDiagGmm::MergeByCount(const Vector<BaseFloat> &state_occs,$/;"	f	class:kaldi::AmDiagGmm
NumGauss	gmm/am-diag-gmm.cc	/^int32 AmDiagGmm::NumGauss() const {$/;"	f	class:kaldi::AmDiagGmm
Read	gmm/am-diag-gmm.cc	/^void AmDiagGmm::Read(std::istream &in_stream, bool binary) {$/;"	f	class:kaldi::AmDiagGmm
RemovePdf	gmm/am-diag-gmm.cc	/^void AmDiagGmm::RemovePdf(int32 pdf_index) {$/;"	f	class:kaldi::AmDiagGmm
SplitByCount	gmm/am-diag-gmm.cc	/^void AmDiagGmm::SplitByCount(const Vector<BaseFloat> &state_occs,$/;"	f	class:kaldi::AmDiagGmm
Write	gmm/am-diag-gmm.cc	/^void AmDiagGmm::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::AmDiagGmm
kaldi	gmm/am-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
~AmDiagGmm	gmm/am-diag-gmm.cc	/^AmDiagGmm::~AmDiagGmm() {$/;"	f	class:kaldi::AmDiagGmm
AmDiagGmm	gmm/am-diag-gmm.h	/^  AmDiagGmm() {}$/;"	f	class:kaldi::AmDiagGmm
AmDiagGmm	gmm/am-diag-gmm.h	/^class AmDiagGmm {$/;"	c	namespace:kaldi
Dim	gmm/am-diag-gmm.h	/^  int32 Dim() const {$/;"	f	class:kaldi::AmDiagGmm
GetGaussianMean	gmm/am-diag-gmm.h	/^inline void AmDiagGmm::GetGaussianMean(int32 pdf_index, int32 gauss,$/;"	f	class:kaldi::AmDiagGmm
GetGaussianVariance	gmm/am-diag-gmm.h	/^inline void AmDiagGmm::GetGaussianVariance(int32 pdf_index, int32 gauss,$/;"	f	class:kaldi::AmDiagGmm
GetPdf	gmm/am-diag-gmm.h	/^inline DiagGmm& AmDiagGmm::GetPdf(int32 pdf_index) {$/;"	f	class:kaldi::AmDiagGmm
GetPdf	gmm/am-diag-gmm.h	/^inline const DiagGmm& AmDiagGmm::GetPdf(int32 pdf_index) const {$/;"	f	class:kaldi::AmDiagGmm
KALDI_GMM_AM_DIAG_GMM_H_	gmm/am-diag-gmm.h	23;"	d
LogLikelihood	gmm/am-diag-gmm.h	/^inline BaseFloat AmDiagGmm::LogLikelihood($/;"	f	class:kaldi::AmDiagGmm
NumGaussInPdf	gmm/am-diag-gmm.h	/^inline int32 AmDiagGmm::NumGaussInPdf(int32 pdf_index) const {$/;"	f	class:kaldi::AmDiagGmm
NumPdfs	gmm/am-diag-gmm.h	/^  int32 NumPdfs() const { return densities_.size(); }$/;"	f	class:kaldi::AmDiagGmm
Register	gmm/am-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::UbmClusteringOptions
SetGaussianMean	gmm/am-diag-gmm.h	/^inline void AmDiagGmm::SetGaussianMean(int32 pdf_index, int32 gauss_index,$/;"	f	class:kaldi::AmDiagGmm
SplitPdf	gmm/am-diag-gmm.h	/^inline void AmDiagGmm::SplitPdf(int32 pdf_index,$/;"	f	class:kaldi::AmDiagGmm
UbmClusteringOptions	gmm/am-diag-gmm.h	/^  UbmClusteringOptions()$/;"	f	struct:kaldi::UbmClusteringOptions
UbmClusteringOptions	gmm/am-diag-gmm.h	/^  UbmClusteringOptions(int32 ncomp, BaseFloat red, int32 interm_gauss,$/;"	f	struct:kaldi::UbmClusteringOptions
UbmClusteringOptions	gmm/am-diag-gmm.h	/^struct UbmClusteringOptions {$/;"	s	namespace:kaldi
cluster_varfloor	gmm/am-diag-gmm.h	/^  BaseFloat cluster_varfloor;$/;"	m	struct:kaldi::UbmClusteringOptions
densities_	gmm/am-diag-gmm.h	/^  std::vector<DiagGmm*> densities_;$/;"	m	class:kaldi::AmDiagGmm
intermediate_num_gauss	gmm/am-diag-gmm.h	/^  int32 intermediate_num_gauss;$/;"	m	struct:kaldi::UbmClusteringOptions
kaldi	gmm/am-diag-gmm.h	/^namespace kaldi {$/;"	n
max_am_gauss	gmm/am-diag-gmm.h	/^  int32 max_am_gauss;$/;"	m	struct:kaldi::UbmClusteringOptions
reduce_state_factor	gmm/am-diag-gmm.h	/^  BaseFloat reduce_state_factor;$/;"	m	struct:kaldi::UbmClusteringOptions
ubm_num_gauss	gmm/am-diag-gmm.h	/^  int32 ubm_num_gauss;$/;"	m	struct:kaldi::UbmClusteringOptions
LogLikelihoodZeroBased	gmm/decodable-am-diag-gmm.cc	/^BaseFloat DecodableAmDiagGmmUnmapped::LogLikelihoodZeroBased($/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
ResetLogLikeCache	gmm/decodable-am-diag-gmm.cc	/^void DecodableAmDiagGmmUnmapped::ResetLogLikeCache() {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
kaldi	gmm/decodable-am-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
DecodableAmDiagGmm	gmm/decodable-am-diag-gmm.h	/^  DecodableAmDiagGmm(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmm
DecodableAmDiagGmm	gmm/decodable-am-diag-gmm.h	/^class DecodableAmDiagGmm: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
DecodableAmDiagGmmScaled	gmm/decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmScaled(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
DecodableAmDiagGmmScaled	gmm/decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmScaled: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
DecodableAmDiagGmmUnmapped	gmm/decodable-am-diag-gmm.h	/^  DecodableAmDiagGmmUnmapped(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
DecodableAmDiagGmmUnmapped	gmm/decodable-am-diag-gmm.h	/^class DecodableAmDiagGmmUnmapped : public DecodableInterface {$/;"	c	namespace:kaldi
IsLastFrame	gmm/decodable-am-diag-gmm.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
KALDI_GMM_DECODABLE_AM_DIAG_GMM_H_	gmm/decodable-am-diag-gmm.h	23;"	d
LikelihoodCacheRecord	gmm/decodable-am-diag-gmm.h	/^  struct LikelihoodCacheRecord {$/;"	s	class:kaldi::DecodableAmDiagGmmUnmapped
LogLikelihood	gmm/decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 state_index) {$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
LogLikelihood	gmm/decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmm
LogLikelihood	gmm/decodable-am-diag-gmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
NumFramesReady	gmm/decodable-am-diag-gmm.h	/^  virtual int32 NumFramesReady() const { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
NumIndices	gmm/decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() const { return acoustic_model_.NumPdfs(); }$/;"	f	class:kaldi::DecodableAmDiagGmmUnmapped
NumIndices	gmm/decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmm
NumIndices	gmm/decodable-am-diag-gmm.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
TransModel	gmm/decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmm
TransModel	gmm/decodable-am-diag-gmm.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
acoustic_model_	gmm/decodable-am-diag-gmm.h	/^  const AmDiagGmm &acoustic_model_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
data_squared_	gmm/decodable-am-diag-gmm.h	/^  Vector<BaseFloat> data_squared_;  \/\/\/< Cache for fast likelihood calculation$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
delete_feats_	gmm/decodable-am-diag-gmm.h	/^  Matrix<BaseFloat> *delete_feats_;$/;"	m	class:kaldi::DecodableAmDiagGmmScaled
feature_matrix_	gmm/decodable-am-diag-gmm.h	/^  const Matrix<BaseFloat> &feature_matrix_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
hit_time	gmm/decodable-am-diag-gmm.h	/^    int32 hit_time;     \/\/\/< Frame for which this value is relevant$/;"	m	struct:kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord
kaldi	gmm/decodable-am-diag-gmm.h	/^namespace kaldi {$/;"	n
log_like	gmm/decodable-am-diag-gmm.h	/^    BaseFloat log_like;  \/\/\/< Cache value$/;"	m	struct:kaldi::DecodableAmDiagGmmUnmapped::LikelihoodCacheRecord
log_like_cache_	gmm/decodable-am-diag-gmm.h	/^  std::vector<LikelihoodCacheRecord> log_like_cache_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
log_sum_exp_prune_	gmm/decodable-am-diag-gmm.h	/^  BaseFloat log_sum_exp_prune_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
previous_frame_	gmm/decodable-am-diag-gmm.h	/^  int32 previous_frame_;$/;"	m	class:kaldi::DecodableAmDiagGmmUnmapped
scale_	gmm/decodable-am-diag-gmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmScaled
trans_model_	gmm/decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmm
trans_model_	gmm/decodable-am-diag-gmm.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmScaled
~DecodableAmDiagGmmScaled	gmm/decodable-am-diag-gmm.h	/^  virtual ~DecodableAmDiagGmmScaled() {$/;"	f	class:kaldi::DecodableAmDiagGmmScaled
GetComponentMean	gmm/diag-gmm-inl.h	/^void DiagGmm::GetComponentMean(int32 gauss, VectorBase<Real> *out) const {$/;"	f	class:kaldi::DiagGmm
GetComponentVariance	gmm/diag-gmm-inl.h	/^void DiagGmm::GetComponentVariance(int32 gauss, VectorBase<Real> *out) const {$/;"	f	class:kaldi::DiagGmm
GetMeans	gmm/diag-gmm-inl.h	/^void DiagGmm::GetMeans(Matrix<Real> *m) const {$/;"	f	class:kaldi::DiagGmm
GetVars	gmm/diag-gmm-inl.h	/^void DiagGmm::GetVars(Matrix<Real> *v) const {$/;"	f	class:kaldi::DiagGmm
KALDI_GMM_DIAG_GMM_INL_H_	gmm/diag-gmm-inl.h	21;"	d
SetComponentInvVar	gmm/diag-gmm-inl.h	/^void DiagGmm::SetComponentInvVar(int32 g, const VectorBase<Real> &v) {$/;"	f	class:kaldi::DiagGmm
SetComponentMean	gmm/diag-gmm-inl.h	/^void DiagGmm::SetComponentMean(int32 g, const VectorBase<Real> &in) {$/;"	f	class:kaldi::DiagGmm
SetComponentWeight	gmm/diag-gmm-inl.h	/^inline void DiagGmm::SetComponentWeight(int32 g, BaseFloat w) {$/;"	f	class:kaldi::DiagGmm
SetInvVars	gmm/diag-gmm-inl.h	/^void DiagGmm::SetInvVars(const MatrixBase<Real> &v) {$/;"	f	class:kaldi::DiagGmm
SetInvVarsAndMeans	gmm/diag-gmm-inl.h	/^void DiagGmm::SetInvVarsAndMeans(const MatrixBase<Real> &invvars,$/;"	f	class:kaldi::DiagGmm
SetMeans	gmm/diag-gmm-inl.h	/^void DiagGmm::SetMeans(const MatrixBase<Real> &m) {$/;"	f	class:kaldi::DiagGmm
SetWeights	gmm/diag-gmm-inl.h	/^void DiagGmm::SetWeights(const VectorBase<Real> &w) {$/;"	f	class:kaldi::DiagGmm
kaldi	gmm/diag-gmm-inl.h	/^namespace kaldi {$/;"	n
CopyFromDiagGmm	gmm/diag-gmm-normal.cc	/^void DiagGmmNormal::CopyFromDiagGmm(const DiagGmm &diaggmm) {$/;"	f	class:kaldi::DiagGmmNormal
CopyToDiagGmm	gmm/diag-gmm-normal.cc	/^void DiagGmmNormal::CopyToDiagGmm(DiagGmm *diaggmm, GmmFlagsType flags) const {$/;"	f	class:kaldi::DiagGmmNormal
Resize	gmm/diag-gmm-normal.cc	/^void DiagGmmNormal::Resize(int32 nmix, int32 dim) {$/;"	f	class:kaldi::DiagGmmNormal
kaldi	gmm/diag-gmm-normal.cc	/^namespace kaldi {$/;"	n	file:
DiagGmmNormal	gmm/diag-gmm-normal.h	/^  DiagGmmNormal() { }$/;"	f	class:kaldi::DiagGmmNormal
DiagGmmNormal	gmm/diag-gmm-normal.h	/^  explicit DiagGmmNormal(const DiagGmm &gmm) {$/;"	f	class:kaldi::DiagGmmNormal
DiagGmmNormal	gmm/diag-gmm-normal.h	/^class DiagGmmNormal {$/;"	c	namespace:kaldi
Dim	gmm/diag-gmm-normal.h	/^  int32 Dim() { return means_.NumCols(); }$/;"	f	class:kaldi::DiagGmmNormal
KALDI_GMM_DIAG_GMM_NORMAL_H_	gmm/diag-gmm-normal.h	22;"	d
NumGauss	gmm/diag-gmm-normal.h	/^  int32 NumGauss() { return weights_.Dim(); }$/;"	f	class:kaldi::DiagGmmNormal
kaldi	gmm/diag-gmm-normal.h	/^namespace kaldi {$/;"	n
means_	gmm/diag-gmm-normal.h	/^  Matrix<double> means_;    \/\/\/< Means$/;"	m	class:kaldi::DiagGmmNormal
vars_	gmm/diag-gmm-normal.h	/^  Matrix<double> vars_;     \/\/\/< diagonal variance$/;"	m	class:kaldi::DiagGmmNormal
weights_	gmm/diag-gmm-normal.h	/^  Vector<double> weights_;  \/\/\/< weights (not log).$/;"	m	class:kaldi::DiagGmmNormal
InitRandomGmm	gmm/diag-gmm-test.cc	/^void InitRandomGmm(DiagGmm *gmm_in) {$/;"	f	namespace:kaldi
UnitTestDiagGmm	gmm/diag-gmm-test.cc	/^void UnitTestDiagGmm() {$/;"	f	namespace:kaldi
UnitTestDiagGmmGenerate	gmm/diag-gmm-test.cc	/^void UnitTestDiagGmmGenerate() {$/;"	f	namespace:kaldi
kaldi	gmm/diag-gmm-test.cc	/^namespace kaldi {$/;"	n	file:
main	gmm/diag-gmm-test.cc	/^int main() {$/;"	f
ComponentLogLikelihood	gmm/diag-gmm.cc	/^BaseFloat DiagGmm::ComponentLogLikelihood(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::DiagGmm
ComponentPosteriors	gmm/diag-gmm.cc	/^BaseFloat DiagGmm::ComponentPosteriors(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::DiagGmm
ComputeGconsts	gmm/diag-gmm.cc	/^int32 DiagGmm::ComputeGconsts() {$/;"	f	class:kaldi::DiagGmm
CopyFromDiagGmm	gmm/diag-gmm.cc	/^void DiagGmm::CopyFromDiagGmm(const DiagGmm &diaggmm) {$/;"	f	class:kaldi::DiagGmm
CopyFromFullGmm	gmm/diag-gmm.cc	/^void DiagGmm::CopyFromFullGmm(const FullGmm &fullgmm) {$/;"	f	class:kaldi::DiagGmm
CopyFromNormal	gmm/diag-gmm.cc	/^void DiagGmm::CopyFromNormal(const DiagGmmNormal &diag_gmm_normal) {$/;"	f	class:kaldi::DiagGmm
DiagGmm	gmm/diag-gmm.cc	/^DiagGmm::DiagGmm(const GaussClusterable &gc,$/;"	f	class:kaldi::DiagGmm
DiagGmm	gmm/diag-gmm.cc	/^DiagGmm::DiagGmm(const std::vector<std::pair<BaseFloat, const DiagGmm*> > &gmms)$/;"	f	class:kaldi::DiagGmm
GaussianSelection	gmm/diag-gmm.cc	/^BaseFloat DiagGmm::GaussianSelection(const MatrixBase<BaseFloat> &data,$/;"	f	class:kaldi::DiagGmm
GaussianSelection	gmm/diag-gmm.cc	/^BaseFloat DiagGmm::GaussianSelection(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::DiagGmm
GaussianSelectionPreselect	gmm/diag-gmm.cc	/^BaseFloat DiagGmm::GaussianSelectionPreselect($/;"	f	class:kaldi::DiagGmm
Generate	gmm/diag-gmm.cc	/^void DiagGmm::Generate(VectorBase<BaseFloat> *output) {$/;"	f	class:kaldi::DiagGmm
Interpolate	gmm/diag-gmm.cc	/^void DiagGmm::Interpolate(BaseFloat rho, const DiagGmm &source,$/;"	f	class:kaldi::DiagGmm
Interpolate	gmm/diag-gmm.cc	/^void DiagGmm::Interpolate(BaseFloat rho, const FullGmm &source,$/;"	f	class:kaldi::DiagGmm
LogLikelihood	gmm/diag-gmm.cc	/^BaseFloat DiagGmm::LogLikelihood(const VectorBase<BaseFloat> &data) const {$/;"	f	class:kaldi::DiagGmm
LogLikelihoods	gmm/diag-gmm.cc	/^void DiagGmm::LogLikelihoods(const MatrixBase<BaseFloat> &data,$/;"	f	class:kaldi::DiagGmm
LogLikelihoods	gmm/diag-gmm.cc	/^void DiagGmm::LogLikelihoods(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::DiagGmm
LogLikelihoodsPreselect	gmm/diag-gmm.cc	/^void DiagGmm::LogLikelihoodsPreselect(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::DiagGmm
Merge	gmm/diag-gmm.cc	/^void DiagGmm::Merge(int32 target_components, std::vector<int32> *history) {$/;"	f	class:kaldi::DiagGmm
MergeKmeans	gmm/diag-gmm.cc	/^void DiagGmm::MergeKmeans(int32 target_components,$/;"	f	class:kaldi::DiagGmm
Perturb	gmm/diag-gmm.cc	/^void DiagGmm::Perturb(float perturb_factor) {$/;"	f	class:kaldi::DiagGmm
Read	gmm/diag-gmm.cc	/^void DiagGmm::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::DiagGmm
RemoveComponent	gmm/diag-gmm.cc	/^void DiagGmm::RemoveComponent(int32 gauss, bool renorm_weights) {$/;"	f	class:kaldi::DiagGmm
RemoveComponents	gmm/diag-gmm.cc	/^void DiagGmm::RemoveComponents(const std::vector<int32> &gauss_in,$/;"	f	class:kaldi::DiagGmm
Resize	gmm/diag-gmm.cc	/^void DiagGmm::Resize(int32 nmix, int32 dim) {$/;"	f	class:kaldi::DiagGmm
Split	gmm/diag-gmm.cc	/^void DiagGmm::Split(int32 target_components, float perturb_factor,$/;"	f	class:kaldi::DiagGmm
Write	gmm/diag-gmm.cc	/^void DiagGmm::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::DiagGmm
kaldi	gmm/diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
merged_components_logdet	gmm/diag-gmm.cc	/^BaseFloat DiagGmm::merged_components_logdet(BaseFloat w1, BaseFloat w2,$/;"	f	class:kaldi::DiagGmm
operator <<	gmm/diag-gmm.cc	/^std::ostream & operator <<(std::ostream & os,$/;"	f	namespace:kaldi
operator >>	gmm/diag-gmm.cc	/^std::istream & operator >>(std::istream &is, kaldi::DiagGmm &gmm) {$/;"	f	namespace:kaldi
DiagGmm	gmm/diag-gmm.h	/^  DiagGmm() : valid_gconsts_(false) { }$/;"	f	class:kaldi::DiagGmm
DiagGmm	gmm/diag-gmm.h	/^  DiagGmm(int32 nMix, int32 dim): valid_gconsts_(false) { Resize(nMix, dim); }$/;"	f	class:kaldi::DiagGmm
DiagGmm	gmm/diag-gmm.h	/^  explicit DiagGmm(const DiagGmm &gmm): valid_gconsts_(false) {$/;"	f	class:kaldi::DiagGmm
DiagGmm	gmm/diag-gmm.h	/^class DiagGmm {$/;"	c	namespace:kaldi
Dim	gmm/diag-gmm.h	/^  int32 Dim() const { return means_invvars_.NumCols(); }$/;"	f	class:kaldi::DiagGmm
KALDI_GMM_DIAG_GMM_H_	gmm/diag-gmm.h	25;"	d
NumGauss	gmm/diag-gmm.h	/^  int32 NumGauss() const { return weights_.Dim(); }$/;"	f	class:kaldi::DiagGmm
gconsts	gmm/diag-gmm.h	/^  const Vector<BaseFloat> &gconsts() const {$/;"	f	class:kaldi::DiagGmm
gconsts_	gmm/diag-gmm.h	/^  Vector<BaseFloat> gconsts_;$/;"	m	class:kaldi::DiagGmm
inv_vars	gmm/diag-gmm.h	/^  const Matrix<BaseFloat> &inv_vars() const { return inv_vars_; }$/;"	f	class:kaldi::DiagGmm
inv_vars_	gmm/diag-gmm.h	/^  Matrix<BaseFloat> inv_vars_;       \/\/\/< Inverted (diagonal) variances$/;"	m	class:kaldi::DiagGmm
kaldi	gmm/diag-gmm.h	/^namespace kaldi {$/;"	n
means_invvars	gmm/diag-gmm.h	/^  const Matrix<BaseFloat> &means_invvars() const { return means_invvars_; }$/;"	f	class:kaldi::DiagGmm
means_invvars_	gmm/diag-gmm.h	/^  Matrix<BaseFloat> means_invvars_;  \/\/\/< Means times inverted variance$/;"	m	class:kaldi::DiagGmm
valid_gconsts	gmm/diag-gmm.h	/^  bool valid_gconsts() const { return valid_gconsts_; }$/;"	f	class:kaldi::DiagGmm
valid_gconsts_	gmm/diag-gmm.h	/^  bool valid_gconsts_;   \/\/\/< Recompute gconsts_ if false$/;"	m	class:kaldi::DiagGmm
weights	gmm/diag-gmm.h	/^  const Vector<BaseFloat> &weights() const { return weights_; }$/;"	f	class:kaldi::DiagGmm
weights_	gmm/diag-gmm.h	/^  Vector<BaseFloat> weights_;        \/\/\/< weights (not log).$/;"	m	class:kaldi::DiagGmm
UnitTestEstimateMmieDiagGmm	gmm/ebw-diag-gmm-test.cc	/^void UnitTestEstimateMmieDiagGmm() {$/;"	f	namespace:kaldi
kaldi	gmm/ebw-diag-gmm-test.cc	/^namespace kaldi {$/;"	n	file:
main	gmm/ebw-diag-gmm-test.cc	/^int main() {$/;"	f
DiagGmmToStats	gmm/ebw-diag-gmm.cc	/^void DiagGmmToStats(const DiagGmm &gmm,$/;"	f	namespace:kaldi
EBWUpdateGaussian	gmm/ebw-diag-gmm.cc	/^static bool EBWUpdateGaussian($/;"	f	namespace:kaldi
IsmoothStatsAmDiagGmm	gmm/ebw-diag-gmm.cc	/^void IsmoothStatsAmDiagGmm(const AccumAmDiagGmm &src_stats,$/;"	f	namespace:kaldi
IsmoothStatsAmDiagGmmFromModel	gmm/ebw-diag-gmm.cc	/^void IsmoothStatsAmDiagGmmFromModel(const AmDiagGmm &src_model,$/;"	f	namespace:kaldi
IsmoothStatsDiagGmm	gmm/ebw-diag-gmm.cc	/^void IsmoothStatsDiagGmm(const AccumDiagGmm &src_stats,$/;"	f	namespace:kaldi
UpdateEbwAmDiagGmm	gmm/ebw-diag-gmm.cc	/^void UpdateEbwAmDiagGmm(const AccumAmDiagGmm &num_stats, \/\/ with I-smoothing, if used.$/;"	f	namespace:kaldi
UpdateEbwDiagGmm	gmm/ebw-diag-gmm.cc	/^void UpdateEbwDiagGmm(const AccumDiagGmm &num_stats, \/\/ with I-smoothing, if used.$/;"	f	namespace:kaldi
UpdateEbwWeightsAmDiagGmm	gmm/ebw-diag-gmm.cc	/^void UpdateEbwWeightsAmDiagGmm(const AccumAmDiagGmm &num_stats, \/\/ with I-smoothing, if used.$/;"	f	namespace:kaldi
UpdateEbwWeightsDiagGmm	gmm/ebw-diag-gmm.cc	/^void UpdateEbwWeightsDiagGmm(const AccumDiagGmm &num_stats, \/\/ should have no I-smoothing$/;"	f	namespace:kaldi
kaldi	gmm/ebw-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
E	gmm/ebw-diag-gmm.h	/^  BaseFloat E;$/;"	m	struct:kaldi::EbwOptions
EbwOptions	gmm/ebw-diag-gmm.h	/^  EbwOptions(): E(2.0), tau(0.0) { }$/;"	f	struct:kaldi::EbwOptions
EbwOptions	gmm/ebw-diag-gmm.h	/^struct EbwOptions {$/;"	s	namespace:kaldi
EbwWeightOptions	gmm/ebw-diag-gmm.h	/^  EbwWeightOptions(): min_num_count_weight_update(10.0),$/;"	f	struct:kaldi::EbwWeightOptions
EbwWeightOptions	gmm/ebw-diag-gmm.h	/^struct EbwWeightOptions {$/;"	s	namespace:kaldi
KALDI_GMM_EBW_DIAG_GMM_H_	gmm/ebw-diag-gmm.h	22;"	d
Register	gmm/ebw-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::EbwOptions
Register	gmm/ebw-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::EbwWeightOptions
kaldi	gmm/ebw-diag-gmm.h	/^namespace kaldi {$/;"	n
min_gaussian_weight	gmm/ebw-diag-gmm.h	/^  BaseFloat min_gaussian_weight;$/;"	m	struct:kaldi::EbwWeightOptions
min_num_count_weight_update	gmm/ebw-diag-gmm.h	/^  BaseFloat min_num_count_weight_update; \/\/ minimum numerator count at state level, before we update.$/;"	m	struct:kaldi::EbwWeightOptions
tau	gmm/ebw-diag-gmm.h	/^  BaseFloat tau; \/\/ This is only useful for smoothing "to the model":$/;"	m	struct:kaldi::EbwOptions
tau	gmm/ebw-diag-gmm.h	/^  BaseFloat tau; \/\/ tau value for smoothing stats in weight update.  Should probably$/;"	m	struct:kaldi::EbwWeightOptions
GetComponentMean	gmm/full-gmm-inl.h	/^void FullGmm::GetComponentMean(int32 gauss,$/;"	f	class:kaldi::FullGmm
GetCovars	gmm/full-gmm-inl.h	/^void FullGmm::GetCovars(std::vector<SpMatrix<Real> > *v) const {$/;"	f	class:kaldi::FullGmm
GetCovarsAndMeans	gmm/full-gmm-inl.h	/^void FullGmm::GetCovarsAndMeans(std::vector< SpMatrix<Real> > *covars,$/;"	f	class:kaldi::FullGmm
GetMeans	gmm/full-gmm-inl.h	/^void FullGmm::GetMeans(Matrix<Real> *M) const {$/;"	f	class:kaldi::FullGmm
KALDI_GMM_FULL_GMM_INL_H_	gmm/full-gmm-inl.h	22;"	d
SetInvCovars	gmm/full-gmm-inl.h	/^void FullGmm::SetInvCovars(const std::vector<SpMatrix<Real> > &v) {$/;"	f	class:kaldi::FullGmm
SetInvCovarsAndMeans	gmm/full-gmm-inl.h	/^void FullGmm::SetInvCovarsAndMeans($/;"	f	class:kaldi::FullGmm
SetInvCovarsAndMeansInvCovars	gmm/full-gmm-inl.h	/^void FullGmm::SetInvCovarsAndMeansInvCovars($/;"	f	class:kaldi::FullGmm
SetMeans	gmm/full-gmm-inl.h	/^void FullGmm::SetMeans(const Matrix<Real> &m) {$/;"	f	class:kaldi::FullGmm
SetWeights	gmm/full-gmm-inl.h	/^void FullGmm::SetWeights(const Vector<Real> &w) {$/;"	f	class:kaldi::FullGmm
kaldi	gmm/full-gmm-inl.h	/^namespace kaldi {$/;"	n
CopyFromFullGmm	gmm/full-gmm-normal.cc	/^void FullGmmNormal::CopyFromFullGmm(const FullGmm &fullgmm) {$/;"	f	class:kaldi::FullGmmNormal
CopyToFullGmm	gmm/full-gmm-normal.cc	/^void FullGmmNormal::CopyToFullGmm(FullGmm *fullgmm, GmmFlagsType flags) {$/;"	f	class:kaldi::FullGmmNormal
Rand	gmm/full-gmm-normal.cc	/^void FullGmmNormal::Rand(MatrixBase<BaseFloat> *feats) {$/;"	f	class:kaldi::FullGmmNormal
Resize	gmm/full-gmm-normal.cc	/^void FullGmmNormal::Resize(int32 nmix, int32 dim) {$/;"	f	class:kaldi::FullGmmNormal
kaldi	gmm/full-gmm-normal.cc	/^namespace kaldi {$/;"	n	file:
FullGmmNormal	gmm/full-gmm-normal.h	/^  FullGmmNormal() { }$/;"	f	class:kaldi::FullGmmNormal
FullGmmNormal	gmm/full-gmm-normal.h	/^  explicit FullGmmNormal(const FullGmm &gmm) {$/;"	f	class:kaldi::FullGmmNormal
FullGmmNormal	gmm/full-gmm-normal.h	/^class FullGmmNormal {$/;"	c	namespace:kaldi
KALDI_GMM_FULL_GMM_NORMAL_H_	gmm/full-gmm-normal.h	23;"	d
kaldi	gmm/full-gmm-normal.h	/^namespace kaldi {$/;"	n
means_	gmm/full-gmm-normal.h	/^  Matrix<double> means_;                \/\/\/< Means$/;"	m	class:kaldi::FullGmmNormal
vars_	gmm/full-gmm-normal.h	/^  std::vector<SpMatrix<double> > vars_;  \/\/\/< covariances$/;"	m	class:kaldi::FullGmmNormal
weights_	gmm/full-gmm-normal.h	/^  Vector<double> weights_;              \/\/\/< weights (not log).$/;"	m	class:kaldi::FullGmmNormal
RandPosdefSpMatrix	gmm/full-gmm-test.cc	/^void RandPosdefSpMatrix(size_t dim, SpMatrix<BaseFloat> *matrix,$/;"	f
UnitTestFullGmm	gmm/full-gmm-test.cc	/^UnitTestFullGmm() {$/;"	f
UnitTestFullGmmEst	gmm/full-gmm-test.cc	/^void UnitTestFullGmmEst() {$/;"	f
init_rand_diag_gmm	gmm/full-gmm-test.cc	/^void init_rand_diag_gmm(DiagGmm *gmm) {$/;"	f
main	gmm/full-gmm-test.cc	/^main() {$/;"	f
ComponentLogLikelihood	gmm/full-gmm.cc	/^BaseFloat FullGmm::ComponentLogLikelihood(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::FullGmm
ComponentPosteriors	gmm/full-gmm.cc	/^BaseFloat FullGmm::ComponentPosteriors(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::FullGmm
ComputeGconsts	gmm/full-gmm.cc	/^int32 FullGmm::ComputeGconsts() {$/;"	f	class:kaldi::FullGmm
CopyFromDiagGmm	gmm/full-gmm.cc	/^void FullGmm::CopyFromDiagGmm(const DiagGmm &diaggmm) {$/;"	f	class:kaldi::FullGmm
CopyFromFullGmm	gmm/full-gmm.cc	/^void FullGmm::CopyFromFullGmm(const FullGmm &fullgmm) {$/;"	f	class:kaldi::FullGmm
GaussianSelection	gmm/full-gmm.cc	/^BaseFloat FullGmm::GaussianSelection(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::FullGmm
GaussianSelectionPreselect	gmm/full-gmm.cc	/^BaseFloat FullGmm::GaussianSelectionPreselect($/;"	f	class:kaldi::FullGmm
Interpolate	gmm/full-gmm.cc	/^void FullGmm::Interpolate(BaseFloat rho, const FullGmm &source,$/;"	f	class:kaldi::FullGmm
LogLikelihood	gmm/full-gmm.cc	/^BaseFloat FullGmm::LogLikelihood(const VectorBase<BaseFloat> &data) const {$/;"	f	class:kaldi::FullGmm
LogLikelihoods	gmm/full-gmm.cc	/^void FullGmm::LogLikelihoods(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::FullGmm
LogLikelihoodsPreselect	gmm/full-gmm.cc	/^void FullGmm::LogLikelihoodsPreselect(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::FullGmm
Merge	gmm/full-gmm.cc	/^void FullGmm::Merge(int32 target_components, vector<int32> *history) {$/;"	f	class:kaldi::FullGmm
MergePreselect	gmm/full-gmm.cc	/^BaseFloat FullGmm::MergePreselect(int32 target_components,$/;"	f	class:kaldi::FullGmm
MergedComponentsLogdet	gmm/full-gmm.cc	/^BaseFloat FullGmm::MergedComponentsLogdet(BaseFloat w1, BaseFloat w2,$/;"	f	class:kaldi::FullGmm
Perturb	gmm/full-gmm.cc	/^void FullGmm::Perturb(float perturb_factor) {$/;"	f	class:kaldi::FullGmm
Read	gmm/full-gmm.cc	/^void FullGmm::Read(std::istream &in_stream, bool binary) {$/;"	f	class:kaldi::FullGmm
RemoveComponent	gmm/full-gmm.cc	/^void FullGmm::RemoveComponent(int32 gauss, bool renorm_weights) {$/;"	f	class:kaldi::FullGmm
RemoveComponents	gmm/full-gmm.cc	/^void FullGmm::RemoveComponents(const vector<int32> &gauss_in, bool renorm_weights) {$/;"	f	class:kaldi::FullGmm
Resize	gmm/full-gmm.cc	/^void FullGmm::Resize(int32 nmix, int32 dim) {$/;"	f	class:kaldi::FullGmm
ResizeInvCovars	gmm/full-gmm.cc	/^void FullGmm::ResizeInvCovars(int32 nmix, int32 dim) {$/;"	f	class:kaldi::FullGmm
Split	gmm/full-gmm.cc	/^void FullGmm::Split(int32 target_components, float perturb_factor,$/;"	f	class:kaldi::FullGmm
Write	gmm/full-gmm.cc	/^void FullGmm::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::FullGmm
kaldi	gmm/full-gmm.cc	/^namespace kaldi {$/;"	n	file:
operator <<	gmm/full-gmm.cc	/^std::ostream & operator <<(std::ostream & out_stream,$/;"	f	namespace:kaldi
operator >>	gmm/full-gmm.cc	/^std::istream & operator >>(std::istream & in_stream, kaldi::FullGmm &gmm) {$/;"	f	namespace:kaldi
Dim	gmm/full-gmm.h	/^  int32 Dim() const { return means_invcovars_.NumCols(); }$/;"	f	class:kaldi::FullGmm
FullGmm	gmm/full-gmm.h	/^  FullGmm() : valid_gconsts_(false) {}$/;"	f	class:kaldi::FullGmm
FullGmm	gmm/full-gmm.h	/^  FullGmm(int32 nMix, int32 dim): valid_gconsts_(false) { Resize(nMix, dim); }$/;"	f	class:kaldi::FullGmm
FullGmm	gmm/full-gmm.h	/^  explicit FullGmm(const FullGmm &gmm): valid_gconsts_(false) {$/;"	f	class:kaldi::FullGmm
FullGmm	gmm/full-gmm.h	/^class FullGmm {$/;"	c	namespace:kaldi
KALDI_GMM_FULL_GMM_H_	gmm/full-gmm.h	25;"	d
NumGauss	gmm/full-gmm.h	/^  int32 NumGauss() const { return weights_.Dim(); }$/;"	f	class:kaldi::FullGmm
gconsts	gmm/full-gmm.h	/^  const Vector<BaseFloat> &gconsts() const { return gconsts_; }$/;"	f	class:kaldi::FullGmm
gconsts_	gmm/full-gmm.h	/^  Vector<BaseFloat> gconsts_;$/;"	m	class:kaldi::FullGmm
inv_covars	gmm/full-gmm.h	/^  const std::vector<SpMatrix<BaseFloat> > &inv_covars() const {$/;"	f	class:kaldi::FullGmm
inv_covars	gmm/full-gmm.h	/^  std::vector<SpMatrix<BaseFloat> > &inv_covars() { return inv_covars_; }$/;"	f	class:kaldi::FullGmm
inv_covars_	gmm/full-gmm.h	/^  std::vector<SpMatrix<BaseFloat> > inv_covars_;  \/\/\/< Inverse covariances$/;"	m	class:kaldi::FullGmm
kaldi	gmm/full-gmm.h	/^namespace kaldi {$/;"	n
means_invcovars	gmm/full-gmm.h	/^  Matrix<BaseFloat> &means_invcovars() { return means_invcovars_; }$/;"	f	class:kaldi::FullGmm
means_invcovars	gmm/full-gmm.h	/^  const Matrix<BaseFloat> &means_invcovars() const { return means_invcovars_; }$/;"	f	class:kaldi::FullGmm
means_invcovars_	gmm/full-gmm.h	/^  Matrix<BaseFloat> means_invcovars_;  \/\/\/< Means times inverse covariances$/;"	m	class:kaldi::FullGmm
valid_gconsts_	gmm/full-gmm.h	/^  bool valid_gconsts_;  \/\/\/< Recompute gconsts_ if false$/;"	m	class:kaldi::FullGmm
weights	gmm/full-gmm.h	/^  const Vector<BaseFloat> &weights() const { return weights_; }$/;"	f	class:kaldi::FullGmm
weights_	gmm/full-gmm.h	/^  Vector<BaseFloat> weights_;  \/\/\/< weights (not log).$/;"	m	class:kaldi::FullGmm
DoRescalingUpdate	gmm/indirect-diff-diag-gmm.cc	/^void DoRescalingUpdate(const AccumAmDiagGmm &old_ml_accs,$/;"	f	namespace:kaldi
DoRescalingUpdate	gmm/indirect-diff-diag-gmm.cc	/^void DoRescalingUpdate(const AccumDiagGmm &old_ml_acc,$/;"	f	namespace:kaldi
GetSingleStatsDerivative	gmm/indirect-diff-diag-gmm.cc	/^void GetSingleStatsDerivative($/;"	f	namespace:kaldi
GetStatsDerivative	gmm/indirect-diff-diag-gmm.cc	/^void GetStatsDerivative(const AmDiagGmm &gmm,$/;"	f	namespace:kaldi
GetStatsDerivative	gmm/indirect-diff-diag-gmm.cc	/^void GetStatsDerivative(const DiagGmm &gmm,$/;"	f	namespace:kaldi
kaldi	gmm/indirect-diff-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
KALDI_GMM_INDIRECT_DIFF_DIAG_GMM_H_	gmm/indirect-diff-diag-gmm.h	22;"	d
kaldi	gmm/indirect-diff-diag-gmm.h	/^namespace kaldi {$/;"	n
TestAmDiagGmmAccsIO	gmm/mle-am-diag-gmm-test.cc	/^void TestAmDiagGmmAccsIO(const AmDiagGmm &am_gmm,$/;"	f
UnitTestMleAmDiagGmm	gmm/mle-am-diag-gmm-test.cc	/^void UnitTestMleAmDiagGmm() {$/;"	f
main	gmm/mle-am-diag-gmm-test.cc	/^int main() {$/;"	f
AccumulateForGaussian	gmm/mle-am-diag-gmm.cc	/^void AccumAmDiagGmm::AccumulateForGaussian($/;"	f	class:kaldi::AccumAmDiagGmm
AccumulateForGmm	gmm/mle-am-diag-gmm.cc	/^BaseFloat AccumAmDiagGmm::AccumulateForGmm($/;"	f	class:kaldi::AccumAmDiagGmm
AccumulateForGmmTwofeats	gmm/mle-am-diag-gmm.cc	/^BaseFloat AccumAmDiagGmm::AccumulateForGmmTwofeats($/;"	f	class:kaldi::AccumAmDiagGmm
AccumulateFromPosteriors	gmm/mle-am-diag-gmm.cc	/^void AccumAmDiagGmm::AccumulateFromPosteriors($/;"	f	class:kaldi::AccumAmDiagGmm
Add	gmm/mle-am-diag-gmm.cc	/^void AccumAmDiagGmm::Add(BaseFloat scale, const AccumAmDiagGmm &other) {$/;"	f	class:kaldi::AccumAmDiagGmm
GetAcc	gmm/mle-am-diag-gmm.cc	/^AccumDiagGmm& AccumAmDiagGmm::GetAcc(int32 index) {$/;"	f	class:kaldi::AccumAmDiagGmm
GetAcc	gmm/mle-am-diag-gmm.cc	/^const AccumDiagGmm& AccumAmDiagGmm::GetAcc(int32 index) const {$/;"	f	class:kaldi::AccumAmDiagGmm
Init	gmm/mle-am-diag-gmm.cc	/^void AccumAmDiagGmm::Init(const AmDiagGmm &model,$/;"	f	class:kaldi::AccumAmDiagGmm
MapAmDiagGmmUpdate	gmm/mle-am-diag-gmm.cc	/^void MapAmDiagGmmUpdate (const MapDiagGmmOptions &config,$/;"	f	namespace:kaldi
MleAmDiagGmmUpdate	gmm/mle-am-diag-gmm.cc	/^void MleAmDiagGmmUpdate (const MleDiagGmmOptions &config,$/;"	f	namespace:kaldi
Read	gmm/mle-am-diag-gmm.cc	/^void AccumAmDiagGmm::Read(std::istream &in_stream, bool binary,$/;"	f	class:kaldi::AccumAmDiagGmm
ResizeModel	gmm/mle-am-diag-gmm.cc	/^void ResizeModel (int32 dim, AmDiagGmm *am_gmm) {$/;"	f	namespace:kaldi
Scale	gmm/mle-am-diag-gmm.cc	/^void AccumAmDiagGmm::Scale(BaseFloat scale) {$/;"	f	class:kaldi::AccumAmDiagGmm
SetZero	gmm/mle-am-diag-gmm.cc	/^void AccumAmDiagGmm::SetZero(GmmFlagsType flags) {$/;"	f	class:kaldi::AccumAmDiagGmm
TotStatsCount	gmm/mle-am-diag-gmm.cc	/^BaseFloat AccumAmDiagGmm::TotStatsCount() const {$/;"	f	class:kaldi::AccumAmDiagGmm
Write	gmm/mle-am-diag-gmm.cc	/^void AccumAmDiagGmm::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::AccumAmDiagGmm
kaldi	gmm/mle-am-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
~AccumAmDiagGmm	gmm/mle-am-diag-gmm.cc	/^AccumAmDiagGmm::~AccumAmDiagGmm() {$/;"	f	class:kaldi::AccumAmDiagGmm
AccumAmDiagGmm	gmm/mle-am-diag-gmm.h	/^  AccumAmDiagGmm() : total_frames_(0.0), total_log_like_(0.0) {}$/;"	f	class:kaldi::AccumAmDiagGmm
AccumAmDiagGmm	gmm/mle-am-diag-gmm.h	/^class AccumAmDiagGmm {$/;"	c	namespace:kaldi
Dim	gmm/mle-am-diag-gmm.h	/^  int32 Dim() const {$/;"	f	class:kaldi::AccumAmDiagGmm
KALDI_GMM_MLE_AM_DIAG_GMM_H_	gmm/mle-am-diag-gmm.h	24;"	d
MapAmDiagGmmSeqReader	gmm/mle-am-diag-gmm.h	/^typedef SequentialTableReader< KaldiObjectHolder<AmDiagGmm> > MapAmDiagGmmSeqReader;$/;"	t	namespace:kaldi
MapAmDiagGmmWriter	gmm/mle-am-diag-gmm.h	/^typedef TableWriter< KaldiObjectHolder<AmDiagGmm> >  MapAmDiagGmmWriter;$/;"	t	namespace:kaldi
NumAccs	gmm/mle-am-diag-gmm.h	/^  int32 NumAccs() const { return gmm_accumulators_.size(); }$/;"	f	class:kaldi::AccumAmDiagGmm
NumAccs	gmm/mle-am-diag-gmm.h	/^  int32 NumAccs() { return gmm_accumulators_.size(); }$/;"	f	class:kaldi::AccumAmDiagGmm
RandomAccessMapAmDiagGmmReader	gmm/mle-am-diag-gmm.h	/^typedef RandomAccessTableReader< KaldiObjectHolder<AmDiagGmm> > RandomAccessMapAmDiagGmmReader;$/;"	t	namespace:kaldi
RandomAccessMapAmDiagGmmReaderMapped	gmm/mle-am-diag-gmm.h	/^typedef RandomAccessTableReaderMapped< KaldiObjectHolder<AmDiagGmm> > RandomAccessMapAmDiagGmmReaderMapped;$/;"	t	namespace:kaldi
TotCount	gmm/mle-am-diag-gmm.h	/^  BaseFloat TotCount() const { return total_frames_; }$/;"	f	class:kaldi::AccumAmDiagGmm
TotLogLike	gmm/mle-am-diag-gmm.h	/^  BaseFloat TotLogLike() const { return total_log_like_; }$/;"	f	class:kaldi::AccumAmDiagGmm
gmm_accumulators_	gmm/mle-am-diag-gmm.h	/^  std::vector<AccumDiagGmm*> gmm_accumulators_;$/;"	m	class:kaldi::AccumAmDiagGmm
kaldi	gmm/mle-am-diag-gmm.h	/^namespace kaldi {$/;"	n
total_frames_	gmm/mle-am-diag-gmm.h	/^  double total_frames_, total_log_like_;$/;"	m	class:kaldi::AccumAmDiagGmm
total_log_like_	gmm/mle-am-diag-gmm.h	/^  double total_frames_, total_log_like_;$/;"	m	class:kaldi::AccumAmDiagGmm
TestComponentAcc	gmm/mle-diag-gmm-test.cc	/^void TestComponentAcc(const DiagGmm &gmm, const Matrix<BaseFloat> &feats) {$/;"	f
UnitTestEstimateDiagGmm	gmm/mle-diag-gmm-test.cc	/^UnitTestEstimateDiagGmm() {$/;"	f
main	gmm/mle-diag-gmm-test.cc	/^int main() {$/;"	f
test_flags_driven_update	gmm/mle-diag-gmm-test.cc	/^void test_flags_driven_update(const DiagGmm &gmm,$/;"	f
test_io	gmm/mle-diag-gmm-test.cc	/^test_io(const DiagGmm &gmm, const AccumDiagGmm &est_gmm, bool binary,$/;"	f
AccumDiagGmm	gmm/mle-diag-gmm.cc	/^AccumDiagGmm::AccumDiagGmm(const AccumDiagGmm &other)$/;"	f	class:kaldi::AccumDiagGmm
AccumulateForComponent	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::AccumulateForComponent(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::AccumDiagGmm
AccumulateFromDiag	gmm/mle-diag-gmm.cc	/^BaseFloat AccumDiagGmm::AccumulateFromDiag(const DiagGmm &gmm,$/;"	f	class:kaldi::AccumDiagGmm
AccumulateFromDiagMultiThreaded	gmm/mle-diag-gmm.cc	/^BaseFloat AccumDiagGmm::AccumulateFromDiagMultiThreaded($/;"	f	class:kaldi::AccumDiagGmm
AccumulateFromPosteriors	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::AccumulateFromPosteriors($/;"	f	class:kaldi::AccumDiagGmm
AccumulateMultiThreadedClass	gmm/mle-diag-gmm.cc	/^  AccumulateMultiThreadedClass(const AccumulateMultiThreadedClass &other):$/;"	f	class:kaldi::AccumulateMultiThreadedClass
AccumulateMultiThreadedClass	gmm/mle-diag-gmm.cc	/^  AccumulateMultiThreadedClass(const DiagGmm &diag_gmm,$/;"	f	class:kaldi::AccumulateMultiThreadedClass
AccumulateMultiThreadedClass	gmm/mle-diag-gmm.cc	/^class AccumulateMultiThreadedClass: public MultiThreadable {$/;"	c	namespace:kaldi	file:
Add	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::Add(double scale, const AccumDiagGmm &acc) {$/;"	f	class:kaldi::AccumDiagGmm
AddStatsForComponent	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::AddStatsForComponent(int32 g,$/;"	f	class:kaldi::AccumDiagGmm
AssertEqual	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::AssertEqual(const AccumDiagGmm &other) {$/;"	f	class:kaldi::AccumDiagGmm
MapDiagGmmUpdate	gmm/mle-diag-gmm.cc	/^void MapDiagGmmUpdate(const MapDiagGmmOptions &config,$/;"	f	namespace:kaldi
MlObjective	gmm/mle-diag-gmm.cc	/^BaseFloat MlObjective(const DiagGmm &gmm,$/;"	f	namespace:kaldi
MleDiagGmmUpdate	gmm/mle-diag-gmm.cc	/^void MleDiagGmmUpdate(const MleDiagGmmOptions &config,$/;"	f	namespace:kaldi
Read	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::Read(std::istream &in_stream, bool binary, bool add) {$/;"	f	class:kaldi::AccumDiagGmm
Resize	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::Resize(int32 num_comp, int32 dim, GmmFlagsType flags) {$/;"	f	class:kaldi::AccumDiagGmm
Scale	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::Scale(BaseFloat f, GmmFlagsType flags) {$/;"	f	class:kaldi::AccumDiagGmm
SetZero	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::SetZero(GmmFlagsType flags) {$/;"	f	class:kaldi::AccumDiagGmm
SmoothStats	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::SmoothStats(BaseFloat tau) {$/;"	f	class:kaldi::AccumDiagGmm
SmoothWithAccum	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::SmoothWithAccum(BaseFloat tau, const AccumDiagGmm &src_acc) {$/;"	f	class:kaldi::AccumDiagGmm
SmoothWithModel	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::SmoothWithModel(BaseFloat tau, const DiagGmm &gmm) {$/;"	f	class:kaldi::AccumDiagGmm
Write	gmm/mle-diag-gmm.cc	/^void AccumDiagGmm::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::AccumDiagGmm
accum_	gmm/mle-diag-gmm.cc	/^  AccumDiagGmm accum_;$/;"	m	class:kaldi::AccumulateMultiThreadedClass	file:
data_	gmm/mle-diag-gmm.cc	/^  const MatrixBase<BaseFloat> &data_;$/;"	m	class:kaldi::AccumulateMultiThreadedClass	file:
dest_accum_	gmm/mle-diag-gmm.cc	/^  AccumDiagGmm *dest_accum_;$/;"	m	class:kaldi::AccumulateMultiThreadedClass	file:
diag_gmm_	gmm/mle-diag-gmm.cc	/^  const DiagGmm &diag_gmm_;$/;"	m	class:kaldi::AccumulateMultiThreadedClass	file:
frame_weights_	gmm/mle-diag-gmm.cc	/^  const VectorBase<BaseFloat> &frame_weights_;$/;"	m	class:kaldi::AccumulateMultiThreadedClass	file:
kaldi	gmm/mle-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
operator ()	gmm/mle-diag-gmm.cc	/^  void operator () () {$/;"	f	class:kaldi::AccumulateMultiThreadedClass
tot_like_	gmm/mle-diag-gmm.cc	/^  double tot_like_;$/;"	m	class:kaldi::AccumulateMultiThreadedClass	file:
tot_like_ptr_	gmm/mle-diag-gmm.cc	/^  double *tot_like_ptr_;$/;"	m	class:kaldi::AccumulateMultiThreadedClass	file:
~AccumulateMultiThreadedClass	gmm/mle-diag-gmm.cc	/^  ~AccumulateMultiThreadedClass() {$/;"	f	class:kaldi::AccumulateMultiThreadedClass
AccumDiagGmm	gmm/mle-diag-gmm.h	/^  AccumDiagGmm(): dim_(0), num_comp_(0), flags_(0) { }$/;"	f	class:kaldi::AccumDiagGmm
AccumDiagGmm	gmm/mle-diag-gmm.h	/^  explicit AccumDiagGmm(const DiagGmm &gmm, GmmFlagsType flags) {$/;"	f	class:kaldi::AccumDiagGmm
AccumDiagGmm	gmm/mle-diag-gmm.h	/^class AccumDiagGmm {$/;"	c	namespace:kaldi
Dim	gmm/mle-diag-gmm.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::AccumDiagGmm
Flags	gmm/mle-diag-gmm.h	/^  const GmmFlagsType Flags() const { return flags_; }$/;"	f	class:kaldi::AccumDiagGmm
KALDI_GMM_MLE_DIAG_GMM_H_	gmm/mle-diag-gmm.h	25;"	d
MapDiagGmmOptions	gmm/mle-diag-gmm.h	/^  MapDiagGmmOptions(): mean_tau(10.0),$/;"	f	struct:kaldi::MapDiagGmmOptions
MapDiagGmmOptions	gmm/mle-diag-gmm.h	/^struct MapDiagGmmOptions {$/;"	s	namespace:kaldi
MleDiagGmmOptions	gmm/mle-diag-gmm.h	/^  MleDiagGmmOptions() {$/;"	f	struct:kaldi::MleDiagGmmOptions
MleDiagGmmOptions	gmm/mle-diag-gmm.h	/^struct MleDiagGmmOptions {$/;"	s	namespace:kaldi
NumGauss	gmm/mle-diag-gmm.h	/^  int32 NumGauss() const { return num_comp_; }$/;"	f	class:kaldi::AccumDiagGmm
Register	gmm/mle-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::MapDiagGmmOptions
Register	gmm/mle-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::MleDiagGmmOptions
Resize	gmm/mle-diag-gmm.h	/^inline void AccumDiagGmm::Resize(const DiagGmm &gmm, GmmFlagsType flags) {$/;"	f	class:kaldi::AccumDiagGmm
dim_	gmm/mle-diag-gmm.h	/^  int32 dim_;$/;"	m	class:kaldi::AccumDiagGmm
flags_	gmm/mle-diag-gmm.h	/^  GmmFlagsType flags_;$/;"	m	class:kaldi::AccumDiagGmm
kaldi	gmm/mle-diag-gmm.h	/^namespace kaldi {$/;"	n
mean_accumulator	gmm/mle-diag-gmm.h	/^  const MatrixBase<double> &mean_accumulator() const { return mean_accumulator_; }$/;"	f	class:kaldi::AccumDiagGmm
mean_accumulator_	gmm/mle-diag-gmm.h	/^  Matrix<double> mean_accumulator_;$/;"	m	class:kaldi::AccumDiagGmm
mean_tau	gmm/mle-diag-gmm.h	/^  BaseFloat mean_tau;$/;"	m	struct:kaldi::MapDiagGmmOptions
min_gaussian_occupancy	gmm/mle-diag-gmm.h	/^  BaseFloat min_gaussian_occupancy;$/;"	m	struct:kaldi::MleDiagGmmOptions
min_gaussian_weight	gmm/mle-diag-gmm.h	/^  BaseFloat min_gaussian_weight;$/;"	m	struct:kaldi::MleDiagGmmOptions
min_variance	gmm/mle-diag-gmm.h	/^  double min_variance;$/;"	m	struct:kaldi::MleDiagGmmOptions
num_comp_	gmm/mle-diag-gmm.h	/^  int32 num_comp_;$/;"	m	class:kaldi::AccumDiagGmm
occupancy	gmm/mle-diag-gmm.h	/^  const VectorBase<double> &occupancy() const { return occupancy_; }$/;"	f	class:kaldi::AccumDiagGmm
occupancy_	gmm/mle-diag-gmm.h	/^  Vector<double> occupancy_;$/;"	m	class:kaldi::AccumDiagGmm
remove_low_count_gaussians	gmm/mle-diag-gmm.h	/^  bool remove_low_count_gaussians;$/;"	m	struct:kaldi::MleDiagGmmOptions
variance_accumulator	gmm/mle-diag-gmm.h	/^  const MatrixBase<double> &variance_accumulator() const { return variance_accumulator_; }$/;"	f	class:kaldi::AccumDiagGmm
variance_accumulator_	gmm/mle-diag-gmm.h	/^  Matrix<double> variance_accumulator_;$/;"	m	class:kaldi::AccumDiagGmm
variance_floor_vector	gmm/mle-diag-gmm.h	/^  Vector<double> variance_floor_vector;$/;"	m	struct:kaldi::MleDiagGmmOptions
variance_tau	gmm/mle-diag-gmm.h	/^  BaseFloat variance_tau;$/;"	m	struct:kaldi::MapDiagGmmOptions
weight_tau	gmm/mle-diag-gmm.h	/^  BaseFloat weight_tau;$/;"	m	struct:kaldi::MapDiagGmmOptions
GetLogLikeTest	gmm/mle-full-gmm-test.cc	/^BaseFloat GetLogLikeTest(const FullGmm &gmm,$/;"	f
TestComponentAcc	gmm/mle-full-gmm-test.cc	/^void TestComponentAcc(const FullGmm &gmm, const Matrix<BaseFloat> &feats) {$/;"	f
UnitTestEstimateFullGmm	gmm/mle-full-gmm-test.cc	/^UnitTestEstimateFullGmm() {$/;"	f
main	gmm/mle-full-gmm-test.cc	/^main() {$/;"	f
rand_posdef_spmatrix	gmm/mle-full-gmm-test.cc	/^void rand_posdef_spmatrix(size_t dim, SpMatrix<BaseFloat> *matrix,$/;"	f
test_flags_driven_update	gmm/mle-full-gmm-test.cc	/^void test_flags_driven_update(const FullGmm &gmm,$/;"	f
test_io	gmm/mle-full-gmm-test.cc	/^test_io(const FullGmm &gmm, const AccumFullGmm &est_gmm, bool binary,$/;"	f
AccumFullGmm	gmm/mle-full-gmm.cc	/^AccumFullGmm::AccumFullGmm(const AccumFullGmm &other)$/;"	f	class:kaldi::AccumFullGmm
AccumulateForComponent	gmm/mle-full-gmm.cc	/^void AccumFullGmm::AccumulateForComponent($/;"	f	class:kaldi::AccumFullGmm
AccumulateFromDiag	gmm/mle-full-gmm.cc	/^BaseFloat AccumFullGmm::AccumulateFromDiag(const DiagGmm &gmm,$/;"	f	class:kaldi::AccumFullGmm
AccumulateFromFull	gmm/mle-full-gmm.cc	/^BaseFloat AccumFullGmm::AccumulateFromFull(const FullGmm &gmm,$/;"	f	class:kaldi::AccumFullGmm
AccumulateFromPosteriors	gmm/mle-full-gmm.cc	/^void AccumFullGmm::AccumulateFromPosteriors($/;"	f	class:kaldi::AccumFullGmm
MlObjective	gmm/mle-full-gmm.cc	/^BaseFloat MlObjective(const FullGmm &gmm, const AccumFullGmm &fullgmm_acc) {$/;"	f	namespace:kaldi
MleFullGmmUpdate	gmm/mle-full-gmm.cc	/^void MleFullGmmUpdate(const MleFullGmmOptions &config,$/;"	f	namespace:kaldi
Read	gmm/mle-full-gmm.cc	/^void AccumFullGmm::Read(std::istream &in_stream, bool binary, bool add) {$/;"	f	class:kaldi::AccumFullGmm
Resize	gmm/mle-full-gmm.cc	/^void AccumFullGmm::Resize(int32 num_comp, int32 dim, GmmFlagsType flags) {$/;"	f	class:kaldi::AccumFullGmm
ResizeVarAccumulator	gmm/mle-full-gmm.cc	/^void AccumFullGmm::ResizeVarAccumulator(int32 num_comp, int32 dim) {$/;"	f	class:kaldi::AccumFullGmm
Scale	gmm/mle-full-gmm.cc	/^void AccumFullGmm::Scale(BaseFloat f, GmmFlagsType flags) {$/;"	f	class:kaldi::AccumFullGmm
SetZero	gmm/mle-full-gmm.cc	/^void AccumFullGmm::SetZero(GmmFlagsType flags) {$/;"	f	class:kaldi::AccumFullGmm
Write	gmm/mle-full-gmm.cc	/^void AccumFullGmm::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::AccumFullGmm
kaldi	gmm/mle-full-gmm.cc	/^namespace kaldi {$/;"	n	file:
AccumFullGmm	gmm/mle-full-gmm.h	/^  AccumFullGmm(): dim_(0), num_comp_(0), flags_(0) { }$/;"	f	class:kaldi::AccumFullGmm
AccumFullGmm	gmm/mle-full-gmm.h	/^  AccumFullGmm(int32 num_comp, int32 dim, GmmFlagsType flags):$/;"	f	class:kaldi::AccumFullGmm
AccumFullGmm	gmm/mle-full-gmm.h	/^  explicit AccumFullGmm(const FullGmm &gmm, GmmFlagsType flags) {$/;"	f	class:kaldi::AccumFullGmm
AccumFullGmm	gmm/mle-full-gmm.h	/^class AccumFullGmm {$/;"	c	namespace:kaldi
Dim	gmm/mle-full-gmm.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::AccumFullGmm
Flags	gmm/mle-full-gmm.h	/^  const GmmFlagsType Flags() const { return flags_; }$/;"	f	class:kaldi::AccumFullGmm
KALDI_GMM_MLE_FULL_GMM_H_	gmm/mle-full-gmm.h	23;"	d
MleFullGmmOptions	gmm/mle-full-gmm.h	/^  MleFullGmmOptions() {$/;"	f	struct:kaldi::MleFullGmmOptions
MleFullGmmOptions	gmm/mle-full-gmm.h	/^struct MleFullGmmOptions {$/;"	s	namespace:kaldi
NumGauss	gmm/mle-full-gmm.h	/^  int32 NumGauss() const { return num_comp_; }$/;"	f	class:kaldi::AccumFullGmm
Register	gmm/mle-full-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::MleFullGmmOptions
Resize	gmm/mle-full-gmm.h	/^inline void AccumFullGmm::Resize(const FullGmm &gmm, GmmFlagsType flags) {$/;"	f	class:kaldi::AccumFullGmm
covariance_accumulator	gmm/mle-full-gmm.h	/^  const std::vector<SpMatrix<double> > &covariance_accumulator() const { return covariance_accumulator_; }$/;"	f	class:kaldi::AccumFullGmm
covariance_accumulator_	gmm/mle-full-gmm.h	/^  std::vector<SpMatrix<double> > covariance_accumulator_;$/;"	m	class:kaldi::AccumFullGmm
dim_	gmm/mle-full-gmm.h	/^  int32 dim_;$/;"	m	class:kaldi::AccumFullGmm
flags_	gmm/mle-full-gmm.h	/^  GmmFlagsType flags_;$/;"	m	class:kaldi::AccumFullGmm
kaldi	gmm/mle-full-gmm.h	/^namespace kaldi {$/;"	n
max_condition	gmm/mle-full-gmm.h	/^  BaseFloat max_condition;$/;"	m	struct:kaldi::MleFullGmmOptions
mean_accumulator	gmm/mle-full-gmm.h	/^  const Matrix<double> &mean_accumulator() const { return mean_accumulator_; }$/;"	f	class:kaldi::AccumFullGmm
mean_accumulator_	gmm/mle-full-gmm.h	/^  Matrix<double> mean_accumulator_;$/;"	m	class:kaldi::AccumFullGmm
min_gaussian_occupancy	gmm/mle-full-gmm.h	/^  BaseFloat min_gaussian_occupancy;$/;"	m	struct:kaldi::MleFullGmmOptions
min_gaussian_weight	gmm/mle-full-gmm.h	/^  BaseFloat min_gaussian_weight;$/;"	m	struct:kaldi::MleFullGmmOptions
num_comp_	gmm/mle-full-gmm.h	/^  int32 num_comp_;$/;"	m	class:kaldi::AccumFullGmm
occupancy	gmm/mle-full-gmm.h	/^  const Vector<double> &occupancy() const { return occupancy_; }$/;"	f	class:kaldi::AccumFullGmm
occupancy_	gmm/mle-full-gmm.h	/^  Vector<double> occupancy_;$/;"	m	class:kaldi::AccumFullGmm
remove_low_count_gaussians	gmm/mle-full-gmm.h	/^  bool remove_low_count_gaussians;$/;"	m	struct:kaldi::MleFullGmmOptions
variance_floor	gmm/mle-full-gmm.h	/^  BaseFloat variance_floor;$/;"	m	struct:kaldi::MleFullGmmOptions
AugmentGmmFlags	gmm/model-common.cc	/^GmmFlagsType AugmentGmmFlags(GmmFlagsType flags) {$/;"	f	namespace:kaldi
CountStats	gmm/model-common.cc	/^  CountStats(int32 p, int32 n, BaseFloat occ)$/;"	f	struct:kaldi::CountStats
CountStats	gmm/model-common.cc	/^struct CountStats {$/;"	s	namespace:kaldi	file:
GetSplitTargets	gmm/model-common.cc	/^void GetSplitTargets(const Vector<BaseFloat> &state_occs,$/;"	f	namespace:kaldi
GmmFlagsToString	gmm/model-common.cc	/^std::string GmmFlagsToString(GmmFlagsType flags) {$/;"	f	namespace:kaldi
StringToGmmFlags	gmm/model-common.cc	/^GmmFlagsType StringToGmmFlags(std::string str) {$/;"	f	namespace:kaldi
StringToSgmmUpdateFlags	gmm/model-common.cc	/^SgmmUpdateFlagsType StringToSgmmUpdateFlags(std::string str) {$/;"	f	namespace:kaldi
StringToSgmmWriteFlags	gmm/model-common.cc	/^SgmmUpdateFlagsType StringToSgmmWriteFlags(std::string str) {$/;"	f	namespace:kaldi
kaldi	gmm/model-common.cc	/^namespace kaldi {$/;"	n	file:
num_components	gmm/model-common.cc	/^  int32 num_components;$/;"	m	struct:kaldi::CountStats	file:
occupancy	gmm/model-common.cc	/^  BaseFloat occupancy;$/;"	m	struct:kaldi::CountStats	file:
operator <	gmm/model-common.cc	/^  bool operator < (const CountStats &other) const {$/;"	f	struct:kaldi::CountStats
pdf_index	gmm/model-common.cc	/^  int32 pdf_index;$/;"	m	struct:kaldi::CountStats	file:
GmmFlagsType	gmm/model-common.h	/^typedef uint16 GmmFlagsType;  \/\/\/< Bitwise OR of the above flags.$/;"	t	namespace:kaldi
GmmUpdateFlags	gmm/model-common.h	/^enum GmmUpdateFlags {$/;"	g	namespace:kaldi
KALDI_GMM_MODEL_COMMON_H_	gmm/model-common.h	23;"	d
SgmmUpdateFlags	gmm/model-common.h	/^enum SgmmUpdateFlags {  \/\/\/ The letters correspond to the variable names.$/;"	g	namespace:kaldi
SgmmUpdateFlagsType	gmm/model-common.h	/^typedef uint16 SgmmUpdateFlagsType;  \/\/\/< Bitwise OR of the above flags.$/;"	t	namespace:kaldi
SgmmWriteFlags	gmm/model-common.h	/^enum SgmmWriteFlags {$/;"	g	namespace:kaldi
SgmmWriteFlagsType	gmm/model-common.h	/^typedef uint16 SgmmWriteFlagsType;  \/\/\/< Bitwise OR of the above flags.$/;"	t	namespace:kaldi
kGmmAll	gmm/model-common.h	/^  kGmmAll       = 0x00F  \/\/ a$/;"	e	enum:kaldi::GmmUpdateFlags
kGmmMeans	gmm/model-common.h	/^  kGmmMeans       = 0x001,  \/\/ m$/;"	e	enum:kaldi::GmmUpdateFlags
kGmmTransitions	gmm/model-common.h	/^  kGmmTransitions = 0x008,  \/\/ t ... not really part of GMM.$/;"	e	enum:kaldi::GmmUpdateFlags
kGmmVariances	gmm/model-common.h	/^  kGmmVariances   = 0x002,  \/\/ v$/;"	e	enum:kaldi::GmmUpdateFlags
kGmmWeights	gmm/model-common.h	/^  kGmmWeights     = 0x004,  \/\/ w$/;"	e	enum:kaldi::GmmUpdateFlags
kSgmmAll	gmm/model-common.h	/^  kSgmmAll                         = 0x0FF   \/\/\/ a (won't normally use this).  $/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmBackgroundGmms	gmm/model-common.h	/^  kSgmmBackgroundGmms  = 0x008,  \/\/\/ u$/;"	e	enum:kaldi::SgmmWriteFlags
kSgmmCovarianceMatrix	gmm/model-common.h	/^  kSgmmCovarianceMatrix            = 0x008,  \/\/\/ S$/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmGlobalParams	gmm/model-common.h	/^  kSgmmGlobalParams    = 0x001,  \/\/\/ g$/;"	e	enum:kaldi::SgmmWriteFlags
kSgmmNormalizers	gmm/model-common.h	/^  kSgmmNormalizers     = 0x004,  \/\/\/ n$/;"	e	enum:kaldi::SgmmWriteFlags
kSgmmPhoneProjections	gmm/model-common.h	/^  kSgmmPhoneProjections            = 0x002,  \/\/\/ M$/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmPhoneVectors	gmm/model-common.h	/^  kSgmmPhoneVectors                = 0x001,  \/\/\/ v$/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmPhoneWeightProjections	gmm/model-common.h	/^  kSgmmPhoneWeightProjections      = 0x004,  \/\/\/ w$/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmSpeakerProjections	gmm/model-common.h	/^  kSgmmSpeakerProjections          = 0x020,  \/\/\/ N$/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmSpeakerWeightProjections	gmm/model-common.h	/^  kSgmmSpeakerWeightProjections    = 0x080,  \/\/\/ u [ for SSGMM ]$/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmStateParams	gmm/model-common.h	/^  kSgmmStateParams     = 0x002,  \/\/\/ s$/;"	e	enum:kaldi::SgmmWriteFlags
kSgmmSubstateWeights	gmm/model-common.h	/^  kSgmmSubstateWeights             = 0x010,  \/\/\/ c$/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmTransitions	gmm/model-common.h	/^  kSgmmTransitions                 = 0x040,  \/\/\/ t .. not really part of SGMM.$/;"	e	enum:kaldi::SgmmUpdateFlags
kSgmmWriteAll	gmm/model-common.h	/^  kSgmmWriteAll        = 0x00F  \/\/\/ a$/;"	e	enum:kaldi::SgmmWriteFlags
kaldi	gmm/model-common.h	/^namespace kaldi {$/;"	n
InitRandDiagGmm	gmm/model-test-common.cc	/^void InitRandDiagGmm(int32 dim, int32 num_comp, DiagGmm *gmm) {$/;"	f	namespace:kaldi::unittest
InitRandFullGmm	gmm/model-test-common.cc	/^void InitRandFullGmm(int32 dim, int32 num_comp, FullGmm *gmm) {$/;"	f	namespace:kaldi::unittest
RandDiagGaussFeatures	gmm/model-test-common.cc	/^void RandDiagGaussFeatures(int32 num_samples,$/;"	f	namespace:kaldi::unittest
RandFullGaussFeatures	gmm/model-test-common.cc	/^void RandFullGaussFeatures(int32 num_samples,$/;"	f	namespace:kaldi::unittest
RandPosdefSpMatrix	gmm/model-test-common.cc	/^void RandPosdefSpMatrix(int32 dim, SpMatrix<BaseFloat> *matrix,$/;"	f	namespace:kaldi::unittest
kaldi	gmm/model-test-common.cc	/^namespace kaldi {$/;"	n	file:
unittest	gmm/model-test-common.cc	/^namespace unittest {$/;"	n	namespace:kaldi	file:
KALDI_GMM_MODEL_TEST_COMMON_H_	gmm/model-test-common.h	23;"	d
kaldi	gmm/model-test-common.h	/^namespace kaldi {$/;"	n
unittest	gmm/model-test-common.h	/^namespace unittest {$/;"	n	namespace:kaldi
ADDLIBS	gmmbin/Makefile	/^ADDLIBS = ..\/decoder\/kaldi-decoder.a ..\/lat\/kaldi-lat.a ..\/feat\/kaldi-feat.a \\$/;"	m
BINFILES	gmmbin/Makefile	/^BINFILES = gmm-init-mono gmm-est gmm-acc-stats-ali gmm-align \\$/;"	m
EXTRA_CXXFLAGS	gmmbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	gmmbin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	gmmbin/Makefile	/^TESTFILES =$/;"	m
main	gmmbin/gmm-acc-hlda.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-acc-mllt-global.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-acc-mllt.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-acc-stats-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-acc-stats-twofeats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-acc-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-acc-stats2.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-adapt-map.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-align-compiled.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-align.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-basis-fmllr-accs-gpost.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-basis-fmllr-accs-gpost.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-basis-fmllr-accs-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-basis-fmllr-accs.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-basis-fmllr-accs.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-basis-fmllr-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-basis-fmllr-training.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-boost-silence.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-compute-likes.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
ReadNetwork	gmmbin/gmm-decode-biglm-faster.cc	/^fst::Fst<fst::StdArc> *ReadNetwork(std::string filename) {$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-decode-biglm-faster.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-decode-biglm-faster.cc	/^int main(int argc, char *argv[])$/;"	f
DecodeInfo	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  DecodeInfo(const kaldi::AmDiagGmm &am,$/;"	f	struct:DecodeInfo
DecodeInfo	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^struct DecodeInfo {$/;"	s	file:
DecodeUtterance	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^bool DecodeUtterance(kaldi::FasterDecoder *decoder,$/;"	f
acoustic_model	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  const kaldi::AmDiagGmm &acoustic_model;$/;"	m	struct:DecodeInfo	file:
acoustic_scale	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  BaseFloat acoustic_scale;$/;"	m	struct:DecodeInfo	file:
alignment_writer	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  const kaldi::Int32VectorWriter &alignment_writer;$/;"	m	struct:DecodeInfo	file:
allow_partial	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  bool allow_partial;$/;"	m	struct:DecodeInfo	file:
decoder	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  kaldi::FasterDecoder *decoder;$/;"	m	struct:DecodeInfo	file:
main	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
trans_model	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  const kaldi::TransitionModel &trans_model;$/;"	m	struct:DecodeInfo	file:
word_syms	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  fst::SymbolTable *word_syms;$/;"	m	struct:DecodeInfo	file:
words_writer	gmmbin/gmm-decode-faster-regtree-fmllr.cc	/^  const kaldi::Int32VectorWriter &words_writer;$/;"	m	struct:DecodeInfo	file:
DecodeInfo	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  DecodeInfo(const kaldi::AmDiagGmm &am,$/;"	f	struct:DecodeInfo
DecodeInfo	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^struct DecodeInfo {$/;"	s	file:
DecodeUtterance	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^bool DecodeUtterance(kaldi::FasterDecoder *decoder,$/;"	f
acoustic_model	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  const kaldi::AmDiagGmm &acoustic_model;$/;"	m	struct:DecodeInfo	file:
acoustic_scale	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  BaseFloat acoustic_scale;$/;"	m	struct:DecodeInfo	file:
alignment_writer	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  const kaldi::Int32VectorWriter &alignment_writer;$/;"	m	struct:DecodeInfo	file:
allow_partial	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  bool allow_partial;$/;"	m	struct:DecodeInfo	file:
decoder	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  kaldi::FasterDecoder *decoder;$/;"	m	struct:DecodeInfo	file:
main	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
trans_model	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  const kaldi::TransitionModel &trans_model;$/;"	m	struct:DecodeInfo	file:
word_syms	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  fst::SymbolTable *word_syms;$/;"	m	struct:DecodeInfo	file:
words_writer	gmmbin/gmm-decode-faster-regtree-mllr.cc	/^  const kaldi::Int32VectorWriter &words_writer;$/;"	m	struct:DecodeInfo	file:
ReadNetwork	gmmbin/gmm-decode-faster.cc	/^fst::Fst<fst::StdArc> *ReadNetwork(std::string filename) {$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-decode-faster.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-decode-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
ReadNetwork	gmmbin/gmm-decode-nbest.cc	/^fst::Fst<fst::StdArc> *ReadNetwork(std::string filename) {$/;"	f
main	gmmbin/gmm-decode-nbest.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-decode-simple.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-diff-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-est-basis-fmllr-gpost.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-est-basis-fmllr-gpost.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-est-basis-fmllr-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-est-basis-fmllr.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-est-basis-fmllr.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-est-basis-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-fmllr-global.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-est-fmllr-gpost.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-est-fmllr-gpost.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-est-fmllr-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccStatsForUtterance	gmmbin/gmm-est-fmllr-raw-gpost.cc	/^void AccStatsForUtterance(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-est-fmllr-raw-gpost.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-est-fmllr-raw-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccStatsForUtterance	gmmbin/gmm-est-fmllr-raw.cc	/^void AccStatsForUtterance(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-est-fmllr-raw.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-est-fmllr-raw.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-est-fmllr.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-est-fmllr.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-est-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-gaussians-ebw.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-hlda.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-est-lvtln-trans.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-est-lvtln-trans.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-est-lvtln-trans.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-map.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-regtree-fmllr-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-regtree-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-regtree-mllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-rescale.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est-weights-ebw.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-est.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-fmpe-acc-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-get-feat-deriv.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-get-stats-deriv.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-acc-stats-twofeats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-acc-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-global-est-fmllr.cc	/^bool AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-global-est-fmllr.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-global-est-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	gmmbin/gmm-global-est-lvtln-trans.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-global-est-lvtln-trans.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-global-est-lvtln-trans.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-est.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-get-frame-likes.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-get-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-gselect-to-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
InitGmmFromRandomFrames	gmmbin/gmm-global-init-from-feats.cc	/^void InitGmmFromRandomFrames(const Matrix<BaseFloat> &feats, DiagGmm *gmm) {$/;"	f	namespace:kaldi
TrainOneIter	gmmbin/gmm-global-init-from-feats.cc	/^void TrainOneIter(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-global-init-from-feats.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-global-init-from-feats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-sum-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-global-to-fgmm.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-gselect.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-init-lvtln.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetFeatureMeanAndVariance	gmmbin/gmm-init-model-flat.cc	/^void GetFeatureMeanAndVariance(const std::string &feat_rspecifier,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-init-model-flat.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-init-model-flat.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetOccs	gmmbin/gmm-init-model.cc	/^void GetOccs(const BuildTreeStatsType &stats,$/;"	f	namespace:kaldi
InitAmGmm	gmmbin/gmm-init-model.cc	/^void InitAmGmm(const BuildTreeStatsType &stats,$/;"	f	namespace:kaldi
InitAmGmmFromOld	gmmbin/gmm-init-model.cc	/^void InitAmGmmFromOld(const BuildTreeStatsType &stats,$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-init-model.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-init-model.cc	/^int main(int argc, char *argv[]) {$/;"	f
ReadSharedPhonesList	gmmbin/gmm-init-mono.cc	/^void ReadSharedPhonesList(std::string rxfilename, std::vector<std::vector<int32> > *list_out) {$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-init-mono.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-init-mono.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-init-trans.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-ismooth-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
DecodeUtterance	gmmbin/gmm-latgen-biglm-faster.cc	/^bool DecodeUtterance(LatticeBiglmFasterDecoder &decoder, \/\/ not const but is really an input.$/;"	f	namespace:kaldi
kaldi	gmmbin/gmm-latgen-biglm-faster.cc	/^namespace kaldi {$/;"	n	file:
main	gmmbin/gmm-latgen-biglm-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-latgen-faster-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-latgen-faster-regtree-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-latgen-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-latgen-map.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-latgen-simple.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-latgen-tracking.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-make-regtree.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-mixup.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-post-to-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-rescore-lattice.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-scale-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-sum-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-train-lvtln-special.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-transform-means-global.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	gmmbin/gmm-transform-means.cc	/^int main(int argc, char *argv[]) {$/;"	f
-prefix	gst-plugin/Makefile	/^	glib-genmarshal --body --prefix=kaldi_marshal kaldimarshal.list >> kaldimarshal.c.tmp$/;"	m
-prefix	gst-plugin/Makefile	/^	glib-genmarshal --header --prefix=kaldi_marshal kaldimarshal.list > kaldimarshal.h.tmp$/;"	m
BINFILES	gst-plugin/Makefile	/^BINFILES= $(LIBFILE)$/;"	m
LIBFILE	gst-plugin/Makefile	/^LIBFILE = lib$(LIBNAME).so$/;"	m
LIBNAME	gst-plugin/Makefile	/^LIBNAME=gstkaldi$/;"	m
OBJFILES	gst-plugin/Makefile	/^OBJFILES = gst-audio-source.o gst-online-gmm-decode-faster.o$/;"	m
GstBufferSource	gst-plugin/gst-audio-source.cc	/^GstBufferSource::GstBufferSource() :$/;"	f	class:kaldi::GstBufferSource
PushBuffer	gst-plugin/gst-audio-source.cc	/^void GstBufferSource::PushBuffer(GstBuffer *buf) {$/;"	f	class:kaldi::GstBufferSource
Read	gst-plugin/gst-audio-source.cc	/^bool GstBufferSource::Read(Vector<BaseFloat> *data) {$/;"	f	class:kaldi::GstBufferSource
SetEnded	gst-plugin/gst-audio-source.cc	/^void GstBufferSource::SetEnded(bool ended) {$/;"	f	class:kaldi::GstBufferSource
kaldi	gst-plugin/gst-audio-source.cc	/^namespace kaldi {$/;"	n	file:
~GstBufferSource	gst-plugin/gst-audio-source.cc	/^GstBufferSource::~GstBufferSource() {$/;"	f	class:kaldi::GstBufferSource
GstBufferSource	gst-plugin/gst-audio-source.h	/^class GstBufferSource : public OnlineAudioSourceItf {$/;"	c	namespace:kaldi
KALDI_GST_PLUGIN_GST_AUDIO_SOURCE_H_	gst-plugin/gst-audio-source.h	21;"	d
SampleType	gst-plugin/gst-audio-source.h	/^  typedef int16 SampleType;  \/\/ hardcoded 16-bit audio$/;"	t	class:kaldi::GstBufferSource
buf_queue_	gst-plugin/gst-audio-source.h	/^  GAsyncQueue* buf_queue_;$/;"	m	class:kaldi::GstBufferSource
current_buffer_	gst-plugin/gst-audio-source.h	/^  GstBuffer *current_buffer_;$/;"	m	class:kaldi::GstBufferSource
data_cond_	gst-plugin/gst-audio-source.h	/^  GCond data_cond_;$/;"	m	class:kaldi::GstBufferSource
ended_	gst-plugin/gst-audio-source.h	/^  bool ended_;$/;"	m	class:kaldi::GstBufferSource
kaldi	gst-plugin/gst-audio-source.h	/^namespace kaldi {$/;"	n
lock_	gst-plugin/gst-audio-source.h	/^  GMutex lock_;$/;"	m	class:kaldi::GstBufferSource
pos_in_current_buf_	gst-plugin/gst-audio-source.h	/^  gint pos_in_current_buf_;$/;"	m	class:kaldi::GstBufferSource
DEFAULT_ACOUSTIC_SCALE	gst-plugin/gst-online-gmm-decode-faster.cc	87;"	d	file:
DEFAULT_FST	gst-plugin/gst-online-gmm-decode-faster.cc	84;"	d	file:
DEFAULT_LEFT_CONTEXT	gst-plugin/gst-online-gmm-decode-faster.cc	88;"	d	file:
DEFAULT_MODEL	gst-plugin/gst-online-gmm-decode-faster.cc	83;"	d	file:
DEFAULT_RIGHT_CONTEXT	gst-plugin/gst-online-gmm-decode-faster.cc	89;"	d	file:
DEFAULT_SILENCE_PHONES	gst-plugin/gst-online-gmm-decode-faster.cc	86;"	d	file:
DEFAULT_WORD_SYMS	gst-plugin/gst-online-gmm-decode-faster.cc	85;"	d	file:
GST_CAT_DEFAULT	gst-plugin/gst-online-gmm-decode-faster.cc	65;"	d	file:
HYP_WORD_SIGNAL	gst-plugin/gst-online-gmm-decode-faster.cc	/^  HYP_WORD_SIGNAL,$/;"	e	enum:kaldi::__anon16	file:
LAST_SIGNAL	gst-plugin/gst-online-gmm-decode-faster.cc	/^  LAST_SIGNAL$/;"	e	enum:kaldi::__anon16	file:
PACKAGE	gst-plugin/gst-online-gmm-decode-faster.cc	872;"	d	file:
PROP_0	gst-plugin/gst-online-gmm-decode-faster.cc	/^  PROP_0,$/;"	e	enum:kaldi::__anon17	file:
PROP_FST	gst-plugin/gst-online-gmm-decode-faster.cc	/^  PROP_FST,$/;"	e	enum:kaldi::__anon17	file:
PROP_LAST	gst-plugin/gst-online-gmm-decode-faster.cc	/^  PROP_LAST$/;"	e	enum:kaldi::__anon17	file:
PROP_LDA_MAT	gst-plugin/gst-online-gmm-decode-faster.cc	/^  PROP_LDA_MAT,$/;"	e	enum:kaldi::__anon17	file:
PROP_MODEL	gst-plugin/gst-online-gmm-decode-faster.cc	/^  PROP_MODEL,$/;"	e	enum:kaldi::__anon17	file:
PROP_SILENCE_PHONES	gst-plugin/gst-online-gmm-decode-faster.cc	/^  PROP_SILENCE_PHONES,$/;"	e	enum:kaldi::__anon17	file:
PROP_SILENT	gst-plugin/gst-online-gmm-decode-faster.cc	/^  PROP_SILENT,$/;"	e	enum:kaldi::__anon17	file:
PROP_WORD_SYMS	gst-plugin/gst-online-gmm-decode-faster.cc	/^  PROP_WORD_SYMS,$/;"	e	enum:kaldi::__anon17	file:
VERSION	gst-plugin/gst-online-gmm-decode-faster.cc	43;"	d	file:
gst_online_gmm_decode_faster_allocate	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_allocate(GstOnlineGmmDecodeFaster * filter) {$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_chain	gst-plugin/gst-online-gmm-decode-faster.cc	/^static GstFlowReturn gst_online_gmm_decode_faster_chain(GstPad * pad,$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_change_state	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_change_state(GstElement *element, GstStateChange transition) {$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_class_init	gst-plugin/gst-online-gmm-decode-faster.cc	/^static void gst_online_gmm_decode_faster_class_init(GstOnlineGmmDecodeFasterClass * klass) {$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_deallocate	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_deallocate(GstOnlineGmmDecodeFaster * filter) {$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_finalize	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_finalize(GObject * object) {$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_get_property	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_get_property(GObject * object, guint prop_id,$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_init	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_init(GstOnlineGmmDecodeFaster * filter) {$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_loop	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_loop(GstOnlineGmmDecodeFaster * filter) {$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_parent_class	gst-plugin/gst-online-gmm-decode-faster.cc	115;"	d	file:
gst_online_gmm_decode_faster_push_word	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_push_word(GstOnlineGmmDecodeFaster * filter, GstPad *pad, std::string word) {$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_push_words	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_push_words(GstOnlineGmmDecodeFaster * filter, GstPad *pad,$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_set_property	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_set_property(GObject * object, guint prop_id,$/;"	f	namespace:kaldi
gst_online_gmm_decode_faster_signals	gst-plugin/gst-online-gmm-decode-faster.cc	/^static guint gst_online_gmm_decode_faster_signals[LAST_SIGNAL];$/;"	m	namespace:kaldi	file:
gst_online_gmm_decode_faster_sink_event	gst-plugin/gst-online-gmm-decode-faster.cc	/^gst_online_gmm_decode_faster_sink_event(GstPad * pad, GstObject * parent, GstEvent * event) {$/;"	f	namespace:kaldi
kaldi	gst-plugin/gst-online-gmm-decode-faster.cc	/^namespace kaldi {$/;"	n	file:
onlinegmmdecodefaster_init	gst-plugin/gst-online-gmm-decode-faster.cc	/^onlinegmmdecodefaster_init(GstPlugin * onlinegmmdecodefaster) {$/;"	f	namespace:kaldi
sink_factory	gst-plugin/gst-online-gmm-decode-faster.cc	/^static GstStaticPadTemplate sink_factory =$/;"	m	namespace:kaldi	file:
src_factory	gst-plugin/gst-online-gmm-decode-faster.cc	/^static GstStaticPadTemplate src_factory =$/;"	m	namespace:kaldi	file:
FeInput	gst-plugin/gst-online-gmm-decode-faster.h	/^typedef OnlineFeInput<Mfcc> FeInput;$/;"	t	namespace:kaldi
GST_IS_ONLINEGMMDECODEFASTER	gst-plugin/gst-online-gmm-decode-faster.h	49;"	d
GST_IS_ONLINEGMMDECODEFASTER_CLASS	gst-plugin/gst-online-gmm-decode-faster.h	51;"	d
GST_ONLINEGMMDECODEFASTER	gst-plugin/gst-online-gmm-decode-faster.h	45;"	d
GST_ONLINEGMMDECODEFASTER_CLASS	gst-plugin/gst-online-gmm-decode-faster.h	47;"	d
GST_TYPE_ONLINEGMMDECODEFASTER	gst-plugin/gst-online-gmm-decode-faster.h	43;"	d
GstOnlineGmmDecodeFaster	gst-plugin/gst-online-gmm-decode-faster.h	/^typedef struct _GstOnlineGmmDecodeFaster      GstOnlineGmmDecodeFaster;$/;"	t	namespace:kaldi	typeref:struct:kaldi::_GstOnlineGmmDecodeFaster
GstOnlineGmmDecodeFasterClass	gst-plugin/gst-online-gmm-decode-faster.h	/^typedef struct _GstOnlineGmmDecodeFasterClass GstOnlineGmmDecodeFasterClass;$/;"	t	namespace:kaldi	typeref:struct:kaldi::_GstOnlineGmmDecodeFasterClass
KALDI_GST_PLUGIN_GST_ONLINE_GMM_DECODE_FASTER_H_	gst-plugin/gst-online-gmm-decode-faster.h	21;"	d
_GstOnlineGmmDecodeFaster	gst-plugin/gst-online-gmm-decode-faster.h	/^struct _GstOnlineGmmDecodeFaster {$/;"	s	namespace:kaldi
_GstOnlineGmmDecodeFasterClass	gst-plugin/gst-online-gmm-decode-faster.h	/^struct _GstOnlineGmmDecodeFasterClass {$/;"	s	namespace:kaldi
acoustic_scale_	gst-plugin/gst-online-gmm-decode-faster.h	/^  BaseFloat acoustic_scale_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
am_gmm_	gst-plugin/gst-online-gmm-decode-faster.h	/^  AmDiagGmm *am_gmm_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
au_src_	gst-plugin/gst-online-gmm-decode-faster.h	/^  GstBufferSource *au_src_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
cmn_window_	gst-plugin/gst-online-gmm-decode-faster.h	/^  int32 cmn_window_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
decode_fst_	gst-plugin/gst-online-gmm-decode-faster.h	/^  fst::Fst<fst::StdArc> *decode_fst_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
decoder_	gst-plugin/gst-online-gmm-decode-faster.h	/^  OnlineFasterDecoder *decoder_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
decoder_opts_	gst-plugin/gst-online-gmm-decode-faster.h	/^  OnlineFasterDecoderOpts *decoder_opts_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
element	gst-plugin/gst-online-gmm-decode-faster.h	/^  GstElement element;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
feature_reading_opts_	gst-plugin/gst-online-gmm-decode-faster.h	/^  OnlineFeatureMatrixOptions *feature_reading_opts_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
fst_rspecifier_	gst-plugin/gst-online-gmm-decode-faster.h	/^  gchar* fst_rspecifier_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
hyp_word	gst-plugin/gst-online-gmm-decode-faster.h	/^  void (*hyp_word)(GstElement *element, const gchar *hyp_str);$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFasterClass
kSampleFreq	gst-plugin/gst-online-gmm-decode-faster.h	/^uint32 kSampleFreq = 16000;$/;"	m	namespace:kaldi
kaldi	gst-plugin/gst-online-gmm-decode-faster.h	/^namespace kaldi {$/;"	n
lda_mat_rspecifier_	gst-plugin/gst-online-gmm-decode-faster.h	/^  gchar* lda_mat_rspecifier_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
lda_transform_	gst-plugin/gst-online-gmm-decode-faster.h	/^  Matrix<BaseFloat> *lda_transform_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
left_context_	gst-plugin/gst-online-gmm-decode-faster.h	/^  int32 right_context_, left_context_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
min_cmn_window_	gst-plugin/gst-online-gmm-decode-faster.h	/^  int32 min_cmn_window_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
model_rspecifier_	gst-plugin/gst-online-gmm-decode-faster.h	/^  gchar* model_rspecifier_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
out_fst_	gst-plugin/gst-online-gmm-decode-faster.h	/^  fst::VectorFst<LatticeArc> *out_fst_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
parent_class	gst-plugin/gst-online-gmm-decode-faster.h	/^  GstElementClass parent_class;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFasterClass
right_context_	gst-plugin/gst-online-gmm-decode-faster.h	/^  int32 right_context_, left_context_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
silence_phones_	gst-plugin/gst-online-gmm-decode-faster.h	/^  std::vector<int32> *silence_phones_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
silent_	gst-plugin/gst-online-gmm-decode-faster.h	/^  bool silent_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
simple_options_	gst-plugin/gst-online-gmm-decode-faster.h	/^  SimpleOptions *simple_options_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
sinkpad_	gst-plugin/gst-online-gmm-decode-faster.h	/^  GstPad *sinkpad_, *srcpad_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
srcpad_	gst-plugin/gst-online-gmm-decode-faster.h	/^  GstPad *sinkpad_, *srcpad_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
trans_model_	gst-plugin/gst-online-gmm-decode-faster.h	/^  TransitionModel *trans_model_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
word_syms_	gst-plugin/gst-online-gmm-decode-faster.h	/^  fst::SymbolTable *word_syms_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
word_syms_filename_	gst-plugin/gst-online-gmm-decode-faster.h	/^  gchar* word_syms_filename_;$/;"	m	struct:kaldi::_GstOnlineGmmDecodeFaster
ADDLIBS	hmm/Makefile	/^ADDLIBS = ..\/tree\/kaldi-tree.a ..\/matrix\/kaldi-matrix.a ..\/util\/kaldi-util.a \\$/;"	m
LIBNAME	hmm/Makefile	/^LIBNAME = kaldi-hmm$/;"	m
OBJFILES	hmm/Makefile	/^OBJFILES = hmm-topology.o transition-model.o hmm-utils.o tree-accu.o posterior.o$/;"	m
TESTFILES	hmm/Makefile	/^TESTFILES = hmm-topology-test hmm-utils-test transition-model-test posterior-test$/;"	m
TestHmmTopology	hmm/hmm-topology-test.cc	/^void TestHmmTopology() {$/;"	f	namespace:kaldi
kaldi	hmm/hmm-topology-test.cc	/^namespace kaldi {$/;"	n	file:
main	hmm/hmm-topology-test.cc	/^int main() {$/;"	f
Check	hmm/hmm-topology.cc	/^void HmmTopology::Check() {$/;"	f	class:kaldi::HmmTopology
GetDefaultTopology	hmm/hmm-topology.cc	/^HmmTopology GetDefaultTopology(const std::vector<int32> &phones_in) {$/;"	f	namespace:kaldi
GetPhoneToNumPdfClasses	hmm/hmm-topology.cc	/^void HmmTopology::GetPhoneToNumPdfClasses(std::vector<int32> *phone2num_pdf_classes) const {$/;"	f	class:kaldi::HmmTopology
NumPdfClasses	hmm/hmm-topology.cc	/^int32 HmmTopology::NumPdfClasses(int32 phone) const {$/;"	f	class:kaldi::HmmTopology
Read	hmm/hmm-topology.cc	/^void HmmTopology::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::HmmTopology
TopologyForPhone	hmm/hmm-topology.cc	/^const HmmTopology::TopologyEntry& HmmTopology::TopologyForPhone(int32 phone) const {  \/\/ Will throw if phone not covered.$/;"	f	class:kaldi::HmmTopology
Write	hmm/hmm-topology.cc	/^void HmmTopology::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::HmmTopology
kaldi	hmm/hmm-topology.cc	/^namespace kaldi {$/;"	n	file:
GetPhones	hmm/hmm-topology.h	/^  const std::vector<int32> &GetPhones() const { return phones_; };$/;"	f	class:kaldi::HmmTopology
HmmState	hmm/hmm-topology.h	/^    HmmState(): pdf_class(-1) { }$/;"	f	struct:kaldi::HmmTopology::HmmState
HmmState	hmm/hmm-topology.h	/^    explicit HmmState(int32 p): pdf_class(p) { }$/;"	f	struct:kaldi::HmmTopology::HmmState
HmmState	hmm/hmm-topology.h	/^  struct HmmState {$/;"	s	class:kaldi::HmmTopology
HmmTopology	hmm/hmm-topology.h	/^  HmmTopology() {}$/;"	f	class:kaldi::HmmTopology
HmmTopology	hmm/hmm-topology.h	/^class HmmTopology {$/;"	c	namespace:kaldi
KALDI_HMM_HMM_TOPOLOGY_H_	hmm/hmm-topology.h	21;"	d
TopologyEntry	hmm/hmm-topology.h	/^  typedef std::vector<HmmState> TopologyEntry;$/;"	t	class:kaldi::HmmTopology
entries_	hmm/hmm-topology.h	/^  std::vector<TopologyEntry> entries_;$/;"	m	class:kaldi::HmmTopology
kNoPdf	hmm/hmm-topology.h	/^static const int32 kNoPdf = -1;$/;"	m	namespace:kaldi
kaldi	hmm/hmm-topology.h	/^namespace kaldi {$/;"	n
operator ==	hmm/hmm-topology.h	/^    bool operator == (const HmmState &other) const {$/;"	f	struct:kaldi::HmmTopology::HmmState
operator ==	hmm/hmm-topology.h	/^  bool operator == (const HmmTopology &other) const {$/;"	f	class:kaldi::HmmTopology
pdf_class	hmm/hmm-topology.h	/^    int32 pdf_class;$/;"	m	struct:kaldi::HmmTopology::HmmState
phone2idx_	hmm/hmm-topology.h	/^  std::vector<int32> phone2idx_;  \/\/ map from phones to indexes into the entries vector (or -1 for not present).$/;"	m	class:kaldi::HmmTopology
phones_	hmm/hmm-topology.h	/^  std::vector<int32> phones_;  \/\/ list of all phones we have topology for.  Sorted, uniq.  no epsilon (zero) phone.$/;"	m	class:kaldi::HmmTopology
transitions	hmm/hmm-topology.h	/^    std::vector<std::pair<int32, BaseFloat> > transitions;$/;"	m	struct:kaldi::HmmTopology::HmmState
TestConvertPhnxToProns	hmm/hmm-utils-test.cc	/^void TestConvertPhnxToProns() {$/;"	f	namespace:kaldi
kaldi	hmm/hmm-utils-test.cc	/^namespace kaldi {$/;"	n	file:
main	hmm/hmm-utils-test.cc	/^int main() {$/;"	f
AddSelfLoops	hmm/hmm-utils.cc	/^void AddSelfLoops(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
AddSelfLoopsAfter	hmm/hmm-utils.cc	/^static void AddSelfLoopsAfter(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
AddSelfLoopsBefore	hmm/hmm-utils.cc	/^static void AddSelfLoopsBefore(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
AddTransitionProbs	hmm/hmm-utils.cc	/^void AddTransitionProbs(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
ConvertAlignment	hmm/hmm-utils.cc	/^bool ConvertAlignment(const TransitionModel &old_trans_model,$/;"	f	namespace:kaldi
ConvertPhnxToProns	hmm/hmm-utils.cc	/^bool ConvertPhnxToProns(const std::vector<int32> &phnx,$/;"	f	namespace:kaldi
GetHTransducer	hmm/hmm-utils.cc	/^fst::VectorFst<fst::StdArc> *GetHTransducer (const std::vector<std::vector<int32> > &ilabel_info,$/;"	f	namespace:kaldi
GetHmmAsFst	hmm/hmm-utils.cc	/^fst::VectorFst<fst::StdArc> *GetHmmAsFst($/;"	f	namespace:kaldi
GetHmmAsFstSimple	hmm/hmm-utils.cc	/^GetHmmAsFstSimple(std::vector<int32> phone_window,$/;"	f	namespace:kaldi
GetIlabelMapping	hmm/hmm-utils.cc	/^void GetIlabelMapping (const std::vector<std::vector<int32> > &ilabel_info_old,$/;"	f	namespace:kaldi
GetPdfToTransitionIdTransducer	hmm/hmm-utils.cc	/^fst::VectorFst<fst::StdArc> *GetPdfToTransitionIdTransducer(const TransitionModel &trans_model) {$/;"	f	namespace:kaldi
GetScaledTransitionLogProb	hmm/hmm-utils.cc	/^static BaseFloat GetScaledTransitionLogProb(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
IsReordered	hmm/hmm-utils.cc	/^static bool IsReordered(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
Result	hmm/hmm-utils.cc	/^  typedef int32 Result;$/;"	t	class:kaldi::TidToTstateMapper	file:
SplitToPhones	hmm/hmm-utils.cc	/^bool SplitToPhones(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
SplitToPhonesInternal	hmm/hmm-utils.cc	/^static bool SplitToPhonesInternal(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
TidToTstateMapper	hmm/hmm-utils.cc	/^  TidToTstateMapper(const TransitionModel &trans_model,$/;"	f	class:kaldi::TidToTstateMapper
TidToTstateMapper	hmm/hmm-utils.cc	/^class TidToTstateMapper {$/;"	c	namespace:kaldi	file:
disambig_syms_	hmm/hmm-utils.cc	/^  const std::vector<int32> &disambig_syms_;  \/\/ sorted.$/;"	m	class:kaldi::TidToTstateMapper	file:
kaldi	hmm/hmm-utils.cc	/^namespace kaldi {$/;"	n	file:
operator ()	hmm/hmm-utils.cc	/^  int32 operator() (int32 label) const {$/;"	f	class:kaldi::TidToTstateMapper
trans_model_	hmm/hmm-utils.cc	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::TidToTstateMapper	file:
HTransducerConfig	hmm/hmm-utils.h	/^  HTransducerConfig():$/;"	f	struct:kaldi::HTransducerConfig
HTransducerConfig	hmm/hmm-utils.h	/^struct HTransducerConfig {$/;"	s	namespace:kaldi
HmmCacheHash	hmm/hmm-utils.h	/^struct HmmCacheHash {$/;"	s	namespace:kaldi
HmmCacheType	hmm/hmm-utils.h	/^                      HmmCacheHash> HmmCacheType;$/;"	t	namespace:kaldi
KALDI_HMM_HMM_UTILS_H_	hmm/hmm-utils.h	21;"	d
Register	hmm/hmm-utils.h	/^  void Register (OptionsItf *po) {$/;"	f	struct:kaldi::HTransducerConfig
kaldi	hmm/hmm-utils.h	/^namespace kaldi {$/;"	n
operator ()	hmm/hmm-utils.h	/^  int operator () (const std::pair<int32, std::vector<int32> >&p) const {$/;"	f	struct:kaldi::HmmCacheHash
push_delta	hmm/hmm-utils.h	/^  BaseFloat push_delta;$/;"	m	struct:kaldi::HTransducerConfig
push_weights	hmm/hmm-utils.h	/^  bool push_weights;$/;"	m	struct:kaldi::HTransducerConfig
reverse	hmm/hmm-utils.h	/^  bool reverse;$/;"	m	struct:kaldi::HTransducerConfig
transition_scale	hmm/hmm-utils.h	/^  BaseFloat transition_scale;$/;"	m	struct:kaldi::HTransducerConfig
TestVectorToPosteriorEntry	hmm/posterior-test.cc	/^void TestVectorToPosteriorEntry() {$/;"	f	namespace:kaldi
kaldi	hmm/posterior-test.cc	/^namespace kaldi {$/;"	n	file:
main	hmm/posterior-test.cc	/^int main() {$/;"	f
AlignmentToPosterior	hmm/posterior.cc	/^void AlignmentToPosterior(const std::vector<int32> &ali,$/;"	f	namespace:kaldi
ComparePosteriorByPdfs	hmm/posterior.cc	/^  ComparePosteriorByPdfs(const TransitionModel &tmodel): tmodel_(&tmodel) {}$/;"	f	struct:kaldi::ComparePosteriorByPdfs
ComparePosteriorByPdfs	hmm/posterior.cc	/^struct ComparePosteriorByPdfs {$/;"	s	namespace:kaldi	file:
CompareReverseSecond	hmm/posterior.cc	/^struct CompareReverseSecond {$/;"	s	namespace:kaldi	file:
ConvertPosteriorToPdfs	hmm/posterior.cc	/^void ConvertPosteriorToPdfs(const TransitionModel &tmodel,$/;"	f	namespace:kaldi
ConvertPosteriorToPhones	hmm/posterior.cc	/^void ConvertPosteriorToPhones(const TransitionModel &tmodel,$/;"	f	namespace:kaldi
MergePosteriors	hmm/posterior.cc	/^int32 MergePosteriors(const Posterior &post1,$/;"	f	namespace:kaldi
PosteriorEntriesAreDisjoint	hmm/posterior.cc	/^bool PosteriorEntriesAreDisjoint($/;"	f	namespace:kaldi
Read	hmm/posterior.cc	/^bool GaussPostHolder::Read(std::istream &is) {$/;"	f	class:kaldi::GaussPostHolder
Read	hmm/posterior.cc	/^bool PosteriorHolder::Read(std::istream &is) {$/;"	f	class:kaldi::PosteriorHolder
ScalePosterior	hmm/posterior.cc	/^void ScalePosterior(BaseFloat scale, Posterior *post) {$/;"	f	namespace:kaldi
SortPosteriorByPdfs	hmm/posterior.cc	/^void SortPosteriorByPdfs(const TransitionModel &tmodel,$/;"	f	namespace:kaldi
TotalPosterior	hmm/posterior.cc	/^BaseFloat TotalPosterior(const Posterior &post) {$/;"	f	namespace:kaldi
VectorToPosteriorEntry	hmm/posterior.cc	/^BaseFloat VectorToPosteriorEntry($/;"	f	namespace:kaldi
WeightSilencePost	hmm/posterior.cc	/^void WeightSilencePost(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
WeightSilencePostDistributed	hmm/posterior.cc	/^void WeightSilencePostDistributed(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
Write	hmm/posterior.cc	/^bool GaussPostHolder::Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::GaussPostHolder
Write	hmm/posterior.cc	/^bool PosteriorHolder::Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::PosteriorHolder
kaldi	hmm/posterior.cc	/^namespace kaldi {$/;"	n	file:
operator ()	hmm/posterior.cc	/^  bool operator() (const std::pair<int32, BaseFloat> &a,$/;"	f	struct:kaldi::ComparePosteriorByPdfs
operator ()	hmm/posterior.cc	/^  bool operator() (const std::pair<int32, BaseFloat> &a,$/;"	f	struct:kaldi::CompareReverseSecond
tmodel_	hmm/posterior.cc	/^  const TransitionModel *tmodel_;$/;"	m	struct:kaldi::ComparePosteriorByPdfs	file:
Clear	hmm/posterior.h	/^  void Clear() {  GaussPost tmp;  std::swap(tmp, t_); }$/;"	f	class:kaldi::GaussPostHolder
Clear	hmm/posterior.h	/^  void Clear() { Posterior tmp; std::swap(tmp, t_); }$/;"	f	class:kaldi::PosteriorHolder
GaussPost	hmm/posterior.h	/^typedef std::vector<std::vector<std::pair<int32, Vector<BaseFloat> > > > GaussPost;$/;"	t	namespace:kaldi
GaussPostHolder	hmm/posterior.h	/^  GaussPostHolder() { }$/;"	f	class:kaldi::GaussPostHolder
GaussPostHolder	hmm/posterior.h	/^class GaussPostHolder {$/;"	c	namespace:kaldi
GaussPostWriter	hmm/posterior.h	/^typedef TableWriter<GaussPostHolder> GaussPostWriter;$/;"	t	namespace:kaldi
IsReadInBinary	hmm/posterior.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::GaussPostHolder
IsReadInBinary	hmm/posterior.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::PosteriorHolder
KALDI_HMM_POSTERIOR_H_	hmm/posterior.h	24;"	d
Posterior	hmm/posterior.h	/^typedef std::vector<std::vector<std::pair<int32, BaseFloat> > > Posterior;$/;"	t	namespace:kaldi
PosteriorHolder	hmm/posterior.h	/^  PosteriorHolder() { }$/;"	f	class:kaldi::PosteriorHolder
PosteriorHolder	hmm/posterior.h	/^class PosteriorHolder {$/;"	c	namespace:kaldi
PosteriorWriter	hmm/posterior.h	/^typedef TableWriter<PosteriorHolder> PosteriorWriter;$/;"	t	namespace:kaldi
RandomAccessGaussPostReader	hmm/posterior.h	/^typedef RandomAccessTableReader<GaussPostHolder> RandomAccessGaussPostReader;$/;"	t	namespace:kaldi
RandomAccessPosteriorReader	hmm/posterior.h	/^typedef RandomAccessTableReader<PosteriorHolder> RandomAccessPosteriorReader;$/;"	t	namespace:kaldi
SequentialGaussPostReader	hmm/posterior.h	/^typedef SequentialTableReader<GaussPostHolder> SequentialGaussPostReader;$/;"	t	namespace:kaldi
SequentialPosteriorReader	hmm/posterior.h	/^typedef SequentialTableReader<PosteriorHolder> SequentialPosteriorReader;$/;"	t	namespace:kaldi
T	hmm/posterior.h	/^  typedef GaussPost T;$/;"	t	class:kaldi::GaussPostHolder
T	hmm/posterior.h	/^  typedef Posterior T;$/;"	t	class:kaldi::PosteriorHolder
Value	hmm/posterior.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::GaussPostHolder
Value	hmm/posterior.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::PosteriorHolder
kaldi	hmm/posterior.h	/^namespace kaldi {$/;"	n
t_	hmm/posterior.h	/^  T t_;$/;"	m	class:kaldi::GaussPostHolder
t_	hmm/posterior.h	/^  T t_;$/;"	m	class:kaldi::PosteriorHolder
TestTransitionModel	hmm/transition-model-test.cc	/^void TestTransitionModel() {$/;"	f	namespace:kaldi
kaldi	hmm/transition-model-test.cc	/^namespace kaldi {$/;"	n	file:
main	hmm/transition-model-test.cc	/^int main() {$/;"	f
Check	hmm/transition-model.cc	/^void TransitionModel::Check() const {$/;"	f	class:kaldi::TransitionModel
Compatible	hmm/transition-model.cc	/^bool TransitionModel::Compatible(const TransitionModel &other) const {$/;"	f	class:kaldi::TransitionModel
ComputeDerived	hmm/transition-model.cc	/^void TransitionModel::ComputeDerived() {$/;"	f	class:kaldi::TransitionModel
ComputeDerivedOfProbs	hmm/transition-model.cc	/^void TransitionModel::ComputeDerivedOfProbs() {$/;"	f	class:kaldi::TransitionModel
ComputeTriples	hmm/transition-model.cc	/^void TransitionModel::ComputeTriples(const ContextDependency &ctx_dep) {$/;"	f	class:kaldi::TransitionModel
GetNonSelfLoopLogProb	hmm/transition-model.cc	/^BaseFloat TransitionModel::GetNonSelfLoopLogProb(int32 trans_state) const {$/;"	f	class:kaldi::TransitionModel
GetPdfsForPhones	hmm/transition-model.cc	/^bool GetPdfsForPhones(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
GetPhonesForPdfs	hmm/transition-model.cc	/^bool GetPhonesForPdfs(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
GetTransitionLogProb	hmm/transition-model.cc	/^BaseFloat TransitionModel::GetTransitionLogProb(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
GetTransitionLogProbIgnoringSelfLoops	hmm/transition-model.cc	/^BaseFloat TransitionModel::GetTransitionLogProbIgnoringSelfLoops(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
GetTransitionProb	hmm/transition-model.cc	/^BaseFloat TransitionModel::GetTransitionProb(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
InitializeProbs	hmm/transition-model.cc	/^void TransitionModel::InitializeProbs() {$/;"	f	class:kaldi::TransitionModel
IsFinal	hmm/transition-model.cc	/^bool TransitionModel::IsFinal(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
IsSelfLoop	hmm/transition-model.cc	/^bool TransitionModel::IsSelfLoop(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
MapUpdate	hmm/transition-model.cc	/^void TransitionModel::MapUpdate(const Vector<double> &stats,  $/;"	f	class:kaldi::TransitionModel
MapUpdateShared	hmm/transition-model.cc	/^void TransitionModel::MapUpdateShared(const Vector<double> &stats,$/;"	f	class:kaldi::TransitionModel
MleUpdate	hmm/transition-model.cc	/^void TransitionModel::MleUpdate(const Vector<double> &stats,  $/;"	f	class:kaldi::TransitionModel
MleUpdateShared	hmm/transition-model.cc	/^void TransitionModel::MleUpdateShared(const Vector<double> &stats,$/;"	f	class:kaldi::TransitionModel
NumPhones	hmm/transition-model.cc	/^int32 TransitionModel::NumPhones() const {$/;"	f	class:kaldi::TransitionModel
NumTransitionIndices	hmm/transition-model.cc	/^int32 TransitionModel::NumTransitionIndices(int32 trans_state) const {$/;"	f	class:kaldi::TransitionModel
PairToTransitionId	hmm/transition-model.cc	/^int32 TransitionModel::PairToTransitionId(int32 trans_state, int32 trans_index) const {$/;"	f	class:kaldi::TransitionModel
Print	hmm/transition-model.cc	/^void TransitionModel::Print(std::ostream &os,$/;"	f	class:kaldi::TransitionModel
Read	hmm/transition-model.cc	/^void TransitionModel::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::TransitionModel
SelfLoopOf	hmm/transition-model.cc	/^int32 TransitionModel::SelfLoopOf(int32 trans_state) const {  \/\/ returns the self-loop transition-id,$/;"	f	class:kaldi::TransitionModel
TransitionIdToHmmState	hmm/transition-model.cc	/^int32 TransitionModel::TransitionIdToHmmState(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
TransitionIdToPdfClass	hmm/transition-model.cc	/^int32 TransitionModel::TransitionIdToPdfClass(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
TransitionIdToPhone	hmm/transition-model.cc	/^int32 TransitionModel::TransitionIdToPhone(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
TransitionIdToTransitionIndex	hmm/transition-model.cc	/^int32 TransitionModel::TransitionIdToTransitionIndex(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
TransitionIdToTransitionState	hmm/transition-model.cc	/^int32 TransitionModel::TransitionIdToTransitionState(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
TransitionModel	hmm/transition-model.cc	/^TransitionModel::TransitionModel(const ContextDependency &ctx_dep,$/;"	f	class:kaldi::TransitionModel
TransitionStateToHmmState	hmm/transition-model.cc	/^int32 TransitionModel::TransitionStateToHmmState(int32 trans_state) const {$/;"	f	class:kaldi::TransitionModel
TransitionStateToPdf	hmm/transition-model.cc	/^int32 TransitionModel::TransitionStateToPdf(int32 trans_state) const {$/;"	f	class:kaldi::TransitionModel
TransitionStateToPhone	hmm/transition-model.cc	/^int32 TransitionModel::TransitionStateToPhone(int32 trans_state) const {$/;"	f	class:kaldi::TransitionModel
TripleToTransitionState	hmm/transition-model.cc	/^int32 TransitionModel::TripleToTransitionState(int32 phone, int32 hmm_state, int32 pdf) const {$/;"	f	class:kaldi::TransitionModel
Write	hmm/transition-model.cc	/^void TransitionModel::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::TransitionModel
kaldi	hmm/transition-model.cc	/^namespace kaldi {$/;"	n	file:
Accumulate	hmm/transition-model.h	/^  void Accumulate(BaseFloat prob, int32 trans_id, Vector<double> *stats) const {$/;"	f	class:kaldi::TransitionModel
GetPhones	hmm/transition-model.h	/^  const std::vector<int32> &GetPhones() const { return topo_.GetPhones(); }$/;"	f	class:kaldi::TransitionModel
GetTopo	hmm/transition-model.h	/^  const HmmTopology &GetTopo() const { return topo_; }$/;"	f	class:kaldi::TransitionModel
InitStats	hmm/transition-model.h	/^  void InitStats(Vector<double> *stats) const { stats->Resize(NumTransitionIds()+1); }$/;"	f	class:kaldi::TransitionModel
KALDI_HMM_TRANSITION_MODEL_H_	hmm/transition-model.h	22;"	d
MapTransitionUpdateConfig	hmm/transition-model.h	/^  MapTransitionUpdateConfig(): tau(5.0), share_for_pdfs(false) { }$/;"	f	struct:kaldi::MapTransitionUpdateConfig
MapTransitionUpdateConfig	hmm/transition-model.h	/^struct MapTransitionUpdateConfig {$/;"	s	namespace:kaldi
MleTransitionUpdateConfig	hmm/transition-model.h	/^  MleTransitionUpdateConfig(BaseFloat floor = 0.01,$/;"	f	struct:kaldi::MleTransitionUpdateConfig
MleTransitionUpdateConfig	hmm/transition-model.h	/^struct MleTransitionUpdateConfig {$/;"	s	namespace:kaldi
NumPdfs	hmm/transition-model.h	/^  int32 NumPdfs() const { return num_pdfs_; }$/;"	f	class:kaldi::TransitionModel
NumTransitionIds	hmm/transition-model.h	/^  inline int32 NumTransitionIds() const { return id2state_.size()-1; }$/;"	f	class:kaldi::TransitionModel
NumTransitionStates	hmm/transition-model.h	/^  int32 NumTransitionStates() const { return triples_.size(); }$/;"	f	class:kaldi::TransitionModel
Register	hmm/transition-model.h	/^  void Register (OptionsItf *po) {$/;"	f	struct:kaldi::MapTransitionUpdateConfig
Register	hmm/transition-model.h	/^  void Register (OptionsItf *po) {$/;"	f	struct:kaldi::MleTransitionUpdateConfig
TransitionIdToPdf	hmm/transition-model.h	/^inline int32 TransitionModel::TransitionIdToPdf(int32 trans_id) const {$/;"	f	class:kaldi::TransitionModel
TransitionModel	hmm/transition-model.h	/^  TransitionModel() { }$/;"	f	class:kaldi::TransitionModel
TransitionModel	hmm/transition-model.h	/^class TransitionModel {$/;"	c	namespace:kaldi
Triple	hmm/transition-model.h	/^    Triple() { }$/;"	f	struct:kaldi::TransitionModel::Triple
Triple	hmm/transition-model.h	/^    Triple(int32 phone, int32 hmm_state, int32 pdf):$/;"	f	struct:kaldi::TransitionModel::Triple
Triple	hmm/transition-model.h	/^  struct Triple {$/;"	s	class:kaldi::TransitionModel
floor	hmm/transition-model.h	/^  BaseFloat floor;$/;"	m	struct:kaldi::MleTransitionUpdateConfig
hmm_state	hmm/transition-model.h	/^    int32 hmm_state;$/;"	m	struct:kaldi::TransitionModel::Triple
id2state_	hmm/transition-model.h	/^  std::vector<int32> id2state_;$/;"	m	class:kaldi::TransitionModel
kaldi	hmm/transition-model.h	/^namespace kaldi {$/;"	n
log_probs_	hmm/transition-model.h	/^  Vector<BaseFloat> log_probs_;$/;"	m	class:kaldi::TransitionModel
mincount	hmm/transition-model.h	/^  BaseFloat mincount;$/;"	m	struct:kaldi::MleTransitionUpdateConfig
non_self_loop_log_probs_	hmm/transition-model.h	/^  Vector<BaseFloat> non_self_loop_log_probs_;$/;"	m	class:kaldi::TransitionModel
num_pdfs_	hmm/transition-model.h	/^  int32 num_pdfs_;$/;"	m	class:kaldi::TransitionModel
operator <	hmm/transition-model.h	/^    bool operator < (const Triple &other) const {$/;"	f	struct:kaldi::TransitionModel::Triple
operator ==	hmm/transition-model.h	/^    bool operator == (const Triple &other) const {$/;"	f	struct:kaldi::TransitionModel::Triple
pdf	hmm/transition-model.h	/^    int32 pdf;$/;"	m	struct:kaldi::TransitionModel::Triple
phone	hmm/transition-model.h	/^    int32 phone;$/;"	m	struct:kaldi::TransitionModel::Triple
share_for_pdfs	hmm/transition-model.h	/^  bool share_for_pdfs; \/\/ If true, share all transition parameters that have the same pdf.$/;"	m	struct:kaldi::MapTransitionUpdateConfig
share_for_pdfs	hmm/transition-model.h	/^  bool share_for_pdfs; \/\/ If true, share all transition parameters that have the same pdf.$/;"	m	struct:kaldi::MleTransitionUpdateConfig
state2id_	hmm/transition-model.h	/^  std::vector<int32> state2id_;$/;"	m	class:kaldi::TransitionModel
tau	hmm/transition-model.h	/^  BaseFloat tau;$/;"	m	struct:kaldi::MapTransitionUpdateConfig
topo_	hmm/transition-model.h	/^  HmmTopology topo_;$/;"	m	class:kaldi::TransitionModel
triples_	hmm/transition-model.h	/^  std::vector<Triple> triples_;$/;"	m	class:kaldi::TransitionModel
AccumulateTreeStats	hmm/tree-accu.cc	/^void AccumulateTreeStats(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
MapPhone	hmm/tree-accu.cc	/^static int32 MapPhone(const std::vector<int32> *phone_map,$/;"	f	namespace:kaldi
ReadPhoneMap	hmm/tree-accu.cc	/^void ReadPhoneMap(std::string phone_map_rxfilename,$/;"	f	namespace:kaldi
kaldi	hmm/tree-accu.cc	/^namespace kaldi {$/;"	n	file:
KALDI_HMM_TREE_ACCU_H_	hmm/tree-accu.h	21;"	d
kaldi	hmm/tree-accu.h	/^namespace kaldi {$/;"	n
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
Clusterable	itf/clusterable-itf.h	/^class Clusterable {$/;"	c	namespace:kaldi
KALDI_ITF_CLUSTERABLE_ITF_H_	itf/clusterable-itf.h	22;"	d
Scale	itf/clusterable-itf.h	/^  virtual void Scale(BaseFloat f) {$/;"	f	class:kaldi::Clusterable
kaldi	itf/clusterable-itf.h	/^namespace kaldi {$/;"	n
~Clusterable	itf/clusterable-itf.h	/^  virtual ~Clusterable() {}$/;"	f	class:kaldi::Clusterable
ContextDependencyInterface	itf/context-dep-itf.h	/^  ContextDependencyInterface() {}$/;"	f	class:kaldi::ContextDependencyInterface
ContextDependencyInterface	itf/context-dep-itf.h	/^class ContextDependencyInterface {$/;"	c	namespace:kaldi
KALDI_ITF_CONTEXT_DEP_ITF_H_	itf/context-dep-itf.h	22;"	d
kaldi	itf/context-dep-itf.h	/^namespace kaldi {$/;"	n
~ContextDependencyInterface	itf/context-dep-itf.h	/^  virtual ~ContextDependencyInterface() {};$/;"	f	class:kaldi::ContextDependencyInterface
DecodableInterface	itf/decodable-itf.h	/^class DecodableInterface {$/;"	c	namespace:kaldi
KALDI_ITF_DECODABLE_ITF_H_	itf/decodable-itf.h	23;"	d
NumFramesReady	itf/decodable-itf.h	/^  virtual int32 NumFramesReady() const {$/;"	f	class:kaldi::DecodableInterface
kaldi	itf/decodable-itf.h	/^namespace kaldi {$/;"	n
~DecodableInterface	itf/decodable-itf.h	/^  virtual ~DecodableInterface() {}$/;"	f	class:kaldi::DecodableInterface
KALDI_ITF_ONLINE_FEATURE_ITF_H_	itf/online-feature-itf.h	21;"	d
OnlineBaseFeature	itf/online-feature-itf.h	/^class OnlineBaseFeature: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineFeatureInterface	itf/online-feature-itf.h	/^class OnlineFeatureInterface {$/;"	c	namespace:kaldi
kaldi	itf/online-feature-itf.h	/^namespace kaldi {$/;"	n
~OnlineFeatureInterface	itf/online-feature-itf.h	/^  virtual ~OnlineFeatureInterface() { }  $/;"	f	class:kaldi::OnlineFeatureInterface
KALDI_ITF_OPTIMIZABLE_ITF_H_	itf/optimizable-itf.h	20;"	d
OptimizableInterface	itf/optimizable-itf.h	/^class OptimizableInterface {$/;"	c	namespace:kaldi
kaldi	itf/optimizable-itf.h	/^namespace kaldi {$/;"	n
~OptimizableInterface	itf/optimizable-itf.h	/^  virtual ~OptimizableInterface() {}$/;"	f	class:kaldi::OptimizableInterface
KALDI_ITF_OPTIONS_ITF_H_	itf/options-itf.h	21;"	d
OptionsItf	itf/options-itf.h	/^class OptionsItf {$/;"	c	namespace:kaldi
kaldi	itf/options-itf.h	/^namespace kaldi {$/;"	n
~OptionsItf	itf/options-itf.h	/^  virtual ~OptionsItf() {}$/;"	f	class:kaldi::OptionsItf
ADDLIBS	ivector/Makefile	/^ADDLIBS = ..\/gmm\/kaldi-gmm.a ..\/tree\/kaldi-tree.a ..\/transform\/kaldi-transform.a \\$/;"	m
LIBNAME	ivector/Makefile	/^LIBNAME = kaldi-ivector$/;"	m
OBJFILES	ivector/Makefile	/^OBJFILES = ivector-extractor.o voice-activity-detection.o plda.o logistic-regression.o$/;"	m
OPENFST_CXXFLAGS	ivector/Makefile	/^OPENFST_CXXFLAGS = $/;"	m
OPENFST_LDLIBS	ivector/Makefile	/^OPENFST_LDLIBS = $/;"	m
TESTFILES	ivector/Makefile	/^TESTFILES = ivector-extractor-test plda-test logistic-regression-test$/;"	m
TestIvectorExtraction	ivector/ivector-extractor-test.cc	/^void TestIvectorExtraction(const IvectorExtractor &extractor,$/;"	f	namespace:kaldi
TestIvectorExtractorIO	ivector/ivector-extractor-test.cc	/^void TestIvectorExtractorIO(const IvectorExtractor &extractor) {$/;"	f	namespace:kaldi
TestIvectorExtractorStatsIO	ivector/ivector-extractor-test.cc	/^void TestIvectorExtractorStatsIO(IvectorExtractorStats &stats) {$/;"	f	namespace:kaldi
UnitTestIvectorExtractor	ivector/ivector-extractor-test.cc	/^void UnitTestIvectorExtractor() {$/;"	f	namespace:kaldi
kaldi	ivector/ivector-extractor-test.cc	/^namespace kaldi {$/;"	n	file:
main	ivector/ivector-extractor-test.cc	/^int main() {$/;"	f
AccStats	ivector/ivector-extractor.cc	/^void IvectorExtractorUtteranceStats::AccStats($/;"	f	class:kaldi::IvectorExtractorUtteranceStats
AccStats	ivector/ivector-extractor.cc	/^void OnlineIvectorEstimationStats::AccStats($/;"	f	class:kaldi::OnlineIvectorEstimationStats
AccStatsForUtterance	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::AccStatsForUtterance($/;"	f	class:kaldi::IvectorExtractorStats
AccStatsForUtterance	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::AccStatsForUtterance($/;"	f	class:kaldi::IvectorExtractorStats
Add	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::Add(const IvectorExtractorStats &other) {$/;"	f	class:kaldi::IvectorExtractorStats
CheckDims	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::CheckDims(const IvectorExtractor &extractor) const {$/;"	f	class:kaldi::IvectorExtractorStats
CommitStatsForM	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::CommitStatsForM($/;"	f	class:kaldi::IvectorExtractorStats
CommitStatsForPrior	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::CommitStatsForPrior($/;"	f	class:kaldi::IvectorExtractorStats
CommitStatsForSigma	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::CommitStatsForSigma($/;"	f	class:kaldi::IvectorExtractorStats
CommitStatsForUtterance	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::CommitStatsForUtterance($/;"	f	class:kaldi::IvectorExtractorStats
CommitStatsForW	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::CommitStatsForW($/;"	f	class:kaldi::IvectorExtractorStats
CommitStatsForWPoint	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::CommitStatsForWPoint($/;"	f	class:kaldi::IvectorExtractorStats
ComputeDerivedVars	ivector/ivector-extractor.cc	/^void IvectorExtractor::ComputeDerivedVars() {$/;"	f	class:kaldi::IvectorExtractor
ComputeDerivedVars	ivector/ivector-extractor.cc	/^void IvectorExtractor::ComputeDerivedVars(int32 i) {$/;"	f	class:kaldi::IvectorExtractor
DefaultObjf	ivector/ivector-extractor.cc	/^double OnlineIvectorEstimationStats::DefaultObjf() const {$/;"	f	class:kaldi::OnlineIvectorEstimationStats
EstimateIvectorsOnline	ivector/ivector-extractor.cc	/^double EstimateIvectorsOnline($/;"	f	namespace:kaldi
FeatDim	ivector/ivector-extractor.cc	/^int32 IvectorExtractor::FeatDim() const {$/;"	f	class:kaldi::IvectorExtractor
FlushCache	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::FlushCache() {$/;"	f	class:kaldi::IvectorExtractorStats
GetAcousticAuxf	ivector/ivector-extractor.cc	/^double IvectorExtractor::GetAcousticAuxf($/;"	f	class:kaldi::IvectorExtractor
GetAcousticAuxfGconst	ivector/ivector-extractor.cc	/^double IvectorExtractor::GetAcousticAuxfGconst($/;"	f	class:kaldi::IvectorExtractor
GetAcousticAuxfMean	ivector/ivector-extractor.cc	/^double IvectorExtractor::GetAcousticAuxfMean($/;"	f	class:kaldi::IvectorExtractor
GetAcousticAuxfVariance	ivector/ivector-extractor.cc	/^double IvectorExtractor::GetAcousticAuxfVariance($/;"	f	class:kaldi::IvectorExtractor
GetAcousticAuxfWeight	ivector/ivector-extractor.cc	/^double IvectorExtractor::GetAcousticAuxfWeight($/;"	f	class:kaldi::IvectorExtractor
GetAuxf	ivector/ivector-extractor.cc	/^double IvectorExtractor::GetAuxf(const IvectorExtractorUtteranceStats &utt_stats,$/;"	f	class:kaldi::IvectorExtractor
GetIvector	ivector/ivector-extractor.cc	/^void OnlineIvectorEstimationStats::GetIvector($/;"	f	class:kaldi::OnlineIvectorEstimationStats
GetIvectorDistMean	ivector/ivector-extractor.cc	/^void IvectorExtractor::GetIvectorDistMean($/;"	f	class:kaldi::IvectorExtractor
GetIvectorDistPrior	ivector/ivector-extractor.cc	/^void IvectorExtractor::GetIvectorDistPrior($/;"	f	class:kaldi::IvectorExtractor
GetIvectorDistWeight	ivector/ivector-extractor.cc	/^void IvectorExtractor::GetIvectorDistWeight($/;"	f	class:kaldi::IvectorExtractor
GetIvectorDistribution	ivector/ivector-extractor.cc	/^void IvectorExtractor::GetIvectorDistribution($/;"	f	class:kaldi::IvectorExtractor
GetOrthogonalIvectorTransform	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::GetOrthogonalIvectorTransform($/;"	f	class:kaldi::IvectorExtractorStats
GetPriorAuxf	ivector/ivector-extractor.cc	/^double IvectorExtractor::GetPriorAuxf($/;"	f	class:kaldi::IvectorExtractor
InvertWithFlooring	ivector/ivector-extractor.cc	/^void IvectorExtractor::InvertWithFlooring(const SpMatrix<double> &inverse_var,$/;"	f	class:kaldi::IvectorExtractor
IvectorDim	ivector/ivector-extractor.cc	/^int32 IvectorExtractor::IvectorDim() const {$/;"	f	class:kaldi::IvectorExtractor
IvectorExtractor	ivector/ivector-extractor.cc	/^IvectorExtractor::IvectorExtractor($/;"	f	class:kaldi::IvectorExtractor
IvectorExtractorComputeDerivedVarsClass	ivector/ivector-extractor.cc	/^  IvectorExtractorComputeDerivedVarsClass(IvectorExtractor *extractor,$/;"	f	class:kaldi::IvectorExtractorComputeDerivedVarsClass
IvectorExtractorComputeDerivedVarsClass	ivector/ivector-extractor.cc	/^class IvectorExtractorComputeDerivedVarsClass {$/;"	c	namespace:kaldi	file:
IvectorExtractorStats	ivector/ivector-extractor.cc	/^IvectorExtractorStats::IvectorExtractorStats ($/;"	f	class:kaldi::IvectorExtractorStats
IvectorExtractorStats	ivector/ivector-extractor.cc	/^IvectorExtractorStats::IvectorExtractorStats($/;"	f	class:kaldi::IvectorExtractorStats
IvectorExtractorUpdateProjectionClass	ivector/ivector-extractor.cc	/^  IvectorExtractorUpdateProjectionClass(const IvectorExtractorStats &stats,$/;"	f	class:kaldi::IvectorExtractorUpdateProjectionClass
IvectorExtractorUpdateProjectionClass	ivector/ivector-extractor.cc	/^class IvectorExtractorUpdateProjectionClass {$/;"	c	namespace:kaldi	file:
IvectorExtractorUpdateWeightClass	ivector/ivector-extractor.cc	/^  IvectorExtractorUpdateWeightClass(const IvectorExtractorStats &stats,$/;"	f	class:kaldi::IvectorExtractorUpdateWeightClass
IvectorExtractorUpdateWeightClass	ivector/ivector-extractor.cc	/^class IvectorExtractorUpdateWeightClass {$/;"	c	namespace:kaldi	file:
NumGauss	ivector/ivector-extractor.cc	/^int32 IvectorExtractor::NumGauss() const {$/;"	f	class:kaldi::IvectorExtractor
Objf	ivector/ivector-extractor.cc	/^double OnlineIvectorEstimationStats::Objf($/;"	f	class:kaldi::OnlineIvectorEstimationStats
ObjfChange	ivector/ivector-extractor.cc	/^double OnlineIvectorEstimationStats::ObjfChange($/;"	f	class:kaldi::OnlineIvectorEstimationStats
OnlineIvectorEstimationStats	ivector/ivector-extractor.cc	/^OnlineIvectorEstimationStats::OnlineIvectorEstimationStats($/;"	f	class:kaldi::OnlineIvectorEstimationStats
OnlineIvectorEstimationStats	ivector/ivector-extractor.cc	/^OnlineIvectorEstimationStats::OnlineIvectorEstimationStats(int32 ivector_dim,$/;"	f	class:kaldi::OnlineIvectorEstimationStats
PriorDiagnostics	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::PriorDiagnostics(double old_prior_offset) const {$/;"	f	class:kaldi::IvectorExtractorStats
Read	ivector/ivector-extractor.cc	/^void IvectorExtractor::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::IvectorExtractor
Read	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::Read(std::istream &is, bool binary, bool add) {$/;"	f	class:kaldi::IvectorExtractorStats
Read	ivector/ivector-extractor.cc	/^void OnlineIvectorEstimationStats::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::OnlineIvectorEstimationStats
Scale	ivector/ivector-extractor.cc	/^void IvectorExtractorUtteranceStats::Scale(double scale) {$/;"	f	class:kaldi::IvectorExtractorUtteranceStats
Scale	ivector/ivector-extractor.cc	/^void OnlineIvectorEstimationStats::Scale(double scale) {$/;"	f	class:kaldi::OnlineIvectorEstimationStats
TransformIvectors	ivector/ivector-extractor.cc	/^void IvectorExtractor::TransformIvectors(const MatrixBase<double> &T,$/;"	f	class:kaldi::IvectorExtractor
Update	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::Update($/;"	f	class:kaldi::IvectorExtractorStats
UpdatePrior	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::UpdatePrior($/;"	f	class:kaldi::IvectorExtractorStats
UpdateProjection	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::UpdateProjection($/;"	f	class:kaldi::IvectorExtractorStats
UpdateProjections	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::UpdateProjections($/;"	f	class:kaldi::IvectorExtractorStats
UpdateVariances	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::UpdateVariances($/;"	f	class:kaldi::IvectorExtractorStats
UpdateWeight	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::UpdateWeight($/;"	f	class:kaldi::IvectorExtractorStats
UpdateWeights	ivector/ivector-extractor.cc	/^double IvectorExtractorStats::UpdateWeights($/;"	f	class:kaldi::IvectorExtractorStats
Write	ivector/ivector-extractor.cc	/^void IvectorExtractor::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::IvectorExtractor
Write	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::IvectorExtractorStats
Write	ivector/ivector-extractor.cc	/^void IvectorExtractorStats::Write(std::ostream &os, bool binary) {$/;"	f	class:kaldi::IvectorExtractorStats
Write	ivector/ivector-extractor.cc	/^void OnlineIvectorEstimationStats::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::OnlineIvectorEstimationStats
extractor_	ivector/ivector-extractor.cc	/^  IvectorExtractor *extractor_;$/;"	m	class:kaldi::IvectorExtractorComputeDerivedVarsClass	file:
extractor_	ivector/ivector-extractor.cc	/^  IvectorExtractor *extractor_;$/;"	m	class:kaldi::IvectorExtractorUpdateProjectionClass	file:
extractor_	ivector/ivector-extractor.cc	/^  IvectorExtractor *extractor_;$/;"	m	class:kaldi::IvectorExtractorUpdateWeightClass	file:
i_	ivector/ivector-extractor.cc	/^  int32 i_;$/;"	m	class:kaldi::IvectorExtractorComputeDerivedVarsClass	file:
i_	ivector/ivector-extractor.cc	/^  int32 i_;$/;"	m	class:kaldi::IvectorExtractorUpdateProjectionClass	file:
i_	ivector/ivector-extractor.cc	/^  int32 i_;$/;"	m	class:kaldi::IvectorExtractorUpdateWeightClass	file:
impr_	ivector/ivector-extractor.cc	/^  double impr_;$/;"	m	class:kaldi::IvectorExtractorUpdateProjectionClass	file:
impr_	ivector/ivector-extractor.cc	/^  double impr_;$/;"	m	class:kaldi::IvectorExtractorUpdateWeightClass	file:
kaldi	ivector/ivector-extractor.cc	/^namespace kaldi {$/;"	n	file:
operator ()	ivector/ivector-extractor.cc	/^  void operator () () { extractor_->ComputeDerivedVars(i_); }$/;"	f	class:kaldi::IvectorExtractorComputeDerivedVarsClass
operator ()	ivector/ivector-extractor.cc	/^  void operator () () {$/;"	f	class:kaldi::IvectorExtractorUpdateProjectionClass
operator ()	ivector/ivector-extractor.cc	/^  void operator () () {$/;"	f	class:kaldi::IvectorExtractorUpdateWeightClass
opts_	ivector/ivector-extractor.cc	/^  const IvectorExtractorEstimationOptions &opts_;$/;"	m	class:kaldi::IvectorExtractorUpdateProjectionClass	file:
opts_	ivector/ivector-extractor.cc	/^  const IvectorExtractorEstimationOptions &opts_;$/;"	m	class:kaldi::IvectorExtractorUpdateWeightClass	file:
stats_	ivector/ivector-extractor.cc	/^  const IvectorExtractorStats &stats_;$/;"	m	class:kaldi::IvectorExtractorUpdateProjectionClass	file:
stats_	ivector/ivector-extractor.cc	/^  const IvectorExtractorStats &stats_;$/;"	m	class:kaldi::IvectorExtractorUpdateWeightClass	file:
tot_impr_	ivector/ivector-extractor.cc	/^  double *tot_impr_;$/;"	m	class:kaldi::IvectorExtractorUpdateProjectionClass	file:
tot_impr_	ivector/ivector-extractor.cc	/^  double *tot_impr_;$/;"	m	class:kaldi::IvectorExtractorUpdateWeightClass	file:
~IvectorExtractorUpdateProjectionClass	ivector/ivector-extractor.cc	/^  ~IvectorExtractorUpdateProjectionClass() { *tot_impr_ += impr_; }$/;"	f	class:kaldi::IvectorExtractorUpdateProjectionClass
~IvectorExtractorUpdateWeightClass	ivector/ivector-extractor.cc	/^  ~IvectorExtractorUpdateWeightClass() { *tot_impr_ += impr_; }$/;"	f	class:kaldi::IvectorExtractorUpdateWeightClass
AuxfPerFrame	ivector/ivector-extractor.h	/^  double AuxfPerFrame() { return tot_auxf_ \/ gamma_.Sum(); }$/;"	f	class:kaldi::IvectorExtractorStats
Count	ivector/ivector-extractor.h	/^  double Count() const { return num_frames_; }$/;"	f	class:kaldi::OnlineIvectorEstimationStats
G_	ivector/ivector-extractor.h	/^  Matrix<double> G_;$/;"	m	class:kaldi::IvectorExtractorStats
IvectorDependentWeights	ivector/ivector-extractor.h	/^  bool IvectorDependentWeights() const { return w_.NumRows() != 0; }$/;"	f	class:kaldi::IvectorExtractor
IvectorDim	ivector/ivector-extractor.h	/^  int32 IvectorDim() const { return linear_term_.Dim(); }$/;"	f	class:kaldi::OnlineIvectorEstimationStats
IvectorEstimationOptions	ivector/ivector-extractor.h	/^  IvectorEstimationOptions(): acoustic_weight(1.0), max_count(0.0) {}$/;"	f	struct:kaldi::IvectorEstimationOptions
IvectorEstimationOptions	ivector/ivector-extractor.h	/^struct IvectorEstimationOptions {$/;"	s	namespace:kaldi
IvectorExtractor	ivector/ivector-extractor.h	/^  IvectorExtractor(): prior_offset_(0.0) { }$/;"	f	class:kaldi::IvectorExtractor
IvectorExtractor	ivector/ivector-extractor.h	/^class IvectorExtractor {$/;"	c	namespace:kaldi
IvectorExtractorEstimationOptions	ivector/ivector-extractor.h	/^  IvectorExtractorEstimationOptions(): variance_floor_factor(0.1),$/;"	f	struct:kaldi::IvectorExtractorEstimationOptions
IvectorExtractorEstimationOptions	ivector/ivector-extractor.h	/^struct IvectorExtractorEstimationOptions {$/;"	s	namespace:kaldi
IvectorExtractorOptions	ivector/ivector-extractor.h	/^  IvectorExtractorOptions(): ivector_dim(400), num_iters(2),$/;"	f	struct:kaldi::IvectorExtractorOptions
IvectorExtractorOptions	ivector/ivector-extractor.h	/^struct IvectorExtractorOptions {$/;"	s	namespace:kaldi
IvectorExtractorStats	ivector/ivector-extractor.h	/^  IvectorExtractorStats(): tot_auxf_(0.0), R_num_cached_(0), num_ivectors_(0) { }$/;"	f	class:kaldi::IvectorExtractorStats
IvectorExtractorStats	ivector/ivector-extractor.h	/^class IvectorExtractorStats {$/;"	c	namespace:kaldi
IvectorExtractorStatsOptions	ivector/ivector-extractor.h	/^  IvectorExtractorStatsOptions(): update_variances(true),$/;"	f	struct:kaldi::IvectorExtractorStatsOptions
IvectorExtractorStatsOptions	ivector/ivector-extractor.h	/^struct IvectorExtractorStatsOptions {$/;"	s	namespace:kaldi
IvectorExtractorUtteranceStats	ivector/ivector-extractor.h	/^  IvectorExtractorUtteranceStats(int32 num_gauss, int32 feat_dim,$/;"	f	class:kaldi::IvectorExtractorUtteranceStats
IvectorExtractorUtteranceStats	ivector/ivector-extractor.h	/^class IvectorExtractorUtteranceStats {$/;"	c	namespace:kaldi
KALDI_IVECTOR_IVECTOR_EXTRACTOR_H_	ivector/ivector-extractor.h	20;"	d
M_	ivector/ivector-extractor.h	/^  std::vector<Matrix<double> > M_; $/;"	m	class:kaldi::IvectorExtractor
NumFrames	ivector/ivector-extractor.h	/^  double NumFrames() const { return num_frames_; }$/;"	f	class:kaldi::OnlineIvectorEstimationStats
NumFrames	ivector/ivector-extractor.h	/^  double NumFrames() { return gamma_.Sum(); }$/;"	f	class:kaldi::IvectorExtractorUtteranceStats
OnlineIvectorEstimationStats	ivector/ivector-extractor.h	/^class OnlineIvectorEstimationStats {$/;"	c	namespace:kaldi
PriorOffset	ivector/ivector-extractor.h	/^  double PriorOffset() const { return prior_offset_; }$/;"	f	class:kaldi::IvectorExtractor
PriorOffset	ivector/ivector-extractor.h	/^  double PriorOffset() const { return prior_offset_; }$/;"	f	class:kaldi::OnlineIvectorEstimationStats
Q_	ivector/ivector-extractor.h	/^  Matrix<double> Q_;$/;"	m	class:kaldi::IvectorExtractorStats
R_	ivector/ivector-extractor.h	/^  Matrix<double> R_;$/;"	m	class:kaldi::IvectorExtractorStats
R_cache_lock_	ivector/ivector-extractor.h	/^  Mutex R_cache_lock_; $/;"	m	class:kaldi::IvectorExtractorStats
R_gamma_cache_	ivector/ivector-extractor.h	/^  Matrix<double> R_gamma_cache_;$/;"	m	class:kaldi::IvectorExtractorStats
R_ivec_scatter_cache_	ivector/ivector-extractor.h	/^  Matrix<double> R_ivec_scatter_cache_;$/;"	m	class:kaldi::IvectorExtractorStats
R_lock_	ivector/ivector-extractor.h	/^  Mutex R_lock_; $/;"	m	class:kaldi::IvectorExtractorStats
R_num_cached_	ivector/ivector-extractor.h	/^  int32 R_num_cached_;$/;"	m	class:kaldi::IvectorExtractorStats
Register	ivector/ivector-extractor.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::IvectorEstimationOptions
Register	ivector/ivector-extractor.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::IvectorExtractorEstimationOptions
Register	ivector/ivector-extractor.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::IvectorExtractorOptions
Register	ivector/ivector-extractor.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::IvectorExtractorStatsOptions
S_	ivector/ivector-extractor.h	/^  std::vector< SpMatrix<double> > S_;$/;"	m	class:kaldi::IvectorExtractorStats
S_	ivector/ivector-extractor.h	/^  std::vector<SpMatrix<double> > S_; \/\/ 2nd-order stats, dimension [I][D][D], if$/;"	m	class:kaldi::IvectorExtractorUtteranceStats
Sigma_inv_	ivector/ivector-extractor.h	/^  std::vector<SpMatrix<double> > Sigma_inv_;$/;"	m	class:kaldi::IvectorExtractor
Sigma_inv_M_	ivector/ivector-extractor.h	/^  std::vector<Matrix<double> > Sigma_inv_M_;$/;"	m	class:kaldi::IvectorExtractor
U_	ivector/ivector-extractor.h	/^  Matrix<double> U_;$/;"	m	class:kaldi::IvectorExtractor
X_	ivector/ivector-extractor.h	/^  Matrix<double> X_; \/\/ first-order stats, dimension [I][D]$/;"	m	class:kaldi::IvectorExtractorUtteranceStats
Y_	ivector/ivector-extractor.h	/^  std::vector<Matrix<double> > Y_;$/;"	m	class:kaldi::IvectorExtractorStats
acoustic_weight	ivector/ivector-extractor.h	/^  double acoustic_weight;$/;"	m	struct:kaldi::IvectorEstimationOptions
cache_size	ivector/ivector-extractor.h	/^  int cache_size;$/;"	m	struct:kaldi::IvectorExtractorStatsOptions
compute_auxf	ivector/ivector-extractor.h	/^  bool compute_auxf;$/;"	m	struct:kaldi::IvectorExtractorStatsOptions
config_	ivector/ivector-extractor.h	/^  IvectorExtractorStatsOptions config_; \/\/\/ Caution: if we read from disk, this$/;"	m	class:kaldi::IvectorExtractorStats
diagonalize	ivector/ivector-extractor.h	/^  bool diagonalize;$/;"	m	struct:kaldi::IvectorExtractorEstimationOptions
gamma_	ivector/ivector-extractor.h	/^  Vector<double> gamma_; \/\/ zeroth-order stats (summed posteriors), dimension [I]$/;"	m	class:kaldi::IvectorExtractorUtteranceStats
gamma_	ivector/ivector-extractor.h	/^  Vector<double> gamma_;$/;"	m	class:kaldi::IvectorExtractorStats
gamma_Y_lock_	ivector/ivector-extractor.h	/^  Mutex gamma_Y_lock_; $/;"	m	class:kaldi::IvectorExtractorStats
gaussian_min_count	ivector/ivector-extractor.h	/^  double gaussian_min_count;$/;"	m	struct:kaldi::IvectorExtractorEstimationOptions
gconsts_	ivector/ivector-extractor.h	/^  Vector<double> gconsts_;$/;"	m	class:kaldi::IvectorExtractor
ivector_dim	ivector/ivector-extractor.h	/^  int ivector_dim;$/;"	m	struct:kaldi::IvectorExtractorOptions
ivector_scatter_	ivector/ivector-extractor.h	/^  SpMatrix<double> ivector_scatter_;$/;"	m	class:kaldi::IvectorExtractorStats
ivector_sum_	ivector/ivector-extractor.h	/^  Vector<double> ivector_sum_;$/;"	m	class:kaldi::IvectorExtractorStats
kaldi	ivector/ivector-extractor.h	/^namespace kaldi {$/;"	n
linear_term_	ivector/ivector-extractor.h	/^  Vector<double> linear_term_;$/;"	m	class:kaldi::OnlineIvectorEstimationStats
max_count	ivector/ivector-extractor.h	/^  double max_count;$/;"	m	struct:kaldi::IvectorEstimationOptions
max_count_	ivector/ivector-extractor.h	/^  double max_count_;$/;"	m	class:kaldi::OnlineIvectorEstimationStats
num_frames_	ivector/ivector-extractor.h	/^  double num_frames_;  \/\/ num frames (weighted, if applicable).$/;"	m	class:kaldi::OnlineIvectorEstimationStats
num_iters	ivector/ivector-extractor.h	/^  int num_iters;$/;"	m	struct:kaldi::IvectorExtractorOptions
num_ivectors_	ivector/ivector-extractor.h	/^  double num_ivectors_;$/;"	m	class:kaldi::IvectorExtractorStats
num_samples_for_weights	ivector/ivector-extractor.h	/^  int32 num_samples_for_weights;$/;"	m	struct:kaldi::IvectorExtractorStatsOptions
num_threads	ivector/ivector-extractor.h	/^  int32 num_threads;$/;"	m	struct:kaldi::IvectorExtractorEstimationOptions
operator =	ivector/ivector-extractor.h	/^  inline OnlineIvectorEstimationStats &operator=(const OnlineIvectorEstimationStats &other) {$/;"	f	class:kaldi::OnlineIvectorEstimationStats
prior_offset_	ivector/ivector-extractor.h	/^  double prior_offset_;$/;"	m	class:kaldi::IvectorExtractor
prior_offset_	ivector/ivector-extractor.h	/^  double prior_offset_;$/;"	m	class:kaldi::OnlineIvectorEstimationStats
prior_stats_lock_	ivector/ivector-extractor.h	/^  Mutex prior_stats_lock_;$/;"	m	class:kaldi::IvectorExtractorStats
quadratic_term_	ivector/ivector-extractor.h	/^  SpMatrix<double> quadratic_term_;$/;"	m	class:kaldi::OnlineIvectorEstimationStats
tot_auxf_	ivector/ivector-extractor.h	/^  double tot_auxf_;$/;"	m	class:kaldi::IvectorExtractorStats
update_variances	ivector/ivector-extractor.h	/^  bool update_variances;$/;"	m	struct:kaldi::IvectorExtractorStatsOptions
use_weights	ivector/ivector-extractor.h	/^  bool use_weights;$/;"	m	struct:kaldi::IvectorExtractorOptions
variance_floor_factor	ivector/ivector-extractor.h	/^  double variance_floor_factor;$/;"	m	struct:kaldi::IvectorExtractorEstimationOptions
variance_stats_lock_	ivector/ivector-extractor.h	/^  Mutex variance_stats_lock_;$/;"	m	class:kaldi::IvectorExtractorStats
w_	ivector/ivector-extractor.h	/^  Matrix<double> w_;$/;"	m	class:kaldi::IvectorExtractor
w_vec_	ivector/ivector-extractor.h	/^  Vector<double> w_vec_;$/;"	m	class:kaldi::IvectorExtractor
weight_stats_lock_	ivector/ivector-extractor.h	/^  Mutex weight_stats_lock_;$/;"	m	class:kaldi::IvectorExtractorStats
UnitTestPosteriors	ivector/logistic-regression-test.cc	/^void UnitTestPosteriors() {$/;"	f	namespace:kaldi
UnitTestTrain	ivector/logistic-regression-test.cc	/^void UnitTestTrain() {$/;"	f	namespace:kaldi
kaldi	ivector/logistic-regression-test.cc	/^namespace kaldi {$/;"	n	file:
main	ivector/logistic-regression-test.cc	/^int main() {$/;"	f
DoStep	ivector/logistic-regression.cc	/^BaseFloat LogisticRegression::DoStep(const Matrix<BaseFloat> &xs,$/;"	f	class:kaldi::LogisticRegression
GetLogPosteriors	ivector/logistic-regression.cc	/^void LogisticRegression::GetLogPosteriors(const Matrix<BaseFloat> &xs,$/;"	f	class:kaldi::LogisticRegression
GetLogPosteriors	ivector/logistic-regression.cc	/^void LogisticRegression::GetLogPosteriors(const Vector<BaseFloat> &x,$/;"	f	class:kaldi::LogisticRegression
GetObjfAndGrad	ivector/logistic-regression.cc	/^BaseFloat LogisticRegression::GetObjfAndGrad($/;"	f	class:kaldi::LogisticRegression
MixUp	ivector/logistic-regression.cc	/^void LogisticRegression::MixUp(const std::vector<int32> &ys,$/;"	f	class:kaldi::LogisticRegression
Read	ivector/logistic-regression.cc	/^void LogisticRegression::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::LogisticRegression
ScalePriors	ivector/logistic-regression.cc	/^void LogisticRegression::ScalePriors(const Vector<BaseFloat> &scales) {$/;"	f	class:kaldi::LogisticRegression
SetWeights	ivector/logistic-regression.cc	/^void LogisticRegression::SetWeights(const Matrix<BaseFloat> &weights,$/;"	f	class:kaldi::LogisticRegression
Train	ivector/logistic-regression.cc	/^void LogisticRegression::Train(const Matrix<BaseFloat> &xs, $/;"	f	class:kaldi::LogisticRegression
TrainParameters	ivector/logistic-regression.cc	/^void LogisticRegression::TrainParameters(const Matrix<BaseFloat> &xs,$/;"	f	class:kaldi::LogisticRegression
Write	ivector/logistic-regression.cc	/^void LogisticRegression::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::LogisticRegression
kaldi	ivector/logistic-regression.cc	/^namespace kaldi {$/;"	n	file:
KALDI_IVECTOR_LOGISTIC_REGRESSION_H_	ivector/logistic-regression.h	21;"	d
LogisticRegression	ivector/logistic-regression.h	/^class LogisticRegression {$/;"	c	namespace:kaldi
LogisticRegressionConfig	ivector/logistic-regression.h	/^  LogisticRegressionConfig(): max_steps(20), mix_up(0), $/;"	f	struct:kaldi::LogisticRegressionConfig
LogisticRegressionConfig	ivector/logistic-regression.h	/^struct LogisticRegressionConfig {$/;"	s	namespace:kaldi
Register	ivector/logistic-regression.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::LogisticRegressionConfig
class_	ivector/logistic-regression.h	/^  std::vector<int32> class_;    $/;"	m	class:kaldi::LogisticRegression
kaldi	ivector/logistic-regression.h	/^namespace kaldi {$/;"	n
max_steps	ivector/logistic-regression.h	/^  int32 max_steps,$/;"	m	struct:kaldi::LogisticRegressionConfig
mix_up	ivector/logistic-regression.h	/^        mix_up;$/;"	m	struct:kaldi::LogisticRegressionConfig
normalizer	ivector/logistic-regression.h	/^  double normalizer,$/;"	m	struct:kaldi::LogisticRegressionConfig
power	ivector/logistic-regression.h	/^         power;$/;"	m	struct:kaldi::LogisticRegressionConfig
weights_	ivector/logistic-regression.h	/^  Matrix<BaseFloat> weights_;$/;"	m	class:kaldi::LogisticRegression
UnitTestPldaEstimation	ivector/plda-test.cc	/^void UnitTestPldaEstimation(int32 dim) {$/;"	f	namespace:kaldi
kaldi	ivector/plda-test.cc	/^namespace kaldi {$/;"	n	file:
main	ivector/plda-test.cc	/^int main() {$/;"	f
AddSamples	ivector/plda.cc	/^void PldaStats::AddSamples(double weight,$/;"	f	class:kaldi::PldaStats
AddStats	ivector/plda.cc	/^void PldaUnsupervisedAdaptor::AddStats(double weight,$/;"	f	class:kaldi::PldaUnsupervisedAdaptor
ComputeDerivedVars	ivector/plda.cc	/^void Plda::ComputeDerivedVars() {$/;"	f	class:kaldi::Plda
ComputeNormalizingTransform	ivector/plda.cc	/^static void ComputeNormalizingTransform(const SpMatrix<Real> &covar,$/;"	f	namespace:kaldi
ComputeObjf	ivector/plda.cc	/^double PldaEstimator::ComputeObjf() const {$/;"	f	class:kaldi::PldaEstimator
ComputeObjfPart1	ivector/plda.cc	/^double PldaEstimator::ComputeObjfPart1() const {$/;"	f	class:kaldi::PldaEstimator
ComputeObjfPart2	ivector/plda.cc	/^double PldaEstimator::ComputeObjfPart2() const {$/;"	f	class:kaldi::PldaEstimator
Estimate	ivector/plda.cc	/^void PldaEstimator::Estimate(const PldaEstimationConfig &config,$/;"	f	class:kaldi::PldaEstimator
EstimateFromStats	ivector/plda.cc	/^void PldaEstimator::EstimateFromStats() {$/;"	f	class:kaldi::PldaEstimator
EstimateOneIter	ivector/plda.cc	/^void PldaEstimator::EstimateOneIter() {$/;"	f	class:kaldi::PldaEstimator
GetOutput	ivector/plda.cc	/^void PldaEstimator::GetOutput(Plda *plda) {$/;"	f	class:kaldi::PldaEstimator
GetStatsFromClassMeans	ivector/plda.cc	/^void PldaEstimator::GetStatsFromClassMeans() {$/;"	f	class:kaldi::PldaEstimator
GetStatsFromIntraClass	ivector/plda.cc	/^void PldaEstimator::GetStatsFromIntraClass() {$/;"	f	class:kaldi::PldaEstimator
Init	ivector/plda.cc	/^void PldaStats::Init(int32 dim) {$/;"	f	class:kaldi::PldaStats
InitParameters	ivector/plda.cc	/^void PldaEstimator::InitParameters() {$/;"	f	class:kaldi::PldaEstimator
IsSorted	ivector/plda.cc	/^bool PldaStats::IsSorted() const {$/;"	f	class:kaldi::PldaStats
LogLikelihoodRatio	ivector/plda.cc	/^double Plda::LogLikelihoodRatio($/;"	f	class:kaldi::Plda
PldaEstimator	ivector/plda.cc	/^PldaEstimator::PldaEstimator(const PldaStats &stats):$/;"	f	class:kaldi::PldaEstimator
Read	ivector/plda.cc	/^void Plda::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::Plda
ResetPerIterStats	ivector/plda.cc	/^void PldaEstimator::ResetPerIterStats() {$/;"	f	class:kaldi::PldaEstimator
SmoothWithinClassCovariance	ivector/plda.cc	/^void Plda::SmoothWithinClassCovariance(double smoothing_factor) {$/;"	f	class:kaldi::Plda
TransformIvector	ivector/plda.cc	/^double Plda::TransformIvector(const PldaConfig &config,$/;"	f	class:kaldi::Plda
TransformIvector	ivector/plda.cc	/^float Plda::TransformIvector(const PldaConfig &config,$/;"	f	class:kaldi::Plda
UpdatePlda	ivector/plda.cc	/^void PldaUnsupervisedAdaptor::UpdatePlda(const PldaUnsupervisedAdaptorConfig &config,$/;"	f	class:kaldi::PldaUnsupervisedAdaptor
Write	ivector/plda.cc	/^void Plda::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::Plda
kaldi	ivector/plda.cc	/^namespace kaldi {$/;"	n	file:
~PldaStats	ivector/plda.cc	/^PldaStats::~PldaStats() {$/;"	f	class:kaldi::PldaStats
ClassInfo	ivector/plda.h	/^    ClassInfo(double weight, Vector<double> *mean, int32 num_examples):$/;"	f	struct:kaldi::PldaStats::ClassInfo
ClassInfo	ivector/plda.h	/^  struct ClassInfo {$/;"	s	class:kaldi::PldaStats
ClassInfo	ivector/plda.h	/^  typedef PldaStats::ClassInfo ClassInfo;$/;"	t	class:kaldi::PldaEstimator
Dim	ivector/plda.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::PldaStats
Dim	ivector/plda.h	/^  int32 Dim() const { return mean_.Dim(); }$/;"	f	class:kaldi::Plda
Dim	ivector/plda.h	/^  int32 Dim() const { return stats_.Dim(); }$/;"	f	class:kaldi::PldaEstimator
KALDI_IVECTOR_PLDA_H_	ivector/plda.h	21;"	d
Plda	ivector/plda.h	/^  Plda() { }$/;"	f	class:kaldi::Plda
Plda	ivector/plda.h	/^class Plda {$/;"	c	namespace:kaldi
PldaConfig	ivector/plda.h	/^  PldaConfig(): normalize_length(true) { }$/;"	f	struct:kaldi::PldaConfig
PldaConfig	ivector/plda.h	/^struct PldaConfig {$/;"	s	namespace:kaldi
PldaEstimationConfig	ivector/plda.h	/^  PldaEstimationConfig(): num_em_iters(10){ }$/;"	f	struct:kaldi::PldaEstimationConfig
PldaEstimationConfig	ivector/plda.h	/^struct PldaEstimationConfig {$/;"	s	namespace:kaldi
PldaEstimator	ivector/plda.h	/^class PldaEstimator {$/;"	c	namespace:kaldi
PldaStats	ivector/plda.h	/^  PldaStats(): dim_(0) { } \/\/\/ The dimension is set up the first time you add samples.$/;"	f	class:kaldi::PldaStats
PldaStats	ivector/plda.h	/^class PldaStats {$/;"	c	namespace:kaldi
PldaUnsupervisedAdaptor	ivector/plda.h	/^  PldaUnsupervisedAdaptor(): tot_weight_(0.0) { }$/;"	f	class:kaldi::PldaUnsupervisedAdaptor
PldaUnsupervisedAdaptor	ivector/plda.h	/^class PldaUnsupervisedAdaptor {$/;"	c	namespace:kaldi
PldaUnsupervisedAdaptorConfig	ivector/plda.h	/^  PldaUnsupervisedAdaptorConfig():$/;"	f	struct:kaldi::PldaUnsupervisedAdaptorConfig
PldaUnsupervisedAdaptorConfig	ivector/plda.h	/^struct PldaUnsupervisedAdaptorConfig {$/;"	s	namespace:kaldi
Register	ivector/plda.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::PldaConfig
Register	ivector/plda.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::PldaEstimationConfig
Register	ivector/plda.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::PldaUnsupervisedAdaptorConfig
Sort	ivector/plda.h	/^  void Sort() { std::sort(class_info_.begin(), class_info_.end()); }$/;"	f	class:kaldi::PldaStats
between_covar_scale	ivector/plda.h	/^  BaseFloat between_covar_scale;$/;"	m	struct:kaldi::PldaUnsupervisedAdaptorConfig
between_var_	ivector/plda.h	/^  SpMatrix<double> between_var_;$/;"	m	class:kaldi::PldaEstimator
between_var_count_	ivector/plda.h	/^  double between_var_count_; \/\/ count corresponding to within_var_stats_$/;"	m	class:kaldi::PldaEstimator
between_var_stats_	ivector/plda.h	/^  SpMatrix<double> between_var_stats_;$/;"	m	class:kaldi::PldaEstimator
class_info_	ivector/plda.h	/^  std::vector<ClassInfo> class_info_;$/;"	m	class:kaldi::PldaStats
class_weight_	ivector/plda.h	/^  double class_weight_; \/\/ total over classes, of their weight.$/;"	m	class:kaldi::PldaStats
dim_	ivector/plda.h	/^  int32 dim_;$/;"	m	class:kaldi::PldaStats
example_weight_	ivector/plda.h	/^  double example_weight_; \/\/ total over classes, of weight times #examples.$/;"	m	class:kaldi::PldaStats
kaldi	ivector/plda.h	/^namespace kaldi {$/;"	n
mean	ivector/plda.h	/^    Vector<double> *mean; \/\/ owned here, but as a pointer so$/;"	m	struct:kaldi::PldaStats::ClassInfo
mean_	ivector/plda.h	/^  Vector<double> mean_;  \/\/ mean of samples in original space.$/;"	m	class:kaldi::Plda
mean_diff_scale	ivector/plda.h	/^  BaseFloat mean_diff_scale;$/;"	m	struct:kaldi::PldaUnsupervisedAdaptorConfig
mean_stats_	ivector/plda.h	/^  Vector<double> mean_stats_;$/;"	m	class:kaldi::PldaUnsupervisedAdaptor
normalize_length	ivector/plda.h	/^  bool normalize_length;$/;"	m	struct:kaldi::PldaConfig
num_classes_	ivector/plda.h	/^  int64 num_classes_;$/;"	m	class:kaldi::PldaStats
num_em_iters	ivector/plda.h	/^  int32 num_em_iters;$/;"	m	struct:kaldi::PldaEstimationConfig
num_examples	ivector/plda.h	/^    int32 num_examples; \/\/ the number of examples in the class$/;"	m	struct:kaldi::PldaStats::ClassInfo
num_examples_	ivector/plda.h	/^  int64 num_examples_; \/\/ total number of examples, sumed over classes.$/;"	m	class:kaldi::PldaStats
offset_	ivector/plda.h	/^  Vector<double> offset_;  \/\/ derived variable: -1.0 * transform_ * mean_$/;"	m	class:kaldi::Plda
offset_scatter_	ivector/plda.h	/^  SpMatrix<double> offset_scatter_; \/\/ Sum over all examples, of the weight$/;"	m	class:kaldi::PldaStats
operator <	ivector/plda.h	/^    bool operator < (const ClassInfo &other) const {$/;"	f	struct:kaldi::PldaStats::ClassInfo
psi_	ivector/plda.h	/^  Vector<double> psi_; \/\/ of dimension Dim().  The between-class$/;"	m	class:kaldi::Plda
stats_	ivector/plda.h	/^  const PldaStats &stats_;$/;"	m	class:kaldi::PldaEstimator
sum_	ivector/plda.h	/^  Vector<double> sum_; \/\/ Weighted sum of class means (normalize by class_weight_$/;"	m	class:kaldi::PldaStats
tot_weight_	ivector/plda.h	/^  double tot_weight_;$/;"	m	class:kaldi::PldaUnsupervisedAdaptor
transform_	ivector/plda.h	/^  Matrix<double> transform_; \/\/ of dimension Dim() by Dim();$/;"	m	class:kaldi::Plda
variance_stats_	ivector/plda.h	/^  SpMatrix<double> variance_stats_;    $/;"	m	class:kaldi::PldaUnsupervisedAdaptor
weight	ivector/plda.h	/^    double weight;$/;"	m	struct:kaldi::PldaStats::ClassInfo
within_covar_scale	ivector/plda.h	/^  BaseFloat within_covar_scale;$/;"	m	struct:kaldi::PldaUnsupervisedAdaptorConfig
within_var_	ivector/plda.h	/^  SpMatrix<double> within_var_;$/;"	m	class:kaldi::PldaEstimator
within_var_count_	ivector/plda.h	/^  double within_var_count_; \/\/ count corresponding to within_var_stats_$/;"	m	class:kaldi::PldaEstimator
within_var_stats_	ivector/plda.h	/^  SpMatrix<double> within_var_stats_;$/;"	m	class:kaldi::PldaEstimator
ComputeVadEnergy	ivector/voice-activity-detection.cc	/^void ComputeVadEnergy(const VadEnergyOptions &opts,$/;"	f	namespace:kaldi
kaldi	ivector/voice-activity-detection.cc	/^namespace kaldi {$/;"	n	file:
KALDI_IVECTOR_VOICE_ACTIVITY_DETECTION_H_	ivector/voice-activity-detection.h	22;"	d
Register	ivector/voice-activity-detection.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::VadEnergyOptions
VadEnergyOptions	ivector/voice-activity-detection.h	/^  VadEnergyOptions(): vad_energy_threshold(5.0),$/;"	f	struct:kaldi::VadEnergyOptions
VadEnergyOptions	ivector/voice-activity-detection.h	/^struct VadEnergyOptions {$/;"	s	namespace:kaldi
kaldi	ivector/voice-activity-detection.h	/^namespace kaldi {$/;"	n
vad_energy_mean_scale	ivector/voice-activity-detection.h	/^  BaseFloat vad_energy_mean_scale;$/;"	m	struct:kaldi::VadEnergyOptions
vad_energy_threshold	ivector/voice-activity-detection.h	/^  BaseFloat vad_energy_threshold;$/;"	m	struct:kaldi::VadEnergyOptions
vad_frames_context	ivector/voice-activity-detection.h	/^  int32 vad_frames_context;$/;"	m	struct:kaldi::VadEnergyOptions
vad_proportion_threshold	ivector/voice-activity-detection.h	/^  BaseFloat vad_proportion_threshold;$/;"	m	struct:kaldi::VadEnergyOptions
ADDLIBS	ivectorbin/Makefile	/^ADDLIBS = ..\/ivector\/kaldi-ivector.a ..\/hmm\/kaldi-hmm.a ..\/gmm\/kaldi-gmm.a \\$/;"	m
BINFILES	ivectorbin/Makefile	/^BINFILES = ivector-extractor-init ivector-extractor-acc-stats \\$/;"	m
EXTRA_CXXFLAGS	ivectorbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	ivectorbin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	ivectorbin/Makefile	/^TESTFILES =$/;"	m
ComputeEer	ivectorbin/compute-eer.cc	/^BaseFloat ComputeEer(std::vector<BaseFloat> *target_scores,$/;"	f	namespace:kaldi
kaldi	ivectorbin/compute-eer.cc	/^namespace kaldi {$/;"	n	file:
main	ivectorbin/compute-eer.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/compute-vad.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/create-split-from-vad.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-adapt-plda.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-compute-dot-products.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccStats	ivectorbin/ivector-compute-lda.cc	/^  void AccStats(const Matrix<double> &utts_of_this_spk) {$/;"	f	class:kaldi::CovarianceStats
AddStats	ivectorbin/ivector-compute-lda.cc	/^  void AddStats(const CovarianceStats &other) {$/;"	f	class:kaldi::CovarianceStats
ComputeAndSubtractMean	ivectorbin/ivector-compute-lda.cc	/^void ComputeAndSubtractMean($/;"	f	namespace:kaldi
ComputeLdaTransform	ivectorbin/ivector-compute-lda.cc	/^void ComputeLdaTransform($/;"	f	namespace:kaldi
ComputeNormalizingTransform	ivectorbin/ivector-compute-lda.cc	/^void ComputeNormalizingTransform(const SpMatrix<Real> &covar,$/;"	f	namespace:kaldi
CovarianceStats	ivectorbin/ivector-compute-lda.cc	/^  CovarianceStats(int32 dim): tot_covar_(dim),$/;"	f	class:kaldi::CovarianceStats
CovarianceStats	ivectorbin/ivector-compute-lda.cc	/^class CovarianceStats {$/;"	c	namespace:kaldi	file:
Dim	ivectorbin/ivector-compute-lda.cc	/^  int32 Dim() { return tot_covar_.NumRows(); }$/;"	f	class:kaldi::CovarianceStats
Empty	ivectorbin/ivector-compute-lda.cc	/^  bool Empty() { return (num_utt_ - num_spk_ == 0); }$/;"	f	class:kaldi::CovarianceStats
GetTotalCovar	ivectorbin/ivector-compute-lda.cc	/^  void GetTotalCovar(SpMatrix<double> *tot_covar) const {$/;"	f	class:kaldi::CovarianceStats
GetWithinCovar	ivectorbin/ivector-compute-lda.cc	/^  void GetWithinCovar(SpMatrix<double> *within_covar) {$/;"	f	class:kaldi::CovarianceStats
Info	ivectorbin/ivector-compute-lda.cc	/^  std::string Info() {$/;"	f	class:kaldi::CovarianceStats
SingularTotCovar	ivectorbin/ivector-compute-lda.cc	/^  bool SingularTotCovar() { return (num_utt_ < Dim()); }$/;"	f	class:kaldi::CovarianceStats
between_covar_	ivectorbin/ivector-compute-lda.cc	/^  SpMatrix<double> between_covar_;$/;"	m	class:kaldi::CovarianceStats	file:
kaldi	ivectorbin/ivector-compute-lda.cc	/^namespace kaldi {$/;"	n	file:
main	ivectorbin/ivector-compute-lda.cc	/^int main(int argc, char *argv[]) {$/;"	f
num_spk_	ivectorbin/ivector-compute-lda.cc	/^  int32 num_spk_;$/;"	m	class:kaldi::CovarianceStats	file:
num_utt_	ivectorbin/ivector-compute-lda.cc	/^  int32 num_utt_;$/;"	m	class:kaldi::CovarianceStats	file:
tot_covar_	ivectorbin/ivector-compute-lda.cc	/^  SpMatrix<double> tot_covar_;$/;"	m	class:kaldi::CovarianceStats	file:
main	ivectorbin/ivector-compute-plda.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-copy-plda.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-extract-online.cc	/^int main(int argc, char *argv[]) {$/;"	f
IvectorExtractTask	ivectorbin/ivector-extract.cc	/^  IvectorExtractTask(const IvectorExtractor &extractor,$/;"	f	class:kaldi::IvectorExtractTask
IvectorExtractTask	ivectorbin/ivector-extract.cc	/^class IvectorExtractTask {$/;"	c	namespace:kaldi	file:
RunPerSpeaker	ivectorbin/ivector-extract.cc	/^int32 RunPerSpeaker(const std::string &ivector_extractor_rxfilename,$/;"	f	namespace:kaldi
auxf_change_	ivectorbin/ivector-extract.cc	/^  double auxf_change_;$/;"	m	class:kaldi::IvectorExtractTask	file:
extractor_	ivectorbin/ivector-extract.cc	/^  const IvectorExtractor &extractor_;$/;"	m	class:kaldi::IvectorExtractTask	file:
feats_	ivectorbin/ivector-extract.cc	/^  Matrix<BaseFloat> feats_;$/;"	m	class:kaldi::IvectorExtractTask	file:
ivector_	ivectorbin/ivector-extract.cc	/^  Vector<double> ivector_;$/;"	m	class:kaldi::IvectorExtractTask	file:
kaldi	ivectorbin/ivector-extract.cc	/^namespace kaldi {$/;"	n	file:
main	ivectorbin/ivector-extract.cc	/^int main(int argc, char *argv[]) {$/;"	f
operator ()	ivectorbin/ivector-extract.cc	/^  void operator () () {$/;"	f	class:kaldi::IvectorExtractTask
posterior_	ivectorbin/ivector-extract.cc	/^  Posterior posterior_;$/;"	m	class:kaldi::IvectorExtractTask	file:
tot_auxf_change_	ivectorbin/ivector-extract.cc	/^  double *tot_auxf_change_; \/\/ if non-NULL we need the auxf change.$/;"	m	class:kaldi::IvectorExtractTask	file:
utt_	ivectorbin/ivector-extract.cc	/^  std::string utt_;$/;"	m	class:kaldi::IvectorExtractTask	file:
writer_	ivectorbin/ivector-extract.cc	/^  BaseFloatVectorWriter *writer_;$/;"	m	class:kaldi::IvectorExtractTask	file:
~IvectorExtractTask	ivectorbin/ivector-extract.cc	/^  ~IvectorExtractTask() {$/;"	f	class:kaldi::IvectorExtractTask
IvectorTask	ivectorbin/ivector-extractor-acc-stats.cc	/^  IvectorTask(const IvectorExtractor &extractor,$/;"	f	class:kaldi::IvectorTask
IvectorTask	ivectorbin/ivector-extractor-acc-stats.cc	/^class IvectorTask {$/;"	c	namespace:kaldi	file:
extractor_	ivectorbin/ivector-extractor-acc-stats.cc	/^  const IvectorExtractor &extractor_;$/;"	m	class:kaldi::IvectorTask	file:
features_	ivectorbin/ivector-extractor-acc-stats.cc	/^  Matrix<BaseFloat> features_; \/\/ not a reference, since features come from a$/;"	m	class:kaldi::IvectorTask	file:
kaldi	ivectorbin/ivector-extractor-acc-stats.cc	/^namespace kaldi {$/;"	n	file:
main	ivectorbin/ivector-extractor-acc-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
operator ()	ivectorbin/ivector-extractor-acc-stats.cc	/^  void operator () () {$/;"	f	class:kaldi::IvectorTask
posterior_	ivectorbin/ivector-extractor-acc-stats.cc	/^  Posterior posterior_;  \/\/ as above.$/;"	m	class:kaldi::IvectorTask	file:
stats_	ivectorbin/ivector-extractor-acc-stats.cc	/^  IvectorExtractorStats *stats_;$/;"	m	class:kaldi::IvectorTask	file:
~IvectorTask	ivectorbin/ivector-extractor-acc-stats.cc	/^  ~IvectorTask() { }  \/\/ the destructor doesn't have to do anything.$/;"	f	class:kaldi::IvectorTask
main	ivectorbin/ivector-extractor-est.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-extractor-init.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-extractor-sum-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-mean.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-normalize-length.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-plda-scoring.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-subtract-global-mean.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/ivector-transform.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/logistic-regression-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
ComputeLogPosteriors	ivectorbin/logistic-regression-eval.cc	/^int ComputeLogPosteriors(ParseOptions &po, $/;"	f
ComputeScores	ivectorbin/logistic-regression-eval.cc	/^int32 ComputeScores(ParseOptions &po, const LogisticRegressionConfig &config,$/;"	f
main	ivectorbin/logistic-regression-eval.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/logistic-regression-train.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	ivectorbin/select-voiced-frames.cc	/^int main(int argc, char *argv[]) {$/;"	f
AR	kaldi.mk	/^AR = ar$/;"	m
AS	kaldi.mk	/^AS = as$/;"	m
ATLASINC	kaldi.mk	/^ATLASINC = \/scratch2\/cxy110530\/kaldi-trunk-20150601\/tools\/ATLAS\/include$/;"	m
ATLASLIBS	kaldi.mk	/^ATLASLIBS = \/usr\/lib64\/atlas\/liblapack.so \/usr\/lib64\/atlas\/libcblas.so \/usr\/lib64\/atlas\/libatlas.so \/usr\/lib64\/atlas\/libf77blas.so$/;"	m
CC	kaldi.mk	/^CC = g++$/;"	m
CONFIGURE_VERSION	kaldi.mk	/^CONFIGURE_VERSION := 2$/;"	m
CXX	kaldi.mk	/^CXX = g++$/;"	m
CXXFLAGS	kaldi.mk	/^CXXFLAGS = -msse -msse2 -Wall -I.. \\$/;"	m
FSTROOT	kaldi.mk	/^FSTROOT = \/scratch2\/cxy110530\/kaldi-trunk-20150601\/tools\/openfst$/;"	m
LDFLAGS	kaldi.mk	/^LDFLAGS = -rdynamic $(OPENFSTLDFLAGS)$/;"	m
LDLIBS	kaldi.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(OPENFSTLIBS) $(ATLASLIBS) -lm -lpthread -ldl$/;"	m
OPENFSTLDFLAGS	kaldi.mk	/^OPENFSTLDFLAGS = -Wl,-rpath=\/scratch2\/cxy110530\/kaldi-trunk-20150601\/tools\/openfst\/lib$/;"	m
OPENFSTLIBS	kaldi.mk	/^OPENFSTLIBS = -L\/scratch2\/cxy110530\/kaldi-trunk-20150601\/tools\/openfst\/lib -lfst$/;"	m
OPENFST_GE_10400	kaldi.mk	/^OPENFST_GE_10400 = 0$/;"	m
OPENFST_VER	kaldi.mk	/^OPENFST_VER = 1.3.4$/;"	m
RANLIB	kaldi.mk	/^RANLIB = ranlib$/;"	m
ADDLIBS	kwsbin/Makefile	/^ADDLIBS = ..\/lat\/kaldi-lat.a ..\/fstext\/kaldi-fstext.a \\$/;"	m
BINFILES	kwsbin/Makefile	/^BINFILES = lattice-to-kws-index kws-index-union transcripts-to-fsts \\$/;"	m
EXTRA_CXXFLAGS	kwsbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	kwsbin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	kwsbin/Makefile	/^TESTFILES =$/;"	m
PrintProxyFstPath	kwsbin/generate-proxy-keywords.cc	/^bool PrintProxyFstPath(const VectorFst<StdArc> &proxy,$/;"	f	namespace:fst
fst	kwsbin/generate-proxy-keywords.cc	/^namespace fst {$/;"	n	file:
main	kwsbin/generate-proxy-keywords.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	kwsbin/kws-index-union.cc	/^int main(int argc, char *argv[]) {$/;"	f
Arc	kwsbin/kws-search.cc	/^typedef KwsLexicographicArc Arc;$/;"	t	namespace:kaldi	file:
DecodeLabelUid	kwsbin/kws-search.cc	/^StateId DecodeLabelUid(uint64 osymbol) {$/;"	f	namespace:kaldi
EncodeLabel	kwsbin/kws-search.cc	/^uint64 EncodeLabel(StateId ilabel,$/;"	f	namespace:kaldi
FinalAction	kwsbin/kws-search.cc	/^  fst::MapFinalAction FinalAction() const { return fst::MAP_NO_SUPERFINAL; }$/;"	f	class:kaldi::VectorFstToKwsLexicographicFstMapper
FromArc	kwsbin/kws-search.cc	/^  typedef fst::StdArc FromArc;$/;"	t	class:kaldi::VectorFstToKwsLexicographicFstMapper	file:
FromWeight	kwsbin/kws-search.cc	/^  typedef FromArc::Weight FromWeight;$/;"	t	class:kaldi::VectorFstToKwsLexicographicFstMapper	file:
InputSymbolsAction	kwsbin/kws-search.cc	/^  fst::MapSymbolsAction InputSymbolsAction() const { return fst::MAP_COPY_SYMBOLS; }$/;"	f	class:kaldi::VectorFstToKwsLexicographicFstMapper
OutputSymbolsAction	kwsbin/kws-search.cc	/^  fst::MapSymbolsAction OutputSymbolsAction() const { return fst::MAP_COPY_SYMBOLS;}$/;"	f	class:kaldi::VectorFstToKwsLexicographicFstMapper
Properties	kwsbin/kws-search.cc	/^  uint64 Properties(uint64 props) const { return props; }$/;"	f	class:kaldi::VectorFstToKwsLexicographicFstMapper
StateId	kwsbin/kws-search.cc	/^typedef Arc::StateId StateId;$/;"	t	namespace:kaldi	file:
ToArc	kwsbin/kws-search.cc	/^  typedef KwsLexicographicArc ToArc;$/;"	t	class:kaldi::VectorFstToKwsLexicographicFstMapper	file:
ToWeight	kwsbin/kws-search.cc	/^  typedef KwsLexicographicWeight ToWeight;$/;"	t	class:kaldi::VectorFstToKwsLexicographicFstMapper	file:
VectorFstToKwsLexicographicFstMapper	kwsbin/kws-search.cc	/^  VectorFstToKwsLexicographicFstMapper() {}$/;"	f	class:kaldi::VectorFstToKwsLexicographicFstMapper
VectorFstToKwsLexicographicFstMapper	kwsbin/kws-search.cc	/^class VectorFstToKwsLexicographicFstMapper {$/;"	c	namespace:kaldi	file:
Weight	kwsbin/kws-search.cc	/^typedef Arc::Weight Weight;$/;"	t	namespace:kaldi	file:
kaldi	kwsbin/kws-search.cc	/^namespace kaldi {$/;"	n	file:
main	kwsbin/kws-search.cc	/^int main(int argc, char *argv[]) {$/;"	f
operator ()	kwsbin/kws-search.cc	/^  ToArc operator()(const FromArc &arc) const {$/;"	f	class:kaldi::VectorFstToKwsLexicographicFstMapper
main	kwsbin/lattice-to-kws-index.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	kwsbin/transcripts-to-fsts.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	lat/Makefile	/^ADDLIBS = ..\/hmm\/kaldi-hmm.a ..\/tree\/kaldi-tree.a ..\/matrix\/kaldi-matrix.a \\$/;"	m
LIBNAME	lat/Makefile	/^LIBNAME = kaldi-lat$/;"	m
OBJFILES	lat/Makefile	/^OBJFILES = kaldi-lattice.o lattice-functions.o word-align-lattice.o \\$/;"	m
TESTFILES	lat/Makefile	/^TESTFILES = kaldi-lattice-test push-lattice-test minimize-lattice-test \\$/;"	m
ArcticWeight	lat/arctic-weight.h	/^typedef ArcticWeightTpl<float> ArcticWeight;$/;"	t	namespace:fst
ArcticWeightTpl	lat/arctic-weight.h	/^  ArcticWeightTpl() : FloatWeightTpl<T>() {}$/;"	f	class:fst::ArcticWeightTpl
ArcticWeightTpl	lat/arctic-weight.h	/^  ArcticWeightTpl(T f) : FloatWeightTpl<T>(f) {}$/;"	f	class:fst::ArcticWeightTpl
ArcticWeightTpl	lat/arctic-weight.h	/^  ArcticWeightTpl(const ArcticWeightTpl<T> &w) : FloatWeightTpl<T>(w) {}$/;"	f	class:fst::ArcticWeightTpl
ArcticWeightTpl	lat/arctic-weight.h	/^class ArcticWeightTpl : public FloatWeightTpl<T> {$/;"	c	namespace:fst
Divide	lat/arctic-weight.h	/^inline ArcticWeightTpl<T> Divide(const ArcticWeightTpl<T> &w1,$/;"	f	namespace:fst
Divide	lat/arctic-weight.h	/^inline ArcticWeightTpl<double> Divide(const ArcticWeightTpl<double> &w1,$/;"	f	namespace:fst
Divide	lat/arctic-weight.h	/^inline ArcticWeightTpl<float> Divide(const ArcticWeightTpl<float> &w1,$/;"	f	namespace:fst
KALDI_LAT_ARCTIC_WEIGHT_H_	lat/arctic-weight.h	22;"	d
Member	lat/arctic-weight.h	/^  bool Member() const {$/;"	f	class:fst::ArcticWeightTpl
NoWeight	lat/arctic-weight.h	/^  static ArcticWeightTpl<T> NoWeight() {$/;"	f	class:fst::ArcticWeightTpl
One	lat/arctic-weight.h	/^  static const ArcticWeightTpl<T> One() {$/;"	f	class:fst::ArcticWeightTpl
Plus	lat/arctic-weight.h	/^inline ArcticWeightTpl<T> Plus(const ArcticWeightTpl<T> &w1,$/;"	f	namespace:fst
Plus	lat/arctic-weight.h	/^inline ArcticWeightTpl<double> Plus(const ArcticWeightTpl<double> &w1,$/;"	f	namespace:fst
Plus	lat/arctic-weight.h	/^inline ArcticWeightTpl<float> Plus(const ArcticWeightTpl<float> &w1,$/;"	f	namespace:fst
Properties	lat/arctic-weight.h	/^  static uint64 Properties() {$/;"	f	class:fst::ArcticWeightTpl
Quantize	lat/arctic-weight.h	/^  ArcticWeightTpl<T> Quantize(float delta = kDelta) const {$/;"	f	class:fst::ArcticWeightTpl
Reverse	lat/arctic-weight.h	/^  ArcticWeightTpl<T> Reverse() const { return *this; }$/;"	f	class:fst::ArcticWeightTpl
ReverseWeight	lat/arctic-weight.h	/^  typedef ArcticWeightTpl<T> ReverseWeight;$/;"	t	class:fst::ArcticWeightTpl
Times	lat/arctic-weight.h	/^inline ArcticWeightTpl<T> Times(const ArcticWeightTpl<T> &w1,$/;"	f	namespace:fst
Times	lat/arctic-weight.h	/^inline ArcticWeightTpl<double> Times(const ArcticWeightTpl<double> &w1,$/;"	f	namespace:fst
Times	lat/arctic-weight.h	/^inline ArcticWeightTpl<float> Times(const ArcticWeightTpl<float> &w1,$/;"	f	namespace:fst
Type	lat/arctic-weight.h	/^  static const string &Type() {$/;"	f	class:fst::ArcticWeightTpl
Zero	lat/arctic-weight.h	/^  static const ArcticWeightTpl<T> Zero() {$/;"	f	class:fst::ArcticWeightTpl
fst	lat/arctic-weight.h	/^namespace fst {$/;"	n
SentenceLevelConfidence	lat/confidence.cc	/^BaseFloat SentenceLevelConfidence(const CompactLattice &clat,$/;"	f	namespace:kaldi
SentenceLevelConfidence	lat/confidence.cc	/^BaseFloat SentenceLevelConfidence(const Lattice &lat,$/;"	f	namespace:kaldi
kaldi	lat/confidence.cc	/^namespace kaldi {$/;"	n	file:
KALDI_LAT_CONFIDENCE_H_	lat/confidence.h	22;"	d
kaldi	lat/confidence.h	/^namespace kaldi {$/;"	n
TestDeterminizeLatticePruned	lat/determinize-lattice-pruned-test.cc	/^template<class Arc> void TestDeterminizeLatticePruned() {$/;"	f	namespace:fst
TestDeterminizeLatticePruned2	lat/determinize-lattice-pruned-test.cc	/^template<class Arc> void TestDeterminizeLatticePruned2() {$/;"	f	namespace:fst
fst	lat/determinize-lattice-pruned-test.cc	/^namespace fst {$/;"	n	file:
main	lat/determinize-lattice-pruned-test.cc	/^int main() {$/;"	f
AddStrings	lat/determinize-lattice-pruned.cc	/^  void AddStrings(const vector<Element> &vec,$/;"	f	class:fst::LatticeDeterminizerPruned	file:
Arc	lat/determinize-lattice-pruned.cc	/^  typedef ArcTpl<Weight> Arc; \/\/ arc in non-compact version of lattice $/;"	t	class:fst::LatticeDeterminizerPruned	file:
CheckMemoryUsage	lat/determinize-lattice-pruned.cc	/^  bool CheckMemoryUsage() {$/;"	f	class:fst::LatticeDeterminizerPruned
CompactArc	lat/determinize-lattice-pruned.cc	/^  typedef ArcTpl<CompactWeight> CompactArc; \/\/ arc in compact, acceptor form of lattice$/;"	t	class:fst::LatticeDeterminizerPruned	file:
CompactWeight	lat/determinize-lattice-pruned.cc	/^  typedef CompactLatticeWeightTpl<Weight, IntType> CompactWeight;$/;"	t	class:fst::LatticeDeterminizerPruned	file:
Compare	lat/determinize-lattice-pruned.cc	/^  inline int Compare(const Weight &a_w, StringId a_str,$/;"	f	class:fst::LatticeDeterminizerPruned	file:
ComputeBackwardWeight	lat/determinize-lattice-pruned.cc	/^  void ComputeBackwardWeight() {$/;"	f	class:fst::LatticeDeterminizerPruned	file:
ConvertToMinimal	lat/determinize-lattice-pruned.cc	/^  void ConvertToMinimal(vector<Element> *subset) {$/;"	f	class:fst::LatticeDeterminizerPruned	file:
Determinize	lat/determinize-lattice-pruned.cc	/^  bool Determinize(double *effective_beam) {$/;"	f	class:fst::LatticeDeterminizerPruned
DeterminizeLatticeDeletePhones	lat/determinize-lattice-pruned.cc	/^void DeterminizeLatticeDeletePhones($/;"	f	namespace:fst
DeterminizeLatticeInsertPhones	lat/determinize-lattice-pruned.cc	/^typename ArcTpl<Weight>::Label DeterminizeLatticeInsertPhones($/;"	f	namespace:fst
DeterminizeLatticePhonePruned	lat/determinize-lattice-pruned.cc	/^bool DeterminizeLatticePhonePruned($/;"	f	namespace:fst
DeterminizeLatticePhonePrunedFirstPass	lat/determinize-lattice-pruned.cc	/^bool DeterminizeLatticePhonePrunedFirstPass($/;"	f	namespace:fst
DeterminizeLatticePhonePrunedWrapper	lat/determinize-lattice-pruned.cc	/^bool DeterminizeLatticePhonePrunedWrapper($/;"	f	namespace:fst
DeterminizeLatticePruned	lat/determinize-lattice-pruned.cc	/^bool DeterminizeLatticePruned($/;"	f	namespace:fst
DeterminizeLatticePruned	lat/determinize-lattice-pruned.cc	/^bool DeterminizeLatticePruned(const ExpandedFst<ArcTpl<Weight> > &ifst,$/;"	f	namespace:fst
Element	lat/determinize-lattice-pruned.cc	/^  struct Element {$/;"	s	class:fst::LatticeDeterminizerPruned	file:
EpsilonClosure	lat/determinize-lattice-pruned.cc	/^  void EpsilonClosure(vector<Element> *subset) {$/;"	f	class:fst::LatticeDeterminizerPruned	file:
FreeMostMemory	lat/determinize-lattice-pruned.cc	/^  void FreeMostMemory() {$/;"	f	class:fst::LatticeDeterminizerPruned
FreeOutputStates	lat/determinize-lattice-pruned.cc	/^  void FreeOutputStates() {$/;"	f	class:fst::LatticeDeterminizerPruned
InitialSubsetHash	lat/determinize-lattice-pruned.cc	/^                        SubsetKey, SubsetEqual> InitialSubsetHash;$/;"	t	class:fst::LatticeDeterminizerPruned	file:
InitialToStateId	lat/determinize-lattice-pruned.cc	/^  OutputStateId InitialToStateId(const vector<Element> &subset_in,$/;"	f	class:fst::LatticeDeterminizerPruned	file:
InitializeDeterminization	lat/determinize-lattice-pruned.cc	/^  void InitializeDeterminization() {$/;"	f	class:fst::LatticeDeterminizerPruned	file:
InputStateId	lat/determinize-lattice-pruned.cc	/^  typedef typename Arc::StateId InputStateId;  \/\/ state in the input FST.$/;"	t	class:fst::LatticeDeterminizerPruned	file:
IsIsymbolOrFinal	lat/determinize-lattice-pruned.cc	/^  bool IsIsymbolOrFinal(InputStateId state) { \/\/ returns true if this state$/;"	f	class:fst::LatticeDeterminizerPruned	file:
IsymbolOrFinal	lat/determinize-lattice-pruned.cc	/^  enum IsymbolOrFinal { OSF_UNKNOWN = 0, OSF_NO = 1, OSF_YES = 2 };$/;"	g	class:fst::LatticeDeterminizerPruned	file:
Label	lat/determinize-lattice-pruned.cc	/^  typedef typename Arc::Label Label;$/;"	t	class:fst::LatticeDeterminizerPruned	file:
LatticeDeterminizerPruned	lat/determinize-lattice-pruned.cc	/^  LatticeDeterminizerPruned(const ExpandedFst<Arc> &ifst,$/;"	f	class:fst::LatticeDeterminizerPruned
LatticeDeterminizerPruned	lat/determinize-lattice-pruned.cc	/^template<class Weight, class IntType> class LatticeDeterminizerPruned {$/;"	c	namespace:fst	file:
MakeSubsetUnique	lat/determinize-lattice-pruned.cc	/^  void MakeSubsetUnique(vector<Element> *subset) {$/;"	f	class:fst::LatticeDeterminizerPruned	file:
MinimalSubsetHash	lat/determinize-lattice-pruned.cc	/^                        SubsetKey, SubsetEqual> MinimalSubsetHash;$/;"	t	class:fst::LatticeDeterminizerPruned	file:
MinimalToStateId	lat/determinize-lattice-pruned.cc	/^  OutputStateId MinimalToStateId(const vector<Element> &subset,$/;"	f	class:fst::LatticeDeterminizerPruned	file:
NormalizeSubset	lat/determinize-lattice-pruned.cc	/^  void NormalizeSubset(vector<Element> *elems,$/;"	f	class:fst::LatticeDeterminizerPruned	file:
OSF_NO	lat/determinize-lattice-pruned.cc	/^  enum IsymbolOrFinal { OSF_UNKNOWN = 0, OSF_NO = 1, OSF_YES = 2 };$/;"	e	enum:fst::LatticeDeterminizerPruned::IsymbolOrFinal	file:
OSF_UNKNOWN	lat/determinize-lattice-pruned.cc	/^  enum IsymbolOrFinal { OSF_UNKNOWN = 0, OSF_NO = 1, OSF_YES = 2 };$/;"	e	enum:fst::LatticeDeterminizerPruned::IsymbolOrFinal	file:
OSF_YES	lat/determinize-lattice-pruned.cc	/^  enum IsymbolOrFinal { OSF_UNKNOWN = 0, OSF_NO = 1, OSF_YES = 2 };$/;"	e	enum:fst::LatticeDeterminizerPruned::IsymbolOrFinal	file:
Output	lat/determinize-lattice-pruned.cc	/^  void  Output(MutableFst<Arc> *ofst, bool destroy = true) {$/;"	f	class:fst::LatticeDeterminizerPruned
Output	lat/determinize-lattice-pruned.cc	/^  void Output(MutableFst<CompactArc>  *ofst, bool destroy = true) {$/;"	f	class:fst::LatticeDeterminizerPruned
OutputState	lat/determinize-lattice-pruned.cc	/^    OutputState(const vector<Element> &minimal_subset,$/;"	f	struct:fst::LatticeDeterminizerPruned::OutputState
OutputState	lat/determinize-lattice-pruned.cc	/^  struct OutputState {$/;"	s	class:fst::LatticeDeterminizerPruned	file:
OutputStateId	lat/determinize-lattice-pruned.cc	/^  typedef typename Arc::StateId OutputStateId;  \/\/ same as above but distinguish$/;"	t	class:fst::LatticeDeterminizerPruned	file:
PairComparator	lat/determinize-lattice-pruned.cc	/^  class PairComparator {$/;"	c	class:fst::LatticeDeterminizerPruned	file:
ProcessFinal	lat/determinize-lattice-pruned.cc	/^  void ProcessFinal(OutputStateId output_state_id) {$/;"	f	class:fst::LatticeDeterminizerPruned	file:
ProcessTransition	lat/determinize-lattice-pruned.cc	/^  void ProcessTransition(OutputStateId ostate_id, Label ilabel, vector<Element> *subset) {$/;"	f	class:fst::LatticeDeterminizerPruned	file:
ProcessTransitions	lat/determinize-lattice-pruned.cc	/^  void ProcessTransitions(OutputStateId output_state_id) {$/;"	f	class:fst::LatticeDeterminizerPruned	file:
RebuildRepository	lat/determinize-lattice-pruned.cc	/^  void RebuildRepository() { \/\/ rebuild the string repository,    $/;"	f	class:fst::LatticeDeterminizerPruned
StateId	lat/determinize-lattice-pruned.cc	/^  typedef typename Arc::StateId StateId;  \/\/ use this when we don't know if it's input or output.$/;"	t	class:fst::LatticeDeterminizerPruned	file:
StringId	lat/determinize-lattice-pruned.cc	/^  typedef const typename StringRepositoryType::Entry* StringId;$/;"	t	class:fst::LatticeDeterminizerPruned	file:
StringRepositoryType	lat/determinize-lattice-pruned.cc	/^  typedef LatticeStringRepository<IntType> StringRepositoryType;$/;"	t	class:fst::LatticeDeterminizerPruned	file:
SubsetEqual	lat/determinize-lattice-pruned.cc	/^    SubsetEqual(): delta_(kDelta) {}$/;"	f	class:fst::LatticeDeterminizerPruned::SubsetEqual
SubsetEqual	lat/determinize-lattice-pruned.cc	/^    SubsetEqual(float delta): delta_(delta) {}$/;"	f	class:fst::LatticeDeterminizerPruned::SubsetEqual
SubsetEqual	lat/determinize-lattice-pruned.cc	/^  class SubsetEqual {$/;"	c	class:fst::LatticeDeterminizerPruned	file:
SubsetEqualStates	lat/determinize-lattice-pruned.cc	/^  class SubsetEqualStates {$/;"	c	class:fst::LatticeDeterminizerPruned	file:
SubsetKey	lat/determinize-lattice-pruned.cc	/^  class SubsetKey {$/;"	c	class:fst::LatticeDeterminizerPruned	file:
Task	lat/determinize-lattice-pruned.cc	/^  struct Task {$/;"	s	class:fst::LatticeDeterminizerPruned	file:
TaskCompare	lat/determinize-lattice-pruned.cc	/^  struct TaskCompare {$/;"	s	class:fst::LatticeDeterminizerPruned	file:
TempArc	lat/determinize-lattice-pruned.cc	/^  struct TempArc {$/;"	s	class:fst::LatticeDeterminizerPruned	file:
all_elems_tmp_	lat/determinize-lattice-pruned.cc	/^  vector<pair<Label, Element> > all_elems_tmp_; \/\/ temporary vector used in ProcessTransitions.$/;"	m	class:fst::LatticeDeterminizerPruned	file:
arcs	lat/determinize-lattice-pruned.cc	/^    vector<TempArc> arcs; \/\/ arcs out of the state-- those that have been processed.$/;"	m	struct:fst::LatticeDeterminizerPruned::OutputState	file:
backward_costs_	lat/determinize-lattice-pruned.cc	/^  std::vector<double> backward_costs_; \/\/ This vector stores, for every state in ifst_,$/;"	m	class:fst::LatticeDeterminizerPruned	file:
beam_	lat/determinize-lattice-pruned.cc	/^  double beam_;$/;"	m	class:fst::LatticeDeterminizerPruned	file:
cutoff_	lat/determinize-lattice-pruned.cc	/^  double cutoff_; \/\/ beam plus total-weight of input (and note, the weight is$/;"	m	class:fst::LatticeDeterminizerPruned	file:
delta_	lat/determinize-lattice-pruned.cc	/^    float delta_;$/;"	m	class:fst::LatticeDeterminizerPruned::SubsetEqual	file:
determinized_	lat/determinize-lattice-pruned.cc	/^  bool determinized_; \/\/ set to true when user called Determinize(); used to make$/;"	m	class:fst::LatticeDeterminizerPruned	file:
equal_	lat/determinize-lattice-pruned.cc	/^  SubsetEqual equal_;  \/\/ object that compares subsets-- only data member is delta_.$/;"	m	class:fst::LatticeDeterminizerPruned	file:
forward_cost	lat/determinize-lattice-pruned.cc	/^    double forward_cost; \/\/ Represents minimal cost from start-state$/;"	m	struct:fst::LatticeDeterminizerPruned::OutputState	file:
fst	lat/determinize-lattice-pruned.cc	/^namespace fst {$/;"	n	file:
hasher_	lat/determinize-lattice-pruned.cc	/^  SubsetKey hasher_;  \/\/ object that computes keys-- has no data members.$/;"	m	class:fst::LatticeDeterminizerPruned	file:
ifst_	lat/determinize-lattice-pruned.cc	/^  const ExpandedFst<Arc> *ifst_;$/;"	m	class:fst::LatticeDeterminizerPruned	file:
ilabel	lat/determinize-lattice-pruned.cc	/^    Label ilabel;$/;"	m	struct:fst::LatticeDeterminizerPruned::TempArc	file:
initial_hash_	lat/determinize-lattice-pruned.cc	/^  InitialSubsetHash initial_hash_;   \/\/ hash from Subset to Element, which$/;"	m	class:fst::LatticeDeterminizerPruned	file:
isymbol_or_final_	lat/determinize-lattice-pruned.cc	/^  vector<char> isymbol_or_final_; \/\/ A kind of cache; it says whether$/;"	m	class:fst::LatticeDeterminizerPruned	file:
label	lat/determinize-lattice-pruned.cc	/^    Label label; \/\/ Label on the transition we're processing out of this state.$/;"	m	struct:fst::LatticeDeterminizerPruned::Task	file:
minimal_hash_	lat/determinize-lattice-pruned.cc	/^  MinimalSubsetHash minimal_hash_;  \/\/ hash from Subset to OutputStateId.  Subset is "minimal$/;"	m	class:fst::LatticeDeterminizerPruned	file:
minimal_subset	lat/determinize-lattice-pruned.cc	/^    vector<Element> minimal_subset;$/;"	m	struct:fst::LatticeDeterminizerPruned::OutputState	file:
nextstate	lat/determinize-lattice-pruned.cc	/^    OutputStateId nextstate;  \/\/ or kNoState for final weights.$/;"	m	struct:fst::LatticeDeterminizerPruned::TempArc	file:
num_arcs_	lat/determinize-lattice-pruned.cc	/^  int num_arcs_; \/\/ keep track of memory usage: number of arcs in output_states_[ ]->arcs$/;"	m	class:fst::LatticeDeterminizerPruned	file:
num_elems_	lat/determinize-lattice-pruned.cc	/^  int num_elems_; \/\/ keep track of memory usage: number of elems in output_states_ and$/;"	m	class:fst::LatticeDeterminizerPruned	file:
operator !=	lat/determinize-lattice-pruned.cc	/^    bool operator != (const Element &other) const {$/;"	f	struct:fst::LatticeDeterminizerPruned::Element
operator ()	lat/determinize-lattice-pruned.cc	/^    bool operator ()(const vector<Element> * s1, const vector<Element> * s2) const {$/;"	f	class:fst::LatticeDeterminizerPruned::SubsetEqual
operator ()	lat/determinize-lattice-pruned.cc	/^    bool operator ()(const vector<Element> * s1, const vector<Element> * s2) const {$/;"	f	class:fst::LatticeDeterminizerPruned::SubsetEqualStates
operator ()	lat/determinize-lattice-pruned.cc	/^    inline bool operator () (const pair<Label, Element> &p1, const pair<Label, Element> &p2) {$/;"	f	class:fst::LatticeDeterminizerPruned::PairComparator
operator ()	lat/determinize-lattice-pruned.cc	/^    inline int operator() (const Task *t1, const Task *t2) {$/;"	f	struct:fst::LatticeDeterminizerPruned::TaskCompare
operator ()	lat/determinize-lattice-pruned.cc	/^    size_t operator ()(const vector<Element> * subset) const {  \/\/ hashes only the state and string.$/;"	f	class:fst::LatticeDeterminizerPruned::SubsetKey
operator >	lat/determinize-lattice-pruned.cc	/^    bool operator > (const Element &other) const {$/;"	f	struct:fst::LatticeDeterminizerPruned::Element
opts_	lat/determinize-lattice-pruned.cc	/^  DeterminizeLatticePrunedOptions opts_;$/;"	m	class:fst::LatticeDeterminizerPruned	file:
output_states_	lat/determinize-lattice-pruned.cc	/^  vector<OutputState*> output_states_; \/\/ All the info about the output states.$/;"	m	class:fst::LatticeDeterminizerPruned	file:
priority_cost	lat/determinize-lattice-pruned.cc	/^    double priority_cost; \/\/ Cost used in deciding priority of tasks.  Note:$/;"	m	struct:fst::LatticeDeterminizerPruned::Task	file:
queue_	lat/determinize-lattice-pruned.cc	/^  std::priority_queue<Task*, vector<Task*>, TaskCompare> queue_;$/;"	m	class:fst::LatticeDeterminizerPruned	file:
repository_	lat/determinize-lattice-pruned.cc	/^  LatticeStringRepository<IntType> repository_;  \/\/ defines a compact and fast way of$/;"	m	class:fst::LatticeDeterminizerPruned	file:
state	lat/determinize-lattice-pruned.cc	/^    OutputStateId state; \/\/ State from which we're processing the transition.$/;"	m	struct:fst::LatticeDeterminizerPruned::Task	file:
state	lat/determinize-lattice-pruned.cc	/^    StateId state; \/\/ use StateId as this is usually InputStateId but in one case$/;"	m	struct:fst::LatticeDeterminizerPruned::Element	file:
string	lat/determinize-lattice-pruned.cc	/^    StringId string;  \/\/ Look it up in the StringRepository, it's a sequence of Labels.$/;"	m	struct:fst::LatticeDeterminizerPruned::TempArc	file:
string	lat/determinize-lattice-pruned.cc	/^    StringId string;$/;"	m	struct:fst::LatticeDeterminizerPruned::Element	file:
subset	lat/determinize-lattice-pruned.cc	/^    vector<Element> subset; \/\/ Weighted subset of states (with strings)-- not normalized.$/;"	m	struct:fst::LatticeDeterminizerPruned::Task	file:
weight	lat/determinize-lattice-pruned.cc	/^    Weight weight;$/;"	m	struct:fst::LatticeDeterminizerPruned::Element	file:
weight	lat/determinize-lattice-pruned.cc	/^    Weight weight;$/;"	m	struct:fst::LatticeDeterminizerPruned::TempArc	file:
~LatticeDeterminizerPruned	lat/determinize-lattice-pruned.cc	/^  ~LatticeDeterminizerPruned() {$/;"	f	class:fst::LatticeDeterminizerPruned
DeterminizeLatticePhonePrunedOptions	lat/determinize-lattice-pruned.h	/^  DeterminizeLatticePhonePrunedOptions(): delta(kDelta),$/;"	f	struct:fst::DeterminizeLatticePhonePrunedOptions
DeterminizeLatticePhonePrunedOptions	lat/determinize-lattice-pruned.h	/^struct DeterminizeLatticePhonePrunedOptions {$/;"	s	namespace:fst
DeterminizeLatticePrunedOptions	lat/determinize-lattice-pruned.h	/^  DeterminizeLatticePrunedOptions(): delta(kDelta),$/;"	f	struct:fst::DeterminizeLatticePrunedOptions
DeterminizeLatticePrunedOptions	lat/determinize-lattice-pruned.h	/^struct DeterminizeLatticePrunedOptions {$/;"	s	namespace:fst
KALDI_LAT_DETERMINIZE_LATTICE_PRUNED_H_	lat/determinize-lattice-pruned.h	23;"	d
Register	lat/determinize-lattice-pruned.h	/^  void Register (kaldi::OptionsItf *po) {$/;"	f	struct:fst::DeterminizeLatticePhonePrunedOptions
Register	lat/determinize-lattice-pruned.h	/^  void Register (kaldi::OptionsItf *po) {$/;"	f	struct:fst::DeterminizeLatticePrunedOptions
delta	lat/determinize-lattice-pruned.h	/^  float delta; \/\/ A small offset used to measure equality of weights.$/;"	m	struct:fst::DeterminizeLatticePrunedOptions
delta	lat/determinize-lattice-pruned.h	/^  float delta;$/;"	m	struct:fst::DeterminizeLatticePhonePrunedOptions
fst	lat/determinize-lattice-pruned.h	/^namespace fst {$/;"	n
max_arcs	lat/determinize-lattice-pruned.h	/^  int max_arcs;$/;"	m	struct:fst::DeterminizeLatticePrunedOptions
max_loop	lat/determinize-lattice-pruned.h	/^  int max_loop; \/\/ If >0, can be used to detect non-determinizable input$/;"	m	struct:fst::DeterminizeLatticePrunedOptions
max_mem	lat/determinize-lattice-pruned.h	/^  int max_mem; \/\/ If >0, determinization will fail and return false$/;"	m	struct:fst::DeterminizeLatticePrunedOptions
max_mem	lat/determinize-lattice-pruned.h	/^  int max_mem;$/;"	m	struct:fst::DeterminizeLatticePhonePrunedOptions
max_states	lat/determinize-lattice-pruned.h	/^  int max_states;$/;"	m	struct:fst::DeterminizeLatticePrunedOptions
minimize	lat/determinize-lattice-pruned.h	/^  bool minimize;$/;"	m	struct:fst::DeterminizeLatticePhonePrunedOptions
phone_determinize	lat/determinize-lattice-pruned.h	/^  bool phone_determinize;$/;"	m	struct:fst::DeterminizeLatticePhonePrunedOptions
retry_cutoff	lat/determinize-lattice-pruned.h	/^  float retry_cutoff;$/;"	m	struct:fst::DeterminizeLatticePrunedOptions
word_determinize	lat/determinize-lattice-pruned.h	/^  bool word_determinize;$/;"	m	struct:fst::DeterminizeLatticePhonePrunedOptions
KALDI_LAT_KALDI_KWS_H_	lat/kaldi-kws.h	22;"	d
KwsLexicographicArc	lat/kaldi-kws.h	/^typedef StdLStdLStdArc KwsLexicographicArc;$/;"	t	namespace:kaldi
KwsLexicographicFst	lat/kaldi-kws.h	/^typedef fst::VectorFst<KwsLexicographicArc> KwsLexicographicFst;$/;"	t	namespace:kaldi
KwsLexicographicWeight	lat/kaldi-kws.h	/^typedef StdLStdLStdWeight KwsLexicographicWeight;$/;"	t	namespace:kaldi
KwsProductArc	lat/kaldi-kws.h	/^typedef LogXStdXStdprimeArc KwsProductArc;$/;"	t	namespace:kaldi
KwsProductFst	lat/kaldi-kws.h	/^typedef fst::VectorFst<KwsProductArc> KwsProductFst;$/;"	t	namespace:kaldi
KwsProductWeight	lat/kaldi-kws.h	/^typedef LogXStdXStdprimeWeight KwsProductWeight;$/;"	t	namespace:kaldi
LogXStdXStdprimeArc	lat/kaldi-kws.h	/^typedef fst::ArcTpl<LogXStdXStdprimeWeight> LogXStdXStdprimeArc;$/;"	t	namespace:kaldi
LogXStdXStdprimeWeight	lat/kaldi-kws.h	/^typedef fst::ProductWeight<LogWeight, StdXStdprimeWeight> LogXStdXStdprimeWeight;$/;"	t	namespace:kaldi
StdLStdLStdArc	lat/kaldi-kws.h	/^typedef fst::ArcTpl<StdLStdLStdWeight> StdLStdLStdArc;$/;"	t	namespace:kaldi
StdLStdLStdWeight	lat/kaldi-kws.h	/^typedef fst::LexicographicWeight<TropicalWeight, StdLStdWeight> StdLStdLStdWeight;$/;"	t	namespace:kaldi
StdLStdWeight	lat/kaldi-kws.h	/^typedef fst::LexicographicWeight<TropicalWeight, TropicalWeight> StdLStdWeight;$/;"	t	namespace:kaldi
StdXStdprimeWeight	lat/kaldi-kws.h	/^typedef fst::ProductWeight<TropicalWeight, ArcticWeight> StdXStdprimeWeight;$/;"	t	namespace:kaldi
kaldi	lat/kaldi-kws.h	/^namespace kaldi {$/;"	n
RandCompactLattice	lat/kaldi-lattice-test.cc	/^CompactLattice *RandCompactLattice() {$/;"	f	namespace:kaldi
RandLattice	lat/kaldi-lattice-test.cc	/^Lattice *RandLattice() {$/;"	f	namespace:kaldi
TestCompactLatticeTable	lat/kaldi-lattice-test.cc	/^void TestCompactLatticeTable(bool binary) {$/;"	f	namespace:kaldi
TestCompactLatticeTableCross	lat/kaldi-lattice-test.cc	/^void TestCompactLatticeTableCross(bool binary) {$/;"	f	namespace:kaldi
TestLatticeTable	lat/kaldi-lattice-test.cc	/^void TestLatticeTable(bool binary) {$/;"	f	namespace:kaldi
TestLatticeTableCross	lat/kaldi-lattice-test.cc	/^void TestLatticeTableCross(bool binary) {$/;"	f	namespace:kaldi
kaldi	lat/kaldi-lattice-test.cc	/^namespace kaldi {$/;"	n	file:
main	lat/kaldi-lattice-test.cc	/^int main() {$/;"	f
Arc	lat/kaldi-lattice.cc	/^  typedef LatticeArc Arc;$/;"	t	class:kaldi::LatticeReader	file:
CArc	lat/kaldi-lattice.cc	/^  typedef CompactLatticeArc CArc;$/;"	t	class:kaldi::LatticeReader	file:
CWeight	lat/kaldi-lattice.cc	/^  typedef CompactLatticeWeight CWeight;$/;"	t	class:kaldi::LatticeReader	file:
ConvertToCompactLattice	lat/kaldi-lattice.cc	/^CompactLattice* ConvertToCompactLattice(CompactLattice *ifst) {$/;"	f	namespace:kaldi
ConvertToCompactLattice	lat/kaldi-lattice.cc	/^CompactLattice* ConvertToCompactLattice(fst::VectorFst<OrigWeightType> *ifst) {$/;"	f	namespace:kaldi
ConvertToLattice	lat/kaldi-lattice.cc	/^Lattice* ConvertToLattice(Lattice *ifst) {$/;"	f	namespace:kaldi
ConvertToLattice	lat/kaldi-lattice.cc	/^Lattice* ConvertToLattice(fst::VectorFst<OrigWeightType> *ifst) {$/;"	f	namespace:kaldi
Label	lat/kaldi-lattice.cc	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::LatticeReader	file:
LatticeReader	lat/kaldi-lattice.cc	/^class LatticeReader {$/;"	c	namespace:kaldi	file:
Read	lat/kaldi-lattice.cc	/^bool CompactLatticeHolder::Read(std::istream &is) {$/;"	f	class:kaldi::CompactLatticeHolder
Read	lat/kaldi-lattice.cc	/^bool LatticeHolder::Read(std::istream &is) {$/;"	f	class:kaldi::LatticeHolder
ReadCompactLattice	lat/kaldi-lattice.cc	/^bool ReadCompactLattice(std::istream &is, bool binary,$/;"	f	namespace:kaldi
ReadCompactLatticeText	lat/kaldi-lattice.cc	/^CompactLattice *ReadCompactLatticeText(std::istream &is) {$/;"	f	namespace:kaldi
ReadLattice	lat/kaldi-lattice.cc	/^bool ReadLattice(std::istream &is, bool binary,$/;"	f	namespace:kaldi
ReadLatticeText	lat/kaldi-lattice.cc	/^Lattice *ReadLatticeText(std::istream &is) {$/;"	f	namespace:kaldi
ReadText	lat/kaldi-lattice.cc	/^  static std::pair<Lattice*, CompactLattice*> ReadText($/;"	f	class:kaldi::LatticeReader
StateId	lat/kaldi-lattice.cc	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::LatticeReader	file:
StrToCWeight	lat/kaldi-lattice.cc	/^  static  bool StrToCWeight(const std::string &s, bool allow_zero, CWeight *w) {$/;"	f	class:kaldi::LatticeReader
StrToWeight	lat/kaldi-lattice.cc	/^  static bool StrToWeight(const std::string &s, bool allow_zero, Weight *w) {$/;"	f	class:kaldi::LatticeReader
Weight	lat/kaldi-lattice.cc	/^  typedef LatticeWeight Weight;$/;"	t	class:kaldi::LatticeReader	file:
WriteCompactLattice	lat/kaldi-lattice.cc	/^bool WriteCompactLattice(std::ostream &os, bool binary,$/;"	f	namespace:kaldi
WriteLattice	lat/kaldi-lattice.cc	/^bool WriteLattice(std::ostream &os, bool binary, const Lattice &t) {$/;"	f	namespace:kaldi
kaldi	lat/kaldi-lattice.cc	/^namespace kaldi {$/;"	n	file:
Clear	lat/kaldi-lattice.h	/^  void Clear() { if (t_) { delete t_; t_ = NULL; } }$/;"	f	class:kaldi::CompactLatticeHolder
Clear	lat/kaldi-lattice.h	/^  void Clear() { if (t_) { delete t_; t_ = NULL; } }$/;"	f	class:kaldi::LatticeHolder
CompactLattice	lat/kaldi-lattice.h	/^typedef fst::VectorFst<CompactLatticeArc> CompactLattice;$/;"	t	namespace:kaldi
CompactLatticeArc	lat/kaldi-lattice.h	/^typedef fst::ArcTpl<CompactLatticeWeight> CompactLatticeArc;$/;"	t	namespace:kaldi
CompactLatticeHolder	lat/kaldi-lattice.h	/^  CompactLatticeHolder() { t_ = NULL; }$/;"	f	class:kaldi::CompactLatticeHolder
CompactLatticeHolder	lat/kaldi-lattice.h	/^class CompactLatticeHolder {$/;"	c	namespace:kaldi
CompactLatticeWeight	lat/kaldi-lattice.h	/^typedef fst::CompactLatticeWeightTpl<LatticeWeight, int32> CompactLatticeWeight;$/;"	t	namespace:kaldi
CompactLatticeWeightCommonDivisor	lat/kaldi-lattice.h	/^  CompactLatticeWeightCommonDivisor;$/;"	t	namespace:kaldi
CompactLatticeWriter	lat/kaldi-lattice.h	/^typedef TableWriter<CompactLatticeHolder> CompactLatticeWriter;$/;"	t	namespace:kaldi
IsReadInBinary	lat/kaldi-lattice.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::CompactLatticeHolder
IsReadInBinary	lat/kaldi-lattice.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::LatticeHolder
KALDI_LAT_KALDI_LATTICE_H_	lat/kaldi-lattice.h	22;"	d
Lattice	lat/kaldi-lattice.h	/^typedef fst::VectorFst<LatticeArc> Lattice;$/;"	t	namespace:kaldi
LatticeArc	lat/kaldi-lattice.h	/^typedef fst::ArcTpl<LatticeWeight> LatticeArc;$/;"	t	namespace:kaldi
LatticeHolder	lat/kaldi-lattice.h	/^  LatticeHolder() { t_ = NULL; }$/;"	f	class:kaldi::LatticeHolder
LatticeHolder	lat/kaldi-lattice.h	/^class LatticeHolder {$/;"	c	namespace:kaldi
LatticeWeight	lat/kaldi-lattice.h	/^typedef fst::LatticeWeightTpl<BaseFloat> LatticeWeight;$/;"	t	namespace:kaldi
LatticeWriter	lat/kaldi-lattice.h	/^typedef TableWriter<LatticeHolder> LatticeWriter;$/;"	t	namespace:kaldi
RandomAccessCompactLatticeReader	lat/kaldi-lattice.h	/^typedef RandomAccessTableReader<CompactLatticeHolder> RandomAccessCompactLatticeReader;$/;"	t	namespace:kaldi
RandomAccessLatticeReader	lat/kaldi-lattice.h	/^typedef RandomAccessTableReader<LatticeHolder> RandomAccessLatticeReader;$/;"	t	namespace:kaldi
SequentialCompactLatticeReader	lat/kaldi-lattice.h	/^typedef SequentialTableReader<CompactLatticeHolder> SequentialCompactLatticeReader;$/;"	t	namespace:kaldi
SequentialLatticeReader	lat/kaldi-lattice.h	/^typedef SequentialTableReader<LatticeHolder> SequentialLatticeReader;$/;"	t	namespace:kaldi
T	lat/kaldi-lattice.h	/^  typedef CompactLattice T;$/;"	t	class:kaldi::CompactLatticeHolder
T	lat/kaldi-lattice.h	/^  typedef Lattice T;$/;"	t	class:kaldi::LatticeHolder
Value	lat/kaldi-lattice.h	/^  const T &Value() const {$/;"	f	class:kaldi::CompactLatticeHolder
Value	lat/kaldi-lattice.h	/^  const T &Value() const {$/;"	f	class:kaldi::LatticeHolder
Write	lat/kaldi-lattice.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::CompactLatticeHolder
Write	lat/kaldi-lattice.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::LatticeHolder
kaldi	lat/kaldi-lattice.h	/^namespace kaldi {$/;"	n
t_	lat/kaldi-lattice.h	/^  T *t_;$/;"	m	class:kaldi::CompactLatticeHolder
t_	lat/kaldi-lattice.h	/^  T *t_;$/;"	m	class:kaldi::LatticeHolder
~CompactLatticeHolder	lat/kaldi-lattice.h	/^  ~CompactLatticeHolder() { Clear(); }$/;"	f	class:kaldi::CompactLatticeHolder
~LatticeHolder	lat/kaldi-lattice.h	/^  ~LatticeHolder() { Clear(); }$/;"	f	class:kaldi::LatticeHolder
ClusterLattice	lat/kws-functions.cc	/^bool ClusterLattice(CompactLattice *clat,$/;"	f	namespace:kaldi
CompactLatticeToKwsProductFstMapper	lat/kws-functions.cc	/^  CompactLatticeToKwsProductFstMapper() {}$/;"	f	class:kaldi::CompactLatticeToKwsProductFstMapper
CompactLatticeToKwsProductFstMapper	lat/kws-functions.cc	/^class CompactLatticeToKwsProductFstMapper {$/;"	c	namespace:kaldi	file:
CompareInterval	lat/kws-functions.cc	/^bool CompareInterval(const Interval &i1,$/;"	f	namespace:kaldi
ComputeCompactLatticeAlphas	lat/kws-functions.cc	/^bool ComputeCompactLatticeAlphas(const CompactLattice &clat,$/;"	f	namespace:kaldi
ComputeCompactLatticeBetas	lat/kws-functions.cc	/^bool ComputeCompactLatticeBetas(const CompactLattice &clat,$/;"	f	namespace:kaldi
CreateFactorTransducer	lat/kws-functions.cc	/^bool CreateFactorTransducer(const CompactLattice &clat,$/;"	f	namespace:kaldi
DifferenceWrapper	lat/kws-functions.cc	/^static void DifferenceWrapper(const fst::VectorFst<Arc> &fst1,$/;"	f	namespace:kaldi
DoFactorDisambiguation	lat/kws-functions.cc	/^void DoFactorDisambiguation(KwsLexicographicFst *index_transducer) {$/;"	f	namespace:kaldi
DoFactorMerging	lat/kws-functions.cc	/^void DoFactorMerging(KwsProductFst *factor_transducer,$/;"	f	namespace:kaldi
FinalAction	lat/kws-functions.cc	/^  fst::MapFinalAction FinalAction() const { return fst::MAP_NO_SUPERFINAL; }$/;"	f	class:kaldi::CompactLatticeToKwsProductFstMapper
FinalAction	lat/kws-functions.cc	/^  fst::MapFinalAction FinalAction() const { return fst::MAP_NO_SUPERFINAL; }$/;"	f	class:kaldi::KwsProductFstToKwsLexicographicFstMapper
FromArc	lat/kws-functions.cc	/^  typedef CompactLatticeArc FromArc;$/;"	t	class:kaldi::CompactLatticeToKwsProductFstMapper	file:
FromArc	lat/kws-functions.cc	/^  typedef KwsProductArc FromArc;$/;"	t	class:kaldi::KwsProductFstToKwsLexicographicFstMapper	file:
FromWeight	lat/kws-functions.cc	/^  typedef CompactLatticeWeight FromWeight;$/;"	t	class:kaldi::CompactLatticeToKwsProductFstMapper	file:
FromWeight	lat/kws-functions.cc	/^  typedef KwsProductWeight FromWeight;$/;"	t	class:kaldi::KwsProductFstToKwsLexicographicFstMapper	file:
InputSymbolsAction	lat/kws-functions.cc	/^  fst::MapSymbolsAction InputSymbolsAction() const { return fst::MAP_COPY_SYMBOLS; }$/;"	f	class:kaldi::CompactLatticeToKwsProductFstMapper
InputSymbolsAction	lat/kws-functions.cc	/^  fst::MapSymbolsAction InputSymbolsAction() const { return fst::MAP_COPY_SYMBOLS; }$/;"	f	class:kaldi::KwsProductFstToKwsLexicographicFstMapper
KwsProductFstToKwsLexicographicFstMapper	lat/kws-functions.cc	/^  KwsProductFstToKwsLexicographicFstMapper() {}$/;"	f	class:kaldi::KwsProductFstToKwsLexicographicFstMapper
KwsProductFstToKwsLexicographicFstMapper	lat/kws-functions.cc	/^class KwsProductFstToKwsLexicographicFstMapper {$/;"	c	namespace:kaldi	file:
MaybeDoSanityCheck	lat/kws-functions.cc	/^void MaybeDoSanityCheck(const KwsLexicographicFst &index_transducer) {$/;"	f	namespace:kaldi
MaybeDoSanityCheck	lat/kws-functions.cc	/^void MaybeDoSanityCheck(const KwsProductFst &product_transducer) {$/;"	f	namespace:kaldi
OptimizeFactorTransducer	lat/kws-functions.cc	/^void OptimizeFactorTransducer(KwsLexicographicFst *index_transducer,$/;"	f	namespace:kaldi
OutputSymbolsAction	lat/kws-functions.cc	/^  fst::MapSymbolsAction OutputSymbolsAction() const { return fst::MAP_COPY_SYMBOLS;}$/;"	f	class:kaldi::CompactLatticeToKwsProductFstMapper
OutputSymbolsAction	lat/kws-functions.cc	/^  fst::MapSymbolsAction OutputSymbolsAction() const { return fst::MAP_COPY_SYMBOLS;}$/;"	f	class:kaldi::KwsProductFstToKwsLexicographicFstMapper
Properties	lat/kws-functions.cc	/^  uint64 Properties(uint64 props) const { return props; }$/;"	f	class:kaldi::CompactLatticeToKwsProductFstMapper
Properties	lat/kws-functions.cc	/^  uint64 Properties(uint64 props) const { return props; }$/;"	f	class:kaldi::KwsProductFstToKwsLexicographicFstMapper
RemoveLongSilences	lat/kws-functions.cc	/^void RemoveLongSilences(int32 max_silence_frames,$/;"	f	namespace:kaldi
ReplaceSymbolWithEpsilon	lat/kws-functions.cc	/^static void ReplaceSymbolWithEpsilon(typename Arc::Label symbol,$/;"	f	namespace:kaldi
ToArc	lat/kws-functions.cc	/^  typedef KwsLexicographicArc ToArc;$/;"	t	class:kaldi::KwsProductFstToKwsLexicographicFstMapper	file:
ToArc	lat/kws-functions.cc	/^  typedef KwsProductArc ToArc;$/;"	t	class:kaldi::CompactLatticeToKwsProductFstMapper	file:
ToWeight	lat/kws-functions.cc	/^  typedef KwsLexicographicWeight ToWeight;$/;"	t	class:kaldi::KwsProductFstToKwsLexicographicFstMapper	file:
ToWeight	lat/kws-functions.cc	/^  typedef KwsProductWeight ToWeight;$/;"	t	class:kaldi::CompactLatticeToKwsProductFstMapper	file:
kaldi	lat/kws-functions.cc	/^namespace kaldi {$/;"	n	file:
operator ()	lat/kws-functions.cc	/^  ToArc operator()(const FromArc &arc) const {$/;"	f	class:kaldi::CompactLatticeToKwsProductFstMapper
operator ()	lat/kws-functions.cc	/^  ToArc operator()(const FromArc &arc) const {$/;"	f	class:kaldi::KwsProductFstToKwsLexicographicFstMapper
End	lat/kws-functions.h	/^  int32 End() const {return end_;}$/;"	f	class:kaldi::Interval
Interval	lat/kws-functions.h	/^  Interval() {}$/;"	f	class:kaldi::Interval
Interval	lat/kws-functions.h	/^  Interval(const Interval &interval) : start_(interval.Start()), end_(interval.End()) {}$/;"	f	class:kaldi::Interval
Interval	lat/kws-functions.h	/^  Interval(int32 start, int32 end) : start_(start), end_(end) {}$/;"	f	class:kaldi::Interval
Interval	lat/kws-functions.h	/^class Interval {$/;"	c	namespace:kaldi
KALDI_LAT_KWS_FUNCTIONS_H_	lat/kws-functions.h	22;"	d
Overlap	lat/kws-functions.h	/^  int32 Overlap(Interval interval) {$/;"	f	class:kaldi::Interval
Start	lat/kws-functions.h	/^  int32 Start() const {return start_;}$/;"	f	class:kaldi::Interval
end_	lat/kws-functions.h	/^  int32 end_;$/;"	m	class:kaldi::Interval
kaldi	lat/kws-functions.h	/^namespace kaldi {$/;"	n
start_	lat/kws-functions.h	/^  int32 start_;$/;"	m	class:kaldi::Interval
~Interval	lat/kws-functions.h	/^  ~Interval() {}$/;"	f	class:kaldi::Interval
AddWordInsPenToCompactLattice	lat/lattice-functions.cc	/^void AddWordInsPenToCompactLattice(BaseFloat word_ins_penalty, $/;"	f	namespace:kaldi
ClatRescoreTuple	lat/lattice-functions.cc	/^  ClatRescoreTuple(int32 state, int32 arc, int32 tid):$/;"	f	struct:kaldi::ClatRescoreTuple
ClatRescoreTuple	lat/lattice-functions.cc	/^struct ClatRescoreTuple {$/;"	s	namespace:kaldi	file:
CompactLatticeDepth	lat/lattice-functions.cc	/^BaseFloat CompactLatticeDepth(const CompactLattice &clat,$/;"	f	namespace:kaldi
CompactLatticeDepthPerFrame	lat/lattice-functions.cc	/^void CompactLatticeDepthPerFrame(const CompactLattice &clat,$/;"	f	namespace:kaldi
CompactLatticeLimitDepth	lat/lattice-functions.cc	/^void CompactLatticeLimitDepth(int32 max_depth_per_frame,$/;"	f	namespace:kaldi
CompactLatticeShortestPath	lat/lattice-functions.cc	/^void CompactLatticeShortestPath(const CompactLattice &clat,$/;"	f	namespace:kaldi
CompactLatticeStateTimes	lat/lattice-functions.cc	/^int32 CompactLatticeStateTimes(const CompactLattice &lat, vector<int32> *times) {$/;"	f	namespace:kaldi
CompactLatticeToWordAlignment	lat/lattice-functions.cc	/^bool CompactLatticeToWordAlignment(const CompactLattice &clat,$/;"	f	namespace:kaldi
CompactLatticeToWordProns	lat/lattice-functions.cc	/^bool CompactLatticeToWordProns($/;"	f	namespace:kaldi
ComposeCompactLatticeDeterministic	lat/lattice-functions.cc	/^void ComposeCompactLatticeDeterministic($/;"	f	namespace:kaldi
ComputeLatticeAlphasAndBetas	lat/lattice-functions.cc	/^static double ComputeLatticeAlphasAndBetas(const LatticeType &lat,$/;"	f	namespace:kaldi
ConvertCompactLatticeToPhones	lat/lattice-functions.cc	/^void ConvertCompactLatticeToPhones(const TransitionModel &trans,$/;"	f	namespace:kaldi
ConvertLatticeToPhones	lat/lattice-functions.cc	/^void ConvertLatticeToPhones(const TransitionModel &trans,$/;"	f	namespace:kaldi
LatticeActivePhones	lat/lattice-functions.cc	/^void LatticeActivePhones(const Lattice &lat, const TransitionModel &trans,$/;"	f	namespace:kaldi
LatticeArcRecord	lat/lattice-functions.cc	/^struct LatticeArcRecord {$/;"	s	namespace:kaldi	file:
LatticeBoost	lat/lattice-functions.cc	/^bool LatticeBoost(const TransitionModel &trans,$/;"	f	namespace:kaldi
LatticeForwardBackward	lat/lattice-functions.cc	/^BaseFloat LatticeForwardBackward(const Lattice &lat, Posterior *post,$/;"	f	namespace:kaldi
LatticeForwardBackwardMmi	lat/lattice-functions.cc	/^BaseFloat LatticeForwardBackwardMmi($/;"	f	namespace:kaldi
LatticeForwardBackwardMpeVariants	lat/lattice-functions.cc	/^BaseFloat LatticeForwardBackwardMpeVariants($/;"	f	namespace:kaldi
LatticeStateTimes	lat/lattice-functions.cc	/^int32 LatticeStateTimes(const Lattice &lat, vector<int32> *times) {$/;"	f	namespace:kaldi
LogAddOrMax	lat/lattice-functions.cc	/^static inline double LogAddOrMax(bool viterbi, double a, double b) {$/;"	f	namespace:kaldi
LongestSentenceLength	lat/lattice-functions.cc	/^int32 LongestSentenceLength(const CompactLattice &clat) {$/;"	f	namespace:kaldi
LongestSentenceLength	lat/lattice-functions.cc	/^int32 LongestSentenceLength(const Lattice &lat) {$/;"	f	namespace:kaldi
PruneLattice	lat/lattice-functions.cc	/^bool PruneLattice(BaseFloat beam, LatType *lat) {$/;"	f	namespace:kaldi
RescoreCompactLattice	lat/lattice-functions.cc	/^bool RescoreCompactLattice(DecodableInterface *decodable,$/;"	f	namespace:kaldi
RescoreCompactLatticeInternal	lat/lattice-functions.cc	/^bool RescoreCompactLatticeInternal($/;"	f	namespace:kaldi
RescoreCompactLatticeSpeedup	lat/lattice-functions.cc	/^bool RescoreCompactLatticeSpeedup($/;"	f	namespace:kaldi
RescoreLattice	lat/lattice-functions.cc	/^bool RescoreLattice(DecodableInterface *decodable,$/;"	f	namespace:kaldi
TopSortCompactLatticeIfNeeded	lat/lattice-functions.cc	/^void TopSortCompactLatticeIfNeeded(CompactLattice *clat) {$/;"	f	namespace:kaldi
TopSortLatticeIfNeeded	lat/lattice-functions.cc	/^void TopSortLatticeIfNeeded(Lattice *lat) {$/;"	f	namespace:kaldi
arc	lat/lattice-functions.cc	/^  size_t arc; \/\/ arc index within the state.$/;"	m	struct:kaldi::LatticeArcRecord	file:
arc_id	lat/lattice-functions.cc	/^  int32 arc_id;$/;"	m	struct:kaldi::ClatRescoreTuple	file:
kaldi	lat/lattice-functions.cc	/^namespace kaldi {$/;"	n	file:
logprob	lat/lattice-functions.cc	/^  BaseFloat logprob; \/\/ logprob <= 0 is the best Viterbi logprob of this arc,$/;"	m	struct:kaldi::LatticeArcRecord	file:
operator <	lat/lattice-functions.cc	/^  bool operator < (const LatticeArcRecord &other) const {$/;"	f	struct:kaldi::LatticeArcRecord
state	lat/lattice-functions.cc	/^  CompactLatticeArc::StateId state; \/\/ state in the lattice.$/;"	m	struct:kaldi::LatticeArcRecord	file:
state_id	lat/lattice-functions.cc	/^  int32 state_id;$/;"	m	struct:kaldi::ClatRescoreTuple	file:
tid	lat/lattice-functions.cc	/^  int32 tid;$/;"	m	struct:kaldi::ClatRescoreTuple	file:
KALDI_LAT_LATTICE_FUNCTIONS_H_	lat/lattice-functions.h	25;"	d
kaldi	lat/lattice-functions.h	/^namespace kaldi {$/;"	n
RandDeterministicCompactLattice	lat/minimize-lattice-test.cc	/^CompactLattice *RandDeterministicCompactLattice() {$/;"	f	namespace:kaldi
TestMinimizeCompactLattice	lat/minimize-lattice-test.cc	/^void TestMinimizeCompactLattice() {$/;"	f	namespace:kaldi
kaldi	lat/minimize-lattice-test.cc	/^namespace kaldi {$/;"	n	file:
main	lat/minimize-lattice-test.cc	/^int main() {$/;"	f
CompactArc	lat/minimize-lattice.cc	/^  typedef ArcTpl<CompactWeight> CompactArc;$/;"	t	class:fst::CompactLatticeMinimizer	file:
CompactLatticeMinimizer	lat/minimize-lattice.cc	/^  CompactLatticeMinimizer(MutableFst<CompactArc> *clat,$/;"	f	class:fst::CompactLatticeMinimizer
CompactLatticeMinimizer	lat/minimize-lattice.cc	/^template<class Weight, class IntType> class CompactLatticeMinimizer {$/;"	c	namespace:fst	file:
CompactWeight	lat/minimize-lattice.cc	/^  typedef CompactLatticeWeightTpl<Weight, IntType> CompactWeight;$/;"	t	class:fst::CompactLatticeMinimizer	file:
ComputeStateHashValues	lat/minimize-lattice.cc	/^  void ComputeStateHashValues() {$/;"	f	class:fst::CompactLatticeMinimizer
ComputeStateMap	lat/minimize-lattice.cc	/^  void ComputeStateMap() {$/;"	f	class:fst::CompactLatticeMinimizer
ConvertStringToHashValue	lat/minimize-lattice.cc	/^  static HashType ConvertStringToHashValue(const std::vector<IntType> &vec) {$/;"	f	class:fst::CompactLatticeMinimizer
EquivalenceSorter	lat/minimize-lattice.cc	/^  struct EquivalenceSorter {$/;"	s	class:fst::CompactLatticeMinimizer	file:
Equivalent	lat/minimize-lattice.cc	/^  bool Equivalent(StateId s, StateId t) const {$/;"	f	class:fst::CompactLatticeMinimizer
HashType	lat/minimize-lattice.cc	/^  typedef size_t HashType;$/;"	t	class:fst::CompactLatticeMinimizer	file:
InitHashValue	lat/minimize-lattice.cc	/^  static void InitHashValue(const CompactWeight &final_weight, HashType *h) {$/;"	f	class:fst::CompactLatticeMinimizer
Label	lat/minimize-lattice.cc	/^  typedef typename CompactArc::Label Label;$/;"	t	class:fst::CompactLatticeMinimizer	file:
Minimize	lat/minimize-lattice.cc	/^  bool Minimize() {$/;"	f	class:fst::CompactLatticeMinimizer
MinimizeCompactLattice	lat/minimize-lattice.cc	/^bool MinimizeCompactLattice($/;"	f	namespace:fst
ModifyModel	lat/minimize-lattice.cc	/^  void ModifyModel() {    $/;"	f	class:fst::CompactLatticeMinimizer
StateId	lat/minimize-lattice.cc	/^  typedef typename CompactArc::StateId StateId;$/;"	t	class:fst::CompactLatticeMinimizer	file:
UpdateHashValueForTransition	lat/minimize-lattice.cc	/^  static void UpdateHashValueForTransition(const CompactWeight &weight,$/;"	f	class:fst::CompactLatticeMinimizer
clat_	lat/minimize-lattice.cc	/^  MutableFst<ArcTpl<CompactLatticeWeightTpl<Weight, IntType> > > *clat_;$/;"	m	class:fst::CompactLatticeMinimizer	file:
delta_	lat/minimize-lattice.cc	/^  float delta_;$/;"	m	class:fst::CompactLatticeMinimizer	file:
fst	lat/minimize-lattice.cc	/^namespace fst {$/;"	n	file:
operator ()	lat/minimize-lattice.cc	/^    bool operator () (const CompactArc &a, const CompactArc &b) const {$/;"	f	struct:fst::CompactLatticeMinimizer::EquivalenceSorter
state_hashes_	lat/minimize-lattice.cc	/^  std::vector<HashType> state_hashes_;$/;"	m	class:fst::CompactLatticeMinimizer	file:
state_map_	lat/minimize-lattice.cc	/^  std::vector<StateId> state_map_; \/\/ maps each state to itself or to some$/;"	m	class:fst::CompactLatticeMinimizer	file:
KALDI_LAT_MINIMIZE_LATTICE_H_	lat/minimize-lattice.h	23;"	d
fst	lat/minimize-lattice.h	/^namespace fst {$/;"	n
Advance	lat/phone-align-lattice.cc	/^    void Advance(const CompactLatticeArc &arc, const PhoneAlignLatticeOptions &opts,$/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
AlignLattice	lat/phone-align-lattice.cc	/^  bool AlignLattice() {$/;"	f	class:kaldi::LatticePhoneAligner
ComputationState	lat/phone-align-lattice.cc	/^    ComputationState(): weight_(LatticeWeight::One()) { } \/\/ initial state.$/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
ComputationState	lat/phone-align-lattice.cc	/^    ComputationState(const ComputationState &other):$/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
ComputationState	lat/phone-align-lattice.cc	/^  class ComputationState { \/\/\/ The state of the computation in which,$/;"	c	class:kaldi::LatticePhoneAligner	file:
FinalWeight	lat/phone-align-lattice.cc	/^    LatticeWeight FinalWeight() { return (IsEmpty() ? weight_ : LatticeWeight::Zero()); }$/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
GetStateForTuple	lat/phone-align-lattice.cc	/^  StateId GetStateForTuple(const Tuple &tuple, bool add_to_queue) {$/;"	f	class:kaldi::LatticePhoneAligner
Hash	lat/phone-align-lattice.cc	/^    size_t Hash() const {$/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
IsEmpty	lat/phone-align-lattice.cc	/^    bool IsEmpty() { return (transition_ids_.empty() && word_labels_.empty()); }$/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
Label	lat/phone-align-lattice.cc	/^  typedef CompactLatticeArc::Label Label;$/;"	t	class:kaldi::LatticePhoneAligner	file:
LatticePhoneAligner	lat/phone-align-lattice.cc	/^  LatticePhoneAligner(const CompactLattice &lat,$/;"	f	class:kaldi::LatticePhoneAligner
LatticePhoneAligner	lat/phone-align-lattice.cc	/^class LatticePhoneAligner {$/;"	c	namespace:kaldi	file:
MapType	lat/phone-align-lattice.cc	/^  typedef unordered_map<Tuple, StateId, TupleHash, TupleEqual> MapType;$/;"	t	class:kaldi::LatticePhoneAligner	file:
OutputArcForce	lat/phone-align-lattice.cc	/^void LatticePhoneAligner::ComputationState::OutputArcForce($/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
OutputPhoneArc	lat/phone-align-lattice.cc	/^bool LatticePhoneAligner::ComputationState::OutputPhoneArc($/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
OutputWordArc	lat/phone-align-lattice.cc	/^bool LatticePhoneAligner::ComputationState::OutputWordArc($/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
PhoneAlignLattice	lat/phone-align-lattice.cc	/^bool PhoneAlignLattice(const CompactLattice &lat,$/;"	f	namespace:kaldi
ProcessFinal	lat/phone-align-lattice.cc	/^  void ProcessFinal(Tuple tuple, StateId output_state) {$/;"	f	class:kaldi::LatticePhoneAligner
ProcessQueueElement	lat/phone-align-lattice.cc	/^  void ProcessQueueElement() {$/;"	f	class:kaldi::LatticePhoneAligner
RemoveEpsilonsFromLattice	lat/phone-align-lattice.cc	/^  void RemoveEpsilonsFromLattice() {$/;"	f	class:kaldi::LatticePhoneAligner
StateId	lat/phone-align-lattice.cc	/^  typedef CompactLatticeArc::StateId StateId;$/;"	t	class:kaldi::LatticePhoneAligner	file:
Tuple	lat/phone-align-lattice.cc	/^    Tuple(StateId input_state, ComputationState comp_state):$/;"	f	struct:kaldi::LatticePhoneAligner::Tuple
Tuple	lat/phone-align-lattice.cc	/^  struct Tuple {$/;"	s	class:kaldi::LatticePhoneAligner	file:
TupleEqual	lat/phone-align-lattice.cc	/^  struct TupleEqual {$/;"	s	class:kaldi::LatticePhoneAligner	file:
TupleHash	lat/phone-align-lattice.cc	/^  struct TupleHash {$/;"	s	class:kaldi::LatticePhoneAligner	file:
comp_state	lat/phone-align-lattice.cc	/^    ComputationState comp_state;$/;"	m	struct:kaldi::LatticePhoneAligner::Tuple	file:
error_	lat/phone-align-lattice.cc	/^  bool error_;  $/;"	m	class:kaldi::LatticePhoneAligner	file:
input_state	lat/phone-align-lattice.cc	/^    StateId input_state;$/;"	m	struct:kaldi::LatticePhoneAligner::Tuple	file:
kaldi	lat/phone-align-lattice.cc	/^namespace kaldi {$/;"	n	file:
lat_	lat/phone-align-lattice.cc	/^  CompactLattice lat_;$/;"	m	class:kaldi::LatticePhoneAligner	file:
lat_out_	lat/phone-align-lattice.cc	/^  CompactLattice *lat_out_;$/;"	m	class:kaldi::LatticePhoneAligner	file:
map_	lat/phone-align-lattice.cc	/^  MapType map_; \/\/ map from tuples to StateId.$/;"	m	class:kaldi::LatticePhoneAligner	file:
operator ()	lat/phone-align-lattice.cc	/^    bool operator () (const Tuple &state1, const Tuple &state2) const {$/;"	f	struct:kaldi::LatticePhoneAligner::TupleEqual
operator ()	lat/phone-align-lattice.cc	/^    size_t operator() (const Tuple &state) const {$/;"	f	struct:kaldi::LatticePhoneAligner::TupleHash
operator ==	lat/phone-align-lattice.cc	/^    bool operator == (const ComputationState &other) const {$/;"	f	class:kaldi::LatticePhoneAligner::ComputationState
opts_	lat/phone-align-lattice.cc	/^  const PhoneAlignLatticeOptions &opts_;$/;"	m	class:kaldi::LatticePhoneAligner	file:
queue_	lat/phone-align-lattice.cc	/^  std::vector<std::pair<Tuple, StateId> > queue_;$/;"	m	class:kaldi::LatticePhoneAligner	file:
tmodel_	lat/phone-align-lattice.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::LatticePhoneAligner	file:
transition_ids_	lat/phone-align-lattice.cc	/^    std::vector<int32> transition_ids_;$/;"	m	class:kaldi::LatticePhoneAligner::ComputationState	file:
weight_	lat/phone-align-lattice.cc	/^    LatticeWeight weight_; \/\/ contains two floats.$/;"	m	class:kaldi::LatticePhoneAligner::ComputationState	file:
word_labels_	lat/phone-align-lattice.cc	/^    std::vector<int32> word_labels_;$/;"	m	class:kaldi::LatticePhoneAligner::ComputationState	file:
KALDI_LAT_PHONE_ALIGN_LATTICE_H_	lat/phone-align-lattice.h	21;"	d
PhoneAlignLatticeOptions	lat/phone-align-lattice.h	/^  PhoneAlignLatticeOptions(): reorder(true),$/;"	f	struct:kaldi::PhoneAlignLatticeOptions
PhoneAlignLatticeOptions	lat/phone-align-lattice.h	/^struct PhoneAlignLatticeOptions {$/;"	s	namespace:kaldi
Register	lat/phone-align-lattice.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::PhoneAlignLatticeOptions
kaldi	lat/phone-align-lattice.h	/^namespace kaldi {$/;"	n
remove_epsilon	lat/phone-align-lattice.h	/^  bool remove_epsilon;$/;"	m	struct:kaldi::PhoneAlignLatticeOptions
reorder	lat/phone-align-lattice.h	/^  bool reorder;$/;"	m	struct:kaldi::PhoneAlignLatticeOptions
replace_output_symbols	lat/phone-align-lattice.h	/^  bool replace_output_symbols;$/;"	m	struct:kaldi::PhoneAlignLatticeOptions
RandCompactLattice	lat/push-lattice-test.cc	/^CompactLattice *RandCompactLattice() {$/;"	f	namespace:kaldi
TestPushCompactLatticeStrings	lat/push-lattice-test.cc	/^void TestPushCompactLatticeStrings() {$/;"	f	namespace:kaldi
TestPushCompactLatticeWeights	lat/push-lattice-test.cc	/^void TestPushCompactLatticeWeights() {$/;"	f	namespace:kaldi
kaldi	lat/push-lattice-test.cc	/^namespace kaldi {$/;"	n	file:
main	lat/push-lattice-test.cc	/^int main() {$/;"	f
ApplyShifts	lat/push-lattice.cc	/^  void ApplyShifts() {$/;"	f	class:fst::CompactLatticePusher
CheckForConflict	lat/push-lattice.cc	/^  void CheckForConflict(const CompactWeight &final,$/;"	f	class:fst::CompactLatticePusher
CompactArc	lat/push-lattice.cc	/^  typedef ArcTpl<CompactWeight> CompactArc;$/;"	t	class:fst::CompactLatticePusher	file:
CompactLatticePusher	lat/push-lattice.cc	/^  CompactLatticePusher(MutableFst<CompactArc> *clat): clat_(clat) { }$/;"	f	class:fst::CompactLatticePusher
CompactLatticePusher	lat/push-lattice.cc	/^template<class Weight, class IntType> class CompactLatticePusher {  $/;"	c	namespace:fst	file:
CompactWeight	lat/push-lattice.cc	/^  typedef CompactLatticeWeightTpl<Weight, IntType> CompactWeight;$/;"	t	class:fst::CompactLatticePusher	file:
ComputeShifts	lat/push-lattice.cc	/^  void ComputeShifts() {$/;"	f	class:fst::CompactLatticePusher
GetString	lat/push-lattice.cc	/^  static void GetString(const ExpandedFst<CompactArc> &clat,$/;"	f	class:fst::CompactLatticePusher
Push	lat/push-lattice.cc	/^  bool Push() {$/;"	f	class:fst::CompactLatticePusher
PushCompactLatticeStrings	lat/push-lattice.cc	/^bool PushCompactLatticeStrings($/;"	f	namespace:fst
PushCompactLatticeWeights	lat/push-lattice.cc	/^bool PushCompactLatticeWeights($/;"	f	namespace:fst
StateId	lat/push-lattice.cc	/^  typedef typename CompactArc::StateId StateId;$/;"	t	class:fst::CompactLatticePusher	file:
clat_	lat/push-lattice.cc	/^  MutableFst<ArcTpl<CompactLatticeWeightTpl<Weight, IntType> > > *clat_;$/;"	m	class:fst::CompactLatticePusher	file:
fst	lat/push-lattice.cc	/^namespace fst {$/;"	n	file:
shift_vec_	lat/push-lattice.cc	/^  std::vector<int32> shift_vec_;$/;"	m	class:fst::CompactLatticePusher	file:
KALDI_LAT_PUSH_LATTICE_H_	lat/push-lattice.h	23;"	d
fst	lat/push-lattice.h	/^namespace fst {$/;"	n
AccStats	lat/sausages.cc	/^void MinimumBayesRisk::AccStats() {$/;"	f	class:kaldi::MinimumBayesRisk
EditDistance	lat/sausages.cc	/^double MinimumBayesRisk::EditDistance(int32 N, int32 Q,$/;"	f	class:kaldi::MinimumBayesRisk
Int32IsZero	lat/sausages.cc	/^struct Int32IsZero {$/;"	s	namespace:kaldi	file:
MbrDecode	lat/sausages.cc	/^void MinimumBayesRisk::MbrDecode() {$/;"	f	class:kaldi::MinimumBayesRisk
MinimumBayesRisk	lat/sausages.cc	/^MinimumBayesRisk::MinimumBayesRisk(const CompactLattice &clat_in, bool do_mbr):$/;"	f	class:kaldi::MinimumBayesRisk
NormalizeEps	lat/sausages.cc	/^void MinimumBayesRisk::NormalizeEps(std::vector<int32> *vec) {$/;"	f	class:kaldi::MinimumBayesRisk
RemoveEps	lat/sausages.cc	/^void MinimumBayesRisk::RemoveEps(std::vector<int32> *vec) {$/;"	f	class:kaldi::MinimumBayesRisk
kaldi	lat/sausages.cc	/^namespace kaldi {$/;"	n	file:
operator ()	lat/sausages.cc	/^  bool operator() (int32 i) { return (i == 0); }$/;"	f	struct:kaldi::Int32IsZero
AddToMap	lat/sausages.h	/^  static inline void AddToMap(int32 i, double d, std::map<int32, double> *gamma) {$/;"	f	class:kaldi::MinimumBayesRisk
Arc	lat/sausages.h	/^  struct Arc {$/;"	s	class:kaldi::MinimumBayesRisk
GammaCompare	lat/sausages.h	/^  struct GammaCompare{$/;"	s	class:kaldi::MinimumBayesRisk
GetBayesRisk	lat/sausages.h	/^  BaseFloat GetBayesRisk() const { return L_; }$/;"	f	class:kaldi::MinimumBayesRisk
GetOneBest	lat/sausages.h	/^  const std::vector<int32> &GetOneBest() const { \/\/ gets one-best (with no epsilons)$/;"	f	class:kaldi::MinimumBayesRisk
GetOneBestConfidences	lat/sausages.h	/^  const std::vector<BaseFloat> &GetOneBestConfidences() const {$/;"	f	class:kaldi::MinimumBayesRisk
GetOneBestTimes	lat/sausages.h	/^  const std::vector<std::pair<BaseFloat, BaseFloat> > &GetOneBestTimes() const {$/;"	f	class:kaldi::MinimumBayesRisk
GetSausageStats	lat/sausages.h	/^  const std::vector<std::vector<std::pair<int32, BaseFloat> > > &GetSausageStats() const {$/;"	f	class:kaldi::MinimumBayesRisk
GetSausageTimes	lat/sausages.h	/^  const std::vector<std::pair<BaseFloat, BaseFloat> > GetSausageTimes() const {$/;"	f	class:kaldi::MinimumBayesRisk
KALDI_LAT_SAUSAGES_H_	lat/sausages.h	22;"	d
L_	lat/sausages.h	/^  double L_; \/\/ current averaged edit-distance between lattice and R_.$/;"	m	class:kaldi::MinimumBayesRisk
MinimumBayesRisk	lat/sausages.h	/^class MinimumBayesRisk {$/;"	c	namespace:kaldi
R_	lat/sausages.h	/^  std::vector<int32> R_; \/\/ current 1-best word sequence, normalized to have$/;"	m	class:kaldi::MinimumBayesRisk
arcs_	lat/sausages.h	/^  std::vector<Arc> arcs_;$/;"	m	class:kaldi::MinimumBayesRisk
delta	lat/sausages.h	/^  static inline BaseFloat delta() { return 1.0e-05; } \/\/ A constant$/;"	f	class:kaldi::MinimumBayesRisk
do_mbr_	lat/sausages.h	/^  bool do_mbr_;$/;"	m	class:kaldi::MinimumBayesRisk
end_node	lat/sausages.h	/^    int32 end_node;$/;"	m	struct:kaldi::MinimumBayesRisk::Arc
gamma_	lat/sausages.h	/^  std::vector<std::vector<std::pair<int32, BaseFloat> > > gamma_;$/;"	m	class:kaldi::MinimumBayesRisk
kaldi	lat/sausages.h	/^namespace kaldi {$/;"	n
l	lat/sausages.h	/^  inline double l(int32 a, int32 b) { return (a == b ? 0.0 : 1.0); }$/;"	f	class:kaldi::MinimumBayesRisk
loglike	lat/sausages.h	/^    BaseFloat loglike;$/;"	m	struct:kaldi::MinimumBayesRisk::Arc
one_best_confidences_	lat/sausages.h	/^  std::vector<BaseFloat> one_best_confidences_;$/;"	m	class:kaldi::MinimumBayesRisk
one_best_times_	lat/sausages.h	/^  std::vector<std::pair<BaseFloat, BaseFloat> > one_best_times_;$/;"	m	class:kaldi::MinimumBayesRisk
operator ()	lat/sausages.h	/^    bool operator () (const std::pair<int32, BaseFloat> &a,$/;"	f	struct:kaldi::MinimumBayesRisk::GammaCompare
pre_	lat/sausages.h	/^  std::vector<std::vector<int32> > pre_;$/;"	m	class:kaldi::MinimumBayesRisk
r	lat/sausages.h	/^  inline int32 r(int32 q) { return R_[q-1]; }$/;"	f	class:kaldi::MinimumBayesRisk
start_node	lat/sausages.h	/^    int32 start_node;$/;"	m	struct:kaldi::MinimumBayesRisk::Arc
state_times_	lat/sausages.h	/^  std::vector<int32> state_times_; \/\/ time of each state in the word lattice,$/;"	m	class:kaldi::MinimumBayesRisk
times_	lat/sausages.h	/^  std::vector<std::pair<BaseFloat, BaseFloat> > times_;$/;"	m	class:kaldi::MinimumBayesRisk
word	lat/sausages.h	/^    int32 word;$/;"	m	struct:kaldi::MinimumBayesRisk::Arc
Advance	lat/word-align-lattice-lexicon.cc	/^void LatticeLexiconWordAligner::ComputationState::Advance($/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
AlignLattice	lat/word-align-lattice-lexicon.cc	/^  bool AlignLattice() {$/;"	f	class:kaldi::LatticeLexiconWordAligner
AppendVectors	lat/word-align-lattice-lexicon.cc	/^void LatticeLexiconWordAligner::AppendVectors($/;"	f	class:kaldi::LatticeLexiconWordAligner
ComputationState	lat/word-align-lattice-lexicon.cc	/^    ComputationState(): phone_fresh_(kNotFresh), word_fresh_(kNotFresh),$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
ComputationState	lat/word-align-lattice-lexicon.cc	/^    ComputationState(const ComputationState &other):$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
ComputationState	lat/word-align-lattice-lexicon.cc	/^  class ComputationState {$/;"	c	class:kaldi::LatticeLexiconWordAligner	file:
EquivalenceClassOf	lat/word-align-lattice-lexicon.cc	/^int32 WordAlignLatticeLexiconInfo::EquivalenceClassOf(int32 word) const {$/;"	f	class:kaldi::WordAlignLatticeLexiconInfo
FinalWeight	lat/word-align-lattice-lexicon.cc	/^    LatticeWeight FinalWeight() const {$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
FinalizeViabilityMap	lat/word-align-lattice-lexicon.cc	/^void WordAlignLatticeLexiconInfo::FinalizeViabilityMap() {$/;"	f	class:kaldi::WordAlignLatticeLexiconInfo
Freshness	lat/word-align-lattice-lexicon.cc	/^  } Freshness;$/;"	t	class:kaldi::LatticeLexiconWordAligner	typeref:enum:kaldi::LatticeLexiconWordAligner::__anon14	file:
GetStateForTuple	lat/word-align-lattice-lexicon.cc	/^  StateId GetStateForTuple(const Tuple &tuple) {$/;"	f	class:kaldi::LatticeLexiconWordAligner
HasNonEpsArcsOut	lat/word-align-lattice-lexicon.cc	/^bool LatticeLexiconWordAligner::HasNonEpsArcsOut(StateId output_state) {$/;"	f	class:kaldi::LatticeLexiconWordAligner
Hash	lat/word-align-lattice-lexicon.cc	/^    size_t Hash() const {$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
IsEmpty	lat/word-align-lattice-lexicon.cc	/^    bool IsEmpty() const { return (transition_ids_.empty() && words_.empty()); }$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
IsPlausibleWord	lat/word-align-lattice-lexicon.cc	/^static bool IsPlausibleWord(const WordAlignLatticeLexiconInfo &lexicon_info,$/;"	f	namespace:kaldi
IsValidEntry	lat/word-align-lattice-lexicon.cc	/^bool WordAlignLatticeLexiconInfo::IsValidEntry(const std::vector<int32> &entry) const {$/;"	f	class:kaldi::WordAlignLatticeLexiconInfo
Label	lat/word-align-lattice-lexicon.cc	/^  typedef CompactLatticeArc::Label Label;$/;"	t	class:kaldi::LatticeLexiconWordAligner	file:
LatticeLexiconWordAligner	lat/word-align-lattice-lexicon.cc	/^  LatticeLexiconWordAligner(const CompactLattice &lat,$/;"	f	class:kaldi::LatticeLexiconWordAligner
LatticeLexiconWordAligner	lat/word-align-lattice-lexicon.cc	/^class LatticeLexiconWordAligner {$/;"	c	namespace:kaldi	file:
LexiconMap	lat/word-align-lattice-lexicon.cc	/^  typedef WordAlignLatticeLexiconInfo::LexiconMap LexiconMap;$/;"	t	class:kaldi::LatticeLexiconWordAligner	file:
MapSymbols	lat/word-align-lattice-lexicon.cc	/^static void MapSymbols(const WordAlignLatticeLexiconInfo &lexicon_info,$/;"	f	namespace:kaldi
MapType	lat/word-align-lattice-lexicon.cc	/^  typedef unordered_map<Tuple, StateId, TupleHash, TupleEqual> MapType;$/;"	t	class:kaldi::LatticeLexiconWordAligner	file:
NumPhones	lat/word-align-lattice-lexicon.cc	/^    int32 NumPhones() const { return phones_.size(); }$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
NumPhonesMap	lat/word-align-lattice-lexicon.cc	/^  typedef WordAlignLatticeLexiconInfo::NumPhonesMap NumPhonesMap;$/;"	t	class:kaldi::LatticeLexiconWordAligner	file:
NumWords	lat/word-align-lattice-lexicon.cc	/^    int32 NumWords() const { return words_.size(); }$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
PendingWord	lat/word-align-lattice-lexicon.cc	/^    int32 PendingWord() const { KALDI_ASSERT(!words_.empty()); return words_[0]; }$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
PhoneFreshness	lat/word-align-lattice-lexicon.cc	/^    Freshness PhoneFreshness() const { return phone_fresh_; }$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
PossiblyAdvanceArc	lat/word-align-lattice-lexicon.cc	/^void LatticeLexiconWordAligner::PossiblyAdvanceArc($/;"	f	class:kaldi::LatticeLexiconWordAligner
ProcessEpsilonTransitions	lat/word-align-lattice-lexicon.cc	/^void LatticeLexiconWordAligner::ProcessEpsilonTransitions($/;"	f	class:kaldi::LatticeLexiconWordAligner
ProcessFinal	lat/word-align-lattice-lexicon.cc	/^bool LatticeLexiconWordAligner::ProcessFinal() {$/;"	f	class:kaldi::LatticeLexiconWordAligner
ProcessFinalForceOut	lat/word-align-lattice-lexicon.cc	/^void LatticeLexiconWordAligner::ProcessFinalForceOut() {$/;"	f	class:kaldi::LatticeLexiconWordAligner
ProcessFinalWrapper	lat/word-align-lattice-lexicon.cc	/^  void ProcessFinalWrapper() {$/;"	f	class:kaldi::LatticeLexiconWordAligner
ProcessQueueElement	lat/word-align-lattice-lexicon.cc	/^  void ProcessQueueElement() {$/;"	f	class:kaldi::LatticeLexiconWordAligner
ProcessTransition	lat/word-align-lattice-lexicon.cc	/^  void ProcessTransition(StateId prev_output_state, \/\/ state-id of from-state in output lattice$/;"	f	class:kaldi::LatticeLexiconWordAligner
ProcessWordTransitions	lat/word-align-lattice-lexicon.cc	/^void LatticeLexiconWordAligner::ProcessWordTransitions($/;"	f	class:kaldi::LatticeLexiconWordAligner
ReadLexiconForWordAlign	lat/word-align-lattice-lexicon.cc	/^bool ReadLexiconForWordAlign (std::istream &is,$/;"	f	namespace:kaldi
RemoveEpsilonsFromLattice	lat/word-align-lattice-lexicon.cc	/^  void RemoveEpsilonsFromLattice() {$/;"	f	class:kaldi::LatticeLexiconWordAligner
StateId	lat/word-align-lattice-lexicon.cc	/^  typedef CompactLatticeArc::StateId StateId;$/;"	t	class:kaldi::LatticeLexiconWordAligner	file:
TakeForcedTransition	lat/word-align-lattice-lexicon.cc	/^void LatticeLexiconWordAligner::ComputationState::TakeForcedTransition($/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
TakeTransition	lat/word-align-lattice-lexicon.cc	/^bool LatticeLexiconWordAligner::ComputationState::TakeTransition($/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
TestWordAlignedLattice	lat/word-align-lattice-lexicon.cc	/^bool TestWordAlignedLattice(const WordAlignLatticeLexiconInfo &lexicon_info,$/;"	f	namespace:kaldi
Tuple	lat/word-align-lattice-lexicon.cc	/^    Tuple() {}$/;"	f	struct:kaldi::LatticeLexiconWordAligner::Tuple
Tuple	lat/word-align-lattice-lexicon.cc	/^    Tuple(StateId input_state, ComputationState comp_state):$/;"	f	struct:kaldi::LatticeLexiconWordAligner::Tuple
Tuple	lat/word-align-lattice-lexicon.cc	/^  struct Tuple {$/;"	s	class:kaldi::LatticeLexiconWordAligner	file:
TupleEqual	lat/word-align-lattice-lexicon.cc	/^  struct TupleEqual {$/;"	s	class:kaldi::LatticeLexiconWordAligner	file:
TupleHash	lat/word-align-lattice-lexicon.cc	/^  struct TupleHash {$/;"	s	class:kaldi::LatticeLexiconWordAligner	file:
UpdateEquivalenceMap	lat/word-align-lattice-lexicon.cc	/^void WordAlignLatticeLexiconInfo::UpdateEquivalenceMap($/;"	f	class:kaldi::WordAlignLatticeLexiconInfo
UpdateLexiconMap	lat/word-align-lattice-lexicon.cc	/^void WordAlignLatticeLexiconInfo::UpdateLexiconMap($/;"	f	class:kaldi::WordAlignLatticeLexiconInfo
UpdateNumPhonesMap	lat/word-align-lattice-lexicon.cc	/^void WordAlignLatticeLexiconInfo::UpdateNumPhonesMap($/;"	f	class:kaldi::WordAlignLatticeLexiconInfo
UpdateViabilityMap	lat/word-align-lattice-lexicon.cc	/^void WordAlignLatticeLexiconInfo::UpdateViabilityMap($/;"	f	class:kaldi::WordAlignLatticeLexiconInfo
ViabilityMap	lat/word-align-lattice-lexicon.cc	/^  typedef WordAlignLatticeLexiconInfo::ViabilityMap ViabilityMap;$/;"	t	class:kaldi::LatticeLexiconWordAligner	file:
ViableIfAdvanced	lat/word-align-lattice-lexicon.cc	/^bool LatticeLexiconWordAligner::ComputationState::ViableIfAdvanced($/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
WordAlignLatticeLexicon	lat/word-align-lattice-lexicon.cc	/^bool WordAlignLatticeLexicon(const CompactLattice &lat,$/;"	f	namespace:kaldi
WordAlignLatticeLexiconInfo	lat/word-align-lattice-lexicon.cc	/^WordAlignLatticeLexiconInfo::WordAlignLatticeLexiconInfo($/;"	f	class:kaldi::WordAlignLatticeLexiconInfo
WordFreshness	lat/word-align-lattice-lexicon.cc	/^    Freshness WordFreshness() const { return word_fresh_; }$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
comp_state	lat/word-align-lattice-lexicon.cc	/^    ComputationState comp_state;$/;"	m	struct:kaldi::LatticeLexiconWordAligner::Tuple	file:
error_	lat/word-align-lattice-lexicon.cc	/^  bool error_;$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
final_queue_	lat/word-align-lattice-lexicon.cc	/^  std::vector<std::pair<Tuple, StateId> > final_queue_; \/\/ as queue_, but$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
input_state	lat/word-align-lattice-lexicon.cc	/^    StateId input_state;$/;"	m	struct:kaldi::LatticeLexiconWordAligner::Tuple	file:
kAllFresh	lat/word-align-lattice-lexicon.cc	/^    kAllFresh$/;"	e	enum:kaldi::LatticeLexiconWordAligner::__anon14	file:
kFresh	lat/word-align-lattice-lexicon.cc	/^    kFresh,$/;"	e	enum:kaldi::LatticeLexiconWordAligner::__anon14	file:
kNotFresh	lat/word-align-lattice-lexicon.cc	/^    kNotFresh,$/;"	e	enum:kaldi::LatticeLexiconWordAligner::__anon14	file:
kNumStatesOffset	lat/word-align-lattice-lexicon.cc	/^const int kNumStatesOffset = 1000; \/\/ relates to how we apply the$/;"	m	namespace:kaldi	file:
kTemporaryEpsilon	lat/word-align-lattice-lexicon.cc	/^const int kTemporaryEpsilon = -2;$/;"	m	namespace:kaldi	file:
kaldi	lat/word-align-lattice-lexicon.cc	/^namespace kaldi {$/;"	n	file:
lat_in_	lat/word-align-lattice-lexicon.cc	/^  CompactLattice lat_in_;$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
lat_out_	lat/word-align-lattice-lexicon.cc	/^  CompactLattice *lat_out_;$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
lexicon_info_	lat/word-align-lattice-lexicon.cc	/^  const WordAlignLatticeLexiconInfo &lexicon_info_;$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
map_	lat/word-align-lattice-lexicon.cc	/^  MapType map_; \/\/ map from tuples to StateId.$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
max_states_	lat/word-align-lattice-lexicon.cc	/^  int32 max_states_;$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
operator ()	lat/word-align-lattice-lexicon.cc	/^    bool operator () (const Tuple &state1, const Tuple &state2) const {$/;"	f	struct:kaldi::LatticeLexiconWordAligner::TupleEqual
operator ()	lat/word-align-lattice-lexicon.cc	/^    size_t operator() (const Tuple &state) const {$/;"	f	struct:kaldi::LatticeLexiconWordAligner::TupleHash
operator ==	lat/word-align-lattice-lexicon.cc	/^    bool operator == (const ComputationState &other) const {$/;"	f	class:kaldi::LatticeLexiconWordAligner::ComputationState
partial_word_label_	lat/word-align-lattice-lexicon.cc	/^  int32 partial_word_label_;$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
phone_fresh_	lat/word-align-lattice-lexicon.cc	/^    Freshness phone_fresh_;$/;"	m	class:kaldi::LatticeLexiconWordAligner::ComputationState	file:
phones_	lat/word-align-lattice-lexicon.cc	/^    std::vector<int32> phones_; \/\/ sequence of pending phones$/;"	m	class:kaldi::LatticeLexiconWordAligner::ComputationState	file:
queue_	lat/word-align-lattice-lexicon.cc	/^  std::vector<std::pair<Tuple, StateId> > queue_;$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
tmodel_	lat/word-align-lattice-lexicon.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::LatticeLexiconWordAligner	file:
transition_ids_	lat/word-align-lattice-lexicon.cc	/^    std::vector<std::vector<int32> > transition_ids_; \/\/ sequence of transition-ids for each phone..$/;"	m	class:kaldi::LatticeLexiconWordAligner::ComputationState	file:
weight_	lat/word-align-lattice-lexicon.cc	/^    LatticeWeight weight_; \/\/ contains two floats.$/;"	m	class:kaldi::LatticeLexiconWordAligner::ComputationState	file:
word_fresh_	lat/word-align-lattice-lexicon.cc	/^    Freshness word_fresh_;$/;"	m	class:kaldi::LatticeLexiconWordAligner::ComputationState	file:
words_	lat/word-align-lattice-lexicon.cc	/^    std::vector<int32> words_; \/\/ sequence of pending words.$/;"	m	class:kaldi::LatticeLexiconWordAligner::ComputationState	file:
EquivalenceMap	lat/word-align-lattice-lexicon.h	/^  typedef unordered_map<int32, int32> EquivalenceMap;$/;"	t	class:kaldi::WordAlignLatticeLexiconInfo
KALDI_LAT_WORD_ALIGN_LATTICE_LEXICON_H_	lat/word-align-lattice-lexicon.h	21;"	d
LexiconMap	lat/word-align-lattice-lexicon.h	/^                        VectorHasher<int32> > LexiconMap;$/;"	t	class:kaldi::WordAlignLatticeLexiconInfo
NumPhonesMap	lat/word-align-lattice-lexicon.h	/^  typedef unordered_map<int32, std::pair<int32, int32> > NumPhonesMap;$/;"	t	class:kaldi::WordAlignLatticeLexiconInfo
Register	lat/word-align-lattice-lexicon.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::WordAlignLatticeLexiconOpts
ViabilityMap	lat/word-align-lattice-lexicon.h	/^                        VectorHasher<int32> > ViabilityMap;$/;"	t	class:kaldi::WordAlignLatticeLexiconInfo
WordAlignLatticeLexiconInfo	lat/word-align-lattice-lexicon.h	/^class WordAlignLatticeLexiconInfo {$/;"	c	namespace:kaldi
WordAlignLatticeLexiconOpts	lat/word-align-lattice-lexicon.h	/^  WordAlignLatticeLexiconOpts(): partial_word_label(0), reorder(true),$/;"	f	struct:kaldi::WordAlignLatticeLexiconOpts
WordAlignLatticeLexiconOpts	lat/word-align-lattice-lexicon.h	/^struct WordAlignLatticeLexiconOpts {$/;"	s	namespace:kaldi
equivalence_map_	lat/word-align-lattice-lexicon.h	/^  EquivalenceMap equivalence_map_;$/;"	m	class:kaldi::WordAlignLatticeLexiconInfo
kaldi	lat/word-align-lattice-lexicon.h	/^namespace kaldi {$/;"	n
lexicon_map_	lat/word-align-lattice-lexicon.h	/^  LexiconMap lexicon_map_;$/;"	m	class:kaldi::WordAlignLatticeLexiconInfo
max_expand	lat/word-align-lattice-lexicon.h	/^  BaseFloat max_expand;$/;"	m	struct:kaldi::WordAlignLatticeLexiconOpts
num_phones_map_	lat/word-align-lattice-lexicon.h	/^  NumPhonesMap num_phones_map_;$/;"	m	class:kaldi::WordAlignLatticeLexiconInfo
partial_word_label	lat/word-align-lattice-lexicon.h	/^  int32 partial_word_label;$/;"	m	struct:kaldi::WordAlignLatticeLexiconOpts
reorder	lat/word-align-lattice-lexicon.h	/^  bool reorder;$/;"	m	struct:kaldi::WordAlignLatticeLexiconOpts
reverse_lexicon_map_	lat/word-align-lattice-lexicon.h	/^  LexiconMap reverse_lexicon_map_;$/;"	m	class:kaldi::WordAlignLatticeLexiconInfo
test	lat/word-align-lattice-lexicon.h	/^  bool test;$/;"	m	struct:kaldi::WordAlignLatticeLexiconOpts
viability_map_	lat/word-align-lattice-lexicon.h	/^  ViabilityMap viability_map_;$/;"	m	class:kaldi::WordAlignLatticeLexiconInfo
Advance	lat/word-align-lattice.cc	/^    void Advance(const CompactLatticeArc &arc, LatticeWeight *weight) {$/;"	f	class:kaldi::LatticeWordAligner::ComputationState
AlignLattice	lat/word-align-lattice.cc	/^  bool AlignLattice() {$/;"	f	class:kaldi::LatticeWordAligner
ComputationState	lat/word-align-lattice.cc	/^    ComputationState(): weight_(LatticeWeight::One()) { } \/\/ initial state.$/;"	f	class:kaldi::LatticeWordAligner::ComputationState
ComputationState	lat/word-align-lattice.cc	/^    ComputationState(const ComputationState &other):$/;"	f	class:kaldi::LatticeWordAligner::ComputationState
ComputationState	lat/word-align-lattice.cc	/^  class ComputationState { \/\/\/ The state of the computation in which,$/;"	c	class:kaldi::LatticeWordAligner	file:
FinalWeight	lat/word-align-lattice.cc	/^    LatticeWeight FinalWeight() { return (IsEmpty() ? weight_ : LatticeWeight::Zero()); }$/;"	f	class:kaldi::LatticeWordAligner::ComputationState
GetStateForTuple	lat/word-align-lattice.cc	/^  StateId GetStateForTuple(const Tuple &tuple, bool add_to_queue) {$/;"	f	class:kaldi::LatticeWordAligner
Hash	lat/word-align-lattice.cc	/^    size_t Hash() const {$/;"	f	class:kaldi::LatticeWordAligner::ComputationState
Init	lat/word-align-lattice.cc	/^void WordBoundaryInfo::Init(std::istream &stream) {$/;"	f	class:kaldi::WordBoundaryInfo
IsEmpty	lat/word-align-lattice.cc	/^    bool IsEmpty() { return (transition_ids_.empty() && word_labels_.empty()); }$/;"	f	class:kaldi::LatticeWordAligner::ComputationState
IsPlausibleWord	lat/word-align-lattice.cc	/^static bool IsPlausibleWord(const WordBoundaryInfo &info,$/;"	f	namespace:kaldi
Label	lat/word-align-lattice.cc	/^  typedef CompactLatticeArc::Label Label;$/;"	t	class:kaldi::LatticeWordAligner	file:
LatticeWordAligner	lat/word-align-lattice.cc	/^  LatticeWordAligner(const CompactLattice &lat,$/;"	f	class:kaldi::LatticeWordAligner
LatticeWordAligner	lat/word-align-lattice.cc	/^class LatticeWordAligner {$/;"	c	namespace:kaldi	file:
MapType	lat/word-align-lattice.cc	/^  typedef unordered_map<Tuple, StateId, TupleHash, TupleEqual> MapType;$/;"	t	class:kaldi::LatticeWordAligner	file:
OutputArc	lat/word-align-lattice.cc	/^    bool OutputArc(const WordBoundaryInfo &info,$/;"	f	class:kaldi::LatticeWordAligner::ComputationState
OutputArcForce	lat/word-align-lattice.cc	/^void LatticeWordAligner::ComputationState::OutputArcForce($/;"	f	class:kaldi::LatticeWordAligner::ComputationState
OutputNormalWordArc	lat/word-align-lattice.cc	/^bool LatticeWordAligner::ComputationState::OutputNormalWordArc($/;"	f	class:kaldi::LatticeWordAligner::ComputationState
OutputOnePhoneWordArc	lat/word-align-lattice.cc	/^bool LatticeWordAligner::ComputationState::OutputOnePhoneWordArc($/;"	f	class:kaldi::LatticeWordAligner::ComputationState
OutputSilenceArc	lat/word-align-lattice.cc	/^bool LatticeWordAligner::ComputationState::OutputSilenceArc($/;"	f	class:kaldi::LatticeWordAligner::ComputationState
ProcessFinal	lat/word-align-lattice.cc	/^  void ProcessFinal(Tuple tuple, StateId output_state) {$/;"	f	class:kaldi::LatticeWordAligner
ProcessQueueElement	lat/word-align-lattice.cc	/^  void ProcessQueueElement() {$/;"	f	class:kaldi::LatticeWordAligner
RemoveEpsilonsFromLattice	lat/word-align-lattice.cc	/^  void RemoveEpsilonsFromLattice() {$/;"	f	class:kaldi::LatticeWordAligner
SetOptions	lat/word-align-lattice.cc	/^void WordBoundaryInfo::SetOptions(const std::string int_list, PhoneType phone_type) {$/;"	f	class:kaldi::WordBoundaryInfo
StateId	lat/word-align-lattice.cc	/^  typedef CompactLatticeArc::StateId StateId;$/;"	t	class:kaldi::LatticeWordAligner	file:
Test	lat/word-align-lattice.cc	/^  void Test() {$/;"	f	class:kaldi::WordAlignedLatticeTester
TestArc	lat/word-align-lattice.cc	/^  void TestArc(const CompactLatticeArc &arc) {$/;"	f	class:kaldi::WordAlignedLatticeTester	file:
TestArcEmpty	lat/word-align-lattice.cc	/^  bool TestArcEmpty(const CompactLatticeArc &arc) {$/;"	f	class:kaldi::WordAlignedLatticeTester	file:
TestArcNormalWord	lat/word-align-lattice.cc	/^  bool TestArcNormalWord(const CompactLatticeArc &arc) {$/;"	f	class:kaldi::WordAlignedLatticeTester	file:
TestArcOnePhoneWord	lat/word-align-lattice.cc	/^  bool TestArcOnePhoneWord(const CompactLatticeArc &arc) {$/;"	f	class:kaldi::WordAlignedLatticeTester	file:
TestArcPartialWord	lat/word-align-lattice.cc	/^  bool TestArcPartialWord(const CompactLatticeArc &arc) {$/;"	f	class:kaldi::WordAlignedLatticeTester	file:
TestArcSilence	lat/word-align-lattice.cc	/^  bool TestArcSilence(const CompactLatticeArc &arc) {$/;"	f	class:kaldi::WordAlignedLatticeTester	file:
TestEquivalent	lat/word-align-lattice.cc	/^  void TestEquivalent() {$/;"	f	class:kaldi::WordAlignedLatticeTester	file:
TestFinal	lat/word-align-lattice.cc	/^  void TestFinal(const CompactLatticeWeight &w) {$/;"	f	class:kaldi::WordAlignedLatticeTester	file:
TestWordAlignedLattice	lat/word-align-lattice.cc	/^void TestWordAlignedLattice(const CompactLattice &lat,$/;"	f	namespace:kaldi
Tuple	lat/word-align-lattice.cc	/^    Tuple(StateId input_state, ComputationState comp_state):$/;"	f	struct:kaldi::LatticeWordAligner::Tuple
Tuple	lat/word-align-lattice.cc	/^  struct Tuple {$/;"	s	class:kaldi::LatticeWordAligner	file:
TupleEqual	lat/word-align-lattice.cc	/^  struct TupleEqual {$/;"	s	class:kaldi::LatticeWordAligner	file:
TupleHash	lat/word-align-lattice.cc	/^  struct TupleHash {$/;"	s	class:kaldi::LatticeWordAligner	file:
WordAlignLattice	lat/word-align-lattice.cc	/^bool WordAlignLattice(const CompactLattice &lat,$/;"	f	namespace:kaldi
WordAlignedLatticeTester	lat/word-align-lattice.cc	/^  WordAlignedLatticeTester(const CompactLattice &lat,$/;"	f	class:kaldi::WordAlignedLatticeTester
WordAlignedLatticeTester	lat/word-align-lattice.cc	/^class WordAlignedLatticeTester {$/;"	c	namespace:kaldi	file:
WordBoundaryInfo	lat/word-align-lattice.cc	/^WordBoundaryInfo::WordBoundaryInfo(const WordBoundaryInfoNewOpts &opts) {$/;"	f	class:kaldi::WordBoundaryInfo
WordBoundaryInfo	lat/word-align-lattice.cc	/^WordBoundaryInfo::WordBoundaryInfo(const WordBoundaryInfoNewOpts &opts,$/;"	f	class:kaldi::WordBoundaryInfo
WordBoundaryInfo	lat/word-align-lattice.cc	/^WordBoundaryInfo::WordBoundaryInfo(const WordBoundaryInfoOpts &opts) {$/;"	f	class:kaldi::WordBoundaryInfo
aligned_lat_	lat/word-align-lattice.cc	/^  const CompactLattice &aligned_lat_;$/;"	m	class:kaldi::WordAlignedLatticeTester	file:
comp_state	lat/word-align-lattice.cc	/^    ComputationState comp_state;$/;"	m	struct:kaldi::LatticeWordAligner::Tuple	file:
error_	lat/word-align-lattice.cc	/^  bool error_;$/;"	m	class:kaldi::LatticeWordAligner	file:
info_	lat/word-align-lattice.cc	/^  WordBoundaryInfo info_;$/;"	m	class:kaldi::LatticeWordAligner	file:
info_	lat/word-align-lattice.cc	/^  const WordBoundaryInfo &info_;$/;"	m	class:kaldi::WordAlignedLatticeTester	file:
info_in_	lat/word-align-lattice.cc	/^  const WordBoundaryInfo &info_in_;$/;"	m	class:kaldi::LatticeWordAligner	file:
input_state	lat/word-align-lattice.cc	/^    StateId input_state;$/;"	m	struct:kaldi::LatticeWordAligner::Tuple	file:
kaldi	lat/word-align-lattice.cc	/^namespace kaldi {$/;"	n	file:
lat_	lat/word-align-lattice.cc	/^  CompactLattice lat_;$/;"	m	class:kaldi::LatticeWordAligner	file:
lat_	lat/word-align-lattice.cc	/^  const CompactLattice &lat_;$/;"	m	class:kaldi::WordAlignedLatticeTester	file:
lat_out_	lat/word-align-lattice.cc	/^  CompactLattice *lat_out_;$/;"	m	class:kaldi::LatticeWordAligner	file:
map_	lat/word-align-lattice.cc	/^  MapType map_; \/\/ map from tuples to StateId.$/;"	m	class:kaldi::LatticeWordAligner	file:
max_states_	lat/word-align-lattice.cc	/^  int32 max_states_;$/;"	m	class:kaldi::LatticeWordAligner	file:
operator ()	lat/word-align-lattice.cc	/^    bool operator () (const Tuple &state1, const Tuple &state2) const {$/;"	f	struct:kaldi::LatticeWordAligner::TupleEqual
operator ()	lat/word-align-lattice.cc	/^    size_t operator() (const Tuple &state) const {$/;"	f	struct:kaldi::LatticeWordAligner::TupleHash
operator ==	lat/word-align-lattice.cc	/^    bool operator == (const ComputationState &other) const {$/;"	f	class:kaldi::LatticeWordAligner::ComputationState
queue_	lat/word-align-lattice.cc	/^  std::vector<std::pair<Tuple, StateId> > queue_;$/;"	m	class:kaldi::LatticeWordAligner	file:
tmodel_	lat/word-align-lattice.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::LatticeWordAligner	file:
tmodel_	lat/word-align-lattice.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::WordAlignedLatticeTester	file:
transition_ids_	lat/word-align-lattice.cc	/^    std::vector<int32> transition_ids_;$/;"	m	class:kaldi::LatticeWordAligner::ComputationState	file:
weight_	lat/word-align-lattice.cc	/^    LatticeWeight weight_; \/\/ contains two floats.$/;"	m	class:kaldi::LatticeWordAligner::ComputationState	file:
word_labels_	lat/word-align-lattice.cc	/^    std::vector<int32> word_labels_;$/;"	m	class:kaldi::LatticeWordAligner::ComputationState	file:
KALDI_LAT_WORD_ALIGN_LATTICE_H_	lat/word-align-lattice.h	21;"	d
PhoneType	lat/word-align-lattice.h	/^  enum PhoneType {$/;"	g	struct:kaldi::WordBoundaryInfo
Register	lat/word-align-lattice.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::WordBoundaryInfoNewOpts
Register	lat/word-align-lattice.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::WordBoundaryInfoOpts
TypeOfPhone	lat/word-align-lattice.h	/^  PhoneType TypeOfPhone(int32 p) const {$/;"	f	struct:kaldi::WordBoundaryInfo
WordBoundaryInfo	lat/word-align-lattice.h	/^struct WordBoundaryInfo {$/;"	s	namespace:kaldi
WordBoundaryInfoNewOpts	lat/word-align-lattice.h	/^  WordBoundaryInfoNewOpts(): silence_label(0), partial_word_label(0),$/;"	f	struct:kaldi::WordBoundaryInfoNewOpts
WordBoundaryInfoNewOpts	lat/word-align-lattice.h	/^struct WordBoundaryInfoNewOpts {$/;"	s	namespace:kaldi
WordBoundaryInfoOpts	lat/word-align-lattice.h	/^  WordBoundaryInfoOpts(): silence_label(0), partial_word_label(0),$/;"	f	struct:kaldi::WordBoundaryInfoOpts
WordBoundaryInfoOpts	lat/word-align-lattice.h	/^struct WordBoundaryInfoOpts {$/;"	s	namespace:kaldi
kNoPhone	lat/word-align-lattice.h	/^    kNoPhone = 0,$/;"	e	enum:kaldi::WordBoundaryInfo::PhoneType
kNonWordPhone	lat/word-align-lattice.h	/^    kNonWordPhone \/\/ non-word phones are typically silence phones; but the point$/;"	e	enum:kaldi::WordBoundaryInfo::PhoneType
kWordBeginAndEndPhone	lat/word-align-lattice.h	/^    kWordBeginAndEndPhone,$/;"	e	enum:kaldi::WordBoundaryInfo::PhoneType
kWordBeginPhone	lat/word-align-lattice.h	/^    kWordBeginPhone,$/;"	e	enum:kaldi::WordBoundaryInfo::PhoneType
kWordEndPhone	lat/word-align-lattice.h	/^    kWordEndPhone,$/;"	e	enum:kaldi::WordBoundaryInfo::PhoneType
kWordInternalPhone	lat/word-align-lattice.h	/^    kWordInternalPhone,$/;"	e	enum:kaldi::WordBoundaryInfo::PhoneType
kaldi	lat/word-align-lattice.h	/^namespace kaldi {$/;"	n
partial_word_label	lat/word-align-lattice.h	/^  int32 partial_word_label; \/\/ The label we give to partially$/;"	m	struct:kaldi::WordBoundaryInfo
partial_word_label	lat/word-align-lattice.h	/^  int32 partial_word_label;$/;"	m	struct:kaldi::WordBoundaryInfoNewOpts
partial_word_label	lat/word-align-lattice.h	/^  int32 partial_word_label;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
phone_to_type	lat/word-align-lattice.h	/^  std::vector<PhoneType> phone_to_type;$/;"	m	struct:kaldi::WordBoundaryInfo
reorder	lat/word-align-lattice.h	/^  bool reorder; \/\/ True if the "reordering" of self-loops versus$/;"	m	struct:kaldi::WordBoundaryInfo
reorder	lat/word-align-lattice.h	/^  bool reorder;$/;"	m	struct:kaldi::WordBoundaryInfoNewOpts
reorder	lat/word-align-lattice.h	/^  bool reorder;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
silence_has_olabels	lat/word-align-lattice.h	/^  bool silence_has_olabels;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
silence_label	lat/word-align-lattice.h	/^  int32 silence_label; \/\/ The integer label we give to silence words.$/;"	m	struct:kaldi::WordBoundaryInfo
silence_label	lat/word-align-lattice.h	/^  int32 silence_label;$/;"	m	struct:kaldi::WordBoundaryInfoNewOpts
silence_label	lat/word-align-lattice.h	/^  int32 silence_label;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
silence_may_be_word_internal	lat/word-align-lattice.h	/^  bool silence_may_be_word_internal;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
silence_phones	lat/word-align-lattice.h	/^  std::string silence_phones;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
wbegin_and_end_phones	lat/word-align-lattice.h	/^  std::string wbegin_and_end_phones;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
wbegin_phones	lat/word-align-lattice.h	/^  std::string wbegin_phones;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
wend_phones	lat/word-align-lattice.h	/^  std::string wend_phones;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
winternal_phones	lat/word-align-lattice.h	/^  std::string winternal_phones;$/;"	m	struct:kaldi::WordBoundaryInfoOpts
ADDLIBS	latbin/Makefile	/^ADDLIBS = ..\/lat\/kaldi-lat.a ..\/lm\/kaldi-lm.a ..\/hmm\/kaldi-hmm.a \\$/;"	m
BINFILES	latbin/Makefile	/^BINFILES = lattice-best-path lattice-prune lattice-equivalent lattice-to-nbest \\$/;"	m
EXTRA_CXXFLAGS	latbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	latbin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	latbin/Makefile	/^TESTFILES =$/;"	m
main	latbin/lattice-1best.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-add-penalty.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-add-trans-probs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-align-phones.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-align-words-lexicon.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-align-words.cc	/^int main(int argc, char *argv[]) {$/;"	f
ConvertFstToArcLattice	latbin/lattice-arcgraph.cc	/^void ConvertFstToArcLattice(fst::StdVectorFst *net, kaldi::Lattice *lat,$/;"	f
DecodeGraphSymbols	latbin/lattice-arcgraph.cc	/^void DecodeGraphSymbols(const std::vector<std::pair<int32,int32> > &arc_map,$/;"	f
Label	latbin/lattice-arcgraph.cc	/^typedef fst::StdArc::Label Label;$/;"	t	file:
MapTransitionIdsToTransitionStates	latbin/lattice-arcgraph.cc	/^void MapTransitionIdsToTransitionStates(kaldi::CompactLattice *lat,$/;"	f
StateId	latbin/lattice-arcgraph.cc	/^typedef fst::StdArc::StateId StateId;$/;"	t	file:
Weight	latbin/lattice-arcgraph.cc	/^typedef fst::StdArc::Weight Weight;$/;"	t	file:
main	latbin/lattice-arcgraph.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-best-path.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-boost-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
CompactLatticeNormalize	latbin/lattice-combine.cc	/^bool CompactLatticeNormalize(CompactLattice *clat, BaseFloat weight,$/;"	f	namespace:kaldi
SplitStringToWeights	latbin/lattice-combine.cc	/^void SplitStringToWeights(const string &full, const char *delim,$/;"	f	namespace:kaldi
kaldi	latbin/lattice-combine.cc	/^namespace kaldi {$/;"	n	file:
main	latbin/lattice-combine.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-compose.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-confidence.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-copy-backoff.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-depth-per-frame.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-depth.cc	/^int main(int argc, char *argv[]) {$/;"	f
DeterminizeLatticeTask	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  DeterminizeLatticeTask($/;"	f	class:kaldi::DeterminizeLatticeTask
DeterminizeLatticeTask	latbin/lattice-determinize-phone-pruned-parallel.cc	/^class DeterminizeLatticeTask {$/;"	c	namespace:kaldi	file:
acoustic_scale_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  BaseFloat acoustic_scale_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
beam_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  BaseFloat beam_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
clat_writer_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  CompactLatticeWriter *clat_writer_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
det_clat_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  CompactLattice det_clat_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
kaldi	latbin/lattice-determinize-phone-pruned-parallel.cc	/^namespace kaldi {$/;"	n	file:
key_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  std::string key_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
lat_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  Lattice *lat_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
main	latbin/lattice-determinize-phone-pruned-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
num_warn_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  int32 *num_warn_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
operator ()	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  void operator () () {$/;"	f	class:kaldi::DeterminizeLatticeTask
opts_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  const fst::DeterminizeLatticePhonePrunedOptions &opts_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
trans_model_	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  const TransitionModel *trans_model_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
~DeterminizeLatticeTask	latbin/lattice-determinize-phone-pruned-parallel.cc	/^  ~DeterminizeLatticeTask() {$/;"	f	class:kaldi::DeterminizeLatticeTask
main	latbin/lattice-determinize-phone-pruned.cc	/^int main(int argc, char *argv[]) {$/;"	f
DeterminizeLatticeTask	latbin/lattice-determinize-pruned-parallel.cc	/^  DeterminizeLatticeTask($/;"	f	class:kaldi::DeterminizeLatticeTask
DeterminizeLatticeTask	latbin/lattice-determinize-pruned-parallel.cc	/^class DeterminizeLatticeTask {$/;"	c	namespace:kaldi	file:
acoustic_scale_	latbin/lattice-determinize-pruned-parallel.cc	/^  BaseFloat acoustic_scale_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
beam_	latbin/lattice-determinize-pruned-parallel.cc	/^  BaseFloat beam_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
clat_writer_	latbin/lattice-determinize-pruned-parallel.cc	/^  CompactLatticeWriter *clat_writer_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
det_clat_	latbin/lattice-determinize-pruned-parallel.cc	/^  CompactLattice det_clat_; \/\/ The output of our process.  Will be written$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
kaldi	latbin/lattice-determinize-pruned-parallel.cc	/^namespace kaldi {$/;"	n	file:
key_	latbin/lattice-determinize-pruned-parallel.cc	/^  std::string key_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
lat_	latbin/lattice-determinize-pruned-parallel.cc	/^  Lattice *lat_; \/\/ The lattice we're working on.  Owned locally.$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
main	latbin/lattice-determinize-pruned-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
minimize_	latbin/lattice-determinize-pruned-parallel.cc	/^  bool minimize_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
num_warn_	latbin/lattice-determinize-pruned-parallel.cc	/^  int32 *num_warn_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
operator ()	latbin/lattice-determinize-pruned-parallel.cc	/^  void operator () () {$/;"	f	class:kaldi::DeterminizeLatticeTask
opts_	latbin/lattice-determinize-pruned-parallel.cc	/^  const fst::DeterminizeLatticePrunedOptions &opts_;$/;"	m	class:kaldi::DeterminizeLatticeTask	file:
~DeterminizeLatticeTask	latbin/lattice-determinize-pruned-parallel.cc	/^  ~DeterminizeLatticeTask() {$/;"	f	class:kaldi::DeterminizeLatticeTask
main	latbin/lattice-determinize-pruned.cc	/^int main(int argc, char *argv[]) {$/;"	f
DeterminizeLatticeWrapper	latbin/lattice-determinize.cc	/^bool DeterminizeLatticeWrapper(const Lattice &lat,$/;"	f	namespace:kaldi
kaldi	latbin/lattice-determinize.cc	/^namespace kaldi {$/;"	n	file:
main	latbin/lattice-determinize.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-difference.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-equivalent.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-expand-ngram.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-interp.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-limit-depth.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-lmrescore-const-arpa.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-lmrescore.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-mbr-decode.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-minimize.cc	/^int main(int argc, char *argv[]) {$/;"	f
CheckFst	latbin/lattice-oracle.cc	/^bool CheckFst(fst::StdVectorFst &fst, string name, string key) {$/;"	f	namespace:kaldi
ConvertLatticeToUnweightedAcceptor	latbin/lattice-oracle.cc	/^void ConvertLatticeToUnweightedAcceptor(const kaldi::Lattice &ilat,$/;"	f	namespace:kaldi
CountErrors	latbin/lattice-oracle.cc	/^void CountErrors(fst::StdVectorFst &fst,$/;"	f	namespace:kaldi
CreateEditDistance	latbin/lattice-oracle.cc	/^void CreateEditDistance(const fst::StdVectorFst &fst1,$/;"	f	namespace:kaldi
GetOracleLattice	latbin/lattice-oracle.cc	/^bool GetOracleLattice(Lattice *oracle_lat, $/;"	f	namespace:kaldi
LabelSet	latbin/lattice-oracle.cc	/^typedef unordered_set<fst::StdArc::Label> LabelSet; $/;"	t	namespace:kaldi	file:
MapWildCards	latbin/lattice-oracle.cc	/^void MapWildCards(const LabelSet &wildcards, fst::StdVectorFst *ofst) {$/;"	f	namespace:kaldi
ReadSymbolList	latbin/lattice-oracle.cc	/^void ReadSymbolList(const std::string &rxfilename,$/;"	f	namespace:kaldi
kaldi	latbin/lattice-oracle.cc	/^namespace kaldi {$/;"	n	file:
main	latbin/lattice-oracle.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-project.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-prune.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-push.cc	/^int main(int argc, char *argv[]) {$/;"	f
LatticeAcousticRescore	latbin/lattice-rescore-mapped.cc	/^void LatticeAcousticRescore(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
kaldi	latbin/lattice-rescore-mapped.cc	/^namespace kaldi {$/;"	n	file:
main	latbin/lattice-rescore-mapped.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-reverse.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-rmali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-scale.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-to-ctm-conf.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-to-fst.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-to-mpe-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-to-nbest.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-to-phone-lattice.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-to-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-to-smbr-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-union.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/lattice-word-align.cc	/^int main(int argc, char *argv[]) {$/;"	f
MakeLatticeFromLinear	latbin/linear-to-nbest.cc	/^void MakeLatticeFromLinear(const std::vector<int32> &ali,$/;"	f	namespace:kaldi
kaldi	latbin/linear-to-nbest.cc	/^namespace kaldi {$/;"	n	file:
main	latbin/linear-to-nbest.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/nbest-to-ctm.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetUtteranceId	latbin/nbest-to-lattice.cc	/^bool GetUtteranceId(const std::string &nbest_id, std::string *utterance_id) {$/;"	f
main	latbin/nbest-to-lattice.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/nbest-to-linear.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	latbin/nbest-to-prons.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	lm/Makefile	/^ADDLIBS = ..\/base\/kaldi-base.a ..\/fstext\/kaldi-fstext.a ..\/util\/kaldi-util.a$/;"	m
EXTRA_CXXFLAGS	lm/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
LIBNAME	lm/Makefile	/^LIBNAME = kaldi-lm$/;"	m
MATHLIB	lm/Makefile	/^MATHLIB = NONE$/;"	m
OBJFILES	lm/Makefile	/^OBJFILES = const-arpa-lm.o kaldi-lmtable.o kaldi-lm.o$/;"	m
TESTFILES	lm/Makefile	/^TESTFILES = lm-lib-test$/;"	m
TESTOUTPUTS	lm/Makefile	/^TESTOUTPUTS = composed.fst output.fst output1.fst output2.fst$/;"	m
AddChild	lm/const-arpa-lm.cc	/^  void AddChild(const int32 word, LmState* child_state) {$/;"	f	class:kaldi::LmState
AddChild	lm/const-arpa-lm.cc	/^  void AddChild(const int32 word, const float child_prob) {$/;"	f	class:kaldi::LmState
ArpaLine	lm/const-arpa-lm.cc	/^struct ArpaLine {$/;"	s	namespace:kaldi	file:
BackoffLogprob	lm/const-arpa-lm.cc	/^  float BackoffLogprob() const {$/;"	f	class:kaldi::LmState
Build	lm/const-arpa-lm.cc	/^void ConstArpaLmBuilder::Build() {$/;"	f	class:kaldi::ConstArpaLmBuilder
BuildConstArpaLm	lm/const-arpa-lm.cc	/^bool BuildConstArpaLm(const bool natural_base, const int32 bos_symbol,$/;"	f	namespace:kaldi
ChildType	lm/const-arpa-lm.cc	/^  union ChildType {$/;"	u	class:kaldi::LmState	file:
ChildrenVectorLessThan	lm/const-arpa-lm.cc	/^  struct ChildrenVectorLessThan {$/;"	s	class:kaldi::LmState	file:
ConstArpaLmBuilder	lm/const-arpa-lm.cc	/^  ConstArpaLmBuilder($/;"	f	class:kaldi::ConstArpaLmBuilder
ConstArpaLmBuilder	lm/const-arpa-lm.cc	/^class ConstArpaLmBuilder {$/;"	c	namespace:kaldi	file:
ConstArpaLmDeterministicFst	lm/const-arpa-lm.cc	/^ConstArpaLmDeterministicFst::ConstArpaLmDeterministicFst($/;"	f	class:kaldi::ConstArpaLmDeterministicFst
DecodeChildInfo	lm/const-arpa-lm.cc	/^void ConstArpaLm::DecodeChildInfo(const int32 child_info,$/;"	f	class:kaldi::ConstArpaLm
Final	lm/const-arpa-lm.cc	/^fst::StdArc::Weight ConstArpaLmDeterministicFst::Final(StateId s) {$/;"	f	class:kaldi::ConstArpaLmDeterministicFst
GetArc	lm/const-arpa-lm.cc	/^bool ConstArpaLmDeterministicFst::GetArc(StateId s,$/;"	f	class:kaldi::ConstArpaLmDeterministicFst
GetChild	lm/const-arpa-lm.cc	/^  std::pair<int32, union ChildType> GetChild(const int32 index) {$/;"	f	class:kaldi::LmState
GetChildInfo	lm/const-arpa-lm.cc	/^bool ConstArpaLm::GetChildInfo(const int32 word,$/;"	f	class:kaldi::ConstArpaLm
GetLmState	lm/const-arpa-lm.cc	/^int32* ConstArpaLm::GetLmState(const std::vector<int32>& seq) const {$/;"	f	class:kaldi::ConstArpaLm
GetNgramLogprob	lm/const-arpa-lm.cc	/^float ConstArpaLm::GetNgramLogprob(const int32 word,$/;"	f	class:kaldi::ConstArpaLm
GetNgramLogprobRecurse	lm/const-arpa-lm.cc	/^float ConstArpaLm::GetNgramLogprobRecurse($/;"	f	class:kaldi::ConstArpaLm
HistoryStateExists	lm/const-arpa-lm.cc	/^bool ConstArpaLm::HistoryStateExists(const std::vector<int32>& hist) const {$/;"	f	class:kaldi::ConstArpaLm
IsChildFinalOrder	lm/const-arpa-lm.cc	/^  bool IsChildFinalOrder() const {$/;"	f	class:kaldi::LmState
IsLeaf	lm/const-arpa-lm.cc	/^  bool IsLeaf() const {$/;"	f	class:kaldi::LmState
IsUnigram	lm/const-arpa-lm.cc	/^  bool IsUnigram() const {$/;"	f	class:kaldi::LmState
LmState	lm/const-arpa-lm.cc	/^  LmState(const bool is_unigram, const bool is_child_final_order,$/;"	f	class:kaldi::LmState
LmState	lm/const-arpa-lm.cc	/^class LmState {$/;"	c	namespace:kaldi	file:
Logprob	lm/const-arpa-lm.cc	/^  float Logprob() const {$/;"	f	class:kaldi::LmState
MemSize	lm/const-arpa-lm.cc	/^  int32 MemSize() const {$/;"	f	class:kaldi::LmState
MyAddress	lm/const-arpa-lm.cc	/^  int64 MyAddress() const {$/;"	f	class:kaldi::LmState
NumChildren	lm/const-arpa-lm.cc	/^  int32 NumChildren() const {$/;"	f	class:kaldi::LmState
Read	lm/const-arpa-lm.cc	/^void ConstArpaLm::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::ConstArpaLm
Read	lm/const-arpa-lm.cc	/^void ConstArpaLmBuilder::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::ConstArpaLmBuilder
SetMaxAddressOffset	lm/const-arpa-lm.cc	/^  void SetMaxAddressOffset(const int32 max_address_offset) {$/;"	f	class:kaldi::ConstArpaLmBuilder
SetMyAddress	lm/const-arpa-lm.cc	/^  void SetMyAddress(const int64 address) {$/;"	f	class:kaldi::LmState
SortChildren	lm/const-arpa-lm.cc	/^  void SortChildren() {$/;"	f	class:kaldi::LmState
WordsAndLmStatePairLessThan	lm/const-arpa-lm.cc	/^  struct WordsAndLmStatePairLessThan {$/;"	s	class:kaldi::ConstArpaLmBuilder	file:
Write	lm/const-arpa-lm.cc	/^void ConstArpaLm::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::ConstArpaLm
Write	lm/const-arpa-lm.cc	/^void ConstArpaLmBuilder::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::ConstArpaLmBuilder
WriteArpa	lm/const-arpa-lm.cc	/^void ConstArpaLm::WriteArpa(std::ostream &os) const {$/;"	f	class:kaldi::ConstArpaLm
WriteArpaRecurse	lm/const-arpa-lm.cc	/^void ConstArpaLm::WriteArpaRecurse(int32* lm_state,$/;"	f	class:kaldi::ConstArpaLm
backoff_logprob	lm/const-arpa-lm.cc	/^  float backoff_logprob;    \/\/ Backoff_logprob corresponds to word sequence.$/;"	m	struct:kaldi::ArpaLine	file:
backoff_logprob_	lm/const-arpa-lm.cc	/^  float backoff_logprob_;$/;"	m	class:kaldi::LmState	file:
bos_symbol_	lm/const-arpa-lm.cc	/^  int32 bos_symbol_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
children_	lm/const-arpa-lm.cc	/^  std::vector<std::pair<int32, union ChildType> > children_;$/;"	m	class:kaldi::LmState	file:
eos_symbol_	lm/const-arpa-lm.cc	/^  int32 eos_symbol_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
is_built_	lm/const-arpa-lm.cc	/^  bool is_built_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
is_child_final_order_	lm/const-arpa-lm.cc	/^  bool is_child_final_order_;$/;"	m	class:kaldi::LmState	file:
is_unigram_	lm/const-arpa-lm.cc	/^  bool is_unigram_;$/;"	m	class:kaldi::LmState	file:
kaldi	lm/const-arpa-lm.cc	/^namespace kaldi {$/;"	n	file:
lm_states_	lm/const-arpa-lm.cc	/^  int32* lm_states_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
lm_states_size_	lm/const-arpa-lm.cc	/^  int32 lm_states_size_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
logprob	lm/const-arpa-lm.cc	/^  float logprob;            \/\/ Logprob corresponds to word sequence.$/;"	m	struct:kaldi::ArpaLine	file:
logprob_	lm/const-arpa-lm.cc	/^  float logprob_;$/;"	m	class:kaldi::LmState	file:
max_address_offset_	lm/const-arpa-lm.cc	/^  int32 max_address_offset_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
my_address_	lm/const-arpa-lm.cc	/^  int64 my_address_;$/;"	m	class:kaldi::LmState	file:
natural_base_	lm/const-arpa-lm.cc	/^  bool natural_base_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
ngram_order_	lm/const-arpa-lm.cc	/^  int32 ngram_order_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
num_words_	lm/const-arpa-lm.cc	/^  int32 num_words_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
operator ()	lm/const-arpa-lm.cc	/^    bool operator()($/;"	f	struct:kaldi::ConstArpaLmBuilder::WordsAndLmStatePairLessThan
operator ()	lm/const-arpa-lm.cc	/^    bool operator()($/;"	f	struct:kaldi::LmState::ChildrenVectorLessThan
operator <	lm/const-arpa-lm.cc	/^  bool operator < (const ArpaLine &other) const {$/;"	f	struct:kaldi::ArpaLine
overflow_buffer_	lm/const-arpa-lm.cc	/^  int32** overflow_buffer_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
overflow_buffer_size_	lm/const-arpa-lm.cc	/^  int32 overflow_buffer_size_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
prob	lm/const-arpa-lm.cc	/^    float prob;$/;"	m	union:kaldi::LmState::ChildType	file:
seq_to_state_	lm/const-arpa-lm.cc	/^                LmState*, VectorHasher<int32> > seq_to_state_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
state	lm/const-arpa-lm.cc	/^    LmState* state;$/;"	m	union:kaldi::LmState::ChildType	file:
unigram_states_	lm/const-arpa-lm.cc	/^  int32** unigram_states_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
unk_symbol_	lm/const-arpa-lm.cc	/^  int32 unk_symbol_;$/;"	m	class:kaldi::ConstArpaLmBuilder	file:
words	lm/const-arpa-lm.cc	/^  std::vector<int32> words; \/\/ Sequence of words to be printed.$/;"	m	struct:kaldi::ArpaLine	file:
~ConstArpaLmBuilder	lm/const-arpa-lm.cc	/^  ~ConstArpaLmBuilder() {$/;"	f	class:kaldi::ConstArpaLmBuilder
BosSymbol	lm/const-arpa-lm.h	/^  int32 BosSymbol() const { return bos_symbol_; }$/;"	f	class:kaldi::ConstArpaLm
ConstArpaLm	lm/const-arpa-lm.h	/^  ConstArpaLm() {$/;"	f	class:kaldi::ConstArpaLm
ConstArpaLm	lm/const-arpa-lm.h	/^  ConstArpaLm(const int32 bos_symbol, const int32 eos_symbol,$/;"	f	class:kaldi::ConstArpaLm
ConstArpaLm	lm/const-arpa-lm.h	/^class ConstArpaLm {$/;"	c	namespace:kaldi
ConstArpaLmDeterministicFst	lm/const-arpa-lm.h	/^class ConstArpaLmDeterministicFst :$/;"	c	namespace:kaldi
EosSymbol	lm/const-arpa-lm.h	/^  int32 EosSymbol() const { return eos_symbol_; }$/;"	f	class:kaldi::ConstArpaLm
KALDI_LM_CONST_ARPA_LM_H_	lm/const-arpa-lm.h	21;"	d
Label	lm/const-arpa-lm.h	/^  typedef fst::StdArc::Label Label;$/;"	t	class:kaldi::ConstArpaLmDeterministicFst
MapType	lm/const-arpa-lm.h	/^                        StateId, VectorHasher<Label> > MapType;$/;"	t	class:kaldi::ConstArpaLmDeterministicFst
NgramOrder	lm/const-arpa-lm.h	/^  int32 NgramOrder() const { return ngram_order_; }$/;"	f	class:kaldi::ConstArpaLm
Start	lm/const-arpa-lm.h	/^  virtual StateId Start() { return start_state_; }$/;"	f	class:kaldi::ConstArpaLmDeterministicFst
StateId	lm/const-arpa-lm.h	/^  typedef fst::StdArc::StateId StateId;$/;"	t	class:kaldi::ConstArpaLmDeterministicFst
UnkSymbol	lm/const-arpa-lm.h	/^  int32 UnkSymbol() const { return unk_symbol_; }$/;"	f	class:kaldi::ConstArpaLm
Weight	lm/const-arpa-lm.h	/^  typedef fst::StdArc::Weight Weight;$/;"	t	class:kaldi::ConstArpaLmDeterministicFst
bos_symbol_	lm/const-arpa-lm.h	/^  int32 bos_symbol_;$/;"	m	class:kaldi::ConstArpaLm
eos_symbol_	lm/const-arpa-lm.h	/^  int32 eos_symbol_;$/;"	m	class:kaldi::ConstArpaLm
initialized_	lm/const-arpa-lm.h	/^  bool initialized_;$/;"	m	class:kaldi::ConstArpaLm
kaldi	lm/const-arpa-lm.h	/^namespace kaldi {$/;"	n
lm_	lm/const-arpa-lm.h	/^  const ConstArpaLm& lm_;$/;"	m	class:kaldi::ConstArpaLmDeterministicFst
lm_states_	lm/const-arpa-lm.h	/^  int32* lm_states_;$/;"	m	class:kaldi::ConstArpaLm
lm_states_end_	lm/const-arpa-lm.h	/^  int32* lm_states_end_;$/;"	m	class:kaldi::ConstArpaLm
lm_states_size_	lm/const-arpa-lm.h	/^  int32 lm_states_size_;$/;"	m	class:kaldi::ConstArpaLm
memory_assigned_	lm/const-arpa-lm.h	/^  bool memory_assigned_;$/;"	m	class:kaldi::ConstArpaLm
ngram_order_	lm/const-arpa-lm.h	/^  int32 ngram_order_;$/;"	m	class:kaldi::ConstArpaLm
num_words_	lm/const-arpa-lm.h	/^  int32 num_words_;$/;"	m	class:kaldi::ConstArpaLm
overflow_buffer_	lm/const-arpa-lm.h	/^  int32** overflow_buffer_;$/;"	m	class:kaldi::ConstArpaLm
overflow_buffer_size_	lm/const-arpa-lm.h	/^  int32 overflow_buffer_size_;$/;"	m	class:kaldi::ConstArpaLm
start_state_	lm/const-arpa-lm.h	/^  StateId start_state_;$/;"	m	class:kaldi::ConstArpaLmDeterministicFst
state_to_wseq_	lm/const-arpa-lm.h	/^  std::vector<std::vector<Label> > state_to_wseq_;$/;"	m	class:kaldi::ConstArpaLmDeterministicFst
unigram_states_	lm/const-arpa-lm.h	/^  int32** unigram_states_;$/;"	m	class:kaldi::ConstArpaLm
unk_symbol_	lm/const-arpa-lm.h	/^  int32 unk_symbol_;$/;"	m	class:kaldi::ConstArpaLm
wseq_to_state_	lm/const-arpa-lm.h	/^  MapType wseq_to_state_;$/;"	m	class:kaldi::ConstArpaLmDeterministicFst
~ConstArpaLm	lm/const-arpa-lm.h	/^  ~ConstArpaLm() {$/;"	f	class:kaldi::ConstArpaLm
EXTRA_CXXFLAGS	lm/irstlm.mk	/^EXTRA_CXXFLAGS = -DHAVE_IRSTLM -I$(SRCDIR)\/..\/lmtoolkit\/include -Wno-sign-compare$/;"	m
EXTRA_LDLIBS	lm/irstlm.mk	/^EXTRA_LDLIBS = $(SRCDIR)\/..\/lmtoolkit\/lib\/irstlm\/x86_64-apple-darwin10.0\/libirstlm.a -lz$/;"	m
ReadStream	lm/kaldi-lm.cc	/^fst::StdVectorFst* LangModelFst::ReadStream($/;"	f	class:kaldi::LangModelFst
ReadTxtLine	lm/kaldi-lm.cc	/^LangModelFst::StateId LangModelFst::ReadTxtLine(const string &inpline) {$/;"	f	class:kaldi::LangModelFst
ReadTxtString	lm/kaldi-lm.cc	/^void LangModelFst::ReadTxtString(std::istream &strm) {$/;"	f	class:kaldi::LangModelFst
kaldi	lm/kaldi-lm.cc	/^namespace kaldi {$/;"	n	file:
GetFst	lm/kaldi-lm.h	/^  const fst::VectorFst<fst::StdArc>* GetFst() const {return pfst_;}$/;"	f	class:kaldi::LangModelFst
GetFst	lm/kaldi-lm.h	/^  fst::VectorFst<fst::StdArc>* GetFst() {return pfst_;}$/;"	f	class:kaldi::LangModelFst
GrammarType	lm/kaldi-lm.h	/^enum GrammarType {$/;"	g	namespace:kaldi
KALDI_LM_KALDI_LM_H_	lm/kaldi-lm.h	34;"	d
LangModelFst	lm/kaldi-lm.h	/^  LangModelFst() {$/;"	f	class:kaldi::LangModelFst
LangModelFst	lm/kaldi-lm.h	/^  LangModelFst(const LangModelFst &lm)$/;"	f	class:kaldi::LangModelFst
LangModelFst	lm/kaldi-lm.h	/^class LangModelFst: public fst::VectorFst<fst::StdArc> {$/;"	c	namespace:kaldi
LmWeight	lm/kaldi-lm.h	/^  typedef fst::StdArc::Weight LmWeight;$/;"	t	class:kaldi::LangModelFst
MutableInputSymbols	lm/kaldi-lm.h	/^  fst::SymbolTable* MutableInputSymbols() {$/;"	f	class:kaldi::LangModelFst
Read	lm/kaldi-lm.h	/^  bool Read(const string &rxfilename,$/;"	f	class:kaldi::LangModelFst
Read	lm/kaldi-lm.h	/^  bool Read(std::istream &strm,$/;"	f	class:kaldi::LangModelFst
StateId	lm/kaldi-lm.h	/^  typedef fst::StdArc::StateId StateId;$/;"	t	class:kaldi::LangModelFst
Write	lm/kaldi-lm.h	/^  bool Write(const std::string &filename) const {$/;"	f	class:kaldi::LangModelFst
kArpaLm	lm/kaldi-lm.h	/^  kArpaLm, kIrstLm, kFst, kTextString$/;"	e	enum:kaldi::GrammarType
kFst	lm/kaldi-lm.h	/^  kArpaLm, kIrstLm, kFst, kTextString$/;"	e	enum:kaldi::GrammarType
kIrstLm	lm/kaldi-lm.h	/^  kArpaLm, kIrstLm, kFst, kTextString$/;"	e	enum:kaldi::GrammarType
kTextString	lm/kaldi-lm.h	/^  kArpaLm, kIrstLm, kFst, kTextString$/;"	e	enum:kaldi::GrammarType
kaldi	lm/kaldi-lm.h	/^namespace kaldi {$/;"	n
pfst_	lm/kaldi-lm.h	/^  fst::VectorFst<fst::StdArc> *pfst_;$/;"	m	class:kaldi::LangModelFst
~LangModelFst	lm/kaldi-lm.h	/^  ~LangModelFst() {$/;"	f	class:kaldi::LangModelFst
AddArcsForNgramProb	lm/kaldi-lmtable.cc	/^void LmFstConverter::AddArcsForNgramProb($/;"	f	class:kaldi::LmFstConverter
AddStateFromSymb	lm/kaldi-lmtable.cc	/^LmFstConverter::StateId LmFstConverter::AddStateFromSymb($/;"	f	class:kaldi::LmFstConverter
ConnectUnusedStates	lm/kaldi-lmtable.cc	/^void LmFstConverter::ConnectUnusedStates(fst::StdVectorFst *pfst) {$/;"	f	class:kaldi::LmFstConverter
DumpContinue	lm/kaldi-lmtable.cc	/^void LmTable::DumpContinue(ngram ng, int ilev, int elev,$/;"	f	class:kaldi::LmTable
DumpStart	lm/kaldi-lmtable.cc	/^void LmTable::DumpStart(ngram ng,$/;"	f	class:kaldi::LmTable
ReadFstFromLmFile	lm/kaldi-lmtable.cc	/^bool LmTable::ReadFstFromLmFile(std::istream &istrm,$/;"	f	class:kaldi::LmTable
kaldi	lm/kaldi-lmtable.cc	/^namespace kaldi {$/;"	n	file:
BkStateMap	lm/kaldi-lmtable.h	/^  typedef unordered_map<StateId, StateId> BkStateMap;$/;"	t	class:kaldi::LmFstConverter
ConvertArpaLogProbToWeight	lm/kaldi-lmtable.h	/^  float ConvertArpaLogProbToWeight(float lp) {$/;"	f	class:kaldi::LmFstConverter
FindState	lm/kaldi-lmtable.h	/^  StateId FindState(const std::string str) {$/;"	f	class:kaldi::LmFstConverter
HistStateMap	lm/kaldi-lmtable.h	/^  typedef unordered_map<std::string, StateId, StringHasher> HistStateMap;$/;"	t	class:kaldi::LmFstConverter
IsFinal	lm/kaldi-lmtable.h	/^  bool IsFinal(fst::StdVectorFst *pfst,$/;"	f	class:kaldi::LmFstConverter
KALDI_LM_KALDI_LMTABLE_H_	lm/kaldi-lmtable.h	20;"	d
LmFstConverter	lm/kaldi-lmtable.h	/^  LmFstConverter() : use_natural_log_(true) {}$/;"	f	class:kaldi::LmFstConverter
LmFstConverter	lm/kaldi-lmtable.h	/^class LmFstConverter {$/;"	c	namespace:kaldi
LmTable	lm/kaldi-lmtable.h	/^  LmTable() { conv_ = new LmFstConverter; }$/;"	f	class:kaldi::LmTable
LmTable	lm/kaldi-lmtable.h	/^class LmTable : public lmtable {$/;"	c	namespace:kaldi
LmTable	lm/kaldi-lmtable.h	/^class LmTable {$/;"	c	namespace:kaldi
LmWeight	lm/kaldi-lmtable.h	/^  typedef fst::StdArc::Weight LmWeight;$/;"	t	class:kaldi::LmFstConverter
NOPROB	lm/kaldi-lmtable.h	152;"	d
StateId	lm/kaldi-lmtable.h	/^  typedef fst::StdArc::StateId StateId;$/;"	t	class:kaldi::LmFstConverter
UseNaturalLog	lm/kaldi-lmtable.h	/^  void UseNaturalLog(bool use_natural) { use_natural_log_ = use_natural; }$/;"	f	class:kaldi::LmFstConverter
bkState_	lm/kaldi-lmtable.h	/^  BkStateMap bkState_;$/;"	m	class:kaldi::LmFstConverter
conv_	lm/kaldi-lmtable.h	/^  LmFstConverter *conv_;$/;"	m	class:kaldi::LmTable
histState_	lm/kaldi-lmtable.h	/^  HistStateMap histState_;$/;"	m	class:kaldi::LmFstConverter
kaldi	lm/kaldi-lmtable.h	/^namespace kaldi {$/;"	n
use_natural_log_	lm/kaldi-lmtable.h	/^  bool use_natural_log_;$/;"	m	class:kaldi::LmFstConverter
~LmFstConverter	lm/kaldi-lmtable.h	/^  ~LmFstConverter() {}$/;"	f	class:kaldi::LmFstConverter
~LmTable	lm/kaldi-lmtable.h	/^  ~LmTable() { if (conv_) delete conv_; }$/;"	f	class:kaldi::LmTable
CreateGenFst	lm/lm-lib-test.cc	/^static fst::StdVectorFst* CreateGenFst(fst::SymbolTable *pst) {$/;"	f	namespace:kaldi
CreateRandPathFst	lm/lm-lib-test.cc	/^static fst::StdVectorFst* CreateRandPathFst(int n, fst::StdVectorFst *genFst) {$/;"	f	namespace:kaldi
MAX_SENTENCE_LENGTH	lm/lm-lib-test.cc	40;"	d	file:
PrintCompletePath	lm/lm-lib-test.cc	/^static LangModelFst::LmWeight PrintCompletePath(fst::SymbolTable *pst,$/;"	f	namespace:kaldi
PrintCompletePaths	lm/lm-lib-test.cc	/^static LangModelFst::LmWeight PrintCompletePaths(fst::SymbolTable *pst,$/;"	f	namespace:kaldi
TestLmTableEvalScore	lm/lm-lib-test.cc	/^bool TestLmTableEvalScore(const string &inpfile,$/;"	f	namespace:kaldi
TestLmTableReadWrite	lm/lm-lib-test.cc	/^bool TestLmTableReadWrite(int nTests,$/;"	f	namespace:kaldi
coverageTests	lm/lm-lib-test.cc	/^static bool coverageTests(fst::StdVectorFst *genFst,$/;"	f	namespace:kaldi
endOfSentence	lm/lm-lib-test.cc	38;"	d	file:
epsilon	lm/lm-lib-test.cc	39;"	d	file:
kaldi	lm/lm-lib-test.cc	/^namespace kaldi {$/;"	n	file:
main	lm/lm-lib-test.cc	/^int main(int argc, char *argv[]) {$/;"	f
startOfSentence	lm/lm-lib-test.cc	37;"	d	file:
ADDLIBS	lmbin/Makefile	/^ADDLIBS = ..\/lm\/kaldi-lm.a ..\/util\/kaldi-util.a ..\/base\/kaldi-base.a$/;"	m
BINFILES	lmbin/Makefile	/^BINFILES = arpa-to-const-arpa$/;"	m
EXTRA_CXXFLAGS	lmbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	lmbin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	lmbin/Makefile	/^TESTFILES =$/;"	m
main	lmbin/arpa-to-const-arpa.cc	/^int main(int argc, char *argv[]) {$/;"	f
AR	makefiles/cygwin.mk	/^AR = ar$/;"	m
CC	makefiles/cygwin.mk	/^CC = g++$/;"	m
CXX	makefiles/cygwin.mk	/^CXX = g++$/;"	m
CXXFLAGS	makefiles/cygwin.mk	/^CXXFLAGS = -msse -msse2 -Wall -I.. -DKALDI_DOUBLEPRECISION=0  \\$/;"	m
LDFLAGS	makefiles/cygwin.mk	/^LDFLAGS = -g --enable-auto-import$/;"	m
LDLIBS	makefiles/cygwin.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(FSTROOT)\/lib\/libfst.a -ldl -L\/usr\/lib\/lapack \\$/;"	m
RANLIB	makefiles/cygwin.mk	/^RANLIB = ranlib$/;"	m
AR	makefiles/darwin_10_10.mk	/^AR = ar$/;"	m
CC	makefiles/darwin_10_10.mk	/^CC = $(CXX)$/;"	m
COMPILER	makefiles/darwin_10_10.mk	/^COMPILER = $(shell $(CXX) -v 2>&1 )$/;"	m
CXX	makefiles/darwin_10_10.mk	/^CXX = g++$/;"	m
LDFLAGS	makefiles/darwin_10_10.mk	/^LDFLAGS = -g$/;"	m
LDLIBS	makefiles/darwin_10_10.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(FSTROOT)\/lib\/libfst.a -ldl -lm -lpthread -framework Accelerate$/;"	m
RANLIB	makefiles/darwin_10_10.mk	/^RANLIB = ranlib$/;"	m
AR	makefiles/darwin_10_5.mk	/^AR = ar$/;"	m
CC	makefiles/darwin_10_5.mk	/^CC = g++-4$/;"	m
CXX	makefiles/darwin_10_5.mk	/^CXX = g++-4$/;"	m
LDFLAGS	makefiles/darwin_10_5.mk	/^LDFLAGS = -gdwarf-2$/;"	m
LDLIBS	makefiles/darwin_10_5.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(FSTROOT)\/lib\/libfst.a -ldl -lm -lpthread -framework Accelerate$/;"	m
RANLIB	makefiles/darwin_10_5.mk	/^RANLIB = ranlib$/;"	m
AR	makefiles/darwin_10_6.mk	/^AR = ar$/;"	m
CC	makefiles/darwin_10_6.mk	/^CC = g++$/;"	m
CXX	makefiles/darwin_10_6.mk	/^CXX = g++$/;"	m
LDFLAGS	makefiles/darwin_10_6.mk	/^LDFLAGS = -g -rdynamic$/;"	m
LDLIBS	makefiles/darwin_10_6.mk	/^LDLIBS =  $(EXTRA_LDLIBS) $(FSTROOT)\/lib\/libfst.a -ldl -lm -lpthread -framework Accelerate$/;"	m
RANLIB	makefiles/darwin_10_6.mk	/^RANLIB = ranlib$/;"	m
AR	makefiles/darwin_10_7.mk	/^AR = ar$/;"	m
CC	makefiles/darwin_10_7.mk	/^CC = g++$/;"	m
CXX	makefiles/darwin_10_7.mk	/^CXX = g++$/;"	m
LDFLAGS	makefiles/darwin_10_7.mk	/^LDFLAGS = -g -rdynamic$/;"	m
LDLIBS	makefiles/darwin_10_7.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(FSTROOT)\/lib\/libfst.a -ldl -lm -lpthread -framework Accelerate$/;"	m
RANLIB	makefiles/darwin_10_7.mk	/^RANLIB = ranlib$/;"	m
AR	makefiles/darwin_10_8.mk	/^AR = ar$/;"	m
CC	makefiles/darwin_10_8.mk	/^CC = g++$/;"	m
CXX	makefiles/darwin_10_8.mk	/^CXX = g++$/;"	m
LDFLAGS	makefiles/darwin_10_8.mk	/^LDFLAGS = -g -rdynamic$/;"	m
LDLIBS	makefiles/darwin_10_8.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(FSTROOT)\/lib\/libfst.a -ldl -lm -lpthread -framework Accelerate$/;"	m
RANLIB	makefiles/darwin_10_8.mk	/^RANLIB = ranlib$/;"	m
AR	makefiles/darwin_10_9.mk	/^AR = ar$/;"	m
CC	makefiles/darwin_10_9.mk	/^CC = $(CXX)$/;"	m
COMPILER	makefiles/darwin_10_9.mk	/^COMPILER = $(shell $(CXX) -v 2>&1 )$/;"	m
CXX	makefiles/darwin_10_9.mk	/^CXX = g++$/;"	m
LDFLAGS	makefiles/darwin_10_9.mk	/^LDFLAGS = -g$/;"	m
LDLIBS	makefiles/darwin_10_9.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(FSTROOT)\/lib\/libfst.a -ldl -lm -lpthread -framework Accelerate$/;"	m
RANLIB	makefiles/darwin_10_9.mk	/^RANLIB = ranlib$/;"	m
LIBFILE	makefiles/default_rules.mk	/^        LIBFILE = lib$(LIBNAME).so$/;"	m
LIBFILE	makefiles/default_rules.mk	/^      LIBFILE = lib$(LIBNAME).dylib$/;"	m
LIBFILE	makefiles/default_rules.mk	/^    LIBFILE = $(LIBNAME).a$/;"	m
XDEPENDS	makefiles/default_rules.mk	/^      XDEPENDS = $(foreach dep,$(ADDLIBS), $(dir $(dep))\/lib$(notdir $(basename $(dep))).so )$/;"	m
XDEPENDS	makefiles/default_rules.mk	/^    XDEPENDS = $(foreach dep,$(ADDLIBS), $(dir $(dep))\/lib$(notdir $(basename $(dep))).dylib )$/;"	m
XDEPENDS	makefiles/default_rules.mk	/^  XDEPENDS = $(ADDLIBS)$/;"	m
XLDLIBS	makefiles/default_rules.mk	/^    XLDLIBS := $(LDLIBS)$/;"	m
AR	makefiles/linux_atlas.mk	/^AR = ar$/;"	m
AS	makefiles/linux_atlas.mk	/^AS = as$/;"	m
CC	makefiles/linux_atlas.mk	/^CC = g++$/;"	m
CXX	makefiles/linux_atlas.mk	/^CXX = g++$/;"	m
CXXFLAGS	makefiles/linux_atlas.mk	/^CXXFLAGS = -msse -msse2 -Wall -I.. \\$/;"	m
LDFLAGS	makefiles/linux_atlas.mk	/^LDFLAGS = -rdynamic $(OPENFSTLDFLAGS)$/;"	m
LDLIBS	makefiles/linux_atlas.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(OPENFSTLIBS) $(ATLASLIBS) -lm -lpthread -ldl$/;"	m
RANLIB	makefiles/linux_atlas.mk	/^RANLIB = ranlib$/;"	m
AR	makefiles/linux_clapack.mk	/^AR = ar$/;"	m
AS	makefiles/linux_clapack.mk	/^AS = as$/;"	m
CC	makefiles/linux_clapack.mk	/^CC = g++$/;"	m
CXX	makefiles/linux_clapack.mk	/^CXX = g++$/;"	m
CXXFLAGS	makefiles/linux_clapack.mk	/^CXXFLAGS = -msse -Wall -I.. -pthread \\$/;"	m
LDFLAGS	makefiles/linux_clapack.mk	/^LDFLAGS = -rdynamic $(OPENFSTLDFLAGS)$/;"	m
LDLIBS	makefiles/linux_clapack.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(OPENFSTLIBS) $(ATLASLIBS) -lm -lpthread -ldl$/;"	m
RANLIB	makefiles/linux_clapack.mk	/^RANLIB = ranlib$/;"	m
CUDA_FLAGS	makefiles/linux_cuda.mk	/^CUDA_FLAGS = -g -Xcompiler -fPIC --verbose --machine 32 -DHAVE_CUDA$/;"	m
CUDA_INCLUDE	makefiles/linux_cuda.mk	/^CUDA_INCLUDE= -I$(CUDATKDIR)\/include$/;"	m
AR	makefiles/linux_openblas.mk	/^AR = ar$/;"	m
AS	makefiles/linux_openblas.mk	/^AS = as$/;"	m
CC	makefiles/linux_openblas.mk	/^CC = g++$/;"	m
CXX	makefiles/linux_openblas.mk	/^CXX = g++$/;"	m
CXXFLAGS	makefiles/linux_openblas.mk	/^CXXFLAGS = -msse -msse2 -Wall -I.. \\$/;"	m
LDFLAGS	makefiles/linux_openblas.mk	/^LDFLAGS = -rdynamic $(OPENFSTLDFLAGS)$/;"	m
LDLIBS	makefiles/linux_openblas.mk	/^LDLIBS = $(EXTRA_LDLIBS) $(OPENFSTLIBS) $(OPENBLASLIBS) -lm -lpthread -ldl $/;"	m
RANLIB	makefiles/linux_openblas.mk	/^RANLIB = ranlib$/;"	m
CUDA_FLAGS	makefiles/linux_x86_64_cuda.mk	/^CUDA_FLAGS = -g -Xcompiler -fPIC --verbose --machine 64 -DHAVE_CUDA$/;"	m
CUDA_INCLUDE	makefiles/linux_x86_64_cuda.mk	/^CUDA_INCLUDE= -I$(CUDATKDIR)\/include$/;"	m
UNAME	makefiles/linux_x86_64_cuda.mk	/^UNAME := $(shell uname)$/;"	m
AR	makefiles/linux_x86_64_mkl.mk	/^AR = ar$/;"	m
AS	makefiles/linux_x86_64_mkl.mk	/^AS = as$/;"	m
CC	makefiles/linux_x86_64_mkl.mk	/^CC = g++$/;"	m
CXX	makefiles/linux_x86_64_mkl.mk	/^CXX = g++$/;"	m
CXXFLAGS	makefiles/linux_x86_64_mkl.mk	/^CXXFLAGS = -m64 -msse -msse2 -pthread -Wall -I.. \\$/;"	m
LDFLAGS	makefiles/linux_x86_64_mkl.mk	/^LDFLAGS = -rdynamic -L$(FSTROOT)\/lib -Wl,-R$(FSTROOT)\/lib$/;"	m
LDLIBS	makefiles/linux_x86_64_mkl.mk	/^LDLIBS =  $(EXTRA_LDLIBS) -lfst -ldl $(MKLFLAGS) -lm -lpthread$/;"	m
MKLLIB	makefiles/linux_x86_64_mkl.mk	/^MKLLIB ?= $(MKLROOT)\/lib\/em64t$/;"	m
MKL_DYN_MUL	makefiles/linux_x86_64_mkl.mk	/^MKL_DYN_MUL = -L$(MKLLIB) -lmkl_solver_lp64 -Wl,--start-group -lmkl_intel_lp64 \\$/;"	m
MKL_DYN_SEQ	makefiles/linux_x86_64_mkl.mk	/^MKL_DYN_SEQ = -L$(MKLLIB) -lmkl_solver_lp64_sequential -Wl,--start-group \\$/;"	m
MKL_STA_MUL	makefiles/linux_x86_64_mkl.mk	/^MKL_STA_MUL = $(MKLLIB)\/libmkl_solver_lp64.a -Wl,--start-group \\$/;"	m
MKL_STA_SEQ	makefiles/linux_x86_64_mkl.mk	/^MKL_STA_SEQ = $(MKLLIB)\/libmkl_solver_lp64_sequential.a -Wl,--start-group \\$/;"	m
RANLIB	makefiles/linux_x86_64_mkl.mk	/^RANLIB = ranlib$/;"	m
ADDLIBS	matrix/Makefile	/^ADDLIBS = ..\/base\/kaldi-base.a$/;"	m
LIBNAME	matrix/Makefile	/^LIBNAME = kaldi-matrix$/;"	m
OBJFILES	matrix/Makefile	/^OBJFILES = kaldi-matrix.o kaldi-vector.o packed-matrix.o sp-matrix.o tp-matrix.o \\$/;"	m
OPENFST_CXXFLAGS	matrix/Makefile	/^OPENFST_CXXFLAGS = $/;"	m
OPENFST_LDLIBS	matrix/Makefile	/^OPENFST_LDLIBS =$/;"	m
TESTFILES	matrix/Makefile	/^TESTFILES = matrix-lib-test kaldi-gpsr-test #matrix-lib-speed-test$/;"	m
KALDI_MATRIX_CBLAS_WRAPPERS_H_	matrix/cblas-wrappers.h	21;"	d
Xgemv_sparsevec	matrix/cblas-wrappers.h	/^inline void Xgemv_sparsevec(MatrixTransposeType trans, MatrixIndexT num_rows,$/;"	f	namespace:kaldi
cblas_Xasum	matrix/cblas-wrappers.h	/^inline double cblas_Xasum(const int N, const double *X, const int incX) {$/;"	f	namespace:kaldi
cblas_Xasum	matrix/cblas-wrappers.h	/^inline float cblas_Xasum(const int N, const float *X, const int incX) {$/;"	f	namespace:kaldi
cblas_Xaxpy	matrix/cblas-wrappers.h	/^inline void cblas_Xaxpy(const int N, const double alpha, const double *X,$/;"	f	namespace:kaldi
cblas_Xaxpy	matrix/cblas-wrappers.h	/^inline void cblas_Xaxpy(const int N, const float alpha, const float *X,$/;"	f	namespace:kaldi
cblas_Xcopy	matrix/cblas-wrappers.h	/^inline void cblas_Xcopy(const int N, const double *X, const int incX, double *Y,$/;"	f	namespace:kaldi
cblas_Xcopy	matrix/cblas-wrappers.h	/^inline void cblas_Xcopy(const int N, const float *X, const int incX, float *Y,$/;"	f	namespace:kaldi
cblas_Xdot	matrix/cblas-wrappers.h	/^inline double cblas_Xdot(const int N, const double *const X,$/;"	f	namespace:kaldi
cblas_Xdot	matrix/cblas-wrappers.h	/^inline float cblas_Xdot(const int N, const float *const X,$/;"	f	namespace:kaldi
cblas_Xgbmv	matrix/cblas-wrappers.h	/^inline void cblas_Xgbmv(MatrixTransposeType trans, MatrixIndexT num_rows,$/;"	f	namespace:kaldi
cblas_Xgemm	matrix/cblas-wrappers.h	/^inline void cblas_Xgemm(const double alpha,$/;"	f	namespace:kaldi
cblas_Xgemm	matrix/cblas-wrappers.h	/^inline void cblas_Xgemm(const float alpha,$/;"	f	namespace:kaldi
cblas_Xgemv	matrix/cblas-wrappers.h	/^inline void cblas_Xgemv(MatrixTransposeType trans, MatrixIndexT num_rows,$/;"	f	namespace:kaldi
cblas_Xger	matrix/cblas-wrappers.h	/^inline void cblas_Xger(MatrixIndexT num_rows, MatrixIndexT num_cols, double alpha,$/;"	f	namespace:kaldi
cblas_Xger	matrix/cblas-wrappers.h	/^inline void cblas_Xger(MatrixIndexT num_rows, MatrixIndexT num_cols, float alpha,$/;"	f	namespace:kaldi
cblas_Xrot	matrix/cblas-wrappers.h	/^inline void cblas_Xrot(const int N, double *X, const int incX, double *Y,$/;"	f	namespace:kaldi
cblas_Xrot	matrix/cblas-wrappers.h	/^inline void cblas_Xrot(const int N, float *X, const int incX, float *Y,$/;"	f	namespace:kaldi
cblas_Xsbmv1	matrix/cblas-wrappers.h	/^inline void cblas_Xsbmv1($/;"	f	namespace:kaldi
cblas_Xscal	matrix/cblas-wrappers.h	/^inline void cblas_Xscal(const int N, const double alpha, double *data, $/;"	f	namespace:kaldi
cblas_Xscal	matrix/cblas-wrappers.h	/^inline void cblas_Xscal(const int N, const float alpha, float *data,$/;"	f	namespace:kaldi
cblas_Xspmv	matrix/cblas-wrappers.h	/^inline void cblas_Xspmv(MatrixIndexT dim, double alpha, const double *Mdata,$/;"	f	namespace:kaldi
cblas_Xspmv	matrix/cblas-wrappers.h	/^inline void cblas_Xspmv(MatrixIndexT dim, float alpha, const float *Mdata,$/;"	f	namespace:kaldi
cblas_Xspmv	matrix/cblas-wrappers.h	/^inline void cblas_Xspmv(const double alpha, const int num_rows, const double *Mdata,$/;"	f	namespace:kaldi
cblas_Xspmv	matrix/cblas-wrappers.h	/^inline void cblas_Xspmv(const float alpha, const int num_rows, const float *Mdata,$/;"	f	namespace:kaldi
cblas_Xspr	matrix/cblas-wrappers.h	/^inline void cblas_Xspr(MatrixIndexT dim, double alpha, const double *Xdata,$/;"	f	namespace:kaldi
cblas_Xspr	matrix/cblas-wrappers.h	/^inline void cblas_Xspr(MatrixIndexT dim, float alpha, const float *Xdata,$/;"	f	namespace:kaldi
cblas_Xspr2	matrix/cblas-wrappers.h	/^inline void cblas_Xspr2(MatrixIndexT dim, double alpha, const double *Xdata,$/;"	f	namespace:kaldi
cblas_Xspr2	matrix/cblas-wrappers.h	/^inline void cblas_Xspr2(MatrixIndexT dim, float alpha, const float *Xdata,$/;"	f	namespace:kaldi
cblas_Xsymm	matrix/cblas-wrappers.h	/^inline void cblas_Xsymm(const double alpha,$/;"	f	namespace:kaldi
cblas_Xsymm	matrix/cblas-wrappers.h	/^inline void cblas_Xsymm(const float alpha,$/;"	f	namespace:kaldi
cblas_Xsyrk	matrix/cblas-wrappers.h	/^inline void cblas_Xsyrk ($/;"	f	namespace:kaldi
cblas_Xsyrk	matrix/cblas-wrappers.h	/^inline void cblas_Xsyrk($/;"	f	namespace:kaldi
cblas_Xtpmv	matrix/cblas-wrappers.h	/^inline void cblas_Xtpmv(MatrixTransposeType trans, const double *Mdata,$/;"	f	namespace:kaldi
cblas_Xtpmv	matrix/cblas-wrappers.h	/^inline void cblas_Xtpmv(MatrixTransposeType trans, const float *Mdata,$/;"	f	namespace:kaldi
cblas_Xtpsv	matrix/cblas-wrappers.h	/^inline void cblas_Xtpsv(MatrixTransposeType trans, const double *Mdata,$/;"	f	namespace:kaldi
cblas_Xtpsv	matrix/cblas-wrappers.h	/^inline void cblas_Xtpsv(MatrixTransposeType trans, const float *Mdata,$/;"	f	namespace:kaldi
clapack_Xgesvd	matrix/cblas-wrappers.h	/^inline void clapack_Xgesvd(char *v, char *u, KaldiBlasInt *num_cols,$/;"	f	namespace:kaldi
clapack_Xgetrf	matrix/cblas-wrappers.h	/^inline void clapack_Xgetrf(MatrixIndexT num_rows, MatrixIndexT num_cols,$/;"	f	namespace:kaldi
clapack_Xgetrf2	matrix/cblas-wrappers.h	/^inline void clapack_Xgetrf2(KaldiBlasInt *num_rows, KaldiBlasInt *num_cols, $/;"	f	namespace:kaldi
clapack_Xgetri	matrix/cblas-wrappers.h	/^inline void clapack_Xgetri(MatrixIndexT num_rows, double *Mdata, MatrixIndexT stride,$/;"	f	namespace:kaldi
clapack_Xgetri	matrix/cblas-wrappers.h	/^inline void clapack_Xgetri(MatrixIndexT num_rows, float *Mdata, MatrixIndexT stride,$/;"	f	namespace:kaldi
clapack_Xgetri2	matrix/cblas-wrappers.h	/^inline void clapack_Xgetri2(KaldiBlasInt *num_rows, double *Mdata, KaldiBlasInt *stride,$/;"	f	namespace:kaldi
clapack_Xgetri2	matrix/cblas-wrappers.h	/^inline void clapack_Xgetri2(KaldiBlasInt *num_rows, float *Mdata, KaldiBlasInt *stride,$/;"	f	namespace:kaldi
clapack_Xsptrf	matrix/cblas-wrappers.h	/^void inline clapack_Xsptrf(KaldiBlasInt *num_rows, double *Mdata,$/;"	f	namespace:kaldi
clapack_Xsptrf	matrix/cblas-wrappers.h	/^void inline clapack_Xsptrf(KaldiBlasInt *num_rows, float *Mdata,$/;"	f	namespace:kaldi
clapack_Xsptri	matrix/cblas-wrappers.h	/^void inline clapack_Xsptri(KaldiBlasInt *num_rows, double *Mdata, $/;"	f	namespace:kaldi
clapack_Xsptri	matrix/cblas-wrappers.h	/^void inline clapack_Xsptri(KaldiBlasInt *num_rows, float *Mdata, $/;"	f	namespace:kaldi
clapack_Xtptri	matrix/cblas-wrappers.h	/^inline void clapack_Xtptri(KaldiBlasInt *num_rows, double *Mdata, KaldiBlasInt *result) {$/;"	f	namespace:kaldi
clapack_Xtptri	matrix/cblas-wrappers.h	/^inline void clapack_Xtptri(KaldiBlasInt *num_rows, float *Mdata, KaldiBlasInt *result) {$/;"	f	namespace:kaldi
clapack_Xtrtri	matrix/cblas-wrappers.h	/^inline int clapack_Xtrtri(int num_rows, double *Mdata, MatrixIndexT stride) {$/;"	f	namespace:kaldi
clapack_Xtrtri	matrix/cblas-wrappers.h	/^inline int clapack_Xtrtri(int num_rows, float *Mdata, MatrixIndexT stride) {$/;"	f	namespace:kaldi
kaldi	matrix/cblas-wrappers.h	/^namespace kaldi {$/;"	n
mul_elements	matrix/cblas-wrappers.h	/^inline void mul_elements($/;"	f	namespace:kaldi
AllocateData	matrix/compressed-matrix.cc	/^void* CompressedMatrix::AllocateData(int32 num_bytes) {$/;"	f	class:kaldi::CompressedMatrix
CharToFloat	matrix/compressed-matrix.cc	/^inline float CompressedMatrix::CharToFloat($/;"	f	class:kaldi::CompressedMatrix
CompressColumn	matrix/compressed-matrix.cc	/^void CompressedMatrix::CompressColumn($/;"	f	class:kaldi::CompressedMatrix
CompressedMatrix	matrix/compressed-matrix.cc	/^CompressedMatrix::CompressedMatrix($/;"	f	class:kaldi::CompressedMatrix
CompressedMatrix	matrix/compressed-matrix.cc	/^CompressedMatrix::CompressedMatrix(const CompressedMatrix &mat): data_(NULL) {$/;"	f	class:kaldi::CompressedMatrix
ComputeColHeader	matrix/compressed-matrix.cc	/^void CompressedMatrix::ComputeColHeader($/;"	f	class:kaldi::CompressedMatrix
CopyColToVec	matrix/compressed-matrix.cc	/^void CompressedMatrix::CopyColToVec(MatrixIndexT col,$/;"	f	class:kaldi::CompressedMatrix
CopyFromMat	matrix/compressed-matrix.cc	/^void CompressedMatrix::CopyFromMat($/;"	f	class:kaldi::CompressedMatrix
CopyRowToVec	matrix/compressed-matrix.cc	/^void CompressedMatrix::CopyRowToVec(MatrixIndexT row,$/;"	f	class:kaldi::CompressedMatrix
CopyToMat	matrix/compressed-matrix.cc	/^void CompressedMatrix::CopyToMat(MatrixBase<Real> *mat) const {$/;"	f	class:kaldi::CompressedMatrix
CopyToMat	matrix/compressed-matrix.cc	/^void CompressedMatrix::CopyToMat(int32 row_offset,$/;"	f	class:kaldi::CompressedMatrix
DataSize	matrix/compressed-matrix.cc	/^MatrixIndexT CompressedMatrix::DataSize(const GlobalHeader &header) {$/;"	f	class:kaldi::CompressedMatrix
Destroy	matrix/compressed-matrix.cc	/^void CompressedMatrix::Destroy() {$/;"	f	class:kaldi::CompressedMatrix
FloatToChar	matrix/compressed-matrix.cc	/^inline unsigned char CompressedMatrix::FloatToChar($/;"	f	class:kaldi::CompressedMatrix
FloatToUint16	matrix/compressed-matrix.cc	/^inline uint16 CompressedMatrix::FloatToUint16($/;"	f	class:kaldi::CompressedMatrix
Read	matrix/compressed-matrix.cc	/^void CompressedMatrix::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CompressedMatrix
Uint16ToFloat	matrix/compressed-matrix.cc	/^inline float CompressedMatrix::Uint16ToFloat($/;"	f	class:kaldi::CompressedMatrix
Write	matrix/compressed-matrix.cc	/^void CompressedMatrix::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CompressedMatrix
kaldi	matrix/compressed-matrix.cc	/^namespace kaldi {$/;"	n	file:
operator =	matrix/compressed-matrix.cc	/^CompressedMatrix &CompressedMatrix::operator = (const CompressedMatrix &mat) {$/;"	f	class:kaldi::CompressedMatrix
operator =	matrix/compressed-matrix.cc	/^CompressedMatrix &CompressedMatrix::operator =(const MatrixBase<Real> &mat) {$/;"	f	class:kaldi::CompressedMatrix
CompressedMatrix	matrix/compressed-matrix.h	/^  CompressedMatrix(): data_(NULL) { }$/;"	f	class:kaldi::CompressedMatrix
CompressedMatrix	matrix/compressed-matrix.h	/^  CompressedMatrix(const MatrixBase<Real> &mat): data_(NULL) { CopyFromMat(mat); }$/;"	f	class:kaldi::CompressedMatrix
CompressedMatrix	matrix/compressed-matrix.h	/^class CompressedMatrix {$/;"	c	namespace:kaldi
Data	matrix/compressed-matrix.h	/^  void *Data() const { return this->data_; }$/;"	f	class:kaldi::CompressedMatrix
GlobalHeader	matrix/compressed-matrix.h	/^  struct GlobalHeader {$/;"	s	class:kaldi::CompressedMatrix
KALDI_MATRIX_COMPRESSED_MATRIX_H_	matrix/compressed-matrix.h	22;"	d
NumCols	matrix/compressed-matrix.h	/^  inline MatrixIndexT NumCols() const { return (data_ == NULL) ? 0 :$/;"	f	class:kaldi::CompressedMatrix
NumRows	matrix/compressed-matrix.h	/^  inline MatrixIndexT NumRows() const { return (data_ == NULL) ? 0 :$/;"	f	class:kaldi::CompressedMatrix
PerColHeader	matrix/compressed-matrix.h	/^  struct PerColHeader {$/;"	s	class:kaldi::CompressedMatrix
Swap	matrix/compressed-matrix.h	/^  void Swap(CompressedMatrix *other) { std::swap(data_, other->data_); }$/;"	f	class:kaldi::CompressedMatrix
data_	matrix/compressed-matrix.h	/^  void *data_; \/\/ first GlobalHeader, then PerColHeader (repeated), then$/;"	m	class:kaldi::CompressedMatrix
format	matrix/compressed-matrix.h	/^    int32 format;$/;"	m	struct:kaldi::CompressedMatrix::GlobalHeader
kaldi	matrix/compressed-matrix.h	/^namespace kaldi {$/;"	n
min_value	matrix/compressed-matrix.h	/^    float min_value;$/;"	m	struct:kaldi::CompressedMatrix::GlobalHeader
num_cols	matrix/compressed-matrix.h	/^    int32 num_cols;$/;"	m	struct:kaldi::CompressedMatrix::GlobalHeader
num_rows	matrix/compressed-matrix.h	/^    int32 num_rows;$/;"	m	struct:kaldi::CompressedMatrix::GlobalHeader
percentile_0	matrix/compressed-matrix.h	/^    uint16 percentile_0;$/;"	m	struct:kaldi::CompressedMatrix::PerColHeader
percentile_100	matrix/compressed-matrix.h	/^    uint16 percentile_100;$/;"	m	struct:kaldi::CompressedMatrix::PerColHeader
percentile_25	matrix/compressed-matrix.h	/^    uint16 percentile_25;$/;"	m	struct:kaldi::CompressedMatrix::PerColHeader
percentile_75	matrix/compressed-matrix.h	/^    uint16 percentile_75;$/;"	m	struct:kaldi::CompressedMatrix::PerColHeader
range	matrix/compressed-matrix.h	/^    float range;$/;"	m	struct:kaldi::CompressedMatrix::GlobalHeader
~CompressedMatrix	matrix/compressed-matrix.h	/^  ~CompressedMatrix() { Destroy(); }$/;"	f	class:kaldi::CompressedMatrix
EigenvalueDecomposition	matrix/jama-eig.h	/^EigenvalueDecomposition<Real>::EigenvalueDecomposition(const MatrixBase<Real> &A) {$/;"	f	class:kaldi::EigenvalueDecomposition
EigenvalueDecomposition	matrix/jama-eig.h	/^template<typename Real> class EigenvalueDecomposition {$/;"	c	namespace:kaldi
GetImagEigenvalues	matrix/jama-eig.h	/^  void GetImagEigenvalues(VectorBase<Real> *i_out) {$/;"	f	class:kaldi::EigenvalueDecomposition
GetRealEigenvalues	matrix/jama-eig.h	/^  void GetRealEigenvalues(VectorBase<Real> *r_out) {$/;"	f	class:kaldi::EigenvalueDecomposition
GetV	matrix/jama-eig.h	/^  void GetV(MatrixBase<Real> *V_out) {  \/\/ V is what we call P externally; it's the matrix of$/;"	f	class:kaldi::EigenvalueDecomposition
H	matrix/jama-eig.h	/^  inline Real &H(int r, int c) { return H_[r*n_ + c]; }$/;"	f	class:kaldi::EigenvalueDecomposition
H_	matrix/jama-eig.h	/^  Real *H_;  \/\/ the nonsymmetric Hessenberg form.$/;"	m	class:kaldi::EigenvalueDecomposition
Hqr2	matrix/jama-eig.h	/^template<typename Real> void  EigenvalueDecomposition<Real>::Hqr2() {$/;"	f	class:kaldi::EigenvalueDecomposition
KALDI_MATRIX_JAMA_EIG_H_	matrix/jama-eig.h	30;"	d
Orthes	matrix/jama-eig.h	/^void EigenvalueDecomposition<Real>::Orthes() {$/;"	f	class:kaldi::EigenvalueDecomposition
Tql2	matrix/jama-eig.h	/^template<typename Real> void EigenvalueDecomposition<Real>::Tql2() {$/;"	f	class:kaldi::EigenvalueDecomposition
Tred2	matrix/jama-eig.h	/^template<typename Real> void  EigenvalueDecomposition<Real>::Tred2() {$/;"	f	class:kaldi::EigenvalueDecomposition
V	matrix/jama-eig.h	/^  inline Real &V(int r, int c) { return V_[r*n_ + c]; }$/;"	f	class:kaldi::EigenvalueDecomposition
V_	matrix/jama-eig.h	/^  Real *V_;  \/\/ the eigenvectors (P in our external notation)$/;"	m	class:kaldi::EigenvalueDecomposition
cdiv	matrix/jama-eig.h	/^  inline static void cdiv(Real xr, Real xi, Real yr, Real yi, Real *cdivr, Real *cdivi) {$/;"	f	class:kaldi::EigenvalueDecomposition
d_	matrix/jama-eig.h	/^  Real *d_, *e_;  \/\/ real and imaginary parts of eigenvalues.$/;"	m	class:kaldi::EigenvalueDecomposition
e_	matrix/jama-eig.h	/^  Real *d_, *e_;  \/\/ real and imaginary parts of eigenvalues.$/;"	m	class:kaldi::EigenvalueDecomposition
kaldi	matrix/jama-eig.h	/^namespace kaldi {$/;"	n
n_	matrix/jama-eig.h	/^  int n_;  \/\/ matrix dimension.$/;"	m	class:kaldi::EigenvalueDecomposition
ort_	matrix/jama-eig.h	/^  Real *ort_;  \/\/ working storage for nonsymmetric algorithm.$/;"	m	class:kaldi::EigenvalueDecomposition
~EigenvalueDecomposition	matrix/jama-eig.h	/^EigenvalueDecomposition<Real>::~EigenvalueDecomposition() {$/;"	f	class:kaldi::EigenvalueDecomposition
JamaSvd	matrix/jama-svd.h	/^bool MatrixBase<Real>::JamaSvd(VectorBase<Real> *s_in,$/;"	f	class:kaldi::MatrixBase
KALDI_MATRIX_JAMA_SVD_H_	matrix/jama-svd.h	29;"	d
kaldi	matrix/jama-svd.h	/^namespace kaldi {$/;"	n
I	matrix/kaldi-blas.h	100;"	d
KALDI_MATRIX_KALDI_BLAS_H_	matrix/kaldi-blas.h	20;"	d
KaldiBlasInt	matrix/kaldi-blas.h	/^typedef MKL_INT KaldiBlasInt;$/;"	t
KaldiBlasInt	matrix/kaldi-blas.h	/^typedef int KaldiBlasInt; \/\/ try int.$/;"	t
KaldiBlasInt	matrix/kaldi-blas.h	/^typedef integer KaldiBlasInt;$/;"	t
__has_extension	matrix/kaldi-blas.h	59;"	d
abs	matrix/kaldi-blas.h	103;"	d
abs	matrix/kaldi-blas.h	80;"	d
bit_clear	matrix/kaldi-blas.h	110;"	d
bit_clear	matrix/kaldi-blas.h	87;"	d
bit_set	matrix/kaldi-blas.h	111;"	d
bit_set	matrix/kaldi-blas.h	88;"	d
bit_test	matrix/kaldi-blas.h	109;"	d
bit_test	matrix/kaldi-blas.h	86;"	d
complex	matrix/kaldi-blas.h	/^    typedef __CLPK_complex          complex;$/;"	t
complex	matrix/kaldi-blas.h	101;"	d
dabs	matrix/kaldi-blas.h	104;"	d
dabs	matrix/kaldi-blas.h	81;"	d
dmax	matrix/kaldi-blas.h	108;"	d
dmax	matrix/kaldi-blas.h	85;"	d
dmin	matrix/kaldi-blas.h	107;"	d
dmin	matrix/kaldi-blas.h	84;"	d
doublecomplex	matrix/kaldi-blas.h	/^    typedef __CLPK_doublecomplex    doublecomplex;$/;"	t
doublereal	matrix/kaldi-blas.h	/^    typedef __CLPK_doublereal       doublereal;$/;"	t
ftnlen	matrix/kaldi-blas.h	/^    typedef __CLPK_ftnlen           ftnlen;$/;"	t
integer	matrix/kaldi-blas.h	/^    typedef __CLPK_integer          integer;$/;"	t
logical	matrix/kaldi-blas.h	/^    typedef __CLPK_logical          logical;$/;"	t
max	matrix/kaldi-blas.h	106;"	d
max	matrix/kaldi-blas.h	83;"	d
min	matrix/kaldi-blas.h	105;"	d
min	matrix/kaldi-blas.h	82;"	d
real	matrix/kaldi-blas.h	/^    typedef __CLPK_real             real;$/;"	t
vImage_CVUtilities_h	matrix/kaldi-blas.h	62;"	d
vImage_Utilities_h	matrix/kaldi-blas.h	61;"	d
InitRand	matrix/kaldi-gpsr-test.cc	/^template<typename Real> static void InitRand(MatrixBase<Real> *M) {$/;"	f	namespace:kaldi
InitRand	matrix/kaldi-gpsr-test.cc	/^template<typename Real> static void InitRand(SpMatrix<Real> *M) {$/;"	f	namespace:kaldi
InitRand	matrix/kaldi-gpsr-test.cc	/^template<typename Real> static void InitRand(VectorBase<Real> *v) {$/;"	f	namespace:kaldi
UnitTestGpsr	matrix/kaldi-gpsr-test.cc	/^template<typename Real> static void UnitTestGpsr() {$/;"	f	namespace:kaldi
kaldi	matrix/kaldi-gpsr-test.cc	/^namespace kaldi {$/;"	n	file:
main	matrix/kaldi-gpsr-test.cc	/^int main() {$/;"	f
Debias	matrix/kaldi-gpsr.cc	/^double Debias(const GpsrConfig &opts, const SpMatrix<double> &H,$/;"	f	namespace:kaldi
GpsrBB	matrix/kaldi-gpsr.cc	/^double GpsrBB(const GpsrConfig &opts, const SpMatrix<double> &H,$/;"	f	namespace:kaldi
GpsrBB	matrix/kaldi-gpsr.cc	/^float GpsrBB(const GpsrConfig &opts, const SpMatrix<float> &H,$/;"	f	namespace:kaldi
GpsrBasic	matrix/kaldi-gpsr.cc	/^double GpsrBasic(const GpsrConfig &opts, const SpMatrix<double> &H,$/;"	f	namespace:kaldi
GpsrBasic	matrix/kaldi-gpsr.cc	/^float GpsrBasic(const GpsrConfig &opts, const SpMatrix<float> &H,$/;"	f	namespace:kaldi
GpsrBasicAlpha	matrix/kaldi-gpsr.cc	/^double GpsrBasicAlpha(const SpMatrix<double> &H, const Vector<double> &u,$/;"	f	namespace:kaldi
GpsrCalcLinearCoeff	matrix/kaldi-gpsr.cc	/^void GpsrCalcLinearCoeff(double tau, const Vector<double> &g,$/;"	f	namespace:kaldi
GpsrGradient	matrix/kaldi-gpsr.cc	/^void GpsrGradient(const SpMatrix<double> &H, const Vector<double> &c,$/;"	f	namespace:kaldi
GpsrObjective	matrix/kaldi-gpsr.cc	/^double GpsrObjective(const SpMatrix<double> &H, const Vector<double> &c,$/;"	f	namespace:kaldi
kaldi	matrix/kaldi-gpsr.cc	/^namespace kaldi {$/;"	n	file:
Gpsr	matrix/kaldi-gpsr.h	/^Real Gpsr(const GpsrConfig &opts, const SpMatrix<Real> &H,$/;"	f	namespace:kaldi
GpsrConfig	matrix/kaldi-gpsr.h	/^  GpsrConfig() {$/;"	f	struct:kaldi::GpsrConfig
GpsrConfig	matrix/kaldi-gpsr.h	/^struct GpsrConfig {$/;"	s	namespace:kaldi
KALDI_MATRIX_KALDI_GPSR_H_	matrix/kaldi-gpsr.h	21;"	d
Register	matrix/kaldi-gpsr.h	/^inline void GpsrConfig::Register(OptionsItf *po) {$/;"	f	class:kaldi::GpsrConfig
alpha_max	matrix/kaldi-gpsr.h	/^  double alpha_max;  \/\/\/< Maximum step size in the feasible direction$/;"	m	struct:kaldi::GpsrConfig
alpha_min	matrix/kaldi-gpsr.h	/^  double alpha_min;  \/\/\/< Minimum step size in the feasible direction$/;"	m	struct:kaldi::GpsrConfig
debias	matrix/kaldi-gpsr.h	/^  bool debias;  \/\/\/< Do debiasing, i.e. unconstrained optimization at the end$/;"	m	struct:kaldi::GpsrConfig
gpsr_beta	matrix/kaldi-gpsr.h	/^  double gpsr_beta;$/;"	m	struct:kaldi::GpsrConfig
gpsr_mu	matrix/kaldi-gpsr.h	/^  double gpsr_mu;$/;"	m	struct:kaldi::GpsrConfig
gpsr_tau	matrix/kaldi-gpsr.h	/^  double gpsr_tau;  \/\/\/< Regularization scale$/;"	m	struct:kaldi::GpsrConfig
kaldi	matrix/kaldi-gpsr.h	/^namespace kaldi {$/;"	n
max_iters	matrix/kaldi-gpsr.h	/^  int32 max_iters;  \/\/\/< Maximum number of iterations$/;"	m	struct:kaldi::GpsrConfig
max_iters_backtrak	matrix/kaldi-gpsr.h	/^  int32 max_iters_backtrak;  \/\/\/< Max iterations for backtracking line search$/;"	m	struct:kaldi::GpsrConfig
max_iters_debias	matrix/kaldi-gpsr.h	/^  int32 max_iters_debias;  \/\/\/< Maximum number of iterations for debiasing stage$/;"	m	struct:kaldi::GpsrConfig
max_sparsity	matrix/kaldi-gpsr.h	/^  double max_sparsity;  \/\/\/< Maximum percentage of dimensions set to 0$/;"	m	struct:kaldi::GpsrConfig
stop_thresh	matrix/kaldi-gpsr.h	/^  double stop_thresh;  \/\/\/< Stopping threshold$/;"	m	struct:kaldi::GpsrConfig
stop_thresh_debias	matrix/kaldi-gpsr.h	/^  double stop_thresh_debias;  \/\/\/< Stopping threshold for debiasing stage$/;"	m	struct:kaldi::GpsrConfig
tau_reduction	matrix/kaldi-gpsr.h	/^  double tau_reduction;  \/\/\/< Multiply tau by this if max_sparsity reached$/;"	m	struct:kaldi::GpsrConfig
use_gpsr_bb	matrix/kaldi-gpsr.h	/^  bool use_gpsr_bb;  \/\/\/< Use the Barzilai-Borwein gradient projection method$/;"	m	struct:kaldi::GpsrConfig
KALDI_MATRIX_KALDI_MATRIX_INL_H_	matrix/kaldi-matrix-inl.h	21;"	d
Matrix	matrix/kaldi-matrix-inl.h	/^Matrix<Real>::Matrix(): MatrixBase<Real>(NULL, 0, 0, 0) { }$/;"	f	class:kaldi::Matrix
kaldi	matrix/kaldi-matrix-inl.h	/^namespace kaldi {$/;"	n
operator <<	matrix/kaldi-matrix-inl.h	/^inline std::ostream & operator << (std::ostream & os, const MatrixBase<Real> & M) {$/;"	f	namespace:kaldi
operator >>	matrix/kaldi-matrix-inl.h	/^inline std::istream & operator >> (std::istream & is, Matrix<Real> & M) {$/;"	f	namespace:kaldi
operator >>	matrix/kaldi-matrix-inl.h	/^inline std::istream & operator >> (std::istream & is, MatrixBase<Real> & M) {$/;"	f	namespace:kaldi
Add	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Add(const Real alpha) {$/;"	f	class:kaldi::MatrixBase
AddDiagVecMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddDiagVecMat($/;"	f	class:kaldi::MatrixBase
AddMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddMat(const Real alpha, const MatrixBase<Real>& A,$/;"	f	class:kaldi::MatrixBase
AddMatDiagVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddMatDiagVec($/;"	f	class:kaldi::MatrixBase
AddMatMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddMatMat(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddMatMatDivMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddMatMatDivMat(const MatrixBase<Real>& A,$/;"	f	class:kaldi::MatrixBase
AddMatMatElements	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddMatMatElements(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddMatMatMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddMatMatMat(Real alpha,$/;"	f	class:kaldi::MatrixBase
AddMatSmat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddMatSmat(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddSmatMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddSmatMat(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddSp	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddSp(const Real alpha, const SpMatrix<OtherReal> &S) {$/;"	f	class:kaldi::MatrixBase
AddSpSp	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddSpSp(const Real alpha, const SpMatrix<Real> &A_in,$/;"	f	class:kaldi::MatrixBase
AddToDiag	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddToDiag(const Real alpha) {$/;"	f	class:kaldi::MatrixBase
AddVecToCols	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddVecToCols(const Real alpha, const VectorBase<OtherReal> &v) {$/;"	f	class:kaldi::MatrixBase
AddVecToRows	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddVecToRows(const Real alpha, const VectorBase<OtherReal> &v) {$/;"	f	class:kaldi::MatrixBase
AddVecVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::AddVecVec(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddVecVec	matrix/kaldi-matrix.cc	/^void MatrixBase<double>::AddVecVec(const double alpha,$/;"	f	class:kaldi::MatrixBase
AddVecVec	matrix/kaldi-matrix.cc	/^void MatrixBase<float>::AddVecVec(const float alpha,$/;"	f	class:kaldi::MatrixBase
ApplyCeiling	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::ApplyCeiling(Real ceiling_val) {$/;"	f	class:kaldi::MatrixBase
ApplyExp	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::ApplyExp() {$/;"	f	class:kaldi::MatrixBase
ApplyFloor	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::ApplyFloor(Real floor_val) {$/;"	f	class:kaldi::MatrixBase
ApplyHeaviside	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::ApplyHeaviside() {$/;"	f	class:kaldi::MatrixBase
ApplyLog	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::ApplyLog() {$/;"	f	class:kaldi::MatrixBase
ApplyPow	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::MatrixBase
ApplyPowAbs	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::ApplyPowAbs(Real power, bool include_sign) {$/;"	f	class:kaldi::MatrixBase
ApplySoftMax	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::ApplySoftMax() {$/;"	f	class:kaldi::MatrixBase
ApproxEqual	matrix/kaldi-matrix.cc	/^bool MatrixBase<Real>::ApproxEqual(const MatrixBase<Real> &other, float tol) const {$/;"	f	class:kaldi::MatrixBase
AttemptComplexPower	matrix/kaldi-matrix.cc	/^bool AttemptComplexPower(Real *x_re, Real *x_im, Real power) {$/;"	f	namespace:kaldi
Cond	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::Cond() const {$/;"	f	class:kaldi::MatrixBase
CopyColFromVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyColFromVec(const VectorBase<Real> &rv,$/;"	f	class:kaldi::MatrixBase
CopyCols	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyCols(const MatrixBase<Real> &src,$/;"	f	class:kaldi::MatrixBase
CopyColsFromVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyColsFromVec(const VectorBase<Real> &rv) {$/;"	f	class:kaldi::MatrixBase
CopyDiagFromVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyDiagFromVec(const VectorBase<Real> &rv) {$/;"	f	class:kaldi::MatrixBase
CopyFromMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyFromMat(const CompressedMatrix &mat) {$/;"	f	class:kaldi::MatrixBase
CopyFromMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyFromMat(const MatrixBase<OtherReal> & M,$/;"	f	class:kaldi::MatrixBase
CopyFromSp	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyFromSp(const SpMatrix<OtherReal> & M) {$/;"	f	class:kaldi::MatrixBase
CopyFromSp	matrix/kaldi-matrix.cc	/^void MatrixBase<double>::CopyFromSp(const SpMatrix<double> & M) {$/;"	f	class:kaldi::MatrixBase
CopyFromSp	matrix/kaldi-matrix.cc	/^void MatrixBase<float>::CopyFromSp(const SpMatrix<float> & M) {$/;"	f	class:kaldi::MatrixBase
CopyFromTp	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyFromTp(const TpMatrix<OtherReal> & M,$/;"	f	class:kaldi::MatrixBase
CopyLowerToUpper	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyLowerToUpper() {$/;"	f	class:kaldi::MatrixBase
CopyRowFromVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyRowFromVec(const VectorBase<Real> &rv, const MatrixIndexT row) {$/;"	f	class:kaldi::MatrixBase
CopyRows	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyRows(const MatrixBase<Real> &src,$/;"	f	class:kaldi::MatrixBase
CopyRowsFromVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyRowsFromVec(const VectorBase<OtherReal> &rv) {$/;"	f	class:kaldi::MatrixBase
CopyRowsFromVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyRowsFromVec(const VectorBase<Real> &rv) {$/;"	f	class:kaldi::MatrixBase
CopyUpperToLower	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::CopyUpperToLower() {$/;"	f	class:kaldi::MatrixBase
CreateEigenvalueMatrix	matrix/kaldi-matrix.cc	/^void CreateEigenvalueMatrix(const VectorBase<Real> &re, const VectorBase<Real> &im,$/;"	f	namespace:kaldi
Destroy	matrix/kaldi-matrix.cc	/^void Matrix<Real>::Destroy() {$/;"	f	class:kaldi::Matrix
DestructiveSvd	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::DestructiveSvd(VectorBase<Real> *s, MatrixBase<Real> *U, MatrixBase<Real> *Vt) {$/;"	f	class:kaldi::MatrixBase
DiffSigmoid	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::DiffSigmoid(const MatrixBase<Real> &value,$/;"	f	class:kaldi::MatrixBase
DiffTanh	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::DiffTanh(const MatrixBase<Real> &value,$/;"	f	class:kaldi::MatrixBase
DivElements	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::DivElements(const MatrixBase<Real> &a) {$/;"	f	class:kaldi::MatrixBase
Eig	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Eig(MatrixBase<Real> *P,$/;"	f	class:kaldi::MatrixBase
Equal	matrix/kaldi-matrix.cc	/^bool MatrixBase<Real>::Equal(const MatrixBase<Real> &other) const {$/;"	f	class:kaldi::MatrixBase
FrobeniusNorm	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::FrobeniusNorm() const{$/;"	f	class:kaldi::MatrixBase
GroupPnorm	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::GroupPnorm(const MatrixBase<Real> &src, Real power) {$/;"	f	class:kaldi::MatrixBase
GroupPnormDeriv	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::GroupPnormDeriv(const MatrixBase<Real> &input,$/;"	f	class:kaldi::MatrixBase
Init	matrix/kaldi-matrix.cc	/^inline void Matrix<Real>::Init(const MatrixIndexT rows,$/;"	f	class:kaldi::Matrix
Invert	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Invert(Real *log_det, Real *det_sign,$/;"	f	class:kaldi::MatrixBase
InvertDouble	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::InvertDouble(Real *log_det, Real *det_sign,$/;"	f	class:kaldi::MatrixBase
InvertElements	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::InvertElements() {$/;"	f	class:kaldi::MatrixBase
IsDiagonal	matrix/kaldi-matrix.cc	/^bool MatrixBase<Real>::IsDiagonal(Real cutoff) const{$/;"	f	class:kaldi::MatrixBase
IsSymmetric	matrix/kaldi-matrix.cc	/^bool MatrixBase<Real>::IsSymmetric(Real cutoff) const {$/;"	f	class:kaldi::MatrixBase
IsUnit	matrix/kaldi-matrix.cc	/^bool MatrixBase<Real>::IsUnit(Real cutoff) const {$/;"	f	class:kaldi::MatrixBase
IsZero	matrix/kaldi-matrix.cc	/^bool MatrixBase<Real>::IsZero(Real cutoff)const {$/;"	f	class:kaldi::MatrixBase
LapackGesvd	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::LapackGesvd(VectorBase<Real> *s, MatrixBase<Real> *U_in, $/;"	f	class:kaldi::MatrixBase
LargestAbsElem	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::LargestAbsElem() const{$/;"	f	class:kaldi::MatrixBase
LogDet	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::LogDet(Real *det_sign) const {$/;"	f	class:kaldi::MatrixBase
LogSumExp	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::LogSumExp(Real prune) const {$/;"	f	class:kaldi::MatrixBase
Matrix	matrix/kaldi-matrix.cc	/^Matrix<Real>::Matrix (const Matrix<Real> & M):$/;"	f	class:kaldi::Matrix
Matrix	matrix/kaldi-matrix.cc	/^Matrix<Real>::Matrix (const MatrixBase<Real> & M,$/;"	f	class:kaldi::Matrix
Matrix	matrix/kaldi-matrix.cc	/^Matrix<Real>::Matrix(const CompressedMatrix &M): MatrixBase<Real>() {$/;"	f	class:kaldi::Matrix
Matrix	matrix/kaldi-matrix.cc	/^Matrix<Real>::Matrix(const MatrixBase<OtherReal> & M,$/;"	f	class:kaldi::Matrix
Max	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::Max() const {$/;"	f	class:kaldi::MatrixBase
Max	matrix/kaldi-matrix.cc	/^template<typename Real> void MatrixBase<Real>::Max(const MatrixBase<Real> &A) {$/;"	f	class:kaldi::MatrixBase
Min	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::Min() const {$/;"	f	class:kaldi::MatrixBase
MulColsVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::MulColsVec(const VectorBase<Real> &scale) {$/;"	f	class:kaldi::MatrixBase
MulElements	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::MulElements(const MatrixBase<Real> &a) {$/;"	f	class:kaldi::MatrixBase
MulRowsGroupMat	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::MulRowsGroupMat(const MatrixBase<Real> &src) {$/;"	f	class:kaldi::MatrixBase
MulRowsVec	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::MulRowsVec(const VectorBase<Real> &scale) {$/;"	f	class:kaldi::MatrixBase
OrthogonalizeRows	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::OrthogonalizeRows() {$/;"	f	class:kaldi::MatrixBase
Power	matrix/kaldi-matrix.cc	/^bool MatrixBase<Real>::Power(Real power) {$/;"	f	class:kaldi::MatrixBase
Read	matrix/kaldi-matrix.cc	/^void Matrix<Real>::Read(std::istream & is, bool binary, bool add) {$/;"	f	class:kaldi::Matrix
Read	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Read(std::istream & is, bool binary, bool add) {$/;"	f	class:kaldi::MatrixBase
ReadHtk	matrix/kaldi-matrix.cc	/^bool ReadHtk(std::istream &is, Matrix<Real> *M_ptr, HtkHeader *header_ptr)$/;"	f	namespace:kaldi
RemoveRow	matrix/kaldi-matrix.cc	/^void Matrix<Real>::RemoveRow(MatrixIndexT i) {$/;"	f	class:kaldi::Matrix
Resize	matrix/kaldi-matrix.cc	/^void Matrix<Real>::Resize(const MatrixIndexT rows,$/;"	f	class:kaldi::Matrix
Scale	matrix/kaldi-matrix.cc	/^template<typename Real> void MatrixBase<Real>::Scale(Real alpha) {$/;"	f	class:kaldi::MatrixBase
Set	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Set(Real value) {$/;"	f	class:kaldi::MatrixBase
SetRandUniform	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::SetRandUniform() {$/;"	f	class:kaldi::MatrixBase
SetRandn	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::SetRandn() {$/;"	f	class:kaldi::MatrixBase
SetUnit	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::SetUnit() {$/;"	f	class:kaldi::MatrixBase
SetZero	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::SetZero() {$/;"	f	class:kaldi::MatrixBase
Sigmoid	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Sigmoid(const MatrixBase<Real> &src) {$/;"	f	class:kaldi::MatrixBase
SoftHinge	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::SoftHinge(const MatrixBase<Real> &src) {$/;"	f	class:kaldi::MatrixBase
SortSvd	matrix/kaldi-matrix.cc	/^template<typename Real> void  SortSvd(VectorBase<Real> *s, MatrixBase<Real> *U,$/;"	f	namespace:kaldi
SubMatrix	matrix/kaldi-matrix.cc	/^SubMatrix<Real>::SubMatrix(Real *data,$/;"	f	class:kaldi::SubMatrix
SubMatrix	matrix/kaldi-matrix.cc	/^SubMatrix<Real>::SubMatrix(const MatrixBase<Real> &M,$/;"	f	class:kaldi::SubMatrix
Sum	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::Sum() const {$/;"	f	class:kaldi::MatrixBase
Svd	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Svd(VectorBase<Real> *s, MatrixBase<Real> *U, MatrixBase<Real> *Vt) const {$/;"	f	class:kaldi::MatrixBase
Swap	matrix/kaldi-matrix.cc	/^void Matrix<Real>::Swap(Matrix<Real> *other) {$/;"	f	class:kaldi::Matrix
SymAddMat2	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::SymAddMat2(const Real alpha,$/;"	f	class:kaldi::MatrixBase
SymPosSemiDefEig	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::SymPosSemiDefEig(VectorBase<Real> *rs, MatrixBase<Real> *rU, Real check_thresh) \/\/ e.g. check_thresh = 0.001$/;"	f	class:kaldi::MatrixBase
Tanh	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Tanh(const MatrixBase<Real> &src) {$/;"	f	class:kaldi::MatrixBase
TestUninitialized	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::TestUninitialized() const {$/;"	f	class:kaldi::MatrixBase
Trace	matrix/kaldi-matrix.cc	/^Real MatrixBase<Real>::Trace(bool check_square) const  {$/;"	f	class:kaldi::MatrixBase
TraceMatMat	matrix/kaldi-matrix.cc	/^Real TraceMatMat(const MatrixBase<Real> &A,$/;"	f	namespace:kaldi
TraceMatMatMat	matrix/kaldi-matrix.cc	/^Real TraceMatMatMat(const MatrixBase<Real> &A, MatrixTransposeType transA,$/;"	f	namespace:kaldi
TraceMatMatMatMat	matrix/kaldi-matrix.cc	/^Real TraceMatMatMatMat(const MatrixBase<Real> &A, MatrixTransposeType transA,$/;"	f	namespace:kaldi
Transpose	matrix/kaldi-matrix.cc	/^void Matrix<Real>::Transpose() {$/;"	f	class:kaldi::Matrix
Transpose	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Transpose() {$/;"	f	class:kaldi::MatrixBase
Write	matrix/kaldi-matrix.cc	/^void MatrixBase<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::MatrixBase
WriteHtk	matrix/kaldi-matrix.cc	/^bool WriteHtk(std::ostream &os, const MatrixBase<Real> &M, HtkHeader htk_hdr) \/\/ header may be derived from a previous call to ReadHtk.  Must be in binary mode.$/;"	f	namespace:kaldi
WriteSphinx	matrix/kaldi-matrix.cc	/^bool WriteSphinx(std::ostream &os, const MatrixBase<Real> &M)$/;"	f	namespace:kaldi
kaldi	matrix/kaldi-matrix.cc	/^namespace kaldi {$/;"	n	file:
AddMatSp	matrix/kaldi-matrix.h	/^  void AddMatSp(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddMatTp	matrix/kaldi-matrix.h	/^  void AddMatTp(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddSpMat	matrix/kaldi-matrix.h	/^  void AddSpMat(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddSpMatSp	matrix/kaldi-matrix.h	/^  void AddSpMatSp(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddTpMat	matrix/kaldi-matrix.h	/^  void AddTpMat(const Real alpha,$/;"	f	class:kaldi::MatrixBase
AddTpTp	matrix/kaldi-matrix.h	/^  void AddTpTp(const Real alpha,$/;"	f	class:kaldi::MatrixBase
ApproxEqual	matrix/kaldi-matrix.h	/^bool ApproxEqual(const MatrixBase<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	matrix/kaldi-matrix.h	/^inline void AssertEqual(const MatrixBase<Real> &A, const MatrixBase<Real> &B,$/;"	f	namespace:kaldi
ColRange	matrix/kaldi-matrix.h	/^  inline SubMatrix<Real> ColRange(const MatrixIndexT col_offset,$/;"	f	class:kaldi::MatrixBase
Data	matrix/kaldi-matrix.h	/^  inline Real* Data() { return data_; }$/;"	f	class:kaldi::MatrixBase
Data	matrix/kaldi-matrix.h	/^  inline const Real* Data() const {$/;"	f	class:kaldi::MatrixBase
Data_workaround	matrix/kaldi-matrix.h	/^  inline Real*  Data_workaround() const {$/;"	f	class:kaldi::MatrixBase
HtkHeader	matrix/kaldi-matrix.h	/^struct HtkHeader {$/;"	s	namespace:kaldi
Index	matrix/kaldi-matrix.h	/^  Real &Index (MatrixIndexT r, MatrixIndexT c) {  return (*this)(r, c); }$/;"	f	class:kaldi::MatrixBase
KALDI_MATRIX_KALDI_MATRIX_H_	matrix/kaldi-matrix.h	23;"	d
Matrix	matrix/kaldi-matrix.h	/^  Matrix(const MatrixIndexT r, const MatrixIndexT c,$/;"	f	class:kaldi::Matrix
Matrix	matrix/kaldi-matrix.h	/^  explicit Matrix(const SpMatrix<OtherReal> & M) : MatrixBase<Real>() {$/;"	f	class:kaldi::Matrix
Matrix	matrix/kaldi-matrix.h	/^  explicit Matrix(const TpMatrix<OtherReal> & M,$/;"	f	class:kaldi::Matrix
Matrix	matrix/kaldi-matrix.h	/^class Matrix : public MatrixBase<Real> {$/;"	c	namespace:kaldi
MatrixBase	matrix/kaldi-matrix.h	/^  explicit MatrixBase(): data_(NULL) {$/;"	f	class:kaldi::MatrixBase
MatrixBase	matrix/kaldi-matrix.h	/^  explicit MatrixBase(Real *data, MatrixIndexT cols, MatrixIndexT rows, MatrixIndexT stride) :$/;"	f	class:kaldi::MatrixBase
MatrixBase	matrix/kaldi-matrix.h	/^class MatrixBase {$/;"	c	namespace:kaldi
MinSingularValue	matrix/kaldi-matrix.h	/^  Real MinSingularValue() const {$/;"	f	class:kaldi::MatrixBase
NumCols	matrix/kaldi-matrix.h	/^  inline MatrixIndexT NumCols() const { return num_cols_; }$/;"	f	class:kaldi::MatrixBase
NumRows	matrix/kaldi-matrix.h	/^  inline MatrixIndexT  NumRows() const { return num_rows_; }$/;"	f	class:kaldi::MatrixBase
Range	matrix/kaldi-matrix.h	/^  inline SubMatrix<Real> Range(const MatrixIndexT row_offset,$/;"	f	class:kaldi::MatrixBase
Row	matrix/kaldi-matrix.h	/^  inline SubVector<Real> Row(MatrixIndexT i) {$/;"	f	class:kaldi::MatrixBase
Row	matrix/kaldi-matrix.h	/^  inline const SubVector<Real> Row(MatrixIndexT i) const {$/;"	f	class:kaldi::MatrixBase
RowData	matrix/kaldi-matrix.h	/^  inline  Real* RowData(MatrixIndexT i) {$/;"	f	class:kaldi::MatrixBase
RowData	matrix/kaldi-matrix.h	/^  inline const Real* RowData(MatrixIndexT i) const {$/;"	f	class:kaldi::MatrixBase
RowRange	matrix/kaldi-matrix.h	/^  inline SubMatrix<Real> RowRange(const MatrixIndexT row_offset,$/;"	f	class:kaldi::MatrixBase
SameDim	matrix/kaldi-matrix.h	/^bool SameDim(const MatrixBase<Real> &M, const MatrixBase<Real> &N) {$/;"	f	namespace:kaldi
SizeInBytes	matrix/kaldi-matrix.h	/^  size_t  SizeInBytes() const {$/;"	f	class:kaldi::MatrixBase
Stride	matrix/kaldi-matrix.h	/^  inline MatrixIndexT Stride() const {  return stride_; }$/;"	f	class:kaldi::MatrixBase
SubMatrix	matrix/kaldi-matrix.h	/^  SubMatrix<Real> (const SubMatrix &other):$/;"	f	class:kaldi::SubMatrix
SubMatrix	matrix/kaldi-matrix.h	/^class SubMatrix : public MatrixBase<Real> {$/;"	c	namespace:kaldi
Svd	matrix/kaldi-matrix.h	/^  void Svd(VectorBase<Real> *s) const { Svd(s, NULL, NULL); }$/;"	f	class:kaldi::MatrixBase
TraceMat	matrix/kaldi-matrix.h	/^double TraceMat(const MatrixBase<Real> &A) { return A.Trace(); }$/;"	f	namespace:kaldi
data_	matrix/kaldi-matrix.h	/^  Real*   data_;$/;"	m	class:kaldi::MatrixBase
kaldi	matrix/kaldi-matrix.h	/^namespace kaldi {$/;"	n
mNSamples	matrix/kaldi-matrix.h	/^  int32    mNSamples;$/;"	m	struct:kaldi::HtkHeader
mSampleKind	matrix/kaldi-matrix.h	/^  uint16   mSampleKind;$/;"	m	struct:kaldi::HtkHeader
mSamplePeriod	matrix/kaldi-matrix.h	/^  int32    mSamplePeriod;$/;"	m	struct:kaldi::HtkHeader
mSampleSize	matrix/kaldi-matrix.h	/^  int16    mSampleSize;$/;"	m	struct:kaldi::HtkHeader
num_cols_	matrix/kaldi-matrix.h	/^  MatrixIndexT    num_cols_;   \/\/\/ < Number of columns$/;"	m	class:kaldi::MatrixBase
num_rows_	matrix/kaldi-matrix.h	/^  MatrixIndexT    num_rows_;   \/\/\/ < Number of rows$/;"	m	class:kaldi::MatrixBase
operator ()	matrix/kaldi-matrix.h	/^  inline Real&  operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::MatrixBase
operator ()	matrix/kaldi-matrix.h	/^  inline const Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::MatrixBase
operator =	matrix/kaldi-matrix.h	/^  Matrix<Real> &operator = (const Matrix<Real> &other) {$/;"	f	class:kaldi::Matrix
operator =	matrix/kaldi-matrix.h	/^  Matrix<Real> &operator = (const MatrixBase<Real> &other) {$/;"	f	class:kaldi::Matrix
stride_	matrix/kaldi-matrix.h	/^  MatrixIndexT    stride_;$/;"	m	class:kaldi::MatrixBase
~Matrix	matrix/kaldi-matrix.h	/^  ~Matrix() { Destroy(); }$/;"	f	class:kaldi::Matrix
~MatrixBase	matrix/kaldi-matrix.h	/^  ~MatrixBase() { }$/;"	f	class:kaldi::MatrixBase
~SubMatrix	matrix/kaldi-matrix.h	/^  ~SubMatrix<Real>() {}$/;"	f	class:kaldi::SubMatrix
KALDI_MATRIX_KALDI_VECTOR_INL_H_	matrix/kaldi-vector-inl.h	25;"	d
kaldi	matrix/kaldi-vector-inl.h	/^namespace kaldi {$/;"	n
operator <<	matrix/kaldi-vector-inl.h	/^std::ostream & operator << (std::ostream &os, const VectorBase<Real> &rv) {$/;"	f	namespace:kaldi
operator >>	matrix/kaldi-vector-inl.h	/^std::istream &operator >> (std::istream &is, Vector<Real> &rv) {$/;"	f	namespace:kaldi
operator >>	matrix/kaldi-vector-inl.h	/^std::istream &operator >> (std::istream &is, VectorBase<Real> &rv) {$/;"	f	namespace:kaldi
Add	matrix/kaldi-vector.cc	/^void VectorBase<Real>::Add(Real c) {$/;"	f	class:kaldi::VectorBase
AddColSumMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddColSumMat(Real alpha, const MatrixBase<Real> &M, Real beta) {$/;"	f	class:kaldi::VectorBase
AddDiagMat2	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddDiagMat2($/;"	f	class:kaldi::VectorBase
AddDiagMatMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddDiagMatMat($/;"	f	class:kaldi::VectorBase
AddMatSvec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddMatSvec(const Real alpha,$/;"	f	class:kaldi::VectorBase
AddMatVec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddMatVec(const Real alpha,$/;"	f	class:kaldi::VectorBase
AddRowSumMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddRowSumMat(Real alpha, const MatrixBase<Real> &M, Real beta) {$/;"	f	class:kaldi::VectorBase
AddSpVec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddSpVec(const Real alpha,$/;"	f	class:kaldi::VectorBase
AddTpVec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddTpVec(const Real alpha, const TpMatrix<Real> &M,$/;"	f	class:kaldi::VectorBase
AddVec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddVec(const Real alpha, const VectorBase<OtherReal> &v) {$/;"	f	class:kaldi::VectorBase
AddVec	matrix/kaldi-vector.cc	/^void VectorBase<double>::AddVec(const double alpha,$/;"	f	class:kaldi::VectorBase
AddVec	matrix/kaldi-vector.cc	/^void VectorBase<float>::AddVec(const float alpha,$/;"	f	class:kaldi::VectorBase
AddVec2	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddVec2(const Real alpha, const VectorBase<OtherReal> &v) {$/;"	f	class:kaldi::VectorBase
AddVec2	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddVec2(const Real alpha, const VectorBase<Real> &v) {$/;"	f	class:kaldi::VectorBase
AddVecDivVec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddVecDivVec(Real alpha, const VectorBase<Real> &v,$/;"	f	class:kaldi::VectorBase
AddVecVec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::AddVecVec(Real alpha, const VectorBase<Real> &v,$/;"	f	class:kaldi::VectorBase
ApplyAbs	matrix/kaldi-vector.cc	/^void VectorBase<Real>::ApplyAbs() {$/;"	f	class:kaldi::VectorBase
ApplyCeiling	matrix/kaldi-vector.cc	/^MatrixIndexT VectorBase<Real>::ApplyCeiling(Real ceil_val) {$/;"	f	class:kaldi::VectorBase
ApplyExp	matrix/kaldi-vector.cc	/^void VectorBase<Real>::ApplyExp() {$/;"	f	class:kaldi::VectorBase
ApplyFloor	matrix/kaldi-vector.cc	/^MatrixIndexT VectorBase<Real>::ApplyFloor(Real floor_val) {$/;"	f	class:kaldi::VectorBase
ApplyFloor	matrix/kaldi-vector.cc	/^MatrixIndexT VectorBase<Real>::ApplyFloor(const VectorBase<Real> &floor_vec) {$/;"	f	class:kaldi::VectorBase
ApplyLog	matrix/kaldi-vector.cc	/^void VectorBase<Real>::ApplyLog() {$/;"	f	class:kaldi::VectorBase
ApplyLogAndCopy	matrix/kaldi-vector.cc	/^void VectorBase<Real>::ApplyLogAndCopy(const VectorBase<Real> &v) {$/;"	f	class:kaldi::VectorBase
ApplyPow	matrix/kaldi-vector.cc	/^void VectorBase<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::VectorBase
ApplyPow	matrix/kaldi-vector.cc	/^void VectorBase<double>::ApplyPow(double power) { vdPowx(dim_, data_, power, data_); }$/;"	f	class:kaldi::VectorBase
ApplyPow	matrix/kaldi-vector.cc	/^void VectorBase<float>::ApplyPow(float power) { vsPowx(dim_, data_, power, data_); }$/;"	f	class:kaldi::VectorBase
ApplyPowAbs	matrix/kaldi-vector.cc	/^void VectorBase<Real>::ApplyPowAbs(Real power, bool include_sign) {$/;"	f	class:kaldi::VectorBase
ApplySoftMax	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::ApplySoftMax() {$/;"	f	class:kaldi::VectorBase
ApproxEqual	matrix/kaldi-vector.cc	/^bool VectorBase<Real>::ApproxEqual(const VectorBase<Real> &other, float tol) const {$/;"	f	class:kaldi::VectorBase
CopyColFromMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyColFromMat(const MatrixBase<OtherReal> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::VectorBase
CopyColsFromMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyColsFromMat(const MatrixBase<Real> &mat) {$/;"	f	class:kaldi::VectorBase
CopyDiagFromMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyDiagFromMat(const MatrixBase<Real> &M) {$/;"	f	class:kaldi::VectorBase
CopyDiagFromPacked	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyDiagFromPacked(const PackedMatrix<Real> &M) {$/;"	f	class:kaldi::VectorBase
CopyFromPacked	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyFromPacked(const PackedMatrix<OtherReal>& M) {$/;"	f	class:kaldi::VectorBase
CopyFromPtr	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyFromPtr(const Real *data, MatrixIndexT sz) {$/;"	f	class:kaldi::VectorBase
CopyFromVec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyFromVec(const VectorBase<OtherReal> &other) {$/;"	f	class:kaldi::VectorBase
CopyFromVec	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyFromVec(const VectorBase<Real> &v) {$/;"	f	class:kaldi::VectorBase
CopyRowFromMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyRowFromMat(const MatrixBase<OtherReal> &mat, MatrixIndexT row) {$/;"	f	class:kaldi::VectorBase
CopyRowFromMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyRowFromMat(const MatrixBase<Real> &mat, MatrixIndexT row) {$/;"	f	class:kaldi::VectorBase
CopyRowFromSp	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyRowFromSp(const SpMatrix<OtherReal> &sp, MatrixIndexT row) {$/;"	f	class:kaldi::VectorBase
CopyRowsFromMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyRowsFromMat(const MatrixBase<OtherReal> &mat) {$/;"	f	class:kaldi::VectorBase
CopyRowsFromMat	matrix/kaldi-vector.cc	/^void VectorBase<Real>::CopyRowsFromMat(const MatrixBase<Real> &mat) {$/;"	f	class:kaldi::VectorBase
Destroy	matrix/kaldi-vector.cc	/^void Vector<Real>::Destroy() {$/;"	f	class:kaldi::Vector
DivElements	matrix/kaldi-vector.cc	/^void VectorBase<Real>::DivElements(const VectorBase<OtherReal> &v) {$/;"	f	class:kaldi::VectorBase
DivElements	matrix/kaldi-vector.cc	/^void VectorBase<Real>::DivElements(const VectorBase<Real> &v) {$/;"	f	class:kaldi::VectorBase
Init	matrix/kaldi-vector.cc	/^inline void Vector<Real>::Init(const MatrixIndexT dim) {$/;"	f	class:kaldi::Vector
InvertElements	matrix/kaldi-vector.cc	/^void VectorBase<Real>::InvertElements() {$/;"	f	class:kaldi::VectorBase
IsZero	matrix/kaldi-vector.cc	/^bool VectorBase<Real>::IsZero(Real cutoff) const {$/;"	f	class:kaldi::VectorBase
LogSumExp	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::LogSumExp(Real prune) const {$/;"	f	class:kaldi::VectorBase
Max	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::Max() const {$/;"	f	class:kaldi::VectorBase
Max	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::Max(MatrixIndexT *index_out) const {$/;"	f	class:kaldi::VectorBase
Min	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::Min() const {$/;"	f	class:kaldi::VectorBase
Min	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::Min(MatrixIndexT *index_out) const {$/;"	f	class:kaldi::VectorBase
MulElements	matrix/kaldi-vector.cc	/^void VectorBase<Real>::MulElements(const VectorBase<OtherReal> &v) {$/;"	f	class:kaldi::VectorBase
MulElements	matrix/kaldi-vector.cc	/^void VectorBase<Real>::MulElements(const VectorBase<Real> &v) {$/;"	f	class:kaldi::VectorBase
MulTp	matrix/kaldi-vector.cc	/^void VectorBase<Real>::MulTp(const TpMatrix<Real> &M,$/;"	f	class:kaldi::VectorBase
Norm	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::Norm(Real p) const {$/;"	f	class:kaldi::VectorBase
RandCategorical	matrix/kaldi-vector.cc	/^MatrixIndexT VectorBase<Real>::RandCategorical() const {$/;"	f	class:kaldi::VectorBase
Read	matrix/kaldi-vector.cc	/^void Vector<Real>::Read(std::istream & is,  bool binary, bool add) {$/;"	f	class:kaldi::Vector
Read	matrix/kaldi-vector.cc	/^void VectorBase<Real>::Read(std::istream & is,  bool binary, bool add) {$/;"	f	class:kaldi::VectorBase
RemoveElement	matrix/kaldi-vector.cc	/^void Vector<Real>::RemoveElement(MatrixIndexT i) {$/;"	f	class:kaldi::Vector
ReplaceValue	matrix/kaldi-vector.cc	/^void VectorBase<Real>::ReplaceValue(Real orig, Real changed) {$/;"	f	class:kaldi::VectorBase
Resize	matrix/kaldi-vector.cc	/^void Vector<Real>::Resize(const MatrixIndexT dim, MatrixResizeType resize_type) {$/;"	f	class:kaldi::Vector
Scale	matrix/kaldi-vector.cc	/^void VectorBase<Real>::Scale(Real alpha) {$/;"	f	class:kaldi::VectorBase
Set	matrix/kaldi-vector.cc	/^void VectorBase<Real>::Set(Real f) {$/;"	f	class:kaldi::VectorBase
SetRandn	matrix/kaldi-vector.cc	/^void VectorBase<Real>::SetRandn() {$/;"	f	class:kaldi::VectorBase
SetZero	matrix/kaldi-vector.cc	/^void VectorBase<Real>::SetZero() {$/;"	f	class:kaldi::VectorBase
Sigmoid	matrix/kaldi-vector.cc	/^void VectorBase<Real>::Sigmoid(const VectorBase<Real> &src) {$/;"	f	class:kaldi::VectorBase
Sigmoid	matrix/kaldi-vector.cc	/^void VectorBase<double>::Sigmoid(const VectorBase<double> &src) {$/;"	f	class:kaldi::VectorBase
Sigmoid	matrix/kaldi-vector.cc	/^void VectorBase<float>::Sigmoid(const VectorBase<float> &src) {$/;"	f	class:kaldi::VectorBase
Solve	matrix/kaldi-vector.cc	/^void VectorBase<Real>::Solve(const TpMatrix<Real> &M,$/;"	f	class:kaldi::VectorBase
Sum	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::Sum() const {$/;"	f	class:kaldi::VectorBase
SumLog	matrix/kaldi-vector.cc	/^Real VectorBase<Real>::SumLog() const {$/;"	f	class:kaldi::VectorBase
Swap	matrix/kaldi-vector.cc	/^void Vector<Real>::Swap(Vector<Real> *other) {$/;"	f	class:kaldi::Vector
Tanh	matrix/kaldi-vector.cc	/^void VectorBase<Real>::Tanh(const VectorBase<Real> &src) {$/;"	f	class:kaldi::VectorBase
Tanh	matrix/kaldi-vector.cc	/^void VectorBase<double>::Tanh(const VectorBase<double> &src) {$/;"	f	class:kaldi::VectorBase
Tanh	matrix/kaldi-vector.cc	/^void VectorBase<float>::Tanh(const VectorBase<float> &src) {$/;"	f	class:kaldi::VectorBase
VecMatVec	matrix/kaldi-vector.cc	/^Real VecMatVec(const VectorBase<Real> &v1, const MatrixBase<Real> &M,$/;"	f	namespace:kaldi
VecVec	matrix/kaldi-vector.cc	/^Real VecVec(const VectorBase<Real> &a,$/;"	f	namespace:kaldi
VecVec	matrix/kaldi-vector.cc	/^Real VecVec(const VectorBase<Real> &ra,$/;"	f	namespace:kaldi
Write	matrix/kaldi-vector.cc	/^void VectorBase<Real>::Write(std::ostream & os, bool binary) const {$/;"	f	class:kaldi::VectorBase
kaldi	matrix/kaldi-vector.cc	/^namespace kaldi {$/;"	n	file:
ApproxEqual	matrix/kaldi-vector.h	/^bool ApproxEqual(const VectorBase<Real> &a,$/;"	f	namespace:kaldi
AssertEqual	matrix/kaldi-vector.h	/^inline void AssertEqual(VectorBase<Real> &a, VectorBase<Real> &b,$/;"	f	namespace:kaldi
CopyDiagFromSp	matrix/kaldi-vector.h	/^  inline void CopyDiagFromSp(const SpMatrix<Real> &M) { CopyDiagFromPacked(M); }$/;"	f	class:kaldi::VectorBase
CopyDiagFromTp	matrix/kaldi-vector.h	/^  inline void CopyDiagFromTp(const TpMatrix<Real> &M) { CopyDiagFromPacked(M); }$/;"	f	class:kaldi::VectorBase
Data	matrix/kaldi-vector.h	/^  inline Real* Data() { return data_; }$/;"	f	class:kaldi::VectorBase
Data	matrix/kaldi-vector.h	/^  inline const Real* Data() const { return data_; }$/;"	f	class:kaldi::VectorBase
Dim	matrix/kaldi-vector.h	/^  inline MatrixIndexT Dim() const { return dim_; }$/;"	f	class:kaldi::VectorBase
KALDI_MATRIX_KALDI_VECTOR_H_	matrix/kaldi-vector.h	25;"	d
Range	matrix/kaldi-vector.h	/^  SubVector<Real> Range(const MatrixIndexT o, const MatrixIndexT l) {$/;"	f	class:kaldi::VectorBase
Range	matrix/kaldi-vector.h	/^  const SubVector<Real> Range(const MatrixIndexT o,$/;"	f	class:kaldi::VectorBase
SizeInBytes	matrix/kaldi-vector.h	/^  inline MatrixIndexT SizeInBytes() const { return (dim_*sizeof(Real)); }$/;"	f	class:kaldi::VectorBase
SubVector	matrix/kaldi-vector.h	/^  SubVector(Real *data, MatrixIndexT length) : VectorBase<Real> () {$/;"	f	class:kaldi::SubVector
SubVector	matrix/kaldi-vector.h	/^  SubVector(const MatrixBase<Real> &matrix, MatrixIndexT row) {$/;"	f	class:kaldi::SubVector
SubVector	matrix/kaldi-vector.h	/^  SubVector(const PackedMatrix<Real> &M) {$/;"	f	class:kaldi::SubVector
SubVector	matrix/kaldi-vector.h	/^  SubVector(const SubVector &other) : VectorBase<Real> () {$/;"	f	class:kaldi::SubVector
SubVector	matrix/kaldi-vector.h	/^  SubVector(const VectorBase<Real> &t, const MatrixIndexT origin,$/;"	f	class:kaldi::SubVector
SubVector	matrix/kaldi-vector.h	/^class SubVector : public VectorBase<Real> {$/;"	c	namespace:kaldi
Vector	matrix/kaldi-vector.h	/^  Vector(): VectorBase<Real>() {}$/;"	f	class:kaldi::Vector
Vector	matrix/kaldi-vector.h	/^  Vector(const Vector<Real> &v) : VectorBase<Real>()  { \/\/  (cannot be explicit)$/;"	f	class:kaldi::Vector
Vector	matrix/kaldi-vector.h	/^  explicit Vector(const MatrixIndexT s,$/;"	f	class:kaldi::Vector
Vector	matrix/kaldi-vector.h	/^  explicit Vector(const VectorBase<OtherReal> &v): VectorBase<Real>() {$/;"	f	class:kaldi::Vector
Vector	matrix/kaldi-vector.h	/^  explicit Vector(const VectorBase<Real> &v) : VectorBase<Real>() {$/;"	f	class:kaldi::Vector
Vector	matrix/kaldi-vector.h	/^class Vector: public VectorBase<Real> {$/;"	c	namespace:kaldi
VectorBase	matrix/kaldi-vector.h	/^  explicit VectorBase(): data_(NULL), dim_(0) {$/;"	f	class:kaldi::VectorBase
VectorBase	matrix/kaldi-vector.h	/^class VectorBase {$/;"	c	namespace:kaldi
data_	matrix/kaldi-vector.h	/^  Real* data_;$/;"	m	class:kaldi::VectorBase
dim_	matrix/kaldi-vector.h	/^  MatrixIndexT dim_;$/;"	m	class:kaldi::VectorBase
kaldi	matrix/kaldi-vector.h	/^namespace kaldi {$/;"	n
operator ()	matrix/kaldi-vector.h	/^  inline Real & operator() (MatrixIndexT i) {$/;"	f	class:kaldi::VectorBase
operator ()	matrix/kaldi-vector.h	/^  inline Real operator() (MatrixIndexT i) const {$/;"	f	class:kaldi::VectorBase
operator =	matrix/kaldi-vector.h	/^  SubVector & operator = (const SubVector &other) {}$/;"	f	class:kaldi::SubVector
operator =	matrix/kaldi-vector.h	/^  Vector<Real> &operator = (const Vector<Real> &other) {$/;"	f	class:kaldi::Vector
operator =	matrix/kaldi-vector.h	/^  Vector<Real> &operator = (const VectorBase<Real> &other) {$/;"	f	class:kaldi::Vector
~SubVector	matrix/kaldi-vector.h	/^  ~SubVector() {}  \/\/\/< Destructor (does nothing; no pointers are owned here).$/;"	f	class:kaldi::SubVector
~Vector	matrix/kaldi-vector.h	/^  ~Vector() { Destroy(); }$/;"	f	class:kaldi::Vector
~VectorBase	matrix/kaldi-vector.h	/^  ~VectorBase() {}$/;"	f	class:kaldi::VectorBase
KALDI_MATRIX_MATRIX_COMMON_H_	matrix/matrix-common.h	20;"	d
MatrixIndexT	matrix/matrix-common.h	/^typedef int32 MatrixIndexT;$/;"	t	namespace:kaldi
MatrixResizeType	matrix/matrix-common.h	/^} MatrixResizeType;$/;"	t	namespace:kaldi	typeref:enum:kaldi::__anon12
MatrixTransposeType	matrix/matrix-common.h	/^} MatrixTransposeType;$/;"	t	namespace:kaldi	typeref:enum:kaldi::__anon11
OtherReal	matrix/matrix-common.h	/^template<> class OtherReal<double> {$/;"	c	namespace:kaldi
OtherReal	matrix/matrix-common.h	/^template<> class OtherReal<float> {$/;"	c	namespace:kaldi
OtherReal	matrix/matrix-common.h	/^template<typename T> class OtherReal { };  \/\/ useful in reading+writing routines$/;"	c	namespace:kaldi
Real	matrix/matrix-common.h	/^  typedef double Real;$/;"	t	class:kaldi::OtherReal
Real	matrix/matrix-common.h	/^  typedef float Real;$/;"	t	class:kaldi::OtherReal
SignedMatrixIndexT	matrix/matrix-common.h	/^typedef int32 SignedMatrixIndexT;$/;"	t	namespace:kaldi
SpCopyType	matrix/matrix-common.h	/^} SpCopyType;$/;"	t	namespace:kaldi	typeref:enum:kaldi::__anon13
UnsignedMatrixIndexT	matrix/matrix-common.h	/^typedef uint32 UnsignedMatrixIndexT;$/;"	t	namespace:kaldi
kCopyData	matrix/matrix-common.h	/^  kCopyData$/;"	e	enum:kaldi::__anon12
kNoTrans	matrix/matrix-common.h	/^  kNoTrans = CblasNoTrans$/;"	e	enum:kaldi::__anon11
kSetZero	matrix/matrix-common.h	/^  kSetZero,$/;"	e	enum:kaldi::__anon12
kTakeLower	matrix/matrix-common.h	/^  kTakeLower,$/;"	e	enum:kaldi::__anon13
kTakeMean	matrix/matrix-common.h	/^  kTakeMean,$/;"	e	enum:kaldi::__anon13
kTakeMeanAndCheck	matrix/matrix-common.h	/^  kTakeMeanAndCheck$/;"	e	enum:kaldi::__anon13
kTakeUpper	matrix/matrix-common.h	/^  kTakeUpper,$/;"	e	enum:kaldi::__anon13
kTrans	matrix/matrix-common.h	/^  kTrans    = CblasTrans,$/;"	e	enum:kaldi::__anon11
kUndefined	matrix/matrix-common.h	/^  kUndefined,$/;"	e	enum:kaldi::__anon12
kaldi	matrix/matrix-common.h	/^namespace kaldi {$/;"	n
ComplexAddProduct	matrix/matrix-functions-inl.h	/^template<typename Real> inline void ComplexAddProduct(const Real &a_re, const Real &a_im,$/;"	f	namespace:kaldi
ComplexImExp	matrix/matrix-functions-inl.h	/^template<typename Real> inline void ComplexImExp(Real x, Real *a_re, Real *a_im) {$/;"	f	namespace:kaldi
ComplexMul	matrix/matrix-functions-inl.h	/^template<typename Real> inline void ComplexMul(const Real &a_re, const Real &a_im,$/;"	f	namespace:kaldi
KALDI_MATRIX_MATRIX_FUNCTIONS_INL_H_	matrix/matrix-functions-inl.h	26;"	d
kaldi	matrix/matrix-functions-inl.h	/^namespace kaldi {$/;"	n
AddOuterProductPlusMinus	matrix/matrix-functions.cc	/^void AddOuterProductPlusMinus(Real alpha,$/;"	f	namespace:kaldi
Backprop	matrix/matrix-functions.cc	/^void MatrixExponential<Real>::Backprop(const MatrixBase<Real> &hX,$/;"	f	class:kaldi::MatrixExponential
Backprop	matrix/matrix-functions.cc	/^void MatrixExponential<Real>::Backprop(const SpMatrix<Real> &hX,$/;"	f	class:kaldi::MatrixExponential
BackpropTaylor	matrix/matrix-functions.cc	/^void MatrixExponential<Real>::BackpropTaylor(const MatrixBase<Real> &hB0,$/;"	f	class:kaldi::MatrixExponential
Clear	matrix/matrix-functions.cc	/^void MatrixExponential<Real>::Clear() {$/;"	f	class:kaldi::MatrixExponential
ComplexFft	matrix/matrix-functions.cc	/^template<typename Real> void ComplexFft(VectorBase<Real> *v, bool forward, Vector<Real> *tmp_in) {$/;"	f	namespace:kaldi
ComplexFftRecursive	matrix/matrix-functions.cc	/^void ComplexFftRecursive (Real *data, int nffts, int N,$/;"	f	namespace:kaldi
ComplexFt	matrix/matrix-functions.cc	/^template<typename Real> void ComplexFt (const VectorBase<Real> &in,$/;"	f	namespace:kaldi
Compute	matrix/matrix-functions.cc	/^void MatrixExponential<Real>::Compute(const MatrixBase<Real> &M,$/;"	f	class:kaldi::MatrixExponential
Compute	matrix/matrix-functions.cc	/^void MatrixExponential<Real>::Compute(const SpMatrix<Real> &M,$/;"	f	class:kaldi::MatrixExponential
ComputeDctMatrix	matrix/matrix-functions.cc	/^template<typename Real> void ComputeDctMatrix(Matrix<Real> *M) {$/;"	f	namespace:kaldi
ComputeN	matrix/matrix-functions.cc	/^MatrixIndexT MatrixExponential<Real>::ComputeN(const MatrixBase<Real> &M) {$/;"	f	class:kaldi::MatrixExponential
ComputePca	matrix/matrix-functions.cc	/^void ComputePca(const MatrixBase<Real> &X,$/;"	f	namespace:kaldi
ComputeTaylor	matrix/matrix-functions.cc	/^void MatrixExponential<Real>::ComputeTaylor(const MatrixBase<Real> &P, MatrixBase<Real> *B0) {$/;"	f	class:kaldi::MatrixExponential
KALDI_COMPLEXFFT_BLOCKSIZE	matrix/matrix-functions.cc	77;"	d	file:
RealFft	matrix/matrix-functions.cc	/^template<typename Real> void RealFft (VectorBase<Real> *v, bool forward) {$/;"	f	namespace:kaldi
RealFftInefficient	matrix/matrix-functions.cc	/^template<typename Real> void RealFftInefficient (VectorBase<Real> *v, bool forward) {$/;"	f	namespace:kaldi
kaldi	matrix/matrix-functions.cc	/^namespace kaldi {$/;"	n	file:
AssertSameDim	matrix/matrix-functions.h	/^inline void AssertSameDim(const MatrixBase<Real1> &mat1, const MatrixBase<Real2> &mat2) {$/;"	f	namespace:kaldi
B_	matrix/matrix-functions.h	/^  std::vector<Matrix<Real> > B_;  \/\/ B_[0] = exp(P_) - I,$/;"	m	class:kaldi::MatrixExponential
KALDI_MATRIX_MATRIX_FUNCTIONS_H_	matrix/matrix-functions.h	27;"	d
MatrixExponential	matrix/matrix-functions.h	/^  MatrixExponential() { }$/;"	f	class:kaldi::MatrixExponential
MatrixExponential	matrix/matrix-functions.h	/^class MatrixExponential {$/;"	c	namespace:kaldi
N_	matrix/matrix-functions.h	/^  MatrixIndexT N_;  \/\/ Power N_ >=0 such that P_ = A * 2^(-N_),$/;"	m	class:kaldi::MatrixExponential
P_	matrix/matrix-functions.h	/^  Matrix<Real> P_;  \/\/ Equals M * 2^(-N_)$/;"	m	class:kaldi::MatrixExponential
kaldi	matrix/matrix-functions.h	/^namespace kaldi {$/;"	n
powers_	matrix/matrix-functions.h	/^  std::vector<Matrix<Real> > powers_;  \/\/ powers (>1) of P_ stored here,$/;"	m	class:kaldi::MatrixExponential
MatrixUnitSpeedTest	matrix/matrix-lib-speed-test.cc	/^template<typename Real> static void MatrixUnitSpeedTest() {$/;"	f	namespace:kaldi
NameOf	matrix/matrix-lib-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
UnitTestAddColSumMatSpeed	matrix/matrix-lib-speed-test.cc	/^static void UnitTestAddColSumMatSpeed() {$/;"	f	namespace:kaldi
UnitTestAddMatMatSpeed	matrix/matrix-lib-speed-test.cc	/^static void UnitTestAddMatMatSpeed() {$/;"	f	namespace:kaldi
UnitTestAddRowSumMatSpeed	matrix/matrix-lib-speed-test.cc	/^static void UnitTestAddRowSumMatSpeed() {$/;"	f	namespace:kaldi
UnitTestAddVecToColsSpeed	matrix/matrix-lib-speed-test.cc	/^static void UnitTestAddVecToColsSpeed() {$/;"	f	namespace:kaldi
UnitTestAddVecToRowsSpeed	matrix/matrix-lib-speed-test.cc	/^static void UnitTestAddVecToRowsSpeed() {$/;"	f	namespace:kaldi
UnitTestRealFftSpeed	matrix/matrix-lib-speed-test.cc	/^template<typename Real> static void UnitTestRealFftSpeed() {$/;"	f	namespace:kaldi
UnitTestSplitRadixRealFftSpeed	matrix/matrix-lib-speed-test.cc	/^template<typename Real> static void UnitTestSplitRadixRealFftSpeed() {$/;"	f	namespace:kaldi
UnitTestSvdSpeed	matrix/matrix-lib-speed-test.cc	/^static void UnitTestSvdSpeed() {$/;"	f	namespace:kaldi
kaldi	matrix/matrix-lib-speed-test.cc	/^namespace kaldi {$/;"	n	file:
main	matrix/matrix-lib-speed-test.cc	/^int main() {$/;"	f
CholeskyUnitTestTr	matrix/matrix-lib-test.cc	/^template<typename Real> static void CholeskyUnitTestTr() {$/;"	f	namespace:kaldi
DoubleFactorial	matrix/matrix-lib-test.cc	/^static int32 DoubleFactorial(int32 i) {$/;"	f	namespace:kaldi
InitRand	matrix/matrix-lib-test.cc	/^template<typename Real> static void InitRand(MatrixBase<Real> *M) {$/;"	f	namespace:kaldi
InitRand	matrix/matrix-lib-test.cc	/^template<typename Real> static void InitRand(SpMatrix<Real> *M) {$/;"	f	namespace:kaldi
InitRand	matrix/matrix-lib-test.cc	/^template<typename Real> static void InitRand(TpMatrix<Real> *M) {$/;"	f	namespace:kaldi
InitRand	matrix/matrix-lib-test.cc	/^template<typename Real> static void InitRand(Vector<Real> *v) {$/;"	f	namespace:kaldi
InitRand	matrix/matrix-lib-test.cc	/^template<typename Real> static void InitRand(VectorBase<Real> *v) {$/;"	f	namespace:kaldi
MatrixUnitTest	matrix/matrix-lib-test.cc	/^template<typename Real> static void MatrixUnitTest(bool full_test) {$/;"	f	namespace:kaldi
NonDiagonalness	matrix/matrix-lib-test.cc	/^static Real NonDiagonalness(const SpMatrix<Real> &S) {$/;"	f	namespace:kaldi
NonOrthogonality	matrix/matrix-lib-test.cc	/^static Real NonOrthogonality(const MatrixBase<Real> &M, MatrixTransposeType transM) {$/;"	f	namespace:kaldi
NonUnitness	matrix/matrix-lib-test.cc	/^static Real NonUnitness(const SpMatrix<Real> &S) {$/;"	f	namespace:kaldi
RandPosdefSpMatrix	matrix/matrix-lib-test.cc	/^void RandPosdefSpMatrix(MatrixIndexT dim, SpMatrix<Real> *matrix) {$/;"	f	namespace:kaldi
SlowMatMul	matrix/matrix-lib-test.cc	/^template<typename Real> static void SlowMatMul() {$/;"	f	namespace:kaldi
UnitTestAddDiagMat2	matrix/matrix-lib-test.cc	/^static void UnitTestAddDiagMat2() {$/;"	f	namespace:kaldi
UnitTestAddDiagMatMat	matrix/matrix-lib-test.cc	/^static void UnitTestAddDiagMatMat() {$/;"	f	namespace:kaldi
UnitTestAddDiagVecMat	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddDiagVecMat() {$/;"	f	namespace:kaldi
UnitTestAddMat2	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddMat2() {$/;"	f	namespace:kaldi
UnitTestAddMat2Sp	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddMat2Sp() {$/;"	f	namespace:kaldi
UnitTestAddMatDiagVec	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddMatDiagVec() {$/;"	f	namespace:kaldi
UnitTestAddMatMatElements	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddMatMatElements() {$/;"	f	namespace:kaldi
UnitTestAddMatSelf	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddMatSelf() {$/;"	f	namespace:kaldi
UnitTestAddMatSmat	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddMatSmat() {$/;"	f	namespace:kaldi
UnitTestAddOuterProductPlusMinus	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddOuterProductPlusMinus() {$/;"	f	namespace:kaldi
UnitTestAddSp	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddSp() {$/;"	f	namespace:kaldi
UnitTestAddToDiag	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddToDiag() {$/;"	f	namespace:kaldi
UnitTestAddToDiagMatrix	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddToDiagMatrix() {$/;"	f	namespace:kaldi
UnitTestAddVec2Sp	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddVec2Sp() {$/;"	f	namespace:kaldi
UnitTestAddVecCross	matrix/matrix-lib-test.cc	/^void UnitTestAddVecCross() {$/;"	f	namespace:kaldi
UnitTestAddVecToCols	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddVecToCols() {$/;"	f	namespace:kaldi
UnitTestAddVecToRows	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddVecToRows() {$/;"	f	namespace:kaldi
UnitTestAddVecVec	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAddVecVec() {$/;"	f	namespace:kaldi
UnitTestAxpy	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestAxpy() {$/;"	f	namespace:kaldi
UnitTestComplexFft	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestComplexFft() {$/;"	f	namespace:kaldi
UnitTestComplexFft2	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestComplexFft2() {$/;"	f	namespace:kaldi
UnitTestComplexFt	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestComplexFt() {$/;"	f	namespace:kaldi
UnitTestComplexPower	matrix/matrix-lib-test.cc	/^void UnitTestComplexPower() {$/;"	f	namespace:kaldi
UnitTestCompressedMatrix	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestCompressedMatrix() {$/;"	f	namespace:kaldi
UnitTestCopyCols	matrix/matrix-lib-test.cc	/^static void UnitTestCopyCols() {$/;"	f	namespace:kaldi
UnitTestCopyRows	matrix/matrix-lib-test.cc	/^static void UnitTestCopyRows() {$/;"	f	namespace:kaldi
UnitTestCopyRowsAndCols	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestCopyRowsAndCols() {$/;"	f	namespace:kaldi
UnitTestCopySp	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestCopySp() {$/;"	f	namespace:kaldi
UnitTestDct	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestDct() {$/;"	f	namespace:kaldi
UnitTestDeterminant	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestDeterminant() {  \/\/ also tests matrix axpy and IsZero() and TraceOfProduct{, T}$/;"	f	namespace:kaldi
UnitTestDeterminantSign	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestDeterminantSign() {$/;"	f	namespace:kaldi
UnitTestDotprod	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestDotprod() {$/;"	f	namespace:kaldi
UnitTestEig	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestEig() {$/;"	f	namespace:kaldi
UnitTestEigSp	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestEigSp() {$/;"	f	namespace:kaldi
UnitTestEigSymmetric	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestEigSymmetric() {$/;"	f	namespace:kaldi
UnitTestExtractCompressedMatrix	matrix/matrix-lib-test.cc	/^static void UnitTestExtractCompressedMatrix() {$/;"	f	namespace:kaldi
UnitTestFloorCeiling	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestFloorCeiling() {$/;"	f	namespace:kaldi
UnitTestFloorChol	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestFloorChol() {$/;"	f	namespace:kaldi
UnitTestFloorUnit	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestFloorUnit() {$/;"	f	namespace:kaldi
UnitTestHeaviside	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestHeaviside() {$/;"	f	namespace:kaldi
UnitTestHtkIo	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestHtkIo() {$/;"	f	namespace:kaldi
UnitTestInnerProd	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestInnerProd() {$/;"	f	namespace:kaldi
UnitTestInverse	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestInverse() {$/;"	f	namespace:kaldi
UnitTestIo	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestIo() {$/;"	f	namespace:kaldi
UnitTestIoCross	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestIoCross() {  \/\/ across types.$/;"	f	namespace:kaldi
UnitTestLbfgs	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestLbfgs() {$/;"	f	namespace:kaldi
UnitTestLimitCond	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestLimitCond() {$/;"	f	namespace:kaldi
UnitTestLimitCondInvert	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestLimitCondInvert() {$/;"	f	namespace:kaldi
UnitTestLinearCgd	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestLinearCgd() {$/;"	f	namespace:kaldi
UnitTestMat2Vec	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestMat2Vec() {$/;"	f	namespace:kaldi
UnitTestMatrixExponential	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestMatrixExponential() {$/;"	f	namespace:kaldi
UnitTestMatrixExponentialBackprop	matrix/matrix-lib-test.cc	/^static void UnitTestMatrixExponentialBackprop() {$/;"	f	namespace:kaldi
UnitTestMax2	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestMax2() {$/;"	f	namespace:kaldi
UnitTestMaxAbsEig	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestMaxAbsEig() {$/;"	f	namespace:kaldi
UnitTestMaxMin	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestMaxMin() {$/;"	f	namespace:kaldi
UnitTestMmul	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestMmul() {$/;"	f	namespace:kaldi
UnitTestMmulSym	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestMmulSym() {$/;"	f	namespace:kaldi
UnitTestMul	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestMul() {$/;"	f	namespace:kaldi
UnitTestMulElements	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestMulElements() {$/;"	f	namespace:kaldi
UnitTestNonsymmetricPower	matrix/matrix-lib-test.cc	/^void UnitTestNonsymmetricPower() {$/;"	f	namespace:kaldi
UnitTestNorm	matrix/matrix-lib-test.cc	/^static void UnitTestNorm() {  \/\/ test some simple norm properties: scaling.  also ApproxEqual test.$/;"	f	namespace:kaldi
UnitTestOrthogonalizeRows	matrix/matrix-lib-test.cc	/^static void UnitTestOrthogonalizeRows() {$/;"	f	namespace:kaldi
UnitTestPca	matrix/matrix-lib-test.cc	/^static void UnitTestPca(bool full_test) {$/;"	f	namespace:kaldi
UnitTestPca2	matrix/matrix-lib-test.cc	/^static void UnitTestPca2(bool full_test) {$/;"	f	namespace:kaldi
UnitTestPower	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestPower() {$/;"	f	namespace:kaldi
UnitTestPowerAbs	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestPowerAbs() {$/;"	f	namespace:kaldi
UnitTestRandCategorical	matrix/matrix-lib-test.cc	/^static void UnitTestRandCategorical() {$/;"	f	namespace:kaldi
UnitTestRange	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestRange() {  \/\/ Testing SubMatrix class.$/;"	f	namespace:kaldi
UnitTestRankNUpdate	matrix/matrix-lib-test.cc	/^static void UnitTestRankNUpdate() {$/;"	f	namespace:kaldi
UnitTestRealFft	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestRealFft() {$/;"	f	namespace:kaldi
UnitTestRealFftSpeed	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestRealFftSpeed() {$/;"	f	namespace:kaldi
UnitTestRemoveRow	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestRemoveRow() {$/;"	f	namespace:kaldi
UnitTestReplaceValue	matrix/matrix-lib-test.cc	/^static void UnitTestReplaceValue(){$/;"	f	namespace:kaldi
UnitTestResize	matrix/matrix-lib-test.cc	/^static void UnitTestResize() {$/;"	f	namespace:kaldi
UnitTestRow	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestRow() {$/;"	f	namespace:kaldi
UnitTestScale	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestScale() {$/;"	f	namespace:kaldi
UnitTestScaleDiag	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestScaleDiag() {$/;"	f	namespace:kaldi
UnitTestSetDiag	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSetDiag() {$/;"	f	namespace:kaldi
UnitTestSetRandUniform	matrix/matrix-lib-test.cc	/^static void UnitTestSetRandUniform() {$/;"	f	namespace:kaldi
UnitTestSetRandn	matrix/matrix-lib-test.cc	/^static void UnitTestSetRandn() {$/;"	f	namespace:kaldi
UnitTestSger	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSger() {$/;"	f	namespace:kaldi
UnitTestSherman	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSherman() {$/;"	f	namespace:kaldi
UnitTestSigmoid	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestSigmoid() {$/;"	f	namespace:kaldi
UnitTestSimple	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestSimple() {$/;"	f	namespace:kaldi
UnitTestSimpleForMat	matrix/matrix-lib-test.cc	/^static void UnitTestSimpleForMat() {  \/\/ test some simple operates on all kinds of matrix$/;"	f	namespace:kaldi
UnitTestSimpleForVec	matrix/matrix-lib-test.cc	/^static void UnitTestSimpleForVec() {  \/\/ testing some simple operaters on vector$/;"	f	namespace:kaldi
UnitTestSoftHinge	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestSoftHinge() {$/;"	f	namespace:kaldi
UnitTestSolve	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSolve() {$/;"	f	namespace:kaldi
UnitTestSpAddDiagVec	matrix/matrix-lib-test.cc	/^static void UnitTestSpAddDiagVec() {$/;"	f	namespace:kaldi
UnitTestSpAddVecVec	matrix/matrix-lib-test.cc	/^static void UnitTestSpAddVecVec() {$/;"	f	namespace:kaldi
UnitTestSpInvert	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestSpInvert() {$/;"	f	namespace:kaldi
UnitTestSpLogExp	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSpLogExp() {$/;"	f	namespace:kaldi
UnitTestSpVec	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSpVec() {$/;"	f	namespace:kaldi
UnitTestSpliceRows	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSpliceRows() {$/;"	f	namespace:kaldi
UnitTestSplitRadixComplexFft	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSplitRadixComplexFft() {$/;"	f	namespace:kaldi
UnitTestSplitRadixComplexFft2	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSplitRadixComplexFft2() {$/;"	f	namespace:kaldi
UnitTestSplitRadixRealFft	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSplitRadixRealFft() {$/;"	f	namespace:kaldi
UnitTestSplitRadixRealFftSpeed	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSplitRadixRealFftSpeed() {$/;"	f	namespace:kaldi
UnitTestSubvector	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSubvector() {$/;"	f	namespace:kaldi
UnitTestSvd	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSvd() {$/;"	f	namespace:kaldi
UnitTestSvdBad	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSvdBad() {$/;"	f	namespace:kaldi
UnitTestSvdJustvec	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSvdJustvec() {  \/\/ Making sure gives same answer if we get just the vector, not the eigs.$/;"	f	namespace:kaldi
UnitTestSvdNodestroy	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSvdNodestroy() {$/;"	f	namespace:kaldi
UnitTestSvdSpeed	matrix/matrix-lib-test.cc	/^static void UnitTestSvdSpeed() {$/;"	f	namespace:kaldi
UnitTestSvdZero	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSvdZero() {$/;"	f	namespace:kaldi
UnitTestSymAddMat2	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestSymAddMat2() {$/;"	f	namespace:kaldi
UnitTestTanh	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestTanh() {$/;"	f	namespace:kaldi
UnitTestTopEigs	matrix/matrix-lib-test.cc	/^static void UnitTestTopEigs() {$/;"	f	namespace:kaldi
UnitTestTp2	matrix/matrix-lib-test.cc	/^static void UnitTestTp2() {$/;"	f	namespace:kaldi
UnitTestTp2Sp	matrix/matrix-lib-test.cc	/^static void UnitTestTp2Sp() {$/;"	f	namespace:kaldi
UnitTestTpInvert	matrix/matrix-lib-test.cc	/^template<typename Real> static void  UnitTestTpInvert() {$/;"	f	namespace:kaldi
UnitTestTrace	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestTrace() {$/;"	f	namespace:kaldi
UnitTestTraceProduct	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestTraceProduct() {$/;"	f	namespace:kaldi
UnitTestTraceSpSpLower	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestTraceSpSpLower() {$/;"	f	namespace:kaldi
UnitTestTranspose	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestTranspose() {$/;"	f	namespace:kaldi
UnitTestTransposeScatter	matrix/matrix-lib-test.cc	/^static void UnitTestTransposeScatter() {$/;"	f	namespace:kaldi
UnitTestTriVecSolver	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestTriVecSolver() {$/;"	f	namespace:kaldi
UnitTestTridiag	matrix/matrix-lib-test.cc	/^static void UnitTestTridiag() {$/;"	f	namespace:kaldi
UnitTestTridiagonalize	matrix/matrix-lib-test.cc	/^static void UnitTestTridiagonalize() {$/;"	f	namespace:kaldi
UnitTestTridiagonalizeAndQr	matrix/matrix-lib-test.cc	/^static void UnitTestTridiagonalizeAndQr() {$/;"	f	namespace:kaldi
UnitTestVecmul	matrix/matrix-lib-test.cc	/^template<typename Real> static void UnitTestVecmul() {$/;"	f	namespace:kaldi
UnitTestVectorMax	matrix/matrix-lib-test.cc	/^static void UnitTestVectorMax() {$/;"	f	namespace:kaldi
UnitTestVectorMin	matrix/matrix-lib-test.cc	/^static void UnitTestVectorMin() {$/;"	f	namespace:kaldi
approx_equal	matrix/matrix-lib-test.cc	/^static bool approx_equal(Real a, Real b) {$/;"	f	namespace:kaldi
kaldi	matrix/matrix-lib-test.cc	/^namespace kaldi {$/;"	n	file:
main	matrix/matrix-lib-test.cc	/^int main() {$/;"	f
KALDI_MATRIX_MATRIX_LIB_H_	matrix/matrix-lib.h	23;"	d
AcceptStep	matrix/optimization.cc	/^bool OptimizeLbfgs<Real>::AcceptStep(Real function_value,$/;"	f	class:kaldi::OptimizeLbfgs
ComputeHifNeeded	matrix/optimization.cc	/^void OptimizeLbfgs<Real>::ComputeHifNeeded(const VectorBase<Real> &gradient) {$/;"	f	class:kaldi::OptimizeLbfgs
ComputeNewDirection	matrix/optimization.cc	/^void OptimizeLbfgs<Real>::ComputeNewDirection(Real function_value,$/;"	f	class:kaldi::OptimizeLbfgs
DoStep	matrix/optimization.cc	/^void OptimizeLbfgs<Real>::DoStep(Real function_value,$/;"	f	class:kaldi::OptimizeLbfgs
GetValue	matrix/optimization.cc	/^OptimizeLbfgs<Real>::GetValue(Real *objf_value) const {$/;"	f	class:kaldi::OptimizeLbfgs
LinearCgd	matrix/optimization.cc	/^int32 LinearCgd(const LinearCgdOptions &opts,$/;"	f	namespace:kaldi
OptimizeLbfgs	matrix/optimization.cc	/^OptimizeLbfgs<Real>::OptimizeLbfgs(const VectorBase<Real> &x,$/;"	f	class:kaldi::OptimizeLbfgs
RecentStepLength	matrix/optimization.cc	/^Real OptimizeLbfgs<Real>::RecentStepLength() const {$/;"	f	class:kaldi::OptimizeLbfgs
RecordStepLength	matrix/optimization.cc	/^void OptimizeLbfgs<Real>::RecordStepLength(Real s) {$/;"	f	class:kaldi::OptimizeLbfgs
Restart	matrix/optimization.cc	/^void OptimizeLbfgs<Real>::Restart(const VectorBase<Real> &x,$/;"	f	class:kaldi::OptimizeLbfgs
StepSizeIteration	matrix/optimization.cc	/^void OptimizeLbfgs<Real>::StepSizeIteration(Real function_value,$/;"	f	class:kaldi::OptimizeLbfgs
kaldi	matrix/optimization.cc	/^namespace kaldi {$/;"	n	file:
ComputationState	matrix/optimization.h	/^  enum ComputationState {$/;"	g	class:kaldi::OptimizeLbfgs
Dim	matrix/optimization.h	/^  inline MatrixIndexT Dim() { return x_.Dim(); }$/;"	f	class:kaldi::OptimizeLbfgs
GetProposedValue	matrix/optimization.h	/^  const VectorBase<Real>& GetProposedValue() const { return new_x_; }$/;"	f	class:kaldi::OptimizeLbfgs
H_	matrix/optimization.h	/^  Vector<Real> H_; \/\/ Current inverse-Hessian estimate.  May be computed by this class itself,$/;"	m	class:kaldi::OptimizeLbfgs
H_was_set_	matrix/optimization.h	/^  bool H_was_set_; \/\/ True if the user specified H_; if false,$/;"	m	class:kaldi::OptimizeLbfgs
KALDI_MATRIX_OPTIMIZATION_H_	matrix/optimization.h	26;"	d
LbfgsOptions	matrix/optimization.h	/^  LbfgsOptions (bool minimize = true):$/;"	f	struct:kaldi::LbfgsOptions
LbfgsOptions	matrix/optimization.h	/^struct LbfgsOptions {$/;"	s	namespace:kaldi
LinearCgdOptions	matrix/optimization.h	/^  LinearCgdOptions(): max_iters(-1),$/;"	f	struct:kaldi::LinearCgdOptions
LinearCgdOptions	matrix/optimization.h	/^struct LinearCgdOptions {$/;"	s	namespace:kaldi
M	matrix/optimization.h	/^  inline MatrixIndexT M() { return opts_.m; }$/;"	f	class:kaldi::OptimizeLbfgs
OptimizeLbfgs	matrix/optimization.h	/^class OptimizeLbfgs {$/;"	c	namespace:kaldi
S	matrix/optimization.h	/^  SubVector<Real> S(MatrixIndexT i) {$/;"	f	class:kaldi::OptimizeLbfgs
Y	matrix/optimization.h	/^  SubVector<Real> Y(MatrixIndexT i) {$/;"	f	class:kaldi::OptimizeLbfgs
avg_step_length	matrix/optimization.h	/^  int avg_step_length; \/\/ number of iters to avg step length over, in$/;"	m	struct:kaldi::LbfgsOptions
best_f_	matrix/optimization.h	/^  Real best_f_; \/\/ the best objective function so far.$/;"	m	class:kaldi::OptimizeLbfgs
best_x_	matrix/optimization.h	/^  Vector<Real> best_x_; \/\/ the x with the best objective function so far$/;"	m	class:kaldi::OptimizeLbfgs
c1	matrix/optimization.h	/^  float c1; \/\/ A constant in Armijo rule = Wolfe condition i)$/;"	m	struct:kaldi::LbfgsOptions
c2	matrix/optimization.h	/^  float c2; \/\/ A constant in Wolfe condition ii)$/;"	m	struct:kaldi::LbfgsOptions
computation_state_	matrix/optimization.h	/^  ComputationState computation_state_;$/;"	m	class:kaldi::OptimizeLbfgs
d	matrix/optimization.h	/^  float d; \/\/ An amount > 1.0 (default 2.0) that we initially multiply or$/;"	m	struct:kaldi::LbfgsOptions
d_	matrix/optimization.h	/^  Real d_; \/\/ a number d > 1.0, but during an iteration we may decrease this, when$/;"	m	class:kaldi::OptimizeLbfgs
data_	matrix/optimization.h	/^  Matrix<Real> data_; \/\/ dimension (m*2) x dim.  Even rows store$/;"	m	class:kaldi::OptimizeLbfgs
deriv_	matrix/optimization.h	/^  Vector<Real> deriv_; \/\/ The most recently evaluated derivative-- at x_k.$/;"	m	class:kaldi::OptimizeLbfgs
f_	matrix/optimization.h	/^  Real f_; \/\/ The function evaluated at x_k.$/;"	m	class:kaldi::OptimizeLbfgs
first_step_impr	matrix/optimization.h	/^  float first_step_impr; \/\/ If this variable is >0.0, it overrides$/;"	m	struct:kaldi::LbfgsOptions
first_step_learning_rate	matrix/optimization.h	/^  float first_step_learning_rate; \/\/ The very first step of L-BFGS is$/;"	m	struct:kaldi::LbfgsOptions
first_step_length	matrix/optimization.h	/^  float first_step_length; \/\/ If this variable is >0.0, it overrides$/;"	m	struct:kaldi::LbfgsOptions
kBeforeStep	matrix/optimization.h	/^    kBeforeStep,$/;"	e	enum:kaldi::OptimizeLbfgs::ComputationState
kNone	matrix/optimization.h	/^  enum { kWolfeI, kWolfeII, kNone } last_failure_type_; \/\/ last type of step-search$/;"	e	enum:kaldi::OptimizeLbfgs::__anon10
kWithinStep	matrix/optimization.h	/^    kWithinStep, \/\/ This means we're within the step-size computation, and$/;"	e	enum:kaldi::OptimizeLbfgs::ComputationState
kWolfeI	matrix/optimization.h	/^  enum { kWolfeI, kWolfeII, kNone } last_failure_type_; \/\/ last type of step-search$/;"	e	enum:kaldi::OptimizeLbfgs::__anon10
kWolfeII	matrix/optimization.h	/^  enum { kWolfeI, kWolfeII, kNone } last_failure_type_; \/\/ last type of step-search$/;"	e	enum:kaldi::OptimizeLbfgs::__anon10
k_	matrix/optimization.h	/^  SignedMatrixIndexT k_; \/\/ Iteration number, starts from zero.  Gets set back to zero$/;"	m	class:kaldi::OptimizeLbfgs
kaldi	matrix/optimization.h	/^namespace kaldi {$/;"	n
last_failure_type_	matrix/optimization.h	/^  enum { kWolfeI, kWolfeII, kNone } last_failure_type_; \/\/ last type of step-search$/;"	m	class:kaldi::OptimizeLbfgs	typeref:enum:kaldi::OptimizeLbfgs::__anon10
m	matrix/optimization.h	/^  int m; \/\/ m is the number of stored vectors L-BFGS keeps.$/;"	m	struct:kaldi::LbfgsOptions
max_error	matrix/optimization.h	/^  BaseFloat max_error;  \/\/ Maximum 2-norm of the residual A x - b (convergence$/;"	m	struct:kaldi::LinearCgdOptions
max_iters	matrix/optimization.h	/^  int32 max_iters;  \/\/  Maximum number of iters (if >= 0).$/;"	m	struct:kaldi::LinearCgdOptions
max_line_search_iters	matrix/optimization.h	/^  int max_line_search_iters; \/\/ after this many iters we restart L-BFGS.$/;"	m	struct:kaldi::LbfgsOptions
minimize	matrix/optimization.h	/^  bool minimize; \/\/ if true, we're minimizing, else maximizing.$/;"	m	struct:kaldi::LbfgsOptions
new_x_	matrix/optimization.h	/^  Vector<Real> new_x_; \/\/ the x proposed in the line search.$/;"	m	class:kaldi::OptimizeLbfgs
num_wolfe_i_failures_	matrix/optimization.h	/^  int num_wolfe_i_failures_; \/\/ the num times we decreased step size.$/;"	m	class:kaldi::OptimizeLbfgs
num_wolfe_ii_failures_	matrix/optimization.h	/^  int num_wolfe_ii_failures_; \/\/ the num times we increased step size.$/;"	m	class:kaldi::OptimizeLbfgs
opts_	matrix/optimization.h	/^  LbfgsOptions opts_;$/;"	m	class:kaldi::OptimizeLbfgs
recompute_residual_factor	matrix/optimization.h	/^  BaseFloat recompute_residual_factor;$/;"	m	struct:kaldi::LinearCgdOptions
rho_	matrix/optimization.h	/^  Vector<Real> rho_; \/\/ dimension m; rho_(m) = 1\/(y_m^T s_m), Eq. 7.17.$/;"	m	class:kaldi::OptimizeLbfgs
step_lengths_	matrix/optimization.h	/^  std::vector<Real> step_lengths_; \/\/ The step sizes we took on the last$/;"	m	class:kaldi::OptimizeLbfgs
temp_	matrix/optimization.h	/^  Vector<Real> temp_;$/;"	m	class:kaldi::OptimizeLbfgs
x_	matrix/optimization.h	/^  Vector<Real> x_; \/\/ current x.$/;"	m	class:kaldi::OptimizeLbfgs
AddPacked	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::AddPacked(const Real alpha, const PackedMatrix<Real> &rMa) {$/;"	f	class:kaldi::PackedMatrix
AddToDiag	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::AddToDiag(Real r) {$/;"	f	class:kaldi::PackedMatrix
CopyFromPacked	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::CopyFromPacked(const PackedMatrix<OtherReal> &orig) {$/;"	f	class:kaldi::PackedMatrix
CopyFromVec	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::CopyFromVec(const SubVector<OtherReal> &vec) {$/;"	f	class:kaldi::PackedMatrix
Destroy	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::Destroy() {$/;"	f	class:kaldi::PackedMatrix
Init	matrix/packed-matrix.cc	/^inline void PackedMatrix<Real>::Init(MatrixIndexT r) {$/;"	f	class:kaldi::PackedMatrix
Read	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::Read(std::istream& is, bool binary, bool add) {$/;"	f	class:kaldi::PackedMatrix
Resize	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::Resize(MatrixIndexT r, MatrixResizeType resize_type) {$/;"	f	class:kaldi::PackedMatrix
Scale	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::Scale(Real alpha) {$/;"	f	class:kaldi::PackedMatrix
ScaleDiag	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::ScaleDiag(Real alpha) {$/;"	f	class:kaldi::PackedMatrix
SetDiag	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::SetDiag(Real alpha) {$/;"	f	class:kaldi::PackedMatrix
SetRandn	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::SetRandn() {$/;"	f	class:kaldi::PackedMatrix
SetUnit	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::SetUnit() {$/;"	f	class:kaldi::PackedMatrix
SetZero	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::SetZero() {$/;"	f	class:kaldi::PackedMatrix
Swap	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::Swap(Matrix<Real> *other) {$/;"	f	class:kaldi::PackedMatrix
Swap	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::Swap(PackedMatrix<Real> *other) {$/;"	f	class:kaldi::PackedMatrix
Trace	matrix/packed-matrix.cc	/^Real PackedMatrix<Real>::Trace() const {$/;"	f	class:kaldi::PackedMatrix
Write	matrix/packed-matrix.cc	/^void PackedMatrix<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::PackedMatrix
kaldi	matrix/packed-matrix.cc	/^namespace kaldi {$/;"	n	file:
Data	matrix/packed-matrix.h	/^  Real* Data() { return data_; }$/;"	f	class:kaldi::PackedMatrix
Data	matrix/packed-matrix.h	/^  const Real* Data() const { return data_; }$/;"	f	class:kaldi::PackedMatrix
KALDI_MATRIX_PACKED_MATRIX_H_	matrix/packed-matrix.h	23;"	d
Max	matrix/packed-matrix.h	/^  Real Max() const {$/;"	f	class:kaldi::PackedMatrix
Min	matrix/packed-matrix.h	/^  Real Min() const {$/;"	f	class:kaldi::PackedMatrix
NumCols	matrix/packed-matrix.h	/^  inline MatrixIndexT NumCols() const { return num_rows_; }$/;"	f	class:kaldi::PackedMatrix
NumRows	matrix/packed-matrix.h	/^  inline MatrixIndexT NumRows() const { return num_rows_; }$/;"	f	class:kaldi::PackedMatrix
PackedMatrix	matrix/packed-matrix.h	/^  PackedMatrix() : data_(NULL), num_rows_(0) {}$/;"	f	class:kaldi::PackedMatrix
PackedMatrix	matrix/packed-matrix.h	/^  explicit PackedMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero):$/;"	f	class:kaldi::PackedMatrix
PackedMatrix	matrix/packed-matrix.h	/^  explicit PackedMatrix(const PackedMatrix<OtherReal> &orig) : data_(NULL) {$/;"	f	class:kaldi::PackedMatrix
PackedMatrix	matrix/packed-matrix.h	/^  explicit PackedMatrix(const PackedMatrix<Real> &orig) : data_(NULL) {$/;"	f	class:kaldi::PackedMatrix
PackedMatrix	matrix/packed-matrix.h	/^template<typename Real> class PackedMatrix {$/;"	c	namespace:kaldi
SizeInBytes	matrix/packed-matrix.h	/^  size_t SizeInBytes() const {$/;"	f	class:kaldi::PackedMatrix
data_	matrix/packed-matrix.h	/^  Real *data_;$/;"	m	class:kaldi::PackedMatrix
kaldi	matrix/packed-matrix.h	/^namespace kaldi {$/;"	n
num_rows_	matrix/packed-matrix.h	/^  MatrixIndexT num_rows_;$/;"	m	class:kaldi::PackedMatrix
operator ()	matrix/packed-matrix.h	/^  Real &operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::PackedMatrix
operator ()	matrix/packed-matrix.h	/^  Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::PackedMatrix
operator <<	matrix/packed-matrix.h	/^std::ostream & operator << (std::ostream & os, const PackedMatrix<Real>& M) {$/;"	f	namespace:kaldi
operator =	matrix/packed-matrix.h	/^  PackedMatrix<Real> & operator =(const PackedMatrix<Real> &other) {$/;"	f	class:kaldi::PackedMatrix
operator >>	matrix/packed-matrix.h	/^std::istream & operator >> (std::istream &is, PackedMatrix<Real> &M) {$/;"	f	namespace:kaldi
~PackedMatrix	matrix/packed-matrix.h	/^  ~PackedMatrix() {$/;"	f	class:kaldi::PackedMatrix
Eig	matrix/qr.cc	/^void SpMatrix<Real>::Eig(VectorBase<Real> *s, MatrixBase<Real> *P) const {$/;"	f	class:kaldi::SpMatrix
Givens	matrix/qr.cc	/^inline void Givens(Real a, Real b, Real *c, Real *s) {$/;"	f	namespace:kaldi
HouseBackward	matrix/qr.cc	/^void HouseBackward(MatrixIndexT dim, const Real *x, Real *v, Real *beta) {$/;"	f	namespace:kaldi
Qr	matrix/qr.cc	/^void SpMatrix<Real>::Qr(MatrixBase<Real> *Q) {$/;"	f	class:kaldi::SpMatrix
QrInternal	matrix/qr.cc	/^void QrInternal(MatrixIndexT n,$/;"	f	namespace:kaldi
QrStep	matrix/qr.cc	/^void QrStep(MatrixIndexT n,$/;"	f	namespace:kaldi
TopEigs	matrix/qr.cc	/^void SpMatrix<Real>::TopEigs(VectorBase<Real> *s, MatrixBase<Real> *P,$/;"	f	class:kaldi::SpMatrix
Tridiagonalize	matrix/qr.cc	/^void SpMatrix<Real>::Tridiagonalize(MatrixBase<Real> *Q) {$/;"	f	class:kaldi::SpMatrix
kaldi	matrix/qr.cc	/^namespace kaldi {$/;"	n	file:
KALDI_MATRIX_SP_MATRIX_INL_H_	matrix/sp-matrix-inl.h	21;"	d
kaldi	matrix/sp-matrix-inl.h	/^namespace kaldi {$/;"	n
AddDiagVec	matrix/sp-matrix.cc	/^void  SpMatrix<Real>::AddDiagVec(const Real alpha, const VectorBase<OtherReal> &v) {$/;"	f	class:kaldi::SpMatrix
AddMat2	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddMat2(const Real alpha, const MatrixBase<Real> &M,$/;"	f	class:kaldi::SpMatrix
AddMat2Sp	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddMat2Sp($/;"	f	class:kaldi::SpMatrix
AddMat2Vec	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddMat2Vec(const Real alpha,$/;"	f	class:kaldi::SpMatrix
AddSmat2Sp	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddSmat2Sp($/;"	f	class:kaldi::SpMatrix
AddTp2	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddTp2(const Real alpha, const TpMatrix<Real> &T,$/;"	f	class:kaldi::SpMatrix
AddTp2Sp	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddTp2Sp(const Real alpha, const TpMatrix<Real> &T,$/;"	f	class:kaldi::SpMatrix
AddVec2	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddVec2(const Real alpha, const VectorBase<OtherReal> &v) {$/;"	f	class:kaldi::SpMatrix
AddVec2	matrix/sp-matrix.cc	/^void SpMatrix<double>::AddVec2(const double alpha, const VectorBase<double> &v) {$/;"	f	class:kaldi::SpMatrix
AddVec2	matrix/sp-matrix.cc	/^void SpMatrix<float>::AddVec2(const float alpha, const VectorBase<float> &v) {$/;"	f	class:kaldi::SpMatrix
AddVec2Sp	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddVec2Sp(const Real alpha, const VectorBase<Real> &v,$/;"	f	class:kaldi::SpMatrix
AddVecVec	matrix/sp-matrix.cc	/^void SpMatrix<Real>::AddVecVec(const Real alpha, const VectorBase<Real> &v,$/;"	f	class:kaldi::SpMatrix
ApplyFloor	matrix/sp-matrix.cc	/^int SpMatrix<Real>::ApplyFloor(Real floor) {$/;"	f	class:kaldi::SpMatrix
ApplyFloor	matrix/sp-matrix.cc	/^int SpMatrix<Real>::ApplyFloor(const SpMatrix<Real> &C, Real alpha,$/;"	f	class:kaldi::SpMatrix
ApplyPow	matrix/sp-matrix.cc	/^void SpMatrix<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::SpMatrix
ApproxEqual	matrix/sp-matrix.cc	/^bool SpMatrix<Real>::ApproxEqual(const SpMatrix<Real> &other, float tol) const {$/;"	f	class:kaldi::SpMatrix
Check	matrix/sp-matrix.cc	/^void SolverOptions::Check() const {$/;"	f	class:kaldi::SolverOptions
CopyFromMat	matrix/sp-matrix.cc	/^void SpMatrix<Real>::CopyFromMat(const MatrixBase<Real> &M,$/;"	f	class:kaldi::SpMatrix
Exp	matrix/sp-matrix.cc	/^void SpMatrix<Real>::Exp() {$/;"	f	class:kaldi::SpMatrix
FrobeniusNorm	matrix/sp-matrix.cc	/^Real SpMatrix<Real>::FrobeniusNorm() const {$/;"	f	class:kaldi::SpMatrix
Invert	matrix/sp-matrix.cc	/^void SpMatrix<Real>::Invert(Real *logdet, Real *det_sign, bool need_inverse) {$/;"	f	class:kaldi::SpMatrix
InvertDouble	matrix/sp-matrix.cc	/^void SpMatrix<Real>::InvertDouble(Real *logdet, Real *det_sign,$/;"	f	class:kaldi::SpMatrix
IsDiagonal	matrix/sp-matrix.cc	/^bool SpMatrix<Real>::IsDiagonal(Real cutoff) const {$/;"	f	class:kaldi::SpMatrix
IsPosDef	matrix/sp-matrix.cc	/^bool SpMatrix<Real>::IsPosDef() const {$/;"	f	class:kaldi::SpMatrix
IsTridiagonal	matrix/sp-matrix.cc	/^bool SpMatrix<Real>::IsTridiagonal(Real cutoff) const {$/;"	f	class:kaldi::SpMatrix
IsUnit	matrix/sp-matrix.cc	/^bool SpMatrix<Real>::IsUnit(Real cutoff) const {$/;"	f	class:kaldi::SpMatrix
IsZero	matrix/sp-matrix.cc	/^bool SpMatrix<Real>::IsZero(Real cutoff) const {$/;"	f	class:kaldi::SpMatrix
LimitCond	matrix/sp-matrix.cc	/^MatrixIndexT SpMatrix<Real>::LimitCond(Real maxCond, bool invert) {  \/\/ e.g. maxCond = 1.0e+05.$/;"	f	class:kaldi::SpMatrix
Log	matrix/sp-matrix.cc	/^void SpMatrix<Real>::Log() {$/;"	f	class:kaldi::SpMatrix
LogDet	matrix/sp-matrix.cc	/^Real SpMatrix<Real>::LogDet(Real *det_sign) const {$/;"	f	class:kaldi::SpMatrix
LogPosDefDet	matrix/sp-matrix.cc	/^Real SpMatrix<Real>::LogPosDefDet() const {$/;"	f	class:kaldi::SpMatrix
MaxAbsEig	matrix/sp-matrix.cc	/^Real SpMatrix<Real>::MaxAbsEig() const {$/;"	f	class:kaldi::SpMatrix
SolveDoubleQuadraticMatrixProblem	matrix/sp-matrix.cc	/^Real SolveDoubleQuadraticMatrixProblem(const MatrixBase<Real> &G,$/;"	f	namespace:kaldi
SolveQuadraticMatrixProblem	matrix/sp-matrix.cc	/^SolveQuadraticMatrixProblem(const SpMatrix<Real> &Q,$/;"	f	namespace:kaldi
SolveQuadraticProblem	matrix/sp-matrix.cc	/^template<> double SolveQuadraticProblem(const SpMatrix<double> &H,$/;"	f	namespace:kaldi
SolveQuadraticProblem	matrix/sp-matrix.cc	/^template<> float SolveQuadraticProblem(const SpMatrix<float> &H,$/;"	f	namespace:kaldi
Swap	matrix/sp-matrix.cc	/^void SpMatrix<Real>::Swap(SpMatrix<Real> *other) {$/;"	f	class:kaldi::SpMatrix
SymPosSemiDefEig	matrix/sp-matrix.cc	/^void SpMatrix<Real>::SymPosSemiDefEig(VectorBase<Real> *s,$/;"	f	class:kaldi::SpMatrix
Trace	matrix/sp-matrix.cc	/^Real SpMatrix<Real>::Trace() const {$/;"	f	class:kaldi::SpMatrix
TraceMatSpMat	matrix/sp-matrix.cc	/^Real TraceMatSpMat(const MatrixBase<Real> &A, MatrixTransposeType transA,$/;"	f	namespace:kaldi
TraceMatSpMatSp	matrix/sp-matrix.cc	/^Real TraceMatSpMatSp(const MatrixBase<Real> &A, MatrixTransposeType transA,$/;"	f	namespace:kaldi
TraceSpMat	matrix/sp-matrix.cc	/^Real TraceSpMat(const SpMatrix<Real> &A, const MatrixBase<Real> &B) {$/;"	f	namespace:kaldi
TraceSpSp	matrix/sp-matrix.cc	/^Real TraceSpSp(const SpMatrix<Real> &A, const SpMatrix<OtherReal> &B) {$/;"	f	namespace:kaldi
TraceSpSp	matrix/sp-matrix.cc	/^double TraceSpSp(const SpMatrix<double> &A, const SpMatrix<double> &B) {$/;"	f	namespace:kaldi
TraceSpSp	matrix/sp-matrix.cc	/^float TraceSpSp(const SpMatrix<float> &A, const SpMatrix<float> &B) {$/;"	f	namespace:kaldi
TraceSpSpLower	matrix/sp-matrix.cc	/^Real TraceSpSpLower(const SpMatrix<Real> &A, const SpMatrix<Real> &B) {$/;"	f	namespace:kaldi
VecSpVec	matrix/sp-matrix.cc	/^Real VecSpVec(const VectorBase<Real> &v1, const SpMatrix<Real> &M,$/;"	f	namespace:kaldi
kaldi	matrix/sp-matrix.cc	/^namespace kaldi {$/;"	n	file:
AddSp	matrix/sp-matrix.h	/^  void AddSp(const Real alpha, const SpMatrix<Real> &Ma) {$/;"	f	class:kaldi::SpMatrix
ApproxEqual	matrix/sp-matrix.h	/^inline bool ApproxEqual(const SpMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	matrix/sp-matrix.h	/^inline void AssertEqual(const SpMatrix<Real> &A,$/;"	f	namespace:kaldi
Cond	matrix/sp-matrix.h	/^  inline Real Cond() const {$/;"	f	class:kaldi::SpMatrix
CopyFromSp	matrix/sp-matrix.h	/^  void CopyFromSp(const SpMatrix<OtherReal> &other) {$/;"	f	class:kaldi::SpMatrix
CopyFromSp	matrix/sp-matrix.h	/^  void CopyFromSp(const SpMatrix<Real> &other) {$/;"	f	class:kaldi::SpMatrix
K	matrix/sp-matrix.h	/^  BaseFloat K; \/\/ maximum condition number$/;"	m	struct:kaldi::SolverOptions
KALDI_MATRIX_SP_MATRIX_H_	matrix/sp-matrix.h	22;"	d
LimitCondDouble	matrix/sp-matrix.h	/^  MatrixIndexT LimitCondDouble(Real maxCond = 1.0e+5, bool invert = false) {$/;"	f	class:kaldi::SpMatrix
PrintEigs	matrix/sp-matrix.h	/^  void PrintEigs(const char *name) {$/;"	f	class:kaldi::SpMatrix
Resize	matrix/sp-matrix.h	/^  inline void Resize(MatrixIndexT nRows, MatrixResizeType resize_type = kSetZero) {$/;"	f	class:kaldi::SpMatrix
SolverOptions	matrix/sp-matrix.h	/^  SolverOptions(): K(1.0e+4), eps(1.0e-40), name("[unknown]"),$/;"	f	struct:kaldi::SolverOptions
SolverOptions	matrix/sp-matrix.h	/^  explicit SolverOptions(const std::string &name):$/;"	f	struct:kaldi::SolverOptions
SolverOptions	matrix/sp-matrix.h	/^struct SolverOptions {$/;"	s	namespace:kaldi
SpMatrix	matrix/sp-matrix.h	/^  SpMatrix(): PackedMatrix<Real>() {}$/;"	f	class:kaldi::SpMatrix
SpMatrix	matrix/sp-matrix.h	/^  SpMatrix(const SpMatrix<Real> &orig)$/;"	f	class:kaldi::SpMatrix
SpMatrix	matrix/sp-matrix.h	/^  explicit SpMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero)$/;"	f	class:kaldi::SpMatrix
SpMatrix	matrix/sp-matrix.h	/^  explicit SpMatrix(const MatrixBase<Real> & orig,$/;"	f	class:kaldi::SpMatrix
SpMatrix	matrix/sp-matrix.h	/^  explicit SpMatrix(const SpMatrix<OtherReal> &orig)$/;"	f	class:kaldi::SpMatrix
SpMatrix	matrix/sp-matrix.h	/^class SpMatrix : public PackedMatrix<Real> {$/;"	c	namespace:kaldi
diagonal_precondition	matrix/sp-matrix.h	/^  bool diagonal_precondition;$/;"	m	struct:kaldi::SolverOptions
eps	matrix/sp-matrix.h	/^  BaseFloat eps; $/;"	m	struct:kaldi::SolverOptions
kaldi	matrix/sp-matrix.h	/^namespace kaldi {$/;"	n
name	matrix/sp-matrix.h	/^  std::string name;$/;"	m	struct:kaldi::SolverOptions
operator ()	matrix/sp-matrix.h	/^  inline Real &operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::SpMatrix
operator ()	matrix/sp-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::SpMatrix
optimize_delta	matrix/sp-matrix.h	/^  bool optimize_delta;$/;"	m	struct:kaldi::SolverOptions
print_debug_output	matrix/sp-matrix.h	/^  bool print_debug_output;$/;"	m	struct:kaldi::SolverOptions
BitReversePermute	matrix/srfft.cc	/^void SplitRadixComplexFft<Real>::BitReversePermute(Real *x, MatrixIndexT logn) const {$/;"	f	class:kaldi::SplitRadixComplexFft
Compute	matrix/srfft.cc	/^void SplitRadixComplexFft<Real>::Compute(Real *x, bool forward) {$/;"	f	class:kaldi::SplitRadixComplexFft
Compute	matrix/srfft.cc	/^void SplitRadixComplexFft<Real>::Compute(Real *x, bool forward,$/;"	f	class:kaldi::SplitRadixComplexFft
Compute	matrix/srfft.cc	/^void SplitRadixComplexFft<Real>::Compute(Real *xr, Real *xi, bool forward) const {$/;"	f	class:kaldi::SplitRadixComplexFft
Compute	matrix/srfft.cc	/^void SplitRadixRealFft<Real>::Compute(Real *data, bool forward) {$/;"	f	class:kaldi::SplitRadixRealFft
Compute	matrix/srfft.cc	/^void SplitRadixRealFft<Real>::Compute(Real *data, bool forward,$/;"	f	class:kaldi::SplitRadixRealFft
ComputeRecursive	matrix/srfft.cc	/^void SplitRadixComplexFft<Real>::ComputeRecursive(Real *xr, Real *xi, MatrixIndexT logn) const {$/;"	f	class:kaldi::SplitRadixComplexFft
ComputeTables	matrix/srfft.cc	/^void SplitRadixComplexFft<Real>::ComputeTables() {$/;"	f	class:kaldi::SplitRadixComplexFft
SplitRadixComplexFft	matrix/srfft.cc	/^SplitRadixComplexFft<Real>::SplitRadixComplexFft(MatrixIndexT N) {$/;"	f	class:kaldi::SplitRadixComplexFft
kaldi	matrix/srfft.cc	/^namespace kaldi {$/;"	n	file:
~SplitRadixComplexFft	matrix/srfft.cc	/^SplitRadixComplexFft<Real>::~SplitRadixComplexFft() {$/;"	f	class:kaldi::SplitRadixComplexFft
Integer	matrix/srfft.h	/^  typedef MatrixIndexT Integer;$/;"	t	class:kaldi::SplitRadixComplexFft
KALDI_MATRIX_SRFFT_H_	matrix/srfft.h	28;"	d
N_	matrix/srfft.h	/^  Integer N_;$/;"	m	class:kaldi::SplitRadixComplexFft
N_	matrix/srfft.h	/^  int N_;$/;"	m	class:kaldi::SplitRadixRealFft
SplitRadixComplexFft	matrix/srfft.h	/^class SplitRadixComplexFft {$/;"	c	namespace:kaldi
SplitRadixRealFft	matrix/srfft.h	/^  SplitRadixRealFft(MatrixIndexT N):  \/\/ will fail unless N>=4 and N is a power of 2.$/;"	f	class:kaldi::SplitRadixRealFft
SplitRadixRealFft	matrix/srfft.h	/^class SplitRadixRealFft: private SplitRadixComplexFft<Real> {$/;"	c	namespace:kaldi
brseed_	matrix/srfft.h	/^  Integer *brseed_;$/;"	m	class:kaldi::SplitRadixComplexFft
kaldi	matrix/srfft.h	/^namespace kaldi {$/;"	n
logn_	matrix/srfft.h	/^  Integer logn_;  \/\/ log(N)$/;"	m	class:kaldi::SplitRadixComplexFft
tab_	matrix/srfft.h	/^  Real **tab_;       \/\/ Tables of butterfly coefficients.$/;"	m	class:kaldi::SplitRadixComplexFft
temp_buffer_	matrix/srfft.h	/^  std::vector<Real> temp_buffer_;$/;"	m	class:kaldi::SplitRadixComplexFft
Cholesky	matrix/tp-matrix.cc	/^void TpMatrix<Real>::Cholesky(const SpMatrix<Real> &orig) {$/;"	f	class:kaldi::TpMatrix
CopyFromMat	matrix/tp-matrix.cc	/^void TpMatrix<Real>::CopyFromMat(const MatrixBase<Real> &M,$/;"	f	class:kaldi::TpMatrix
Determinant	matrix/tp-matrix.cc	/^Real TpMatrix<Real>::Determinant() {$/;"	f	class:kaldi::TpMatrix
Invert	matrix/tp-matrix.cc	/^void TpMatrix<Real>::Invert() {$/;"	f	class:kaldi::TpMatrix
Swap	matrix/tp-matrix.cc	/^void TpMatrix<Real>::Swap(TpMatrix<Real> *other) {$/;"	f	class:kaldi::TpMatrix
kaldi	matrix/tp-matrix.cc	/^namespace kaldi {$/;"	n	file:
AddTp	matrix/tp-matrix.h	/^  void AddTp(const Real alpha, const TpMatrix<Real> &M) {$/;"	f	class:kaldi::TpMatrix
CopyFromTp	matrix/tp-matrix.h	/^  template<typename OtherReal> void CopyFromTp(const TpMatrix<OtherReal> &other) {$/;"	f	class:kaldi::TpMatrix
CopyFromTp	matrix/tp-matrix.h	/^  void CopyFromTp(const TpMatrix<Real> &other) {$/;"	f	class:kaldi::TpMatrix
InvertDouble	matrix/tp-matrix.h	/^  void InvertDouble() {$/;"	f	class:kaldi::TpMatrix
KALDI_MATRIX_TP_MATRIX_H_	matrix/tp-matrix.h	23;"	d
Resize	matrix/tp-matrix.h	/^  void Resize(MatrixIndexT nRows, MatrixResizeType resize_type = kSetZero) {$/;"	f	class:kaldi::TpMatrix
TpMatrix	matrix/tp-matrix.h	/^  TpMatrix() : PackedMatrix<Real>() {}$/;"	f	class:kaldi::TpMatrix
TpMatrix	matrix/tp-matrix.h	/^  TpMatrix(const TpMatrix<Real>& orig) : PackedMatrix<Real>(orig) {}$/;"	f	class:kaldi::TpMatrix
TpMatrix	matrix/tp-matrix.h	/^  explicit TpMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero)$/;"	f	class:kaldi::TpMatrix
TpMatrix	matrix/tp-matrix.h	/^  template<typename OtherReal> explicit TpMatrix(const TpMatrix<OtherReal>& orig)$/;"	f	class:kaldi::TpMatrix
TpMatrix	matrix/tp-matrix.h	/^class TpMatrix : public PackedMatrix<Real> {$/;"	c	namespace:kaldi
kaldi	matrix/tp-matrix.h	/^namespace kaldi {$/;"	n
operator ()	matrix/tp-matrix.h	/^  Real &operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::TpMatrix
operator ()	matrix/tp-matrix.h	/^  Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::TpMatrix
ADDLIBS	nnet/Makefile	/^ADDLIBS = ..\/cudamatrix\/kaldi-cudamatrix.a ..\/matrix\/kaldi-matrix.a ..\/base\/kaldi-base.a  ..\/util\/kaldi-util.a $/;"	m
LIBNAME	nnet/Makefile	/^LIBNAME = kaldi-nnet$/;"	m
OBJFILES	nnet/Makefile	/^OBJFILES = nnet-nnet.o nnet-component.o nnet-loss.o \\$/;"	m
TESTFILES	nnet/Makefile	/^TESTFILES = nnet-randomizer-test nnet-component-test$/;"	m
BackpropagateFnc	nnet/nnet-activation.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::BlockSoftmax
BackpropagateFnc	nnet/nnet-activation.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::Dropout
BackpropagateFnc	nnet/nnet-activation.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::Sigmoid
BackpropagateFnc	nnet/nnet-activation.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::Softmax
BackpropagateFnc	nnet/nnet-activation.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::Tanh
BlockSoftmax	nnet/nnet-activation.h	/^  BlockSoftmax(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::BlockSoftmax
BlockSoftmax	nnet/nnet-activation.h	/^class BlockSoftmax : public Component {$/;"	c	namespace:kaldi::nnet1
Copy	nnet/nnet-activation.h	/^  Component* Copy() const { return new BlockSoftmax(*this); }$/;"	f	class:kaldi::nnet1::BlockSoftmax
Copy	nnet/nnet-activation.h	/^  Component* Copy() const { return new Dropout(*this); }$/;"	f	class:kaldi::nnet1::Dropout
Copy	nnet/nnet-activation.h	/^  Component* Copy() const { return new Sigmoid(*this); }$/;"	f	class:kaldi::nnet1::Sigmoid
Copy	nnet/nnet-activation.h	/^  Component* Copy() const { return new Softmax(*this); }$/;"	f	class:kaldi::nnet1::Softmax
Copy	nnet/nnet-activation.h	/^  Component* Copy() const { return new Tanh(*this); }$/;"	f	class:kaldi::nnet1::Tanh
Dropout	nnet/nnet-activation.h	/^  Dropout(int32 dim_in, int32 dim_out):$/;"	f	class:kaldi::nnet1::Dropout
Dropout	nnet/nnet-activation.h	/^class Dropout : public Component {$/;"	c	namespace:kaldi::nnet1
GetDropoutRetention	nnet/nnet-activation.h	/^  BaseFloat GetDropoutRetention() {$/;"	f	class:kaldi::nnet1::Dropout
GetType	nnet/nnet-activation.h	/^  ComponentType GetType() const { return kBlockSoftmax; }$/;"	f	class:kaldi::nnet1::BlockSoftmax
GetType	nnet/nnet-activation.h	/^  ComponentType GetType() const { return kDropout; }$/;"	f	class:kaldi::nnet1::Dropout
GetType	nnet/nnet-activation.h	/^  ComponentType GetType() const { return kSigmoid; }$/;"	f	class:kaldi::nnet1::Sigmoid
GetType	nnet/nnet-activation.h	/^  ComponentType GetType() const { return kSoftmax; }$/;"	f	class:kaldi::nnet1::Softmax
GetType	nnet/nnet-activation.h	/^  ComponentType GetType() const { return kTanh; }$/;"	f	class:kaldi::nnet1::Tanh
InitData	nnet/nnet-activation.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::BlockSoftmax
InitData	nnet/nnet-activation.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::Dropout
KALDI_NNET_NNET_ACTIVATION_H_	nnet/nnet-activation.h	22;"	d
PropagateFnc	nnet/nnet-activation.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::BlockSoftmax
PropagateFnc	nnet/nnet-activation.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Dropout
PropagateFnc	nnet/nnet-activation.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Sigmoid
PropagateFnc	nnet/nnet-activation.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Softmax
PropagateFnc	nnet/nnet-activation.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Tanh
ReadData	nnet/nnet-activation.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::BlockSoftmax
ReadData	nnet/nnet-activation.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::Dropout
SetDropoutRetention	nnet/nnet-activation.h	/^  void SetDropoutRetention(BaseFloat dr) {$/;"	f	class:kaldi::nnet1::Dropout
Sigmoid	nnet/nnet-activation.h	/^  Sigmoid(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::Sigmoid
Sigmoid	nnet/nnet-activation.h	/^class Sigmoid : public Component {$/;"	c	namespace:kaldi::nnet1
Softmax	nnet/nnet-activation.h	/^  Softmax(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::Softmax
Softmax	nnet/nnet-activation.h	/^class Softmax : public Component {$/;"	c	namespace:kaldi::nnet1
Tanh	nnet/nnet-activation.h	/^  Tanh(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::Tanh
Tanh	nnet/nnet-activation.h	/^class Tanh : public Component {$/;"	c	namespace:kaldi::nnet1
WriteData	nnet/nnet-activation.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::BlockSoftmax
WriteData	nnet/nnet-activation.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::Dropout
block_dims	nnet/nnet-activation.h	/^  std::vector<int32> block_dims;$/;"	m	class:kaldi::nnet1::BlockSoftmax
block_offset	nnet/nnet-activation.h	/^  std::vector<int32> block_offset;$/;"	m	class:kaldi::nnet1::BlockSoftmax
dropout_mask_	nnet/nnet-activation.h	/^  CuMatrix<BaseFloat> dropout_mask_;$/;"	m	class:kaldi::nnet1::Dropout
dropout_retention_	nnet/nnet-activation.h	/^  BaseFloat dropout_retention_;$/;"	m	class:kaldi::nnet1::Dropout
kaldi	nnet/nnet-activation.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-activation.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
rand_	nnet/nnet-activation.h	/^  CuRand<BaseFloat> rand_;$/;"	m	class:kaldi::nnet1::Dropout
~BlockSoftmax	nnet/nnet-activation.h	/^  ~BlockSoftmax()$/;"	f	class:kaldi::nnet1::BlockSoftmax
~Dropout	nnet/nnet-activation.h	/^  ~Dropout()$/;"	f	class:kaldi::nnet1::Dropout
~Sigmoid	nnet/nnet-activation.h	/^  ~Sigmoid()$/;"	f	class:kaldi::nnet1::Sigmoid
~Softmax	nnet/nnet-activation.h	/^  ~Softmax()$/;"	f	class:kaldi::nnet1::Softmax
~Tanh	nnet/nnet-activation.h	/^  ~Tanh()$/;"	f	class:kaldi::nnet1::Tanh
AffineTransform	nnet/nnet-affine-transform.h	/^  AffineTransform(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::AffineTransform
AffineTransform	nnet/nnet-affine-transform.h	/^class AffineTransform : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
BackpropagateFnc	nnet/nnet-affine-transform.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::AffineTransform
Copy	nnet/nnet-affine-transform.h	/^  Component* Copy() const { return new AffineTransform(*this); }$/;"	f	class:kaldi::nnet1::AffineTransform
GetBias	nnet/nnet-affine-transform.h	/^  const CuVectorBase<BaseFloat>& GetBias() const {$/;"	f	class:kaldi::nnet1::AffineTransform
GetBiasCorr	nnet/nnet-affine-transform.h	/^  const CuVectorBase<BaseFloat>& GetBiasCorr() const {$/;"	f	class:kaldi::nnet1::AffineTransform
GetLinearity	nnet/nnet-affine-transform.h	/^  const CuMatrixBase<BaseFloat>& GetLinearity() const {$/;"	f	class:kaldi::nnet1::AffineTransform
GetLinearityCorr	nnet/nnet-affine-transform.h	/^  const CuMatrixBase<BaseFloat>& GetLinearityCorr() const {$/;"	f	class:kaldi::nnet1::AffineTransform
GetParams	nnet/nnet-affine-transform.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::AffineTransform
GetType	nnet/nnet-affine-transform.h	/^  ComponentType GetType() const { return kAffineTransform; }$/;"	f	class:kaldi::nnet1::AffineTransform
Info	nnet/nnet-affine-transform.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::AffineTransform
InfoGradient	nnet/nnet-affine-transform.h	/^  std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::AffineTransform
InitData	nnet/nnet-affine-transform.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::AffineTransform
KALDI_NNET_NNET_AFFINE_TRANSFORM_H_	nnet/nnet-affine-transform.h	22;"	d
NumParams	nnet/nnet-affine-transform.h	/^  int32 NumParams() const { return linearity_.NumRows()*linearity_.NumCols() + bias_.Dim(); }$/;"	f	class:kaldi::nnet1::AffineTransform
PropagateFnc	nnet/nnet-affine-transform.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::AffineTransform
ReadData	nnet/nnet-affine-transform.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::AffineTransform
SetBias	nnet/nnet-affine-transform.h	/^  void SetBias(const CuVectorBase<BaseFloat>& bias) {$/;"	f	class:kaldi::nnet1::AffineTransform
SetLinearity	nnet/nnet-affine-transform.h	/^  void SetLinearity(const CuMatrixBase<BaseFloat>& linearity) {$/;"	f	class:kaldi::nnet1::AffineTransform
Update	nnet/nnet-affine-transform.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::AffineTransform
WriteData	nnet/nnet-affine-transform.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::AffineTransform
bias_	nnet/nnet-affine-transform.h	/^  CuVector<BaseFloat> bias_;$/;"	m	class:kaldi::nnet1::AffineTransform
bias_corr_	nnet/nnet-affine-transform.h	/^  CuVector<BaseFloat> bias_corr_;$/;"	m	class:kaldi::nnet1::AffineTransform
bias_learn_rate_coef_	nnet/nnet-affine-transform.h	/^  BaseFloat bias_learn_rate_coef_;$/;"	m	class:kaldi::nnet1::AffineTransform
kaldi	nnet/nnet-affine-transform.h	/^namespace kaldi {$/;"	n
learn_rate_coef_	nnet/nnet-affine-transform.h	/^  BaseFloat learn_rate_coef_;$/;"	m	class:kaldi::nnet1::AffineTransform
linearity_	nnet/nnet-affine-transform.h	/^  CuMatrix<BaseFloat> linearity_;$/;"	m	class:kaldi::nnet1::AffineTransform
linearity_corr_	nnet/nnet-affine-transform.h	/^  CuMatrix<BaseFloat> linearity_corr_;$/;"	m	class:kaldi::nnet1::AffineTransform
max_norm_	nnet/nnet-affine-transform.h	/^  BaseFloat max_norm_;$/;"	m	class:kaldi::nnet1::AffineTransform
nnet1	nnet/nnet-affine-transform.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
~AffineTransform	nnet/nnet-affine-transform.h	/^  ~AffineTransform()$/;"	f	class:kaldi::nnet1::AffineTransform
AveragePooling2DComponent	nnet/nnet-average-pooling-2d-component.h	/^  AveragePooling2DComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
AveragePooling2DComponent	nnet/nnet-average-pooling-2d-component.h	/^class AveragePooling2DComponent : public Component {$/;"	c	namespace:kaldi::nnet1
BackpropagateFnc	nnet/nnet-average-pooling-2d-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
Copy	nnet/nnet-average-pooling-2d-component.h	/^  Component* Copy() const { return new AveragePooling2DComponent(*this); }$/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
GetType	nnet/nnet-average-pooling-2d-component.h	/^  ComponentType GetType() const { return kAveragePooling2DComponent; }$/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
InitData	nnet/nnet-average-pooling-2d-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
KALDI_NNET_NNET_AVERAGE_POOLING_2D_COMPONENT_H_	nnet/nnet-average-pooling-2d-component.h	23;"	d
PropagateFnc	nnet/nnet-average-pooling-2d-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
ReadData	nnet/nnet-average-pooling-2d-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
WriteData	nnet/nnet-average-pooling-2d-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
fmap_x_len_	nnet/nnet-average-pooling-2d-component.h	/^  int32 fmap_x_len_, fmap_y_len_,$/;"	m	class:kaldi::nnet1::AveragePooling2DComponent
fmap_y_len_	nnet/nnet-average-pooling-2d-component.h	/^  int32 fmap_x_len_, fmap_y_len_,$/;"	m	class:kaldi::nnet1::AveragePooling2DComponent
kaldi	nnet/nnet-average-pooling-2d-component.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-average-pooling-2d-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
pool_x_len_	nnet/nnet-average-pooling-2d-component.h	/^    pool_x_len_, pool_y_len_,$/;"	m	class:kaldi::nnet1::AveragePooling2DComponent
pool_x_step_	nnet/nnet-average-pooling-2d-component.h	/^    pool_x_step_, pool_y_step_;$/;"	m	class:kaldi::nnet1::AveragePooling2DComponent
pool_y_len_	nnet/nnet-average-pooling-2d-component.h	/^    pool_x_len_, pool_y_len_,$/;"	m	class:kaldi::nnet1::AveragePooling2DComponent
pool_y_step_	nnet/nnet-average-pooling-2d-component.h	/^    pool_x_step_, pool_y_step_;$/;"	m	class:kaldi::nnet1::AveragePooling2DComponent
~AveragePooling2DComponent	nnet/nnet-average-pooling-2d-component.h	/^  ~AveragePooling2DComponent()$/;"	f	class:kaldi::nnet1::AveragePooling2DComponent
AveragePoolingComponent	nnet/nnet-average-pooling-component.h	/^  AveragePoolingComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::AveragePoolingComponent
AveragePoolingComponent	nnet/nnet-average-pooling-component.h	/^class AveragePoolingComponent : public Component {$/;"	c	namespace:kaldi::nnet1
BackpropagateFnc	nnet/nnet-average-pooling-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::AveragePoolingComponent
Copy	nnet/nnet-average-pooling-component.h	/^  Component* Copy() const { return new AveragePoolingComponent(*this); }$/;"	f	class:kaldi::nnet1::AveragePoolingComponent
GetType	nnet/nnet-average-pooling-component.h	/^  ComponentType GetType() const { return kAveragePoolingComponent; }$/;"	f	class:kaldi::nnet1::AveragePoolingComponent
InitData	nnet/nnet-average-pooling-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::AveragePoolingComponent
KALDI_NNET_NNET_AVERAGE_POOLING_COMPONENT_H_	nnet/nnet-average-pooling-component.h	22;"	d
PropagateFnc	nnet/nnet-average-pooling-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::AveragePoolingComponent
ReadData	nnet/nnet-average-pooling-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::AveragePoolingComponent
WriteData	nnet/nnet-average-pooling-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::AveragePoolingComponent
kaldi	nnet/nnet-average-pooling-component.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-average-pooling-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
pool_size_	nnet/nnet-average-pooling-component.h	/^  int32 pool_size_,   \/\/ input patches used for pooling$/;"	m	class:kaldi::nnet1::AveragePoolingComponent
pool_step_	nnet/nnet-average-pooling-component.h	/^        pool_step_,   \/\/ shift used for pooling (allow overlapping pools)$/;"	m	class:kaldi::nnet1::AveragePoolingComponent
pool_stride_	nnet/nnet-average-pooling-component.h	/^        pool_stride_; \/\/ stride used to cut input matrix to a vector of matrices$/;"	m	class:kaldi::nnet1::AveragePoolingComponent
~AveragePoolingComponent	nnet/nnet-average-pooling-component.h	/^  ~AveragePoolingComponent()$/;"	f	class:kaldi::nnet1::AveragePoolingComponent
ReadComponentFromString	nnet/nnet-component-test.cc	/^  Component* ReadComponentFromString(const std::string& s) {$/;"	f	namespace:kaldi::nnet1
ReadCuMatrixFromString	nnet/nnet-component-test.cc	/^  void ReadCuMatrixFromString(const std::string& s, CuMatrix<Real>* m) {$/;"	f	namespace:kaldi::nnet1
UnitTestConvolutionalComponent3x3	nnet/nnet-component-test.cc	/^  void UnitTestConvolutionalComponent3x3() {$/;"	f	namespace:kaldi::nnet1
UnitTestConvolutionalComponentUnity	nnet/nnet-component-test.cc	/^  void UnitTestConvolutionalComponentUnity() {$/;"	f	namespace:kaldi::nnet1
UnitTestMaxPoolingComponent	nnet/nnet-component-test.cc	/^  void UnitTestMaxPoolingComponent() {$/;"	f	namespace:kaldi::nnet1
kaldi	nnet/nnet-component-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet/nnet-component-test.cc	/^int main() {$/;"	f
nnet1	nnet/nnet-component-test.cc	/^namespace nnet1 {$/;"	n	namespace:kaldi	file:
Init	nnet/nnet-component.cc	/^Component* Component::Init(const std::string &conf_line) {$/;"	f	class:kaldi::nnet1::Component
MarkerToType	nnet/nnet-component.cc	/^Component::ComponentType Component::MarkerToType(const std::string &s) {$/;"	f	class:kaldi::nnet1::Component
NewComponentOfType	nnet/nnet-component.cc	/^Component* Component::NewComponentOfType(ComponentType comp_type,$/;"	f	class:kaldi::nnet1::Component
Read	nnet/nnet-component.cc	/^Component* Component::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::Component
TypeToMarker	nnet/nnet-component.cc	/^const char* Component::TypeToMarker(ComponentType t) {$/;"	f	class:kaldi::nnet1::Component
Write	nnet/nnet-component.cc	/^void Component::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::Component
kMarkerMap	nnet/nnet-component.cc	/^const struct Component::key_value Component::kMarkerMap[] = {$/;"	m	class:kaldi::nnet1::Component	typeref:struct:kaldi::nnet1::Component::	file:
kaldi	nnet/nnet-component.cc	/^namespace kaldi {$/;"	n	file:
nnet1	nnet/nnet-component.cc	/^namespace nnet1 {$/;"	n	namespace:kaldi	file:
Backpropagate	nnet/nnet-component.h	/^inline void Component::Backpropagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet1::Component
Component	nnet/nnet-component.h	/^  Component(int32 input_dim, int32 output_dim) $/;"	f	class:kaldi::nnet1::Component
Component	nnet/nnet-component.h	/^class Component {$/;"	c	namespace:kaldi::nnet1
ComponentType	nnet/nnet-component.h	/^  } ComponentType;$/;"	t	class:kaldi::nnet1::Component	typeref:enum:kaldi::nnet1::Component::__anon18
GetTrainOptions	nnet/nnet-component.h	/^  const NnetTrainOptions& GetTrainOptions() const { $/;"	f	class:kaldi::nnet1::UpdatableComponent
Info	nnet/nnet-component.h	/^  virtual std::string Info() const { return ""; }$/;"	f	class:kaldi::nnet1::Component
InfoGradient	nnet/nnet-component.h	/^  virtual std::string InfoGradient() const { return ""; }$/;"	f	class:kaldi::nnet1::Component
InitData	nnet/nnet-component.h	/^  virtual void InitData(std::istream &is) { }$/;"	f	class:kaldi::nnet1::Component
InputDim	nnet/nnet-component.h	/^  int32 InputDim() const { $/;"	f	class:kaldi::nnet1::Component
IsUpdatable	nnet/nnet-component.h	/^  bool IsUpdatable() const { $/;"	f	class:kaldi::nnet1::UpdatableComponent
IsUpdatable	nnet/nnet-component.h	/^  virtual bool IsUpdatable() const { $/;"	f	class:kaldi::nnet1::Component
KALDI_NNET_NNET_COMPONENT_H_	nnet/nnet-component.h	23;"	d
OutputDim	nnet/nnet-component.h	/^  int32 OutputDim() const { $/;"	f	class:kaldi::nnet1::Component
Propagate	nnet/nnet-component.h	/^inline void Component::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet1::Component
ReadData	nnet/nnet-component.h	/^  virtual void ReadData(std::istream &is, bool binary) { }$/;"	f	class:kaldi::nnet1::Component
SetTrainOptions	nnet/nnet-component.h	/^  virtual void SetTrainOptions(const NnetTrainOptions &opts) {$/;"	f	class:kaldi::nnet1::UpdatableComponent
UpdatableComponent	nnet/nnet-component.h	/^  UpdatableComponent(int32 input_dim, int32 output_dim)$/;"	f	class:kaldi::nnet1::UpdatableComponent
UpdatableComponent	nnet/nnet-component.h	/^class UpdatableComponent : public Component {$/;"	c	namespace:kaldi::nnet1
WriteData	nnet/nnet-component.h	/^  virtual void WriteData(std::ostream &os, bool binary) const { }$/;"	f	class:kaldi::nnet1::Component
input_dim_	nnet/nnet-component.h	/^  int32 input_dim_;  \/\/\/< Size of input vectors$/;"	m	class:kaldi::nnet1::Component
kActivationFunction	nnet/nnet-component.h	/^    kActivationFunction = 0x0200, $/;"	e	enum:kaldi::nnet1::Component::__anon18
kAddShift	nnet/nnet-component.h	/^    kAddShift,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kAffineTransform	nnet/nnet-component.h	/^    kAffineTransform,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kAveragePooling2DComponent	nnet/nnet-component.h	/^    kAveragePooling2DComponent,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kAveragePoolingComponent	nnet/nnet-component.h	/^    kAveragePoolingComponent,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kBlockLinearity	nnet/nnet-component.h	/^    kBlockLinearity,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kBlockSoftmax	nnet/nnet-component.h	/^    kBlockSoftmax, $/;"	e	enum:kaldi::nnet1::Component::__anon18
kConvolutional2DComponent	nnet/nnet-component.h	/^    kConvolutional2DComponent,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kConvolutionalComponent	nnet/nnet-component.h	/^    kConvolutionalComponent,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kCopy	nnet/nnet-component.h	/^    kCopy,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kDropout	nnet/nnet-component.h	/^    kDropout,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kFramePoolingComponent	nnet/nnet-component.h	/^    kFramePoolingComponent, $/;"	e	enum:kaldi::nnet1::Component::__anon18
kKlHmm	nnet/nnet-component.h	/^    kKlHmm = 0x0800,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kLinearTransform	nnet/nnet-component.h	/^    kLinearTransform,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kLstmProjectedStreams	nnet/nnet-component.h	/^    kLstmProjectedStreams,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kMarkerMap	nnet/nnet-component.h	/^  static const struct key_value kMarkerMap[];$/;"	m	class:kaldi::nnet1::Component	typeref:struct:kaldi::nnet1::Component::key_value
kMaxPooling2DComponent	nnet/nnet-component.h	/^    kMaxPooling2DComponent,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kMaxPoolingComponent	nnet/nnet-component.h	/^    kMaxPoolingComponent,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kParallelComponent	nnet/nnet-component.h	/^    kParallelComponent$/;"	e	enum:kaldi::nnet1::Component::__anon18
kRbm	nnet/nnet-component.h	/^    kRbm,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kRescale	nnet/nnet-component.h	/^    kRescale,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kSentenceAveragingComponent	nnet/nnet-component.h	/^    kSentenceAveragingComponent,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kSigmoid	nnet/nnet-component.h	/^    kSigmoid,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kSoftmax	nnet/nnet-component.h	/^    kSoftmax, $/;"	e	enum:kaldi::nnet1::Component::__anon18
kSplice	nnet/nnet-component.h	/^    kSplice,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kTanh	nnet/nnet-component.h	/^    kTanh,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kTranform	nnet/nnet-component.h	/^    kTranform = 0x0400,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kTranspose	nnet/nnet-component.h	/^    kTranspose,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kUnknown	nnet/nnet-component.h	/^    kUnknown = 0x0,$/;"	e	enum:kaldi::nnet1::Component::__anon18
kUpdatableComponent	nnet/nnet-component.h	/^    kUpdatableComponent = 0x0100, $/;"	e	enum:kaldi::nnet1::Component::__anon18
kaldi	nnet/nnet-component.h	/^namespace kaldi {$/;"	n
key	nnet/nnet-component.h	/^    const Component::ComponentType key;$/;"	m	struct:kaldi::nnet1::Component::key_value
key_value	nnet/nnet-component.h	/^  struct key_value {$/;"	s	class:kaldi::nnet1::Component
nnet1	nnet/nnet-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
opts_	nnet/nnet-component.h	/^  NnetTrainOptions opts_; $/;"	m	class:kaldi::nnet1::UpdatableComponent
output_dim_	nnet/nnet-component.h	/^  int32 output_dim_; \/\/\/< Size of output vectors$/;"	m	class:kaldi::nnet1::Component
value	nnet/nnet-component.h	/^    const char *value;$/;"	m	struct:kaldi::nnet1::Component::key_value
~Component	nnet/nnet-component.h	/^  virtual ~Component() { }$/;"	f	class:kaldi::nnet1::Component
~UpdatableComponent	nnet/nnet-component.h	/^  virtual ~UpdatableComponent() { }$/;"	f	class:kaldi::nnet1::UpdatableComponent
BackpropagateFnc	nnet/nnet-convolutional-2d-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
Convolutional2DComponent	nnet/nnet-convolutional-2d-component.h	/^  Convolutional2DComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::Convolutional2DComponent
Convolutional2DComponent	nnet/nnet-convolutional-2d-component.h	/^class Convolutional2DComponent : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
Copy	nnet/nnet-convolutional-2d-component.h	/^  Component* Copy() const { return new Convolutional2DComponent(*this); }$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
GetParams	nnet/nnet-convolutional-2d-component.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
GetType	nnet/nnet-convolutional-2d-component.h	/^  ComponentType GetType() const { return kConvolutional2DComponent; }$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
Info	nnet/nnet-convolutional-2d-component.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
InfoGradient	nnet/nnet-convolutional-2d-component.h	/^  std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
InitData	nnet/nnet-convolutional-2d-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
KALDI_NNET_NNET_CONVOLUTIONAL_2D_COMPONENT_H_	nnet/nnet-convolutional-2d-component.h	23;"	d
NumParams	nnet/nnet-convolutional-2d-component.h	/^  int32 NumParams() const { $/;"	f	class:kaldi::nnet1::Convolutional2DComponent
PropagateFnc	nnet/nnet-convolutional-2d-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
ReadData	nnet/nnet-convolutional-2d-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
Update	nnet/nnet-convolutional-2d-component.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
WriteData	nnet/nnet-convolutional-2d-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
bias_	nnet/nnet-convolutional-2d-component.h	/^  CuVector<BaseFloat> bias_; \/\/\/< bias for each filter$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
bias_grad_	nnet/nnet-convolutional-2d-component.h	/^  CuVector<BaseFloat> bias_grad_; \/\/\/< gradient of biases$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
bias_learn_rate_coef_	nnet/nnet-convolutional-2d-component.h	/^  BaseFloat bias_learn_rate_coef_;$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
connect_fmap_	nnet/nnet-convolutional-2d-component.h	/^    connect_fmap_; \/\/\/< if connect_fmap_ = 1, then each fmap has num_filt$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
feature_patch_diffs_	nnet/nnet-convolutional-2d-component.h	/^  std::vector<CuMatrix<BaseFloat> > feature_patch_diffs_;$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
filt_x_len_	nnet/nnet-convolutional-2d-component.h	/^    filt_x_len_,filt_y_len_,    \/\/\/< 2D filter dimensions, x_ temporal, y_ spectral$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
filt_x_step_	nnet/nnet-convolutional-2d-component.h	/^    filt_x_step_, filt_y_step_,   \/\/\/< 2D shifts along temporal and spectral$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
filt_y_len_	nnet/nnet-convolutional-2d-component.h	/^    filt_x_len_,filt_y_len_,    \/\/\/< 2D filter dimensions, x_ temporal, y_ spectral$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
filt_y_step_	nnet/nnet-convolutional-2d-component.h	/^    filt_x_step_, filt_y_step_,   \/\/\/< 2D shifts along temporal and spectral$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
filters_	nnet/nnet-convolutional-2d-component.h	/^  CuMatrix<BaseFloat> filters_; \/\/\/< row = vectorized rectangular filter$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
filters_grad_	nnet/nnet-convolutional-2d-component.h	/^  CuMatrix<BaseFloat> filters_grad_; \/\/\/< gradient of filters$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
fmap_x_len_	nnet/nnet-convolutional-2d-component.h	/^  int32 fmap_x_len_, fmap_y_len_, \/\/\/< feature maps dimensions (for input x_ is usually splice and y_ is num of fbanks) shift for 2nd dim of a patch (i.e. frame length before splicing)$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
fmap_y_len_	nnet/nnet-convolutional-2d-component.h	/^  int32 fmap_x_len_, fmap_y_len_, \/\/\/< feature maps dimensions (for input x_ is usually splice and y_ is num of fbanks) shift for 2nd dim of a patch (i.e. frame length before splicing)$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
in_diff_summands_	nnet/nnet-convolutional-2d-component.h	/^  CuVector<BaseFloat> in_diff_summands_;$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
kaldi	nnet/nnet-convolutional-2d-component.h	/^namespace kaldi {$/;"	n
learn_rate_coef_	nnet/nnet-convolutional-2d-component.h	/^  BaseFloat learn_rate_coef_;$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
nnet1	nnet/nnet-convolutional-2d-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
vectorized_feature_patches_	nnet/nnet-convolutional-2d-component.h	/^  std::vector<CuMatrix<BaseFloat> > vectorized_feature_patches_;$/;"	m	class:kaldi::nnet1::Convolutional2DComponent
~Convolutional2DComponent	nnet/nnet-convolutional-2d-component.h	/^  ~Convolutional2DComponent()$/;"	f	class:kaldi::nnet1::Convolutional2DComponent
BackpropagateFnc	nnet/nnet-convolutional-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
ConvolutionalComponent	nnet/nnet-convolutional-component.h	/^  ConvolutionalComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::ConvolutionalComponent
ConvolutionalComponent	nnet/nnet-convolutional-component.h	/^class ConvolutionalComponent : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
Copy	nnet/nnet-convolutional-component.h	/^  Component* Copy() const { return new ConvolutionalComponent(*this); }$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
GetParams	nnet/nnet-convolutional-component.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
GetType	nnet/nnet-convolutional-component.h	/^  ComponentType GetType() const { return kConvolutionalComponent; }$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
Info	nnet/nnet-convolutional-component.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
InfoGradient	nnet/nnet-convolutional-component.h	/^  std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
InitData	nnet/nnet-convolutional-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
KALDI_NNET_NNET_CONVOLUTIONAL_COMPONENT_H_	nnet/nnet-convolutional-component.h	22;"	d
NumParams	nnet/nnet-convolutional-component.h	/^  int32 NumParams() const { $/;"	f	class:kaldi::nnet1::ConvolutionalComponent
PropagateFnc	nnet/nnet-convolutional-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
ReadData	nnet/nnet-convolutional-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
Update	nnet/nnet-convolutional-component.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
WriteData	nnet/nnet-convolutional-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
bias_	nnet/nnet-convolutional-component.h	/^  CuVector<BaseFloat> bias_; \/\/\/< bias for each filter$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
bias_grad_	nnet/nnet-convolutional-component.h	/^  CuVector<BaseFloat> bias_grad_; \/\/\/< gradient of biases$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
bias_learn_rate_coef_	nnet/nnet-convolutional-component.h	/^  BaseFloat bias_learn_rate_coef_; \/\/\/< bias learn rate$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
feature_patch_diffs_	nnet/nnet-convolutional-component.h	/^  std::vector<CuMatrix<BaseFloat> > feature_patch_diffs_;$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
filters_	nnet/nnet-convolutional-component.h	/^  CuMatrix<BaseFloat> filters_; \/\/\/< row = vectorized rectangular filter$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
filters_grad_	nnet/nnet-convolutional-component.h	/^  CuMatrix<BaseFloat> filters_grad_; \/\/\/< gradient of filters$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
kaldi	nnet/nnet-convolutional-component.h	/^namespace kaldi {$/;"	n
learn_rate_coef_	nnet/nnet-convolutional-component.h	/^  BaseFloat learn_rate_coef_; \/\/\/< weight learn rate$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
max_norm_	nnet/nnet-convolutional-component.h	/^  BaseFloat max_norm_; \/\/\/< limit L2 norm of a neuron weights to positive value$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
nnet1	nnet/nnet-convolutional-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
patch_dim_	nnet/nnet-convolutional-component.h	/^  int32 patch_dim_,    \/\/\/< number of consecutive inputs, 1st dim of patch$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
patch_step_	nnet/nnet-convolutional-component.h	/^        patch_step_,   \/\/\/< step of the convolution (i.e. shift between 2 patches)$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
patch_stride_	nnet/nnet-convolutional-component.h	/^        patch_stride_; \/\/\/< shift for 2nd dim of a patch (i.e. frame length before splicing)$/;"	m	class:kaldi::nnet1::ConvolutionalComponent
vectorized_feature_patches_	nnet/nnet-convolutional-component.h	/^  std::vector<CuMatrix<BaseFloat> > vectorized_feature_patches_; $/;"	m	class:kaldi::nnet1::ConvolutionalComponent
~ConvolutionalComponent	nnet/nnet-convolutional-component.h	/^  ~ConvolutionalComponent()$/;"	f	class:kaldi::nnet1::ConvolutionalComponent
BackpropagateFnc	nnet/nnet-frame-pooling-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::FramePoolingComponent
Copy	nnet/nnet-frame-pooling-component.h	/^  Component* Copy() const { return new FramePoolingComponent(*this); }$/;"	f	class:kaldi::nnet1::FramePoolingComponent
FramePoolingComponent	nnet/nnet-frame-pooling-component.h	/^  FramePoolingComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::FramePoolingComponent
FramePoolingComponent	nnet/nnet-frame-pooling-component.h	/^class FramePoolingComponent : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
GetParams	nnet/nnet-frame-pooling-component.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::FramePoolingComponent
GetType	nnet/nnet-frame-pooling-component.h	/^  ComponentType GetType() const { return kFramePoolingComponent; }$/;"	f	class:kaldi::nnet1::FramePoolingComponent
Info	nnet/nnet-frame-pooling-component.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::FramePoolingComponent
InfoGradient	nnet/nnet-frame-pooling-component.h	/^  std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::FramePoolingComponent
InitData	nnet/nnet-frame-pooling-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::FramePoolingComponent
KALDI_NNET_NNET_FRAME_POOLING_COMPONENT_H_	nnet/nnet-frame-pooling-component.h	22;"	d
NumParams	nnet/nnet-frame-pooling-component.h	/^  int32 NumParams() const { $/;"	f	class:kaldi::nnet1::FramePoolingComponent
PropagateFnc	nnet/nnet-frame-pooling-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::FramePoolingComponent
ReadData	nnet/nnet-frame-pooling-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::FramePoolingComponent
Update	nnet/nnet-frame-pooling-component.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::FramePoolingComponent
WriteData	nnet/nnet-frame-pooling-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::FramePoolingComponent
feature_dim_	nnet/nnet-frame-pooling-component.h	/^  int32 feature_dim_; \/\/ feature dimension before splicing$/;"	m	class:kaldi::nnet1::FramePoolingComponent
kaldi	nnet/nnet-frame-pooling-component.h	/^namespace kaldi {$/;"	n
learn_rate_coef_	nnet/nnet-frame-pooling-component.h	/^  BaseFloat learn_rate_coef_; \/\/ learninig rate multiplier$/;"	m	class:kaldi::nnet1::FramePoolingComponent
nnet1	nnet/nnet-frame-pooling-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
normalize_	nnet/nnet-frame-pooling-component.h	/^  bool normalize_; \/\/ apply normalization after each update$/;"	m	class:kaldi::nnet1::FramePoolingComponent
offset_	nnet/nnet-frame-pooling-component.h	/^  std::vector<int32> offset_; \/\/ vector of pooling offsets$/;"	m	class:kaldi::nnet1::FramePoolingComponent
weight_	nnet/nnet-frame-pooling-component.h	/^  std::vector<Vector<BaseFloat> > weight_; \/\/ vector of pooling weight vectors$/;"	m	class:kaldi::nnet1::FramePoolingComponent
weight_diff_	nnet/nnet-frame-pooling-component.h	/^  std::vector<Vector<BaseFloat> > weight_diff_; \/\/ detivatives of weight vectors$/;"	m	class:kaldi::nnet1::FramePoolingComponent
~FramePoolingComponent	nnet/nnet-frame-pooling-component.h	/^  ~FramePoolingComponent()$/;"	f	class:kaldi::nnet1::FramePoolingComponent
Accumulate	nnet/nnet-kl-hmm.h	/^  void Accumulate (const Matrix<BaseFloat> &posteriors, const std::vector<int32> &alignment) {$/;"	f	class:kaldi::nnet1::KlHmm
BackpropagateFnc	nnet/nnet-kl-hmm.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::KlHmm
Copy	nnet/nnet-kl-hmm.h	/^  Component* Copy() const { return new KlHmm(*this); }$/;"	f	class:kaldi::nnet1::KlHmm
GetType	nnet/nnet-kl-hmm.h	/^  ComponentType GetType() const {$/;"	f	class:kaldi::nnet1::KlHmm
KALDI_NNET_NNET_KL_HMM_H_	nnet/nnet-kl-hmm.h	22;"	d
KlHmm	nnet/nnet-kl-hmm.h	/^  KlHmm(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::KlHmm
KlHmm	nnet/nnet-kl-hmm.h	/^class KlHmm : public Component {$/;"	c	namespace:kaldi::nnet1
PropagateFnc	nnet/nnet-kl-hmm.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::KlHmm
ReadData	nnet/nnet-kl-hmm.h	/^  void ReadData(std::istream &is, bool binary) { $/;"	f	class:kaldi::nnet1::KlHmm
SetStats	nnet/nnet-kl-hmm.h	/^  void SetStats(const Matrix<BaseFloat> mat) {$/;"	f	class:kaldi::nnet1::KlHmm
WriteData	nnet/nnet-kl-hmm.h	/^  void WriteData(std::ostream &os, bool binary) const { $/;"	f	class:kaldi::nnet1::KlHmm
kaldi	nnet/nnet-kl-hmm.h	/^namespace kaldi {$/;"	n
kl_inv_q_	nnet/nnet-kl-hmm.h	/^  CuMatrix<BaseFloat> kl_inv_q_;$/;"	m	class:kaldi::nnet1::KlHmm
kl_stats_	nnet/nnet-kl-hmm.h	/^  Matrix<double> kl_stats_;$/;"	m	class:kaldi::nnet1::KlHmm
nnet1	nnet/nnet-kl-hmm.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
~KlHmm	nnet/nnet-kl-hmm.h	/^  ~KlHmm()$/;"	f	class:kaldi::nnet1::KlHmm
BackpropagateFnc	nnet/nnet-linear-transform.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::LinearTransform
Copy	nnet/nnet-linear-transform.h	/^  Component* Copy() const { return new LinearTransform(*this); }$/;"	f	class:kaldi::nnet1::LinearTransform
GetLinearity	nnet/nnet-linear-transform.h	/^  const CuMatrixBase<BaseFloat>& GetLinearity() {$/;"	f	class:kaldi::nnet1::LinearTransform
GetLinearityCorr	nnet/nnet-linear-transform.h	/^  const CuMatrixBase<BaseFloat>& GetLinearityCorr() {$/;"	f	class:kaldi::nnet1::LinearTransform
GetParams	nnet/nnet-linear-transform.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::LinearTransform
GetType	nnet/nnet-linear-transform.h	/^  ComponentType GetType() const { return kLinearTransform; }$/;"	f	class:kaldi::nnet1::LinearTransform
Info	nnet/nnet-linear-transform.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::LinearTransform
InfoGradient	nnet/nnet-linear-transform.h	/^  std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::LinearTransform
InitData	nnet/nnet-linear-transform.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::LinearTransform
KALDI_NNET_NNET_LINEAR_TRANSFORM_H_	nnet/nnet-linear-transform.h	22;"	d
LinearTransform	nnet/nnet-linear-transform.h	/^  LinearTransform(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::LinearTransform
LinearTransform	nnet/nnet-linear-transform.h	/^class LinearTransform : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
NumParams	nnet/nnet-linear-transform.h	/^  int32 NumParams() const { return linearity_.NumRows()*linearity_.NumCols(); }$/;"	f	class:kaldi::nnet1::LinearTransform
PropagateFnc	nnet/nnet-linear-transform.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::LinearTransform
ReadData	nnet/nnet-linear-transform.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::LinearTransform
SetLinearity	nnet/nnet-linear-transform.h	/^  void SetLinearity(const CuMatrixBase<BaseFloat>& linearity) {$/;"	f	class:kaldi::nnet1::LinearTransform
Update	nnet/nnet-linear-transform.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::LinearTransform
WriteData	nnet/nnet-linear-transform.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::LinearTransform
kaldi	nnet/nnet-linear-transform.h	/^namespace kaldi {$/;"	n
learn_rate_coef_	nnet/nnet-linear-transform.h	/^  BaseFloat learn_rate_coef_;$/;"	m	class:kaldi::nnet1::LinearTransform
linearity_	nnet/nnet-linear-transform.h	/^  CuMatrix<BaseFloat> linearity_;$/;"	m	class:kaldi::nnet1::LinearTransform
linearity_corr_	nnet/nnet-linear-transform.h	/^  CuMatrix<BaseFloat> linearity_corr_;$/;"	m	class:kaldi::nnet1::LinearTransform
nnet1	nnet/nnet-linear-transform.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
~LinearTransform	nnet/nnet-linear-transform.h	/^  ~LinearTransform()$/;"	f	class:kaldi::nnet1::LinearTransform
CountCorrectFramesWeighted	nnet/nnet-loss.cc	/^inline void CountCorrectFramesWeighted(const CuArray<T> &v1, $/;"	f	namespace:kaldi::nnet1
Eval	nnet/nnet-loss.cc	/^void Mse::Eval(const VectorBase<BaseFloat> &frame_weights,$/;"	f	class:kaldi::nnet1::Mse
Eval	nnet/nnet-loss.cc	/^void Xent::Eval(const VectorBase<BaseFloat> &frame_weights,$/;"	f	class:kaldi::nnet1::Xent
Report	nnet/nnet-loss.cc	/^std::string Mse::Report() {$/;"	f	class:kaldi::nnet1::Mse
Report	nnet/nnet-loss.cc	/^std::string Xent::Report() {$/;"	f	class:kaldi::nnet1::Xent
kaldi	nnet/nnet-loss.cc	/^namespace kaldi {$/;"	n	file:
nnet1	nnet/nnet-loss.cc	/^namespace nnet1 {$/;"	n	namespace:kaldi	file:
KALDI_NNET_NNET_LOSS_H_	nnet/nnet-loss.h	21;"	d
Mse	nnet/nnet-loss.h	/^  Mse() : frames_(0.0), loss_(0.0), $/;"	f	class:kaldi::nnet1::Mse
Mse	nnet/nnet-loss.h	/^class Mse {$/;"	c	namespace:kaldi::nnet1
Xent	nnet/nnet-loss.h	/^  Xent() : frames_(0.0), correct_(0.0), loss_(0.0), entropy_(0.0), $/;"	f	class:kaldi::nnet1::Xent
Xent	nnet/nnet-loss.h	/^class Xent {$/;"	c	namespace:kaldi::nnet1
correct_	nnet/nnet-loss.h	/^  double correct_;$/;"	m	class:kaldi::nnet1::Xent
diff_pow_2_	nnet/nnet-loss.h	/^  CuMatrix<BaseFloat> diff_pow_2_;$/;"	m	class:kaldi::nnet1::Mse
entropy_	nnet/nnet-loss.h	/^  double entropy_;$/;"	m	class:kaldi::nnet1::Xent
entropy_aux_	nnet/nnet-loss.h	/^  CuMatrix<BaseFloat> entropy_aux_;$/;"	m	class:kaldi::nnet1::Xent
entropy_progress_	nnet/nnet-loss.h	/^  double entropy_progress_;$/;"	m	class:kaldi::nnet1::Xent
frame_weights_	nnet/nnet-loss.h	/^  CuVector<BaseFloat> frame_weights_;$/;"	m	class:kaldi::nnet1::Mse
frame_weights_	nnet/nnet-loss.h	/^  CuVector<BaseFloat> frame_weights_;$/;"	m	class:kaldi::nnet1::Xent
frames_	nnet/nnet-loss.h	/^  double frames_;$/;"	m	class:kaldi::nnet1::Mse
frames_	nnet/nnet-loss.h	/^  double frames_;$/;"	m	class:kaldi::nnet1::Xent
frames_progress_	nnet/nnet-loss.h	/^  double frames_progress_;$/;"	m	class:kaldi::nnet1::Mse
frames_progress_	nnet/nnet-loss.h	/^  double frames_progress_;$/;"	m	class:kaldi::nnet1::Xent
kaldi	nnet/nnet-loss.h	/^namespace kaldi {$/;"	n
loss_	nnet/nnet-loss.h	/^  double loss_;$/;"	m	class:kaldi::nnet1::Mse
loss_	nnet/nnet-loss.h	/^  double loss_;$/;"	m	class:kaldi::nnet1::Xent
loss_progress_	nnet/nnet-loss.h	/^  double loss_progress_;$/;"	m	class:kaldi::nnet1::Mse
loss_progress_	nnet/nnet-loss.h	/^  double loss_progress_;$/;"	m	class:kaldi::nnet1::Xent
loss_vec_	nnet/nnet-loss.h	/^  std::vector<float> loss_vec_;$/;"	m	class:kaldi::nnet1::Mse
loss_vec_	nnet/nnet-loss.h	/^  std::vector<float> loss_vec_;$/;"	m	class:kaldi::nnet1::Xent
max_id_out_	nnet/nnet-loss.h	/^  CuArray<int32> max_id_out_;$/;"	m	class:kaldi::nnet1::Xent
max_id_tgt_	nnet/nnet-loss.h	/^  CuArray<int32> max_id_tgt_;$/;"	m	class:kaldi::nnet1::Xent
nnet1	nnet/nnet-loss.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
tgt_mat_	nnet/nnet-loss.h	/^  CuMatrix<BaseFloat> tgt_mat_;$/;"	m	class:kaldi::nnet1::Mse
tgt_mat_	nnet/nnet-loss.h	/^  CuMatrix<BaseFloat> tgt_mat_;$/;"	m	class:kaldi::nnet1::Xent
xentropy_aux_	nnet/nnet-loss.h	/^  CuMatrix<BaseFloat> xentropy_aux_;$/;"	m	class:kaldi::nnet1::Xent
~Mse	nnet/nnet-loss.h	/^  ~Mse() { }$/;"	f	class:kaldi::nnet1::Mse
~Xent	nnet/nnet-loss.h	/^  ~Xent() { }$/;"	f	class:kaldi::nnet1::Xent
BackpropagateFnc	nnet/nnet-lstm-projected-streams.h	/^    void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
Copy	nnet/nnet-lstm-projected-streams.h	/^    Component* Copy() const { return new LstmProjectedStreams(*this); }$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
GetParams	nnet/nnet-lstm-projected-streams.h	/^    void GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
GetType	nnet/nnet-lstm-projected-streams.h	/^    ComponentType GetType() const { return kLstmProjectedStreams; }$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
Info	nnet/nnet-lstm-projected-streams.h	/^    std::string Info() const {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
InfoGradient	nnet/nnet-lstm-projected-streams.h	/^    std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
InitData	nnet/nnet-lstm-projected-streams.h	/^    void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
InitMatParam	nnet/nnet-lstm-projected-streams.h	/^    static void InitMatParam(CuMatrix<BaseFloat> &m, float scale) {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
InitVecParam	nnet/nnet-lstm-projected-streams.h	/^    static void InitVecParam(CuVector<BaseFloat> &v, float scale) {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
KALDI_NNET_LSTM_PROJECTED_STREAMS_H_	nnet/nnet-lstm-projected-streams.h	23;"	d
LstmProjectedStreams	nnet/nnet-lstm-projected-streams.h	/^    LstmProjectedStreams(int32 input_dim, int32 output_dim) :$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
LstmProjectedStreams	nnet/nnet-lstm-projected-streams.h	/^class LstmProjectedStreams : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
NumParams	nnet/nnet-lstm-projected-streams.h	/^    int32 NumParams() const { $/;"	f	class:kaldi::nnet1::LstmProjectedStreams
PropagateFnc	nnet/nnet-lstm-projected-streams.h	/^    void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
ReadData	nnet/nnet-lstm-projected-streams.h	/^    void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
ResetLstmStreams	nnet/nnet-lstm-projected-streams.h	/^    void ResetLstmStreams(const std::vector<int32> &stream_reset_flag) {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
Update	nnet/nnet-lstm-projected-streams.h	/^    void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
WriteData	nnet/nnet-lstm-projected-streams.h	/^    void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
backpropagate_buf_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> backpropagate_buf_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
bias_	nnet/nnet-lstm-projected-streams.h	/^    CuVector<BaseFloat> bias_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
bias_corr_	nnet/nnet-lstm-projected-streams.h	/^    CuVector<BaseFloat> bias_corr_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
clip_gradient_	nnet/nnet-lstm-projected-streams.h	/^    BaseFloat clip_gradient_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
kaldi	nnet/nnet-lstm-projected-streams.h	/^namespace kaldi {$/;"	n
ncell_	nnet/nnet-lstm-projected-streams.h	/^    int32 ncell_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
nnet1	nnet/nnet-lstm-projected-streams.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
nrecur_	nnet/nnet-lstm-projected-streams.h	/^    int32 nrecur_;  \/\/ recurrent projection layer dim$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
nstream_	nnet/nnet-lstm-projected-streams.h	/^    int32 nstream_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
peephole_f_c_	nnet/nnet-lstm-projected-streams.h	/^    CuVector<BaseFloat> peephole_f_c_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
peephole_f_c_corr_	nnet/nnet-lstm-projected-streams.h	/^    CuVector<BaseFloat> peephole_f_c_corr_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
peephole_i_c_	nnet/nnet-lstm-projected-streams.h	/^    CuVector<BaseFloat> peephole_i_c_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
peephole_i_c_corr_	nnet/nnet-lstm-projected-streams.h	/^    CuVector<BaseFloat> peephole_i_c_corr_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
peephole_o_c_	nnet/nnet-lstm-projected-streams.h	/^    CuVector<BaseFloat> peephole_o_c_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
peephole_o_c_corr_	nnet/nnet-lstm-projected-streams.h	/^    CuVector<BaseFloat> peephole_o_c_corr_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
prev_nnet_state_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> prev_nnet_state_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
propagate_buf_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> propagate_buf_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
w_gifo_r_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> w_gifo_r_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
w_gifo_r_corr_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> w_gifo_r_corr_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
w_gifo_x_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> w_gifo_x_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
w_gifo_x_corr_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> w_gifo_x_corr_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
w_r_m_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> w_r_m_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
w_r_m_corr_	nnet/nnet-lstm-projected-streams.h	/^    CuMatrix<BaseFloat> w_r_m_corr_;$/;"	m	class:kaldi::nnet1::LstmProjectedStreams
~LstmProjectedStreams	nnet/nnet-lstm-projected-streams.h	/^    ~LstmProjectedStreams()$/;"	f	class:kaldi::nnet1::LstmProjectedStreams
BackpropagateFnc	nnet/nnet-max-pooling-2d-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
Copy	nnet/nnet-max-pooling-2d-component.h	/^  Component* Copy() const { return new MaxPooling2DComponent(*this); }$/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
GetType	nnet/nnet-max-pooling-2d-component.h	/^  ComponentType GetType() const { return kMaxPooling2DComponent; }$/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
InitData	nnet/nnet-max-pooling-2d-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
KALDI_NNET_NNET_MAX_POOLING_2D_COMPONENT_H_	nnet/nnet-max-pooling-2d-component.h	23;"	d
MaxPooling2DComponent	nnet/nnet-max-pooling-2d-component.h	/^  MaxPooling2DComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
MaxPooling2DComponent	nnet/nnet-max-pooling-2d-component.h	/^class MaxPooling2DComponent : public Component {$/;"	c	namespace:kaldi::nnet1
PropagateFnc	nnet/nnet-max-pooling-2d-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
ReadData	nnet/nnet-max-pooling-2d-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
WriteData	nnet/nnet-max-pooling-2d-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
fmap_x_len_	nnet/nnet-max-pooling-2d-component.h	/^  int32 fmap_x_len_, fmap_y_len_,$/;"	m	class:kaldi::nnet1::MaxPooling2DComponent
fmap_y_len_	nnet/nnet-max-pooling-2d-component.h	/^  int32 fmap_x_len_, fmap_y_len_,$/;"	m	class:kaldi::nnet1::MaxPooling2DComponent
kaldi	nnet/nnet-max-pooling-2d-component.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-max-pooling-2d-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
pool_x_len_	nnet/nnet-max-pooling-2d-component.h	/^    pool_x_len_, pool_y_len_,$/;"	m	class:kaldi::nnet1::MaxPooling2DComponent
pool_x_step_	nnet/nnet-max-pooling-2d-component.h	/^    pool_x_step_, pool_y_step_;$/;"	m	class:kaldi::nnet1::MaxPooling2DComponent
pool_y_len_	nnet/nnet-max-pooling-2d-component.h	/^    pool_x_len_, pool_y_len_,$/;"	m	class:kaldi::nnet1::MaxPooling2DComponent
pool_y_step_	nnet/nnet-max-pooling-2d-component.h	/^    pool_x_step_, pool_y_step_;$/;"	m	class:kaldi::nnet1::MaxPooling2DComponent
~MaxPooling2DComponent	nnet/nnet-max-pooling-2d-component.h	/^  ~MaxPooling2DComponent()$/;"	f	class:kaldi::nnet1::MaxPooling2DComponent
BackpropagateFnc	nnet/nnet-max-pooling-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::MaxPoolingComponent
Copy	nnet/nnet-max-pooling-component.h	/^  Component* Copy() const { return new MaxPoolingComponent(*this); }$/;"	f	class:kaldi::nnet1::MaxPoolingComponent
GetType	nnet/nnet-max-pooling-component.h	/^  ComponentType GetType() const { return kMaxPoolingComponent; }$/;"	f	class:kaldi::nnet1::MaxPoolingComponent
InitData	nnet/nnet-max-pooling-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::MaxPoolingComponent
KALDI_NNET_NNET_MAX_POOLING_COMPONENT_H_	nnet/nnet-max-pooling-component.h	22;"	d
MaxPoolingComponent	nnet/nnet-max-pooling-component.h	/^  MaxPoolingComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::MaxPoolingComponent
MaxPoolingComponent	nnet/nnet-max-pooling-component.h	/^class MaxPoolingComponent : public Component {$/;"	c	namespace:kaldi::nnet1
PropagateFnc	nnet/nnet-max-pooling-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::MaxPoolingComponent
ReadData	nnet/nnet-max-pooling-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::MaxPoolingComponent
WriteData	nnet/nnet-max-pooling-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::MaxPoolingComponent
kaldi	nnet/nnet-max-pooling-component.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-max-pooling-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
pool_size_	nnet/nnet-max-pooling-component.h	/^  int32 pool_size_,   \/\/ input patches used for pooling$/;"	m	class:kaldi::nnet1::MaxPoolingComponent
pool_step_	nnet/nnet-max-pooling-component.h	/^        pool_step_,   \/\/ shift used for pooling (allow overlapping pools)$/;"	m	class:kaldi::nnet1::MaxPoolingComponent
pool_stride_	nnet/nnet-max-pooling-component.h	/^        pool_stride_; \/\/ stride used to cut input matrix to a vector of matrices$/;"	m	class:kaldi::nnet1::MaxPoolingComponent
~MaxPoolingComponent	nnet/nnet-max-pooling-component.h	/^  ~MaxPoolingComponent()$/;"	f	class:kaldi::nnet1::MaxPoolingComponent
AppendComponent	nnet/nnet-nnet.cc	/^void Nnet::AppendComponent(Component* dynamically_allocated_comp) {$/;"	f	class:kaldi::nnet1::Nnet
AppendNnet	nnet/nnet-nnet.cc	/^void Nnet::AppendNnet(const Nnet& nnet_to_append) {$/;"	f	class:kaldi::nnet1::Nnet
Backpropagate	nnet/nnet-nnet.cc	/^void Nnet::Backpropagate(const CuMatrixBase<BaseFloat> &out_diff, CuMatrix<BaseFloat> *in_diff) {$/;"	f	class:kaldi::nnet1::Nnet
Check	nnet/nnet-nnet.cc	/^void Nnet::Check() const {$/;"	f	class:kaldi::nnet1::Nnet
Destroy	nnet/nnet-nnet.cc	/^void Nnet::Destroy() {$/;"	f	class:kaldi::nnet1::Nnet
Feedforward	nnet/nnet-nnet.cc	/^void Nnet::Feedforward(const CuMatrixBase<BaseFloat> &in, CuMatrix<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Nnet
GetComponent	nnet/nnet-nnet.cc	/^Component& Nnet::GetComponent(int32 component) {$/;"	f	class:kaldi::nnet1::Nnet
GetComponent	nnet/nnet-nnet.cc	/^const Component& Nnet::GetComponent(int32 component) const {$/;"	f	class:kaldi::nnet1::Nnet
GetGradient	nnet/nnet-nnet.cc	/^void Nnet::GetGradient(Vector<BaseFloat>* grad_copy) const {$/;"	f	class:kaldi::nnet1::Nnet
GetParams	nnet/nnet-nnet.cc	/^void Nnet::GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::Nnet
GetWeights	nnet/nnet-nnet.cc	/^void Nnet::GetWeights(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::Nnet
Info	nnet/nnet-nnet.cc	/^std::string Nnet::Info() const {$/;"	f	class:kaldi::nnet1::Nnet
InfoBackPropagate	nnet/nnet-nnet.cc	/^std::string Nnet::InfoBackPropagate() const {$/;"	f	class:kaldi::nnet1::Nnet
InfoGradient	nnet/nnet-nnet.cc	/^std::string Nnet::InfoGradient() const {$/;"	f	class:kaldi::nnet1::Nnet
InfoPropagate	nnet/nnet-nnet.cc	/^std::string Nnet::InfoPropagate() const {$/;"	f	class:kaldi::nnet1::Nnet
Init	nnet/nnet-nnet.cc	/^void Nnet::Init(const std::string &file) {$/;"	f	class:kaldi::nnet1::Nnet
InputDim	nnet/nnet-nnet.cc	/^int32 Nnet::InputDim() const {$/;"	f	class:kaldi::nnet1::Nnet
Nnet	nnet/nnet-nnet.cc	/^Nnet::Nnet(const Nnet& other) {$/;"	f	class:kaldi::nnet1::Nnet
NumParams	nnet/nnet-nnet.cc	/^int32 Nnet::NumParams() const {$/;"	f	class:kaldi::nnet1::Nnet
OutputDim	nnet/nnet-nnet.cc	/^int32 Nnet::OutputDim() const {$/;"	f	class:kaldi::nnet1::Nnet
Propagate	nnet/nnet-nnet.cc	/^void Nnet::Propagate(const CuMatrixBase<BaseFloat> &in, CuMatrix<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Nnet
Read	nnet/nnet-nnet.cc	/^void Nnet::Read(const std::string &file) {$/;"	f	class:kaldi::nnet1::Nnet
Read	nnet/nnet-nnet.cc	/^void Nnet::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::Nnet
RemoveComponent	nnet/nnet-nnet.cc	/^void Nnet::RemoveComponent(int32 component) {$/;"	f	class:kaldi::nnet1::Nnet
ResetLstmStreams	nnet/nnet-nnet.cc	/^void Nnet::ResetLstmStreams(const std::vector<int32> &stream_reset_flag) {$/;"	f	class:kaldi::nnet1::Nnet
SetComponent	nnet/nnet-nnet.cc	/^void Nnet::SetComponent(int32 c, Component *component) {$/;"	f	class:kaldi::nnet1::Nnet
SetDropoutRetention	nnet/nnet-nnet.cc	/^void Nnet::SetDropoutRetention(BaseFloat r)  {$/;"	f	class:kaldi::nnet1::Nnet
SetTrainOptions	nnet/nnet-nnet.cc	/^void Nnet::SetTrainOptions(const NnetTrainOptions& opts) {$/;"	f	class:kaldi::nnet1::Nnet
SetWeights	nnet/nnet-nnet.cc	/^void Nnet::SetWeights(const Vector<BaseFloat>& wei_src) {$/;"	f	class:kaldi::nnet1::Nnet
Write	nnet/nnet-nnet.cc	/^void Nnet::Write(const std::string &file, bool binary) const {$/;"	f	class:kaldi::nnet1::Nnet
Write	nnet/nnet-nnet.cc	/^void Nnet::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::Nnet
kaldi	nnet/nnet-nnet.cc	/^namespace kaldi {$/;"	n	file:
nnet1	nnet/nnet-nnet.cc	/^namespace nnet1 {$/;"	n	namespace:kaldi	file:
operator =	nnet/nnet-nnet.cc	/^Nnet & Nnet::operator = (const Nnet& other) {$/;"	f	class:kaldi::nnet1::Nnet
~Nnet	nnet/nnet-nnet.cc	/^Nnet::~Nnet() {$/;"	f	class:kaldi::nnet1::Nnet
BackpropagateBuffer	nnet/nnet-nnet.h	/^  const std::vector<CuMatrix<BaseFloat> >& BackpropagateBuffer() const { $/;"	f	class:kaldi::nnet1::Nnet
GetTrainOptions	nnet/nnet-nnet.h	/^  const NnetTrainOptions& GetTrainOptions() const {$/;"	f	class:kaldi::nnet1::Nnet
KALDI_NNET_NNET_NNET_H_	nnet/nnet-nnet.h	21;"	d
Nnet	nnet/nnet-nnet.h	/^  Nnet() {}$/;"	f	class:kaldi::nnet1::Nnet
Nnet	nnet/nnet-nnet.h	/^class Nnet {$/;"	c	namespace:kaldi::nnet1
NumComponents	nnet/nnet-nnet.h	/^  int32 NumComponents() const { return components_.size(); }$/;"	f	class:kaldi::nnet1::Nnet
PropagateBuffer	nnet/nnet-nnet.h	/^  const std::vector<CuMatrix<BaseFloat> >& PropagateBuffer() const { $/;"	f	class:kaldi::nnet1::Nnet
RemoveLastComponent	nnet/nnet-nnet.h	/^  void RemoveLastComponent() { RemoveComponent(NumComponents()-1); }$/;"	f	class:kaldi::nnet1::Nnet
backpropagate_buf_	nnet/nnet-nnet.h	/^  std::vector<CuMatrix<BaseFloat> > backpropagate_buf_; \/\/\/< buffers for backward pass$/;"	m	class:kaldi::nnet1::Nnet
components_	nnet/nnet-nnet.h	/^  std::vector<Component*> components_; $/;"	m	class:kaldi::nnet1::Nnet
kaldi	nnet/nnet-nnet.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-nnet.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
opts_	nnet/nnet-nnet.h	/^  NnetTrainOptions opts_;$/;"	m	class:kaldi::nnet1::Nnet
propagate_buf_	nnet/nnet-nnet.h	/^  std::vector<CuMatrix<BaseFloat> > propagate_buf_; \/\/\/< buffers for forward pass$/;"	m	class:kaldi::nnet1::Nnet
BackpropagateFnc	nnet/nnet-parallel-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::ParallelComponent
Copy	nnet/nnet-parallel-component.h	/^  Component* Copy() const { return new ParallelComponent(*this); }$/;"	f	class:kaldi::nnet1::ParallelComponent
GetParams	nnet/nnet-parallel-component.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const { $/;"	f	class:kaldi::nnet1::ParallelComponent
GetType	nnet/nnet-parallel-component.h	/^  ComponentType GetType() const { return kParallelComponent; }$/;"	f	class:kaldi::nnet1::ParallelComponent
Info	nnet/nnet-parallel-component.h	/^  std::string Info() const { $/;"	f	class:kaldi::nnet1::ParallelComponent
InfoBackPropagate	nnet/nnet-parallel-component.h	/^  std::string InfoBackPropagate() const {$/;"	f	class:kaldi::nnet1::ParallelComponent
InfoGradient	nnet/nnet-parallel-component.h	/^  std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::ParallelComponent
InfoPropagate	nnet/nnet-parallel-component.h	/^  std::string InfoPropagate() const {$/;"	f	class:kaldi::nnet1::ParallelComponent
InitData	nnet/nnet-parallel-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::ParallelComponent
KALDI_NNET_NNET_PARALLEL_COMPONENT_H_	nnet/nnet-parallel-component.h	22;"	d
NumParams	nnet/nnet-parallel-component.h	/^  int32 NumParams() const { $/;"	f	class:kaldi::nnet1::ParallelComponent
ParallelComponent	nnet/nnet-parallel-component.h	/^  ParallelComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::ParallelComponent
ParallelComponent	nnet/nnet-parallel-component.h	/^class ParallelComponent : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
PropagateFnc	nnet/nnet-parallel-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::ParallelComponent
ReadData	nnet/nnet-parallel-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::ParallelComponent
SetTrainOptions	nnet/nnet-parallel-component.h	/^  void SetTrainOptions(const NnetTrainOptions &opts) {$/;"	f	class:kaldi::nnet1::ParallelComponent
Update	nnet/nnet-parallel-component.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::ParallelComponent
WriteData	nnet/nnet-parallel-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::ParallelComponent
kaldi	nnet/nnet-parallel-component.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-parallel-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
nnet_	nnet/nnet-parallel-component.h	/^  std::vector<Nnet> nnet_;$/;"	m	class:kaldi::nnet1::ParallelComponent
~ParallelComponent	nnet/nnet-parallel-component.h	/^  ~ParallelComponent()$/;"	f	class:kaldi::nnet1::ParallelComponent
PdfPrior	nnet/nnet-pdf-prior.cc	/^PdfPrior::PdfPrior(const PdfPriorOptions &opts)$/;"	f	class:kaldi::nnet1::PdfPrior
SubtractOnLogpost	nnet/nnet-pdf-prior.cc	/^void PdfPrior::SubtractOnLogpost(CuMatrixBase<BaseFloat> *llk) {$/;"	f	class:kaldi::nnet1::PdfPrior
kaldi	nnet/nnet-pdf-prior.cc	/^namespace kaldi {$/;"	n	file:
nnet1	nnet/nnet-pdf-prior.cc	/^namespace nnet1 {$/;"	n	namespace:kaldi	file:
KALDI_NNET_NNET_PDF_PRIOR_H_	nnet/nnet-pdf-prior.h	21;"	d
PdfPrior	nnet/nnet-pdf-prior.h	/^class PdfPrior {$/;"	c	namespace:kaldi::nnet1
PdfPriorOptions	nnet/nnet-pdf-prior.h	/^  PdfPriorOptions() : class_frame_counts(""),$/;"	f	struct:kaldi::nnet1::PdfPriorOptions
PdfPriorOptions	nnet/nnet-pdf-prior.h	/^struct PdfPriorOptions {$/;"	s	namespace:kaldi::nnet1
Register	nnet/nnet-pdf-prior.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet1::PdfPriorOptions
class_frame_counts	nnet/nnet-pdf-prior.h	/^  std::string class_frame_counts;$/;"	m	struct:kaldi::nnet1::PdfPriorOptions
kaldi	nnet/nnet-pdf-prior.h	/^namespace kaldi {$/;"	n
log_priors_	nnet/nnet-pdf-prior.h	/^  CuVector<BaseFloat> log_priors_;$/;"	m	class:kaldi::nnet1::PdfPrior
nnet1	nnet/nnet-pdf-prior.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
prior_floor	nnet/nnet-pdf-prior.h	/^  BaseFloat prior_floor;$/;"	m	struct:kaldi::nnet1::PdfPriorOptions
prior_scale	nnet/nnet-pdf-prior.h	/^  BaseFloat prior_scale;$/;"	m	struct:kaldi::nnet1::PdfPriorOptions
prior_scale_	nnet/nnet-pdf-prior.h	/^  BaseFloat prior_scale_;$/;"	m	class:kaldi::nnet1::PdfPrior
AssertEqual	nnet/nnet-randomizer-test.cc	/^static void AssertEqual(RandomAccessIterator begin1, RandomAccessIterator end1,$/;"	f	file:
AssertEqual	nnet/nnet-randomizer-test.cc	/^static void AssertEqual(const VectorBase<Real> &A, const VectorBase<Real> &B, float tol = 0.001) {$/;"	f	file:
InitRand	nnet/nnet-randomizer-test.cc	/^static void InitRand(MatrixBase<Real> *M) {$/;"	f	file:
InitRand	nnet/nnet-randomizer-test.cc	/^static void InitRand(VectorBase<Real> *v) {$/;"	f	file:
UnitTestMatrixRandomizer	nnet/nnet-randomizer-test.cc	/^void UnitTestMatrixRandomizer() {$/;"	f
UnitTestRandomizerMask	nnet/nnet-randomizer-test.cc	/^void UnitTestRandomizerMask() {$/;"	f
UnitTestStdVectorRandomizer	nnet/nnet-randomizer-test.cc	/^void UnitTestStdVectorRandomizer() {$/;"	f
UnitTestVectorRandomizer	nnet/nnet-randomizer-test.cc	/^void UnitTestVectorRandomizer() {$/;"	f
main	nnet/nnet-randomizer-test.cc	/^int main() {$/;"	f
AddData	nnet/nnet-randomizer.cc	/^void MatrixRandomizer::AddData(const CuMatrixBase<BaseFloat>& m) {$/;"	f	class:kaldi::nnet1::MatrixRandomizer
AddData	nnet/nnet-randomizer.cc	/^void StdVectorRandomizer<T>::AddData(const std::vector<T>& v) {$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
AddData	nnet/nnet-randomizer.cc	/^void VectorRandomizer::AddData(const Vector<BaseFloat>& v) {$/;"	f	class:kaldi::nnet1::VectorRandomizer
Generate	nnet/nnet-randomizer.cc	/^const std::vector<int32>& RandomizerMask::Generate(int32 mask_size) {$/;"	f	class:kaldi::nnet1::RandomizerMask
Init	nnet/nnet-randomizer.cc	/^void RandomizerMask::Init(const NnetDataRandomizerOptions& conf) {$/;"	f	class:kaldi::nnet1::RandomizerMask
Next	nnet/nnet-randomizer.cc	/^void MatrixRandomizer::Next() {$/;"	f	class:kaldi::nnet1::MatrixRandomizer
Next	nnet/nnet-randomizer.cc	/^void StdVectorRandomizer<T>::Next() {$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
Next	nnet/nnet-randomizer.cc	/^void VectorRandomizer::Next() {$/;"	f	class:kaldi::nnet1::VectorRandomizer
Randomize	nnet/nnet-randomizer.cc	/^void MatrixRandomizer::Randomize(const std::vector<int32>& mask) {$/;"	f	class:kaldi::nnet1::MatrixRandomizer
Randomize	nnet/nnet-randomizer.cc	/^void StdVectorRandomizer<T>::Randomize(const std::vector<int32>& mask) {$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
Randomize	nnet/nnet-randomizer.cc	/^void VectorRandomizer::Randomize(const std::vector<int32>& mask) {$/;"	f	class:kaldi::nnet1::VectorRandomizer
Value	nnet/nnet-randomizer.cc	/^const CuMatrixBase<BaseFloat>& MatrixRandomizer::Value() {$/;"	f	class:kaldi::nnet1::MatrixRandomizer
Value	nnet/nnet-randomizer.cc	/^const Vector<BaseFloat>& VectorRandomizer::Value() {$/;"	f	class:kaldi::nnet1::VectorRandomizer
Value	nnet/nnet-randomizer.cc	/^const std::vector<T>& StdVectorRandomizer<T>::Value() {$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
kaldi	nnet/nnet-randomizer.cc	/^namespace kaldi {$/;"	n	file:
nnet1	nnet/nnet-randomizer.cc	/^namespace nnet1 {$/;"	n	namespace:kaldi	file:
Done	nnet/nnet-randomizer.h	/^  bool Done() { return (data_end_ - data_begin_ < conf_.minibatch_size); }$/;"	f	class:kaldi::nnet1::MatrixRandomizer
Done	nnet/nnet-randomizer.h	/^  bool Done() { return (data_end_ - data_begin_ < conf_.minibatch_size); }$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
Done	nnet/nnet-randomizer.h	/^  bool Done() { return (data_end_ - data_begin_ < conf_.minibatch_size); }$/;"	f	class:kaldi::nnet1::VectorRandomizer
Init	nnet/nnet-randomizer.h	/^  void Init(const NnetDataRandomizerOptions& conf) { conf_ = conf; }$/;"	f	class:kaldi::nnet1::MatrixRandomizer
Init	nnet/nnet-randomizer.h	/^  void Init(const NnetDataRandomizerOptions& conf) { conf_ = conf; }$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
Init	nnet/nnet-randomizer.h	/^  void Init(const NnetDataRandomizerOptions& conf) { conf_ = conf; }$/;"	f	class:kaldi::nnet1::VectorRandomizer
Int32VectorRandomizer	nnet/nnet-randomizer.h	/^typedef StdVectorRandomizer<int32> Int32VectorRandomizer;$/;"	t	namespace:kaldi::nnet1
IsFull	nnet/nnet-randomizer.h	/^  bool IsFull() { return ((data_begin_ == 0) && (data_end_ > conf_.randomizer_size )); }$/;"	f	class:kaldi::nnet1::MatrixRandomizer
IsFull	nnet/nnet-randomizer.h	/^  bool IsFull() { return ((data_begin_ == 0) && (data_end_ > conf_.randomizer_size )); }$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
IsFull	nnet/nnet-randomizer.h	/^  bool IsFull() { return ((data_begin_ == 0) && (data_end_ > conf_.randomizer_size )); }$/;"	f	class:kaldi::nnet1::VectorRandomizer
KALDI_NNET_NNET_RANDOMIZER_H_	nnet/nnet-randomizer.h	22;"	d
MatrixRandomizer	nnet/nnet-randomizer.h	/^  MatrixRandomizer() : data_begin_(0), data_end_(0) { }$/;"	f	class:kaldi::nnet1::MatrixRandomizer
MatrixRandomizer	nnet/nnet-randomizer.h	/^  MatrixRandomizer(const NnetDataRandomizerOptions &conf) : data_begin_(0), data_end_(0) { Init(conf); }$/;"	f	class:kaldi::nnet1::MatrixRandomizer
MatrixRandomizer	nnet/nnet-randomizer.h	/^class MatrixRandomizer {$/;"	c	namespace:kaldi::nnet1
NnetDataRandomizerOptions	nnet/nnet-randomizer.h	/^  NnetDataRandomizerOptions()$/;"	f	struct:kaldi::nnet1::NnetDataRandomizerOptions
NnetDataRandomizerOptions	nnet/nnet-randomizer.h	/^struct NnetDataRandomizerOptions {$/;"	s	namespace:kaldi::nnet1
NumFrames	nnet/nnet-randomizer.h	/^  int32 NumFrames() { return data_end_; }$/;"	f	class:kaldi::nnet1::MatrixRandomizer
NumFrames	nnet/nnet-randomizer.h	/^  int32 NumFrames() { return data_end_; }$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
NumFrames	nnet/nnet-randomizer.h	/^  int32 NumFrames() { return data_end_; }$/;"	f	class:kaldi::nnet1::VectorRandomizer
PosteriorRandomizer	nnet/nnet-randomizer.h	/^typedef StdVectorRandomizer<std::vector<std::pair<int32, BaseFloat> > > PosteriorRandomizer;$/;"	t	namespace:kaldi::nnet1
RandomizerMask	nnet/nnet-randomizer.h	/^  RandomizerMask() { }$/;"	f	class:kaldi::nnet1::RandomizerMask
RandomizerMask	nnet/nnet-randomizer.h	/^  RandomizerMask(const NnetDataRandomizerOptions &conf) { Init(conf); }$/;"	f	class:kaldi::nnet1::RandomizerMask
RandomizerMask	nnet/nnet-randomizer.h	/^class RandomizerMask {$/;"	c	namespace:kaldi::nnet1
Register	nnet/nnet-randomizer.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet1::NnetDataRandomizerOptions
StdVectorRandomizer	nnet/nnet-randomizer.h	/^  StdVectorRandomizer() : data_begin_(0), data_end_(0) { }$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
StdVectorRandomizer	nnet/nnet-randomizer.h	/^  StdVectorRandomizer(const NnetDataRandomizerOptions &conf) : data_begin_(0), data_end_(0) { Init(conf); }$/;"	f	class:kaldi::nnet1::StdVectorRandomizer
StdVectorRandomizer	nnet/nnet-randomizer.h	/^class StdVectorRandomizer {$/;"	c	namespace:kaldi::nnet1
VectorRandomizer	nnet/nnet-randomizer.h	/^  VectorRandomizer() : data_begin_(0), data_end_(0) { }$/;"	f	class:kaldi::nnet1::VectorRandomizer
VectorRandomizer	nnet/nnet-randomizer.h	/^  VectorRandomizer(const NnetDataRandomizerOptions &conf) : data_begin_(0), data_end_(0) { Init(conf); }$/;"	f	class:kaldi::nnet1::VectorRandomizer
VectorRandomizer	nnet/nnet-randomizer.h	/^class VectorRandomizer {$/;"	c	namespace:kaldi::nnet1
conf_	nnet/nnet-randomizer.h	/^  NnetDataRandomizerOptions conf_;$/;"	m	class:kaldi::nnet1::MatrixRandomizer
conf_	nnet/nnet-randomizer.h	/^  NnetDataRandomizerOptions conf_;$/;"	m	class:kaldi::nnet1::StdVectorRandomizer
conf_	nnet/nnet-randomizer.h	/^  NnetDataRandomizerOptions conf_;$/;"	m	class:kaldi::nnet1::VectorRandomizer
data_	nnet/nnet-randomizer.h	/^  CuMatrix<BaseFloat> data_; \/\/ can be larger than 'randomizer_size'$/;"	m	class:kaldi::nnet1::MatrixRandomizer
data_	nnet/nnet-randomizer.h	/^  Vector<BaseFloat> data_; \/\/ can be larger than 'randomizer_size'$/;"	m	class:kaldi::nnet1::VectorRandomizer
data_	nnet/nnet-randomizer.h	/^  std::vector<T> data_; \/\/ can be larger than 'randomizer_size'$/;"	m	class:kaldi::nnet1::StdVectorRandomizer
data_aux_	nnet/nnet-randomizer.h	/^  CuMatrix<BaseFloat> data_aux_; \/\/ auxiliary buffer for shuffling$/;"	m	class:kaldi::nnet1::MatrixRandomizer
data_begin_	nnet/nnet-randomizer.h	/^  int32 data_begin_;$/;"	m	class:kaldi::nnet1::MatrixRandomizer
data_begin_	nnet/nnet-randomizer.h	/^  int32 data_begin_;$/;"	m	class:kaldi::nnet1::StdVectorRandomizer
data_begin_	nnet/nnet-randomizer.h	/^  int32 data_begin_;$/;"	m	class:kaldi::nnet1::VectorRandomizer
data_end_	nnet/nnet-randomizer.h	/^  int32 data_end_;   $/;"	m	class:kaldi::nnet1::MatrixRandomizer
data_end_	nnet/nnet-randomizer.h	/^  int32 data_end_;   $/;"	m	class:kaldi::nnet1::StdVectorRandomizer
data_end_	nnet/nnet-randomizer.h	/^  int32 data_end_;   $/;"	m	class:kaldi::nnet1::VectorRandomizer
kaldi	nnet/nnet-randomizer.h	/^namespace kaldi {$/;"	n
mask_	nnet/nnet-randomizer.h	/^  std::vector<int32> mask_;$/;"	m	class:kaldi::nnet1::RandomizerMask
minibatch_	nnet/nnet-randomizer.h	/^  CuMatrix<BaseFloat> minibatch_; \/\/ buffer for mini-batch$/;"	m	class:kaldi::nnet1::MatrixRandomizer
minibatch_	nnet/nnet-randomizer.h	/^  Vector<BaseFloat> minibatch_; \/\/ buffer for mini-batch$/;"	m	class:kaldi::nnet1::VectorRandomizer
minibatch_	nnet/nnet-randomizer.h	/^  std::vector<T> minibatch_; \/\/ buffer for mini-batch$/;"	m	class:kaldi::nnet1::StdVectorRandomizer
minibatch_size	nnet/nnet-randomizer.h	/^  int32 minibatch_size;  \/\/ Size of a single mini-batch.$/;"	m	struct:kaldi::nnet1::NnetDataRandomizerOptions
nnet1	nnet/nnet-randomizer.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
randomizer_seed	nnet/nnet-randomizer.h	/^  int32 randomizer_seed;$/;"	m	struct:kaldi::nnet1::NnetDataRandomizerOptions
randomizer_size	nnet/nnet-randomizer.h	/^  int32 randomizer_size; \/\/ Maximum number of samples we want to have in memory at once.$/;"	m	struct:kaldi::nnet1::NnetDataRandomizerOptions
Backpropagate	nnet/nnet-rbm.h	/^  void Backpropagate(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::RbmBase
BackpropagateFnc	nnet/nnet-rbm.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::RbmBase
Bernoulli	nnet/nnet-rbm.h	/^    Bernoulli,$/;"	e	enum:kaldi::nnet1::RbmBase::__anon19
Copy	nnet/nnet-rbm.h	/^  Component* Copy() const { return new Rbm(*this); }$/;"	f	class:kaldi::nnet1::Rbm
Gaussian	nnet/nnet-rbm.h	/^    Gaussian$/;"	e	enum:kaldi::nnet1::RbmBase::__anon19
GetRbmTrainOptions	nnet/nnet-rbm.h	/^  const RbmTrainOptions& GetRbmTrainOptions() const {$/;"	f	class:kaldi::nnet1::RbmBase
GetType	nnet/nnet-rbm.h	/^  ComponentType GetType() const { return kRbm; }$/;"	f	class:kaldi::nnet1::Rbm
HidType	nnet/nnet-rbm.h	/^  RbmNodeType HidType() const { $/;"	f	class:kaldi::nnet1::Rbm
InitData	nnet/nnet-rbm.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::Rbm
KALDI_NNET_NNET_RBM_H_	nnet/nnet-rbm.h	22;"	d
PropagateFnc	nnet/nnet-rbm.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Rbm
Rbm	nnet/nnet-rbm.h	/^  Rbm(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::Rbm
Rbm	nnet/nnet-rbm.h	/^class Rbm : public RbmBase {$/;"	c	namespace:kaldi::nnet1
RbmBase	nnet/nnet-rbm.h	/^  RbmBase(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::RbmBase
RbmBase	nnet/nnet-rbm.h	/^class RbmBase : public Component {$/;"	c	namespace:kaldi::nnet1
RbmNodeType	nnet/nnet-rbm.h	/^  } RbmNodeType;$/;"	t	class:kaldi::nnet1::RbmBase	typeref:enum:kaldi::nnet1::RbmBase::__anon19
RbmUpdate	nnet/nnet-rbm.h	/^  void RbmUpdate(const CuMatrixBase<BaseFloat> &pos_vis, const CuMatrixBase<BaseFloat> &pos_hid, const CuMatrixBase<BaseFloat> &neg_vis, const CuMatrixBase<BaseFloat> &neg_hid) {$/;"	f	class:kaldi::nnet1::Rbm
ReadData	nnet/nnet-rbm.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::Rbm
Reconstruct	nnet/nnet-rbm.h	/^  void Reconstruct(const CuMatrixBase<BaseFloat> &hid_state, CuMatrix<BaseFloat> *vis_probs) {$/;"	f	class:kaldi::nnet1::Rbm
SetRbmTrainOptions	nnet/nnet-rbm.h	/^  void SetRbmTrainOptions(const RbmTrainOptions& opts) {$/;"	f	class:kaldi::nnet1::RbmBase
VisType	nnet/nnet-rbm.h	/^  RbmNodeType VisType() const { $/;"	f	class:kaldi::nnet1::Rbm
WriteAsNnet	nnet/nnet-rbm.h	/^  void WriteAsNnet(std::ostream& os, bool binary) const {$/;"	f	class:kaldi::nnet1::Rbm
WriteData	nnet/nnet-rbm.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::Rbm
hid_bias_	nnet/nnet-rbm.h	/^  CuVector<BaseFloat> hid_bias_;       \/\/\/< Vector with biases$/;"	m	class:kaldi::nnet1::Rbm
hid_bias_corr_	nnet/nnet-rbm.h	/^  CuVector<BaseFloat> hid_bias_corr_;  \/\/\/< Vector for bias updates$/;"	m	class:kaldi::nnet1::Rbm
hid_type_	nnet/nnet-rbm.h	/^  RbmNodeType hid_type_;$/;"	m	class:kaldi::nnet1::Rbm
kaldi	nnet/nnet-rbm.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-rbm.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
rbm_opts_	nnet/nnet-rbm.h	/^  RbmTrainOptions rbm_opts_;$/;"	m	class:kaldi::nnet1::RbmBase
vis_bias_	nnet/nnet-rbm.h	/^  CuVector<BaseFloat> vis_bias_;       \/\/\/< Vector with biases$/;"	m	class:kaldi::nnet1::Rbm
vis_bias_corr_	nnet/nnet-rbm.h	/^  CuVector<BaseFloat> vis_bias_corr_;  \/\/\/< Vector for bias updates$/;"	m	class:kaldi::nnet1::Rbm
vis_hid_	nnet/nnet-rbm.h	/^  CuMatrix<BaseFloat> vis_hid_;        \/\/\/< Matrix with neuron weights$/;"	m	class:kaldi::nnet1::Rbm
vis_hid_corr_	nnet/nnet-rbm.h	/^  CuMatrix<BaseFloat> vis_hid_corr_;   \/\/\/< Matrix for linearity updates$/;"	m	class:kaldi::nnet1::Rbm
vis_type_	nnet/nnet-rbm.h	/^  RbmNodeType vis_type_;$/;"	m	class:kaldi::nnet1::Rbm
~Rbm	nnet/nnet-rbm.h	/^  ~Rbm()$/;"	f	class:kaldi::nnet1::Rbm
BackpropagateFnc	nnet/nnet-sentence-averaging-component.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
Copy	nnet/nnet-sentence-averaging-component.h	/^  Component* Copy() const { return new SentenceAveragingComponent(*this); }$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
GetParams	nnet/nnet-sentence-averaging-component.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const { wei_copy->Resize(NumParams()); nnet_.GetParams(wei_copy); }$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
GetType	nnet/nnet-sentence-averaging-component.h	/^  ComponentType GetType() const { return kSentenceAveragingComponent; }$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
Info	nnet/nnet-sentence-averaging-component.h	/^  std::string Info() const { return std::string("nested_network {\\n") + nnet_.Info() + "}\\n"; }$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
InfoGradient	nnet/nnet-sentence-averaging-component.h	/^  std::string InfoGradient() const { return std::string("nested_gradient {\\n") + nnet_.InfoGradient() + "}\\n"; }$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
InitData	nnet/nnet-sentence-averaging-component.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
KALDI_NNET_NNET_SENTENCE_AVERAGING_COMPONENT_H_	nnet/nnet-sentence-averaging-component.h	22;"	d
NumParams	nnet/nnet-sentence-averaging-component.h	/^  int32 NumParams() const { return nnet_.NumParams(); }$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
PropagateFnc	nnet/nnet-sentence-averaging-component.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
ReadData	nnet/nnet-sentence-averaging-component.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
SentenceAveragingComponent	nnet/nnet-sentence-averaging-component.h	/^  SentenceAveragingComponent(int32 dim_in, int32 dim_out) $/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
SentenceAveragingComponent	nnet/nnet-sentence-averaging-component.h	/^class SentenceAveragingComponent : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
SetTrainOptions	nnet/nnet-sentence-averaging-component.h	/^  void SetTrainOptions(const NnetTrainOptions &opts) {$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
Update	nnet/nnet-sentence-averaging-component.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
WriteData	nnet/nnet-sentence-averaging-component.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
kaldi	nnet/nnet-sentence-averaging-component.h	/^namespace kaldi {$/;"	n
learn_rate_factor_	nnet/nnet-sentence-averaging-component.h	/^  float learn_rate_factor_;$/;"	m	class:kaldi::nnet1::SentenceAveragingComponent
nnet1	nnet/nnet-sentence-averaging-component.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
nnet_	nnet/nnet-sentence-averaging-component.h	/^  Nnet nnet_;$/;"	m	class:kaldi::nnet1::SentenceAveragingComponent
~SentenceAveragingComponent	nnet/nnet-sentence-averaging-component.h	/^  ~SentenceAveragingComponent()$/;"	f	class:kaldi::nnet1::SentenceAveragingComponent
KALDI_NNET_NNET_TRNOPTS_H_	nnet/nnet-trnopts.h	21;"	d
NnetTrainOptions	nnet/nnet-trnopts.h	/^  NnetTrainOptions() : learn_rate(0.008),$/;"	f	struct:kaldi::nnet1::NnetTrainOptions
NnetTrainOptions	nnet/nnet-trnopts.h	/^struct NnetTrainOptions {$/;"	s	namespace:kaldi::nnet1
RbmTrainOptions	nnet/nnet-trnopts.h	/^  RbmTrainOptions() : learn_rate(0.4),$/;"	f	struct:kaldi::nnet1::RbmTrainOptions
RbmTrainOptions	nnet/nnet-trnopts.h	/^struct RbmTrainOptions {$/;"	s	namespace:kaldi::nnet1
Register	nnet/nnet-trnopts.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet1::NnetTrainOptions
Register	nnet/nnet-trnopts.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet1::RbmTrainOptions
kaldi	nnet/nnet-trnopts.h	/^namespace kaldi {$/;"	n
l1_penalty	nnet/nnet-trnopts.h	/^  BaseFloat l1_penalty;$/;"	m	struct:kaldi::nnet1::NnetTrainOptions
l2_penalty	nnet/nnet-trnopts.h	/^  BaseFloat l2_penalty;$/;"	m	struct:kaldi::nnet1::NnetTrainOptions
l2_penalty	nnet/nnet-trnopts.h	/^  BaseFloat l2_penalty;$/;"	m	struct:kaldi::nnet1::RbmTrainOptions
learn_rate	nnet/nnet-trnopts.h	/^  BaseFloat learn_rate;$/;"	m	struct:kaldi::nnet1::NnetTrainOptions
learn_rate	nnet/nnet-trnopts.h	/^  BaseFloat learn_rate;$/;"	m	struct:kaldi::nnet1::RbmTrainOptions
momentum	nnet/nnet-trnopts.h	/^  BaseFloat momentum;$/;"	m	struct:kaldi::nnet1::NnetTrainOptions
momentum	nnet/nnet-trnopts.h	/^  BaseFloat momentum;$/;"	m	struct:kaldi::nnet1::RbmTrainOptions
momentum_max	nnet/nnet-trnopts.h	/^  BaseFloat momentum_max;$/;"	m	struct:kaldi::nnet1::RbmTrainOptions
momentum_step_period	nnet/nnet-trnopts.h	/^  int32 momentum_step_period;$/;"	m	struct:kaldi::nnet1::RbmTrainOptions
momentum_steps	nnet/nnet-trnopts.h	/^  int32 momentum_steps;$/;"	m	struct:kaldi::nnet1::RbmTrainOptions
nnet1	nnet/nnet-trnopts.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
operator <<	nnet/nnet-trnopts.h	/^  friend std::ostream& operator<<(std::ostream& os, const NnetTrainOptions& opts) {$/;"	f	struct:kaldi::nnet1::NnetTrainOptions
operator <<	nnet/nnet-trnopts.h	/^  friend std::ostream& operator<<(std::ostream& os, const RbmTrainOptions& opts) {$/;"	f	struct:kaldi::nnet1::RbmTrainOptions
CheckNanInf	nnet/nnet-utils.h	/^void CheckNanInf(const CuMatrixBase<Real> &mat, const char *msg = "") {$/;"	f	namespace:kaldi::nnet1
ComputeStdDev	nnet/nnet-utils.h	/^Real ComputeStdDev(const CuMatrixBase<Real> &mat) {$/;"	f	namespace:kaldi::nnet1
KALDI_NNET_NNET_UTILS_H_	nnet/nnet-utils.h	22;"	d
MomentStatistics	nnet/nnet-utils.h	/^std::string MomentStatistics(const CuMatrixBase<Real> &mat) {$/;"	f	namespace:kaldi::nnet1
MomentStatistics	nnet/nnet-utils.h	/^std::string MomentStatistics(const CuVectorBase<Real> &vec) {$/;"	f	namespace:kaldi::nnet1
MomentStatistics	nnet/nnet-utils.h	/^std::string MomentStatistics(const MatrixBase<Real> &mat) {$/;"	f	namespace:kaldi::nnet1
MomentStatistics	nnet/nnet-utils.h	/^std::string MomentStatistics(const VectorBase<Real> &vec) {$/;"	f	namespace:kaldi::nnet1
PosteriorToMatrix	nnet/nnet-utils.h	/^void PosteriorToMatrix(const Posterior &post, int32 num_cols, CuMatrix<Real> *mat) {$/;"	f	namespace:kaldi::nnet1
PosteriorToMatrixMapped	nnet/nnet-utils.h	/^void PosteriorToMatrixMapped(const Posterior &post, const TransitionModel &model, CuMatrix<Real> *mat) {$/;"	f	namespace:kaldi::nnet1
ToString	nnet/nnet-utils.h	/^std::string ToString(const T& t) { $/;"	f	namespace:kaldi::nnet1
kaldi	nnet/nnet-utils.h	/^namespace kaldi {$/;"	n
nnet1	nnet/nnet-utils.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
AddShift	nnet/nnet-various.h	/^  AddShift(int32 dim_in, int32 dim_out)$/;"	f	class:kaldi::nnet1::AddShift
AddShift	nnet/nnet-various.h	/^class AddShift : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
BackpropagateFnc	nnet/nnet-various.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::AddShift
BackpropagateFnc	nnet/nnet-various.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::CopyComponent
BackpropagateFnc	nnet/nnet-various.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::Rescale
BackpropagateFnc	nnet/nnet-various.h	/^  void BackpropagateFnc(const CuMatrixBase<BaseFloat> &in, const CuMatrixBase<BaseFloat> &out,$/;"	f	class:kaldi::nnet1::Splice
Copy	nnet/nnet-various.h	/^  Component* Copy() const { return new AddShift(*this); }$/;"	f	class:kaldi::nnet1::AddShift
Copy	nnet/nnet-various.h	/^  Component* Copy() const { return new CopyComponent(*this); }$/;"	f	class:kaldi::nnet1::CopyComponent
Copy	nnet/nnet-various.h	/^  Component* Copy() const { return new Rescale(*this); }$/;"	f	class:kaldi::nnet1::Rescale
Copy	nnet/nnet-various.h	/^  Component* Copy() const { return new Splice(*this); }$/;"	f	class:kaldi::nnet1::Splice
CopyComponent	nnet/nnet-various.h	/^  CopyComponent(int32 dim_in, int32 dim_out)$/;"	f	class:kaldi::nnet1::CopyComponent
CopyComponent	nnet/nnet-various.h	/^class CopyComponent: public Component {$/;"	c	namespace:kaldi::nnet1
GetParams	nnet/nnet-various.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::AddShift
GetParams	nnet/nnet-various.h	/^  void GetParams(Vector<BaseFloat>* wei_copy) const {$/;"	f	class:kaldi::nnet1::Rescale
GetScaleVec	nnet/nnet-various.h	/^  const CuVectorBase<BaseFloat>& GetScaleVec() {$/;"	f	class:kaldi::nnet1::Rescale
GetShiftVec	nnet/nnet-various.h	/^  const CuVectorBase<BaseFloat>& GetShiftVec() {$/;"	f	class:kaldi::nnet1::AddShift
GetType	nnet/nnet-various.h	/^  ComponentType GetType() const { return kAddShift; }$/;"	f	class:kaldi::nnet1::AddShift
GetType	nnet/nnet-various.h	/^  ComponentType GetType() const { return kCopy; }$/;"	f	class:kaldi::nnet1::CopyComponent
GetType	nnet/nnet-various.h	/^  ComponentType GetType() const { return kRescale; }$/;"	f	class:kaldi::nnet1::Rescale
GetType	nnet/nnet-various.h	/^  ComponentType GetType() const { return kSplice; }$/;"	f	class:kaldi::nnet1::Splice
Info	nnet/nnet-various.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::AddShift
Info	nnet/nnet-various.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::CopyComponent
Info	nnet/nnet-various.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::Rescale
Info	nnet/nnet-various.h	/^  std::string Info() const {$/;"	f	class:kaldi::nnet1::Splice
InfoGradient	nnet/nnet-various.h	/^  std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::AddShift
InfoGradient	nnet/nnet-various.h	/^  std::string InfoGradient() const {$/;"	f	class:kaldi::nnet1::Rescale
InitData	nnet/nnet-various.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::AddShift
InitData	nnet/nnet-various.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::CopyComponent
InitData	nnet/nnet-various.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::Rescale
InitData	nnet/nnet-various.h	/^  void InitData(std::istream &is) {$/;"	f	class:kaldi::nnet1::Splice
KALDI_NNET_NNET_VARIOUS_H_	nnet/nnet-various.h	22;"	d
NumParams	nnet/nnet-various.h	/^  int32 NumParams() const { return scale_data_.Dim(); }$/;"	f	class:kaldi::nnet1::Rescale
NumParams	nnet/nnet-various.h	/^  int32 NumParams() const { return shift_data_.Dim(); }$/;"	f	class:kaldi::nnet1::AddShift
PropagateFnc	nnet/nnet-various.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) { $/;"	f	class:kaldi::nnet1::AddShift
PropagateFnc	nnet/nnet-various.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) { $/;"	f	class:kaldi::nnet1::CopyComponent
PropagateFnc	nnet/nnet-various.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) { $/;"	f	class:kaldi::nnet1::Rescale
PropagateFnc	nnet/nnet-various.h	/^  void PropagateFnc(const CuMatrixBase<BaseFloat> &in, CuMatrixBase<BaseFloat> *out) {$/;"	f	class:kaldi::nnet1::Splice
ReadData	nnet/nnet-various.h	/^  void ReadData(std::istream &is, bool binary) { $/;"	f	class:kaldi::nnet1::AddShift
ReadData	nnet/nnet-various.h	/^  void ReadData(std::istream &is, bool binary) { $/;"	f	class:kaldi::nnet1::CopyComponent
ReadData	nnet/nnet-various.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::Rescale
ReadData	nnet/nnet-various.h	/^  void ReadData(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet1::Splice
Rescale	nnet/nnet-various.h	/^  Rescale(int32 dim_in, int32 dim_out)$/;"	f	class:kaldi::nnet1::Rescale
Rescale	nnet/nnet-various.h	/^class Rescale : public UpdatableComponent {$/;"	c	namespace:kaldi::nnet1
SetLearnRateCoef	nnet/nnet-various.h	/^  void SetLearnRateCoef(float c) {$/;"	f	class:kaldi::nnet1::AddShift
SetLearnRateCoef	nnet/nnet-various.h	/^  void SetLearnRateCoef(float c) {$/;"	f	class:kaldi::nnet1::Rescale
SetScaleVec	nnet/nnet-various.h	/^  void SetScaleVec(const CuVectorBase<BaseFloat>& scale_data) {$/;"	f	class:kaldi::nnet1::Rescale
SetShiftVec	nnet/nnet-various.h	/^  void SetShiftVec(const CuVectorBase<BaseFloat>& shift_data) {$/;"	f	class:kaldi::nnet1::AddShift
Splice	nnet/nnet-various.h	/^  Splice(int32 dim_in, int32 dim_out)$/;"	f	class:kaldi::nnet1::Splice
Splice	nnet/nnet-various.h	/^class Splice: public Component {$/;"	c	namespace:kaldi::nnet1
Update	nnet/nnet-various.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::AddShift
Update	nnet/nnet-various.h	/^  void Update(const CuMatrixBase<BaseFloat> &input, const CuMatrixBase<BaseFloat> &diff) {$/;"	f	class:kaldi::nnet1::Rescale
WriteData	nnet/nnet-various.h	/^  void WriteData(std::ostream &os, bool binary) const { $/;"	f	class:kaldi::nnet1::AddShift
WriteData	nnet/nnet-various.h	/^  void WriteData(std::ostream &os, bool binary) const { $/;"	f	class:kaldi::nnet1::Rescale
WriteData	nnet/nnet-various.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::CopyComponent
WriteData	nnet/nnet-various.h	/^  void WriteData(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet1::Splice
copy_from_indices_	nnet/nnet-various.h	/^  CuArray<int32> copy_from_indices_;$/;"	m	class:kaldi::nnet1::CopyComponent
frame_offsets_	nnet/nnet-various.h	/^  CuArray<int32> frame_offsets_;$/;"	m	class:kaldi::nnet1::Splice
kaldi	nnet/nnet-various.h	/^namespace kaldi {$/;"	n
learn_rate_coef_	nnet/nnet-various.h	/^  BaseFloat learn_rate_coef_;$/;"	m	class:kaldi::nnet1::AddShift
learn_rate_coef_	nnet/nnet-various.h	/^  BaseFloat learn_rate_coef_;$/;"	m	class:kaldi::nnet1::Rescale
nnet1	nnet/nnet-various.h	/^namespace nnet1 {$/;"	n	namespace:kaldi
op_decrease	nnet/nnet-various.h	/^  static int32 op_decrease (int32 i) { return --i; }$/;"	f	class:kaldi::nnet1::CopyComponent
op_increase	nnet/nnet-various.h	/^  static int32 op_increase (int32 i) { return ++i; }$/;"	f	class:kaldi::nnet1::CopyComponent
scale_data_	nnet/nnet-various.h	/^  CuVector<BaseFloat> scale_data_;$/;"	m	class:kaldi::nnet1::Rescale
scale_data_grad_	nnet/nnet-various.h	/^  CuVector<BaseFloat> scale_data_grad_;$/;"	m	class:kaldi::nnet1::Rescale
shift_data_	nnet/nnet-various.h	/^  CuVector<BaseFloat> shift_data_;$/;"	m	class:kaldi::nnet1::AddShift
shift_data_grad_	nnet/nnet-various.h	/^  CuVector<BaseFloat> shift_data_grad_;$/;"	m	class:kaldi::nnet1::AddShift
~AddShift	nnet/nnet-various.h	/^  ~AddShift()$/;"	f	class:kaldi::nnet1::AddShift
~CopyComponent	nnet/nnet-various.h	/^  ~CopyComponent()$/;"	f	class:kaldi::nnet1::CopyComponent
~Rescale	nnet/nnet-various.h	/^  ~Rescale()$/;"	f	class:kaldi::nnet1::Rescale
~Splice	nnet/nnet-various.h	/^  ~Splice()$/;"	f	class:kaldi::nnet1::Splice
ADDLIBS	nnet2/Makefile	/^ADDLIBS = ..\/thread\/kaldi-thread.a ..\/lat\/kaldi-lat.a ..\/gmm\/kaldi-gmm.a \\$/;"	m
LIBNAME	nnet2/Makefile	/^LIBNAME = kaldi-nnet2$/;"	m
OBJFILES	nnet2/Makefile	/^OBJFILES = nnet-component.o nnet-nnet.o train-nnet.o train-nnet-ensemble.o nnet-update.o \\$/;"	m
TESTFILES	nnet2/Makefile	/^TESTFILES = nnet-component-test nnet-precondition-test \\$/;"	m
UnitTestAmNnet	nnet2/am-nnet-test.cc	/^void UnitTestAmNnet() {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/am-nnet-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2/am-nnet-test.cc	/^int main() {$/;"	f
nnet2	nnet2/am-nnet-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
Info	nnet2/am-nnet.cc	/^std::string AmNnet::Info() const {$/;"	f	class:kaldi::nnet2::AmNnet
Init	nnet2/am-nnet.cc	/^void AmNnet::Init(const Nnet &nnet) {$/;"	f	class:kaldi::nnet2::AmNnet
Init	nnet2/am-nnet.cc	/^void AmNnet::Init(std::istream &config_is) {$/;"	f	class:kaldi::nnet2::AmNnet
Read	nnet2/am-nnet.cc	/^void AmNnet::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AmNnet
ResizeOutputLayer	nnet2/am-nnet.cc	/^void AmNnet::ResizeOutputLayer(int32 new_num_pdfs) {$/;"	f	class:kaldi::nnet2::AmNnet
SetPriors	nnet2/am-nnet.cc	/^void AmNnet::SetPriors(const VectorBase<BaseFloat> &priors) {$/;"	f	class:kaldi::nnet2::AmNnet
Write	nnet2/am-nnet.cc	/^void AmNnet::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AmNnet
kaldi	nnet2/am-nnet.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/am-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
AmNnet	nnet2/am-nnet.h	/^  AmNnet() { }$/;"	f	class:kaldi::nnet2::AmNnet
AmNnet	nnet2/am-nnet.h	/^  AmNnet(const AmNnet &other): nnet_(other.nnet_), priors_(other.priors_) { }$/;"	f	class:kaldi::nnet2::AmNnet
AmNnet	nnet2/am-nnet.h	/^  explicit AmNnet(const Nnet &nnet): nnet_(nnet) { }$/;"	f	class:kaldi::nnet2::AmNnet
AmNnet	nnet2/am-nnet.h	/^class AmNnet {$/;"	c	namespace:kaldi::nnet2
GetNnet	nnet2/am-nnet.h	/^  Nnet &GetNnet() { return nnet_; }$/;"	f	class:kaldi::nnet2::AmNnet
GetNnet	nnet2/am-nnet.h	/^  const Nnet &GetNnet() const { return nnet_; }$/;"	f	class:kaldi::nnet2::AmNnet
KALDI_NNET2_AM_NNET_H_	nnet2/am-nnet.h	21;"	d
NumPdfs	nnet2/am-nnet.h	/^  int32 NumPdfs() const { return nnet_.OutputDim(); }$/;"	f	class:kaldi::nnet2::AmNnet
Priors	nnet2/am-nnet.h	/^  const VectorBase<BaseFloat> &Priors() const { return priors_; }$/;"	f	class:kaldi::nnet2::AmNnet
kaldi	nnet2/am-nnet.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/am-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet_	nnet2/am-nnet.h	/^  Nnet nnet_;$/;"	m	class:kaldi::nnet2::AmNnet
priors_	nnet2/am-nnet.h	/^  Vector<BaseFloat> priors_;$/;"	m	class:kaldi::nnet2::AmNnet
AddDirection	nnet2/combine-nnet-a.cc	/^static void AddDirection(const Nnet &orig_nnet,$/;"	f	namespace:kaldi::nnet2
CombineNnetsA	nnet2/combine-nnet-a.cc	/^void CombineNnetsA(const NnetCombineAconfig &config,$/;"	f	namespace:kaldi::nnet2
ComputeObjfAndGradient	nnet2/combine-nnet-a.cc	/^static BaseFloat ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
GetUpdateDirection	nnet2/combine-nnet-a.cc	/^static void GetUpdateDirection(const std::vector<Nnet> &nnets,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/combine-nnet-a.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/combine-nnet-a.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_COMBINE_NNET_A_H_	nnet2/combine-nnet-a.h	21;"	d
NnetCombineAconfig	nnet2/combine-nnet-a.h	/^  NnetCombineAconfig(): num_bfgs_iters(15), initial_step(0.1),$/;"	f	struct:kaldi::nnet2::NnetCombineAconfig
NnetCombineAconfig	nnet2/combine-nnet-a.h	/^struct NnetCombineAconfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/combine-nnet-a.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineAconfig
initial_step	nnet2/combine-nnet-a.h	/^  BaseFloat initial_step;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
kaldi	nnet2/combine-nnet-a.h	/^namespace kaldi {$/;"	n
max_learning_rate_factor	nnet2/combine-nnet-a.h	/^  BaseFloat max_learning_rate_factor; \/\/ 2.0 by default.$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
min_learning_rate	nnet2/combine-nnet-a.h	/^  BaseFloat min_learning_rate; \/\/ 0.0001 by default; we don't allow learning rate to go below$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
min_learning_rate_factor	nnet2/combine-nnet-a.h	/^  BaseFloat min_learning_rate_factor; \/\/ 0.5 by default;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
nnet2	nnet2/combine-nnet-a.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_bfgs_iters	nnet2/combine-nnet-a.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (the number of layers)$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
overshoot	nnet2/combine-nnet-a.h	/^  BaseFloat overshoot;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
valid_impr_thresh	nnet2/combine-nnet-a.h	/^  BaseFloat valid_impr_thresh;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
C_	nnet2/combine-nnet-fast.cc	/^  TpMatrix<double> C_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
C_inv_	nnet2/combine-nnet-fast.cc	/^  TpMatrix<double> C_inv_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
CombineNnets	nnet2/combine-nnet-fast.cc	/^void FastNnetCombiner::CombineNnets(const Vector<double> &scale_params,$/;"	f	class:kaldi::nnet2::FastNnetCombiner
CombineNnetsFast	nnet2/combine-nnet-fast.cc	/^void CombineNnetsFast(const NnetCombineFastConfig &combine_config,$/;"	f	namespace:kaldi::nnet2
ComputeCurrentNnet	nnet2/combine-nnet-fast.cc	/^void FastNnetCombiner::ComputeCurrentNnet($/;"	f	class:kaldi::nnet2::FastNnetCombiner
ComputeObjfAndGradient	nnet2/combine-nnet-fast.cc	/^double FastNnetCombiner::ComputeObjfAndGradient($/;"	f	class:kaldi::nnet2::FastNnetCombiner
ComputePreconditioner	nnet2/combine-nnet-fast.cc	/^void FastNnetCombiner::ComputePreconditioner() {$/;"	f	class:kaldi::nnet2::FastNnetCombiner
FastNnetCombiner	nnet2/combine-nnet-fast.cc	/^  FastNnetCombiner(const NnetCombineFastConfig &combine_config,$/;"	f	class:kaldi::nnet2::FastNnetCombiner
FastNnetCombiner	nnet2/combine-nnet-fast.cc	/^class FastNnetCombiner {$/;"	c	namespace:kaldi::nnet2	file:
FisherComputationClass	nnet2/combine-nnet-fast.cc	/^  FisherComputationClass(const FisherComputationClass &other):$/;"	f	class:kaldi::nnet2::FisherComputationClass
FisherComputationClass	nnet2/combine-nnet-fast.cc	/^  FisherComputationClass(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::FisherComputationClass
FisherComputationClass	nnet2/combine-nnet-fast.cc	/^class FisherComputationClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
GetInitialModel	nnet2/combine-nnet-fast.cc	/^int32 FastNnetCombiner::GetInitialModel($/;"	f	class:kaldi::nnet2::FastNnetCombiner
GetInitialParams	nnet2/combine-nnet-fast.cc	/^void FastNnetCombiner::GetInitialParams() {$/;"	f	class:kaldi::nnet2::FastNnetCombiner
config_	nnet2/combine-nnet-fast.cc	/^  const NnetCombineFastConfig &config_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
egs_	nnet2/combine-nnet-fast.cc	/^  const std::vector<NnetExample> &egs_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
egs_	nnet2/combine-nnet-fast.cc	/^  const std::vector<NnetExample> &egs_;$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
kaldi	nnet2/combine-nnet-fast.cc	/^namespace kaldi {$/;"	n	file:
minibatch_size_	nnet2/combine-nnet-fast.cc	/^  int32 minibatch_size_; \/\/ equals config --fisher-minbatch-size e.g. 64 (smaller than$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
nnet2	nnet2/combine-nnet-fast.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_	nnet2/combine-nnet-fast.cc	/^  const Nnet &nnet_; \/\/ point at which we compute the parameter gradients.$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
nnet_out_	nnet2/combine-nnet-fast.cc	/^  Nnet *nnet_out_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
nnets_	nnet2/combine-nnet-fast.cc	/^  const std::vector<Nnet> &nnets_; \/\/ The dot-product  of each of these with the parameter gradients,$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
nnets_	nnet2/combine-nnet-fast.cc	/^  const std::vector<Nnet> &nnets_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
operator ()	nnet2/combine-nnet-fast.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::FisherComputationClass
params_	nnet2/combine-nnet-fast.cc	/^  Vector<double> params_; \/\/ the parameters we're optimizing-- in the$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
scatter_	nnet2/combine-nnet-fast.cc	/^  SpMatrix<double> scatter_; \/\/ Local accumulation of the scatter.  $/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
scatter_ptr_	nnet2/combine-nnet-fast.cc	/^  SpMatrix<double> *scatter_ptr_;$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
~FisherComputationClass	nnet2/combine-nnet-fast.cc	/^  ~FisherComputationClass() {$/;"	f	class:kaldi::nnet2::FisherComputationClass
KALDI_NNET2_COMBINE_NNET_FAST_H_	nnet2/combine-nnet-fast.h	21;"	d
NnetCombineFastConfig	nnet2/combine-nnet-fast.h	/^  NnetCombineFastConfig(): initial_model(-1), num_lbfgs_iters(10),$/;"	f	struct:kaldi::nnet2::NnetCombineFastConfig
NnetCombineFastConfig	nnet2/combine-nnet-fast.h	/^struct NnetCombineFastConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/combine-nnet-fast.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineFastConfig
alpha	nnet2/combine-nnet-fast.h	/^  BaseFloat alpha; \/\/ A smoothing value we use in getting the Fisher matrix.$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
fisher_floor	nnet2/combine-nnet-fast.h	/^  BaseFloat fisher_floor; \/\/ Flooring value we use for Fisher matrix (mainly$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
fisher_minibatch_size	nnet2/combine-nnet-fast.h	/^  int32 fisher_minibatch_size; \/\/ e.g. 64; a relatively small minibatch size we$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
initial_impr	nnet2/combine-nnet-fast.h	/^  BaseFloat initial_impr;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
initial_model	nnet2/combine-nnet-fast.h	/^  int32 initial_model; \/\/ If provided, the index of the initial model to start$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi	nnet2/combine-nnet-fast.h	/^namespace kaldi {$/;"	n
max_lbfgs_dim	nnet2/combine-nnet-fast.h	/^  int32 max_lbfgs_dim;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
minibatch_size	nnet2/combine-nnet-fast.h	/^  int32 minibatch_size; \/\/ e.g. 1028; a larger minibatch size we use in$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
nnet2	nnet2/combine-nnet-fast.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_lbfgs_iters	nnet2/combine-nnet-fast.h	/^  int32 num_lbfgs_iters; $/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
num_threads	nnet2/combine-nnet-fast.h	/^  int32 num_threads;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
regularizer	nnet2/combine-nnet-fast.h	/^  BaseFloat regularizer;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
CombineNnets	nnet2/combine-nnet.cc	/^static void CombineNnets(const Vector<BaseFloat> &scale_params,$/;"	f	namespace:kaldi::nnet2
CombineNnets	nnet2/combine-nnet.cc	/^void CombineNnets(const NnetCombineConfig &combine_config,$/;"	f	namespace:kaldi::nnet2
ComputeObjfAndGradient	nnet2/combine-nnet.cc	/^static double ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
GetInitialModel	nnet2/combine-nnet.cc	/^static int32 GetInitialModel($/;"	f	namespace:kaldi::nnet2
GetInitialScaleParams	nnet2/combine-nnet.cc	/^static void GetInitialScaleParams($/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/combine-nnet.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/combine-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_COMBINE_NNET_H_	nnet2/combine-nnet.h	21;"	d
NnetCombineConfig	nnet2/combine-nnet.h	/^  NnetCombineConfig(): initial_model(-1), num_bfgs_iters(30),$/;"	f	struct:kaldi::nnet2::NnetCombineConfig
NnetCombineConfig	nnet2/combine-nnet.h	/^struct NnetCombineConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/combine-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineConfig
initial_impr	nnet2/combine-nnet.h	/^  BaseFloat initial_impr;$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
initial_model	nnet2/combine-nnet.h	/^  int32 initial_model; \/\/ If provided, the index of the initial model to start$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
kaldi	nnet2/combine-nnet.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/combine-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_bfgs_iters	nnet2/combine-nnet.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (e.g. 3 to 5 times the$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
test_gradient	nnet2/combine-nnet.h	/^  bool test_gradient;$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
Compute	nnet2/decodable-am-nnet.h	/^  void Compute() {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
DecodableAmNnet	nnet2/decodable-am-nnet.h	/^  DecodableAmNnet(const TransitionModel &trans_model,$/;"	f	class:kaldi::nnet2::DecodableAmNnet
DecodableAmNnet	nnet2/decodable-am-nnet.h	/^class DecodableAmNnet: public DecodableInterface {$/;"	c	namespace:kaldi::nnet2
DecodableAmNnetParallel	nnet2/decodable-am-nnet.h	/^  DecodableAmNnetParallel($/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
DecodableAmNnetParallel	nnet2/decodable-am-nnet.h	/^class DecodableAmNnetParallel: public DecodableInterface {$/;"	c	namespace:kaldi::nnet2
IsLastFrame	nnet2/decodable-am-nnet.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::nnet2::DecodableAmNnet
IsLastFrame	nnet2/decodable-am-nnet.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
KALDI_NNET2_DECODABLE_AM_NNET_H_	nnet2/decodable-am-nnet.h	21;"	d
LogLikelihood	nnet2/decodable-am-nnet.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 transition_id) {$/;"	f	class:kaldi::nnet2::DecodableAmNnet
LogLikelihood	nnet2/decodable-am-nnet.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 transition_id) {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
NumFramesReady	nnet2/decodable-am-nnet.h	/^  int32 NumFramesReady() const {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
NumFramesReady	nnet2/decodable-am-nnet.h	/^  virtual int32 NumFramesReady() const { return log_probs_.NumRows(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnet
NumIndices	nnet2/decodable-am-nnet.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnet
NumIndices	nnet2/decodable-am-nnet.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
am_nnet_	nnet2/decodable-am-nnet.h	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
feats_	nnet2/decodable-am-nnet.h	/^  const CuMatrix<BaseFloat> *feats_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi	nnet2/decodable-am-nnet.h	/^namespace kaldi {$/;"	n
log_probs_	nnet2/decodable-am-nnet.h	/^  CuMatrix<BaseFloat> log_probs_; \/\/ actually not really probabilities, since we divide$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
log_probs_	nnet2/decodable-am-nnet.h	/^  Matrix<BaseFloat> log_probs_; \/\/ actually not really probabilities, since we divide$/;"	m	class:kaldi::nnet2::DecodableAmNnet
nnet2	nnet2/decodable-am-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
pad_input_	nnet2/decodable-am-nnet.h	/^  bool pad_input_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
prob_scale_	nnet2/decodable-am-nnet.h	/^  BaseFloat prob_scale_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
trans_model_	nnet2/decodable-am-nnet.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::nnet2::DecodableAmNnet
trans_model_	nnet2/decodable-am-nnet.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
~DecodableAmNnetParallel	nnet2/decodable-am-nnet.h	/^  ~DecodableAmNnetParallel() {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
Estimate	nnet2/get-feature-transform.cc	/^void FeatureTransformEstimate::Estimate(const FeatureTransformEstimateOptions &opts,$/;"	f	class:kaldi::FeatureTransformEstimate
Estimate	nnet2/get-feature-transform.cc	/^void FeatureTransformEstimateMulti::Estimate($/;"	f	class:kaldi::FeatureTransformEstimateMulti
EstimateInternal	nnet2/get-feature-transform.cc	/^void FeatureTransformEstimate::EstimateInternal($/;"	f	class:kaldi::FeatureTransformEstimate
EstimateTransformPart	nnet2/get-feature-transform.cc	/^void FeatureTransformEstimateMulti::EstimateTransformPart($/;"	f	class:kaldi::FeatureTransformEstimateMulti
kaldi	nnet2/get-feature-transform.cc	/^namespace kaldi {$/;"	n	file:
FeatureTransformEstimate	nnet2/get-feature-transform.h	/^class FeatureTransformEstimate: public LdaEstimate {$/;"	c	namespace:kaldi
FeatureTransformEstimateMulti	nnet2/get-feature-transform.h	/^class FeatureTransformEstimateMulti: public FeatureTransformEstimate {$/;"	c	namespace:kaldi
FeatureTransformEstimateOptions	nnet2/get-feature-transform.h	/^  FeatureTransformEstimateOptions(): remove_offset(true), dim(200),$/;"	f	struct:kaldi::FeatureTransformEstimateOptions
FeatureTransformEstimateOptions	nnet2/get-feature-transform.h	/^struct FeatureTransformEstimateOptions {$/;"	s	namespace:kaldi
KALDI_NNET2_GET_FEATURE_TRANSFORM_H_	nnet2/get-feature-transform.h	22;"	d
Register	nnet2/get-feature-transform.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FeatureTransformEstimateOptions
dim	nnet2/get-feature-transform.h	/^  int32 dim;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
kaldi	nnet2/get-feature-transform.h	/^namespace kaldi {$/;"	n
max_singular_value	nnet2/get-feature-transform.h	/^  BaseFloat max_singular_value;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
remove_offset	nnet2/get-feature-transform.h	/^  bool remove_offset;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
within_class_factor	nnet2/get-feature-transform.h	/^  BaseFloat within_class_factor;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
GiveNnetCorrectTopology	nnet2/mixup-nnet.cc	/^static void GiveNnetCorrectTopology(Nnet *nnet,$/;"	f	namespace:kaldi::nnet2
MixUp	nnet2/mixup-nnet.cc	/^void SoftmaxComponent::MixUp(int32 num_mixtures,$/;"	f	class:kaldi::nnet2::SoftmaxComponent
MixupNnet	nnet2/mixup-nnet.cc	/^void MixupNnet(const NnetMixupConfig &mixup_config,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/mixup-nnet.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/mixup-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_MIXUP_NNET_H_	nnet2/mixup-nnet.h	21;"	d
NnetMixupConfig	nnet2/mixup-nnet.h	/^  NnetMixupConfig(): power(0.25), min_count(1000.0),$/;"	f	struct:kaldi::nnet2::NnetMixupConfig
NnetMixupConfig	nnet2/mixup-nnet.h	/^struct NnetMixupConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/mixup-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetMixupConfig
kaldi	nnet2/mixup-nnet.h	/^namespace kaldi {$/;"	n
min_count	nnet2/mixup-nnet.h	/^  BaseFloat min_count;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
nnet2	nnet2/mixup-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_mixtures	nnet2/mixup-nnet.h	/^  int32 num_mixtures;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
perturb_stddev	nnet2/mixup-nnet.h	/^  BaseFloat perturb_stddev;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
power	nnet2/mixup-nnet.h	/^  BaseFloat power;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
BasicDebugTestForSpliceMax	nnet2/nnet-component-test.cc	/^void BasicDebugTestForSpliceMax(bool output=false) {$/;"	f	namespace:kaldi::nnet2
UnitTestAdditiveNoiseComponent	nnet2/nnet-component-test.cc	/^void UnitTestAdditiveNoiseComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestAffineComponent	nnet2/nnet-component-test.cc	/^void UnitTestAffineComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestAffineComponentPreconditioned	nnet2/nnet-component-test.cc	/^void UnitTestAffineComponentPreconditioned() {$/;"	f	namespace:kaldi::nnet2
UnitTestAffineComponentPreconditionedOnline	nnet2/nnet-component-test.cc	/^void UnitTestAffineComponentPreconditionedOnline() {$/;"	f	namespace:kaldi::nnet2
UnitTestBlockAffineComponent	nnet2/nnet-component-test.cc	/^void UnitTestBlockAffineComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestBlockAffineComponentPreconditioned	nnet2/nnet-component-test.cc	/^void UnitTestBlockAffineComponentPreconditioned() {$/;"	f	namespace:kaldi::nnet2
UnitTestDctComponent	nnet2/nnet-component-test.cc	/^void UnitTestDctComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestDropoutComponent	nnet2/nnet-component-test.cc	/^void UnitTestDropoutComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestFixedAffineComponent	nnet2/nnet-component-test.cc	/^void UnitTestFixedAffineComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestFixedBiasComponent	nnet2/nnet-component-test.cc	/^void UnitTestFixedBiasComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestFixedLinearComponent	nnet2/nnet-component-test.cc	/^void UnitTestFixedLinearComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestFixedScaleComponent	nnet2/nnet-component-test.cc	/^void UnitTestFixedScaleComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestGenericComponent	nnet2/nnet-component-test.cc	/^void UnitTestGenericComponent(std::string extra_str = "") {$/;"	f	namespace:kaldi::nnet2
UnitTestGenericComponentInternal	nnet2/nnet-component-test.cc	/^void UnitTestGenericComponentInternal(const Component &component) {$/;"	f	namespace:kaldi::nnet2
UnitTestGenericComponentInternal	nnet2/nnet-component-test.cc	/^void UnitTestGenericComponentInternal(const Component &component,$/;"	f	namespace:kaldi::nnet2
UnitTestMaxoutComponent	nnet2/nnet-component-test.cc	/^void UnitTestMaxoutComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestParsing	nnet2/nnet-component-test.cc	/^void UnitTestParsing() {$/;"	f	namespace:kaldi::nnet2
UnitTestPnormComponent	nnet2/nnet-component-test.cc	/^void UnitTestPnormComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestScaleComponent	nnet2/nnet-component-test.cc	/^void UnitTestScaleComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestSigmoidComponent	nnet2/nnet-component-test.cc	/^void UnitTestSigmoidComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestSpliceComponent	nnet2/nnet-component-test.cc	/^void UnitTestSpliceComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestSumGroupComponent	nnet2/nnet-component-test.cc	/^void UnitTestSumGroupComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-component-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2/nnet-component-test.cc	/^int main() {$/;"	f
nnet2	nnet2/nnet-component-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
Add	nnet2/nnet-component.cc	/^void AffineComponent::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::AffineComponent
Add	nnet2/nnet-component.cc	/^void BlockAffineComponent::Add(BaseFloat alpha,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Add	nnet2/nnet-component.cc	/^void NonlinearComponent::Add(BaseFloat alpha, const NonlinearComponent &other) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
AffineComponent	nnet2/nnet-component.cc	/^AffineComponent::AffineComponent(const AffineComponent &component):$/;"	f	class:kaldi::nnet2::AffineComponent
AffineComponent	nnet2/nnet-component.cc	/^AffineComponent::AffineComponent(const CuMatrixBase<BaseFloat> &linear_params,$/;"	f	class:kaldi::nnet2::AffineComponent
AffineComponentPreconditionedOnline	nnet2/nnet-component.cc	/^AffineComponentPreconditionedOnline::AffineComponentPreconditionedOnline($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Backprop	nnet2/nnet-component.cc	/^void AffineComponent::Backprop(const ChunkInfo &, \/\/in_info,$/;"	f	class:kaldi::nnet2::AffineComponent
Backprop	nnet2/nnet-component.cc	/^void BlockAffineComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Backprop	nnet2/nnet-component.cc	/^void DctComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::DctComponent
Backprop	nnet2/nnet-component.cc	/^void DropoutComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::DropoutComponent
Backprop	nnet2/nnet-component.cc	/^void FixedAffineComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Backprop	nnet2/nnet-component.cc	/^void FixedBiasComponent::Backprop(const ChunkInfo &, \/\/in_info,$/;"	f	class:kaldi::nnet2::FixedBiasComponent
Backprop	nnet2/nnet-component.cc	/^void FixedLinearComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Backprop	nnet2/nnet-component.cc	/^void FixedScaleComponent::Backprop(const ChunkInfo &, \/\/in_info,$/;"	f	class:kaldi::nnet2::FixedScaleComponent
Backprop	nnet2/nnet-component.cc	/^void MaxoutComponent::Backprop(const ChunkInfo &, \/\/ in_info,$/;"	f	class:kaldi::nnet2::MaxoutComponent
Backprop	nnet2/nnet-component.cc	/^void NormalizeComponent::Backprop(const ChunkInfo &,  \/\/ in_info,$/;"	f	class:kaldi::nnet2::NormalizeComponent
Backprop	nnet2/nnet-component.cc	/^void PermuteComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::PermuteComponent
Backprop	nnet2/nnet-component.cc	/^void PnormComponent::Backprop(const ChunkInfo &,  \/\/ in_info,$/;"	f	class:kaldi::nnet2::PnormComponent
Backprop	nnet2/nnet-component.cc	/^void PowerComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::PowerComponent
Backprop	nnet2/nnet-component.cc	/^void RectifiedLinearComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
Backprop	nnet2/nnet-component.cc	/^void ScaleComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::ScaleComponent
Backprop	nnet2/nnet-component.cc	/^void SigmoidComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::SigmoidComponent
Backprop	nnet2/nnet-component.cc	/^void SoftHingeComponent::Backprop(const ChunkInfo &,  \/\/in_info,$/;"	f	class:kaldi::nnet2::SoftHingeComponent
Backprop	nnet2/nnet-component.cc	/^void SoftmaxComponent::Backprop(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SoftmaxComponent
Backprop	nnet2/nnet-component.cc	/^void SpliceComponent::Backprop(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SpliceComponent
Backprop	nnet2/nnet-component.cc	/^void SpliceMaxComponent::Backprop(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Backprop	nnet2/nnet-component.cc	/^void SumGroupComponent::Backprop(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SumGroupComponent
Backprop	nnet2/nnet-component.cc	/^void TanhComponent::Backprop(const ChunkInfo &, \/\/in_info,$/;"	f	class:kaldi::nnet2::TanhComponent
Check	nnet2/nnet-component.cc	/^void ChunkInfo::Check() const {$/;"	f	class:kaldi::nnet2::ChunkInfo
CheckSize	nnet2/nnet-component.cc	/^void ChunkInfo::CheckSize(const CuMatrixBase<BaseFloat> &mat) const {$/;"	f	class:kaldi::nnet2::ChunkInfo
CollapseWithNext	nnet2/nnet-component.cc	/^Component *AffineComponent::CollapseWithNext($/;"	f	class:kaldi::nnet2::AffineComponent
CollapseWithPrevious	nnet2/nnet-component.cc	/^Component *AffineComponent::CollapseWithPrevious($/;"	f	class:kaldi::nnet2::AffineComponent
Copy	nnet2/nnet-component.cc	/^Component *PermuteComponent::Copy() const {$/;"	f	class:kaldi::nnet2::PermuteComponent
Copy	nnet2/nnet-component.cc	/^Component *SpliceComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
Copy	nnet2/nnet-component.cc	/^Component *SpliceMaxComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Copy	nnet2/nnet-component.cc	/^Component* AffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponent
Copy	nnet2/nnet-component.cc	/^Component* AffineComponentPreconditioned::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Copy	nnet2/nnet-component.cc	/^Component* AffineComponentPreconditionedOnline::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Copy	nnet2/nnet-component.cc	/^Component* BlockAffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Copy	nnet2/nnet-component.cc	/^Component* BlockAffineComponentPreconditioned::Copy() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Copy	nnet2/nnet-component.cc	/^Component* DctComponent::Copy() const {$/;"	f	class:kaldi::nnet2::DctComponent
Copy	nnet2/nnet-component.cc	/^Component* DropoutComponent::Copy() const {$/;"	f	class:kaldi::nnet2::DropoutComponent
Copy	nnet2/nnet-component.cc	/^Component* FixedAffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Copy	nnet2/nnet-component.cc	/^Component* FixedBiasComponent::Copy() const {$/;"	f	class:kaldi::nnet2::FixedBiasComponent
Copy	nnet2/nnet-component.cc	/^Component* FixedLinearComponent::Copy() const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Copy	nnet2/nnet-component.cc	/^Component* FixedScaleComponent::Copy() const {$/;"	f	class:kaldi::nnet2::FixedScaleComponent
Copy	nnet2/nnet-component.cc	/^Component* SumGroupComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
DotProduct	nnet2/nnet-component.cc	/^BaseFloat AffineComponent::DotProduct(const UpdatableComponent &other_in) const {$/;"	f	class:kaldi::nnet2::AffineComponent
DotProduct	nnet2/nnet-component.cc	/^BaseFloat BlockAffineComponent::DotProduct($/;"	f	class:kaldi::nnet2::BlockAffineComponent
ExpectOneOrTwoTokens	nnet2/nnet-component.cc	/^static void ExpectOneOrTwoTokens(std::istream &is, bool binary,$/;"	f	namespace:kaldi::nnet2
GetIndex	nnet2/nnet-component.cc	/^int32 ChunkInfo::GetIndex(int32 offset) const  {$/;"	f	class:kaldi::nnet2::ChunkInfo
GetOffset	nnet2/nnet-component.cc	/^int32 ChunkInfo::GetOffset(int32 index) const {$/;"	f	class:kaldi::nnet2::ChunkInfo
GetParameterDim	nnet2/nnet-component.cc	/^int32 AffineComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::AffineComponent
GetParameterDim	nnet2/nnet-component.cc	/^int32 BlockAffineComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
GetScalingFactor	nnet2/nnet-component.cc	/^BaseFloat AffineComponentPreconditioned::GetScalingFactor($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
GetScalingFactor	nnet2/nnet-component.cc	/^BaseFloat AffineComponentPreconditionedOnline::GetScalingFactor($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
GetSizes	nnet2/nnet-component.cc	/^void SumGroupComponent::GetSizes(std::vector<int32> *sizes) const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
Info	nnet2/nnet-component.cc	/^std::string AffineComponent::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponent
Info	nnet2/nnet-component.cc	/^std::string AffineComponentPreconditioned::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Info	nnet2/nnet-component.cc	/^std::string AffineComponentPreconditionedOnline::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Info	nnet2/nnet-component.cc	/^std::string Component::Info() const {$/;"	f	class:kaldi::nnet2::Component
Info	nnet2/nnet-component.cc	/^std::string DctComponent::Info() const {$/;"	f	class:kaldi::nnet2::DctComponent
Info	nnet2/nnet-component.cc	/^std::string DropoutComponent::Info() const {$/;"	f	class:kaldi::nnet2::DropoutComponent
Info	nnet2/nnet-component.cc	/^std::string FixedAffineComponent::Info() const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Info	nnet2/nnet-component.cc	/^std::string FixedBiasComponent::Info() const {$/;"	f	class:kaldi::nnet2::FixedBiasComponent
Info	nnet2/nnet-component.cc	/^std::string FixedLinearComponent::Info() const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Info	nnet2/nnet-component.cc	/^std::string FixedScaleComponent::Info() const {$/;"	f	class:kaldi::nnet2::FixedScaleComponent
Info	nnet2/nnet-component.cc	/^std::string MaxoutComponent::Info() const {$/;"	f	class:kaldi::nnet2::MaxoutComponent
Info	nnet2/nnet-component.cc	/^std::string PnormComponent::Info() const {$/;"	f	class:kaldi::nnet2::PnormComponent
Info	nnet2/nnet-component.cc	/^std::string PowerComponent::Info() const {$/;"	f	class:kaldi::nnet2::PowerComponent
Info	nnet2/nnet-component.cc	/^std::string ScaleComponent::Info() const {$/;"	f	class:kaldi::nnet2::ScaleComponent
Info	nnet2/nnet-component.cc	/^std::string SpliceComponent::Info() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
Info	nnet2/nnet-component.cc	/^std::string SpliceMaxComponent::Info() const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Info	nnet2/nnet-component.cc	/^std::string UpdatableComponent::Info() const {$/;"	f	class:kaldi::nnet2::UpdatableComponent
Init	nnet2/nnet-component.cc	/^void AdditiveNoiseComponent::Init(int32 dim, BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Init	nnet2/nnet-component.cc	/^void AffineComponent::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::AffineComponent
Init	nnet2/nnet-component.cc	/^void AffineComponentPreconditioned::Init($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Init	nnet2/nnet-component.cc	/^void AffineComponentPreconditioned::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Init	nnet2/nnet-component.cc	/^void AffineComponentPreconditionedOnline::Init($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Init	nnet2/nnet-component.cc	/^void BlockAffineComponent::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Init	nnet2/nnet-component.cc	/^void BlockAffineComponentPreconditioned::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Init	nnet2/nnet-component.cc	/^void DctComponent::Init(int32 dim, int32 dct_dim, bool reorder, int32 dct_keep_dim) {$/;"	f	class:kaldi::nnet2::DctComponent
Init	nnet2/nnet-component.cc	/^void DropoutComponent::Init(int32 dim,$/;"	f	class:kaldi::nnet2::DropoutComponent
Init	nnet2/nnet-component.cc	/^void FixedAffineComponent::Init(const CuMatrixBase<BaseFloat> &mat) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Init	nnet2/nnet-component.cc	/^void FixedBiasComponent::Init(const CuVectorBase<BaseFloat> &bias) {$/;"	f	class:kaldi::nnet2::FixedBiasComponent
Init	nnet2/nnet-component.cc	/^void FixedScaleComponent::Init(const CuVectorBase<BaseFloat> &scales) {$/;"	f	class:kaldi::nnet2::FixedScaleComponent
Init	nnet2/nnet-component.cc	/^void MaxoutComponent::Init(int32 input_dim, int32 output_dim)  {$/;"	f	class:kaldi::nnet2::MaxoutComponent
Init	nnet2/nnet-component.cc	/^void PermuteComponent::Init(const std::vector<int32> &reorder) {$/;"	f	class:kaldi::nnet2::PermuteComponent
Init	nnet2/nnet-component.cc	/^void PermuteComponent::Init(int32 dim) {$/;"	f	class:kaldi::nnet2::PermuteComponent
Init	nnet2/nnet-component.cc	/^void PnormComponent::Init(int32 input_dim, int32 output_dim, BaseFloat p)  {$/;"	f	class:kaldi::nnet2::PnormComponent
Init	nnet2/nnet-component.cc	/^void PowerComponent::Init(int32 dim, BaseFloat power) {$/;"	f	class:kaldi::nnet2::PowerComponent
Init	nnet2/nnet-component.cc	/^void ScaleComponent::Init(int32 dim, BaseFloat scale) {$/;"	f	class:kaldi::nnet2::ScaleComponent
Init	nnet2/nnet-component.cc	/^void SpliceComponent::Init(int32 input_dim, std::vector<int32> context,$/;"	f	class:kaldi::nnet2::SpliceComponent
Init	nnet2/nnet-component.cc	/^void SpliceMaxComponent::Init(int32 dim,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Init	nnet2/nnet-component.cc	/^void SumGroupComponent::Init(const std::vector<int32> &sizes) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
InitFromString	nnet2/nnet-component.cc	/^void AdditiveNoiseComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
InitFromString	nnet2/nnet-component.cc	/^void AffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponent
InitFromString	nnet2/nnet-component.cc	/^void AffineComponentPreconditioned::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
InitFromString	nnet2/nnet-component.cc	/^void AffineComponentPreconditionedOnline::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
InitFromString	nnet2/nnet-component.cc	/^void BlockAffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
InitFromString	nnet2/nnet-component.cc	/^void BlockAffineComponentPreconditioned::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
InitFromString	nnet2/nnet-component.cc	/^void DctComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::DctComponent
InitFromString	nnet2/nnet-component.cc	/^void DropoutComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::DropoutComponent
InitFromString	nnet2/nnet-component.cc	/^void FixedAffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
InitFromString	nnet2/nnet-component.cc	/^void FixedBiasComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::FixedBiasComponent
InitFromString	nnet2/nnet-component.cc	/^void FixedLinearComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
InitFromString	nnet2/nnet-component.cc	/^void FixedScaleComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::FixedScaleComponent
InitFromString	nnet2/nnet-component.cc	/^void MaxoutComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
InitFromString	nnet2/nnet-component.cc	/^void NonlinearComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
InitFromString	nnet2/nnet-component.cc	/^void PermuteComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PermuteComponent
InitFromString	nnet2/nnet-component.cc	/^void PnormComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PnormComponent
InitFromString	nnet2/nnet-component.cc	/^void PowerComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PowerComponent
InitFromString	nnet2/nnet-component.cc	/^void ScaleComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::ScaleComponent
InitFromString	nnet2/nnet-component.cc	/^void SpliceComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SpliceComponent
InitFromString	nnet2/nnet-component.cc	/^void SpliceMaxComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
InitFromString	nnet2/nnet-component.cc	/^void SumGroupComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
LimitRank	nnet2/nnet-component.cc	/^void AffineComponent::LimitRank(int32 d,$/;"	f	class:kaldi::nnet2::AffineComponent
NewComponentOfType	nnet2/nnet-component.cc	/^Component* Component::NewComponentOfType(const std::string &component_type) {$/;"	f	class:kaldi::nnet2::Component
NewFromString	nnet2/nnet-component.cc	/^Component* Component::NewFromString(const std::string &initializer_line) {$/;"	f	class:kaldi::nnet2::Component
NonlinearComponent	nnet2/nnet-component.cc	/^NonlinearComponent::NonlinearComponent(const NonlinearComponent &other):$/;"	f	class:kaldi::nnet2::NonlinearComponent
OutputDim	nnet2/nnet-component.cc	/^int32 SpliceComponent::OutputDim() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
ParseFromString	nnet2/nnet-component.cc	/^bool ParseFromString(const std::string &name, std::string *string,$/;"	f	namespace:kaldi::nnet2
PerturbParams	nnet2/nnet-component.cc	/^void AffineComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::AffineComponent
PerturbParams	nnet2/nnet-component.cc	/^void BlockAffineComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Propagate	nnet2/nnet-component.cc	/^void AdditiveNoiseComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Propagate	nnet2/nnet-component.cc	/^void AffineComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::AffineComponent
Propagate	nnet2/nnet-component.cc	/^void BlockAffineComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Propagate	nnet2/nnet-component.cc	/^void DctComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::DctComponent
Propagate	nnet2/nnet-component.cc	/^void DropoutComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::DropoutComponent
Propagate	nnet2/nnet-component.cc	/^void FixedAffineComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Propagate	nnet2/nnet-component.cc	/^void FixedBiasComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::FixedBiasComponent
Propagate	nnet2/nnet-component.cc	/^void FixedLinearComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Propagate	nnet2/nnet-component.cc	/^void FixedScaleComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::FixedScaleComponent
Propagate	nnet2/nnet-component.cc	/^void MaxoutComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::MaxoutComponent
Propagate	nnet2/nnet-component.cc	/^void NormalizeComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::NormalizeComponent
Propagate	nnet2/nnet-component.cc	/^void PermuteComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::PermuteComponent
Propagate	nnet2/nnet-component.cc	/^void PnormComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::PnormComponent
Propagate	nnet2/nnet-component.cc	/^void PowerComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::PowerComponent
Propagate	nnet2/nnet-component.cc	/^void RectifiedLinearComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
Propagate	nnet2/nnet-component.cc	/^void ScaleComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::ScaleComponent
Propagate	nnet2/nnet-component.cc	/^void SigmoidComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SigmoidComponent
Propagate	nnet2/nnet-component.cc	/^void SoftHingeComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SoftHingeComponent
Propagate	nnet2/nnet-component.cc	/^void SoftmaxComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SoftmaxComponent
Propagate	nnet2/nnet-component.cc	/^void SpliceComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SpliceComponent
Propagate	nnet2/nnet-component.cc	/^void SpliceMaxComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Propagate	nnet2/nnet-component.cc	/^void SumGroupComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::SumGroupComponent
Propagate	nnet2/nnet-component.cc	/^void TanhComponent::Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::TanhComponent
Read	nnet2/nnet-component.cc	/^void AdditiveNoiseComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Read	nnet2/nnet-component.cc	/^void AffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponent
Read	nnet2/nnet-component.cc	/^void AffineComponentPreconditioned::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Read	nnet2/nnet-component.cc	/^void AffineComponentPreconditionedOnline::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Read	nnet2/nnet-component.cc	/^void BlockAffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Read	nnet2/nnet-component.cc	/^void BlockAffineComponentPreconditioned::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Read	nnet2/nnet-component.cc	/^void DctComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::DctComponent
Read	nnet2/nnet-component.cc	/^void DropoutComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::DropoutComponent
Read	nnet2/nnet-component.cc	/^void FixedAffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Read	nnet2/nnet-component.cc	/^void FixedBiasComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::FixedBiasComponent
Read	nnet2/nnet-component.cc	/^void FixedLinearComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Read	nnet2/nnet-component.cc	/^void FixedScaleComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::FixedScaleComponent
Read	nnet2/nnet-component.cc	/^void MaxoutComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
Read	nnet2/nnet-component.cc	/^void NonlinearComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
Read	nnet2/nnet-component.cc	/^void PermuteComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PermuteComponent
Read	nnet2/nnet-component.cc	/^void PnormComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PnormComponent
Read	nnet2/nnet-component.cc	/^void PowerComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PowerComponent
Read	nnet2/nnet-component.cc	/^void ScaleComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::ScaleComponent
Read	nnet2/nnet-component.cc	/^void SpliceComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SpliceComponent
Read	nnet2/nnet-component.cc	/^void SpliceMaxComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Read	nnet2/nnet-component.cc	/^void SumGroupComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
ReadNew	nnet2/nnet-component.cc	/^Component* Component::ReadNew(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::Component
Reorder	nnet2/nnet-component.cc	/^void DctComponent::Reorder(CuMatrixBase<BaseFloat> *mat, bool reverse) const {$/;"	f	class:kaldi::nnet2::DctComponent
Resize	nnet2/nnet-component.cc	/^void AffineComponent::Resize(int32 input_dim, int32 output_dim) {$/;"	f	class:kaldi::nnet2::AffineComponent
Resize	nnet2/nnet-component.cc	/^void AffineComponentPreconditionedOnline::Resize($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Scale	nnet2/nnet-component.cc	/^void AffineComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::AffineComponent
Scale	nnet2/nnet-component.cc	/^void BlockAffineComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Scale	nnet2/nnet-component.cc	/^void NonlinearComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
SetDim	nnet2/nnet-component.cc	/^void NonlinearComponent::SetDim(int32 dim) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
SetParams	nnet2/nnet-component.cc	/^void AffineComponent::SetParams(const VectorBase<BaseFloat> &bias,$/;"	f	class:kaldi::nnet2::AffineComponent
SetPreconditionerConfigs	nnet2/nnet-component.cc	/^void AffineComponentPreconditionedOnline::SetPreconditionerConfigs() {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
SetZero	nnet2/nnet-component.cc	/^void AffineComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::AffineComponent
SetZero	nnet2/nnet-component.cc	/^void BlockAffineComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
SetZero	nnet2/nnet-component.cc	/^void BlockAffineComponentPreconditioned::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
UnVectorize	nnet2/nnet-component.cc	/^void AffineComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::AffineComponent
UnVectorize	nnet2/nnet-component.cc	/^void BlockAffineComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Update	nnet2/nnet-component.cc	/^void AffineComponentPreconditioned::Update($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Update	nnet2/nnet-component.cc	/^void AffineComponentPreconditionedOnline::Update($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Update	nnet2/nnet-component.cc	/^void BlockAffineComponentPreconditioned::Update($/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
UpdateSimple	nnet2/nnet-component.cc	/^void AffineComponent::UpdateSimple(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::AffineComponent
UpdateSimple	nnet2/nnet-component.cc	/^void BlockAffineComponent::UpdateSimple($/;"	f	class:kaldi::nnet2::BlockAffineComponent
UpdateStats	nnet2/nnet-component.cc	/^void NonlinearComponent::UpdateStats(const CuMatrixBase<BaseFloat> &out_value,$/;"	f	class:kaldi::nnet2::NonlinearComponent
Vectorize	nnet2/nnet-component.cc	/^void AffineComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::AffineComponent
Vectorize	nnet2/nnet-component.cc	/^void BlockAffineComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Write	nnet2/nnet-component.cc	/^void AdditiveNoiseComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Write	nnet2/nnet-component.cc	/^void AffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponent
Write	nnet2/nnet-component.cc	/^void AffineComponentPreconditioned::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Write	nnet2/nnet-component.cc	/^void AffineComponentPreconditionedOnline::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Write	nnet2/nnet-component.cc	/^void BlockAffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Write	nnet2/nnet-component.cc	/^void BlockAffineComponentPreconditioned::Write(std::ostream &os,$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Write	nnet2/nnet-component.cc	/^void DctComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::DctComponent
Write	nnet2/nnet-component.cc	/^void DropoutComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::DropoutComponent
Write	nnet2/nnet-component.cc	/^void FixedAffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Write	nnet2/nnet-component.cc	/^void FixedBiasComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::FixedBiasComponent
Write	nnet2/nnet-component.cc	/^void FixedLinearComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Write	nnet2/nnet-component.cc	/^void FixedScaleComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::FixedScaleComponent
Write	nnet2/nnet-component.cc	/^void MaxoutComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::MaxoutComponent
Write	nnet2/nnet-component.cc	/^void NonlinearComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::NonlinearComponent
Write	nnet2/nnet-component.cc	/^void PermuteComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PermuteComponent
Write	nnet2/nnet-component.cc	/^void PnormComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PnormComponent
Write	nnet2/nnet-component.cc	/^void PowerComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PowerComponent
Write	nnet2/nnet-component.cc	/^void ScaleComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::ScaleComponent
Write	nnet2/nnet-component.cc	/^void SpliceComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SpliceComponent
Write	nnet2/nnet-component.cc	/^void SpliceMaxComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Write	nnet2/nnet-component.cc	/^void SumGroupComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
kNormFloor	nnet2/nnet-component.cc	/^const BaseFloat NormalizeComponent::kNormFloor = pow(2.0, -66);$/;"	m	class:kaldi::nnet2::NormalizeComponent	file:
kaldi	nnet2/nnet-component.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-component.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
AdditiveNoiseComponent	nnet2/nnet-component.h	/^  AdditiveNoiseComponent(): dim_(0), stddev_(1.0) { }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
AdditiveNoiseComponent	nnet2/nnet-component.h	/^  AdditiveNoiseComponent(int32 dim, BaseFloat stddev) { Init(dim, stddev); }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
AdditiveNoiseComponent	nnet2/nnet-component.h	/^class AdditiveNoiseComponent: public RandomComponent {$/;"	c	namespace:kaldi::nnet2
AffineComponent	nnet2/nnet-component.h	/^  AffineComponent(): is_gradient_(false) { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::AffineComponent
AffineComponent	nnet2/nnet-component.h	/^class AffineComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
AffineComponentPreconditioned	nnet2/nnet-component.h	/^  AffineComponentPreconditioned(): alpha_(1.0), max_change_(0.0) { }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
AffineComponentPreconditioned	nnet2/nnet-component.h	/^class AffineComponentPreconditioned: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
AffineComponentPreconditionedOnline	nnet2/nnet-component.h	/^  AffineComponentPreconditionedOnline(): max_change_per_sample_(0.0) { }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
AffineComponentPreconditionedOnline	nnet2/nnet-component.h	/^class AffineComponentPreconditionedOnline: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
Backprop	nnet2/nnet-component.h	/^  virtual void Backprop(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::DctComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedBiasComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedScaleComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::PermuteComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::ScaleComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::TanhComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; } \/\/ if this returns false,$/;"	f	class:kaldi::nnet2::Component
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::AffineComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::DropoutComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::PnormComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::PowerComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
BackpropNeedsInput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }  $/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::AffineComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::DctComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedBiasComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedScaleComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::PermuteComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::ScaleComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }  $/;"	f	class:kaldi::nnet2::DropoutComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; } \/\/ if this returns false,$/;"	f	class:kaldi::nnet2::Component
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::PnormComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::PowerComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
BackpropNeedsOutput	nnet2/nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::TanhComponent
BiasParams	nnet2/nnet-component.h	/^  const CuVector<BaseFloat> &BiasParams() { return bias_params_; }$/;"	f	class:kaldi::nnet2::AffineComponent
BlockAffineComponent	nnet2/nnet-component.h	/^  BlockAffineComponent() { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::BlockAffineComponent
BlockAffineComponent	nnet2/nnet-component.h	/^class BlockAffineComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
BlockAffineComponentPreconditioned	nnet2/nnet-component.h	/^  BlockAffineComponentPreconditioned() { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
BlockAffineComponentPreconditioned	nnet2/nnet-component.h	/^class BlockAffineComponentPreconditioned: public BlockAffineComponent {$/;"	c	namespace:kaldi::nnet2
ChunkInfo	nnet2/nnet-component.h	/^  ChunkInfo()  \/\/ default constructor we assume this object will not be used$/;"	f	class:kaldi::nnet2::ChunkInfo
ChunkInfo	nnet2/nnet-component.h	/^  ChunkInfo(int32 feat_dim, int32 num_chunks,$/;"	f	class:kaldi::nnet2::ChunkInfo
ChunkInfo	nnet2/nnet-component.h	/^class ChunkInfo {$/;"	c	namespace:kaldi::nnet2
ChunkSize	nnet2/nnet-component.h	/^  inline int32 ChunkSize() const { return NumRows() \/ num_chunks_; }$/;"	f	class:kaldi::nnet2::ChunkInfo
Component	nnet2/nnet-component.h	/^  Component(): index_(-1) { }$/;"	f	class:kaldi::nnet2::Component
Component	nnet2/nnet-component.h	/^class Component {$/;"	c	namespace:kaldi::nnet2
Context	nnet2/nnet-component.h	/^  virtual std::vector<int32> Context() const  { return context_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Context	nnet2/nnet-component.h	/^  virtual std::vector<int32> Context() const { return context_; }$/;"	f	class:kaldi::nnet2::SpliceComponent
Context	nnet2/nnet-component.h	/^  virtual std::vector<int32> Context() const { return std::vector<int32>(1, 0); }$/;"	f	class:kaldi::nnet2::Component
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new MaxoutComponent(input_dim_,$/;"	f	class:kaldi::nnet2::MaxoutComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new NormalizeComponent(*this); }$/;"	f	class:kaldi::nnet2::NormalizeComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new PnormComponent(input_dim_,$/;"	f	class:kaldi::nnet2::PnormComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new PowerComponent(dim_, power_); }$/;"	f	class:kaldi::nnet2::PowerComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new RectifiedLinearComponent(*this); }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new ScaleComponent(*this); }$/;"	f	class:kaldi::nnet2::ScaleComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new SigmoidComponent(*this); }$/;"	f	class:kaldi::nnet2::SigmoidComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new SoftHingeComponent(*this); }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new SoftmaxComponent(*this); }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const { return new TanhComponent(*this); }$/;"	f	class:kaldi::nnet2::TanhComponent
Copy	nnet2/nnet-component.h	/^  virtual Component* Copy() const {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Count	nnet2/nnet-component.h	/^  double Count() const { return count_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
DctComponent	nnet2/nnet-component.h	/^  DctComponent() { dim_ = 0; } $/;"	f	class:kaldi::nnet2::DctComponent
DctComponent	nnet2/nnet-component.h	/^class DctComponent: public Component {$/;"	c	namespace:kaldi::nnet2
DerivSum	nnet2/nnet-component.h	/^  const CuVector<double> &DerivSum() const { return deriv_sum_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
DropoutComponent	nnet2/nnet-component.h	/^  DropoutComponent(): dim_(0), dropout_proportion_(0.5) { }$/;"	f	class:kaldi::nnet2::DropoutComponent
DropoutComponent	nnet2/nnet-component.h	/^  DropoutComponent(int32 dim, BaseFloat dp = 0.5, BaseFloat sc = 0.0) {$/;"	f	class:kaldi::nnet2::DropoutComponent
DropoutComponent	nnet2/nnet-component.h	/^class DropoutComponent: public RandomComponent {$/;"	c	namespace:kaldi::nnet2
FixedAffineComponent	nnet2/nnet-component.h	/^  FixedAffineComponent() { } $/;"	f	class:kaldi::nnet2::FixedAffineComponent
FixedAffineComponent	nnet2/nnet-component.h	/^class FixedAffineComponent: public Component {$/;"	c	namespace:kaldi::nnet2
FixedBiasComponent	nnet2/nnet-component.h	/^  FixedBiasComponent() { } $/;"	f	class:kaldi::nnet2::FixedBiasComponent
FixedBiasComponent	nnet2/nnet-component.h	/^class FixedBiasComponent: public Component {$/;"	c	namespace:kaldi::nnet2
FixedLinearComponent	nnet2/nnet-component.h	/^  FixedLinearComponent() { } $/;"	f	class:kaldi::nnet2::FixedLinearComponent
FixedLinearComponent	nnet2/nnet-component.h	/^class FixedLinearComponent: public Component {$/;"	c	namespace:kaldi::nnet2
FixedScaleComponent	nnet2/nnet-component.h	/^  FixedScaleComponent() { } $/;"	f	class:kaldi::nnet2::FixedScaleComponent
FixedScaleComponent	nnet2/nnet-component.h	/^class FixedScaleComponent: public Component {$/;"	c	namespace:kaldi::nnet2
GetParameterDim	nnet2/nnet-component.h	/^  virtual int32 GetParameterDim() const { KALDI_ASSERT(0); return 0; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
Index	nnet2/nnet-component.h	/^  virtual int32 Index() const { return index_; }$/;"	f	class:kaldi::nnet2::Component
Init	nnet2/nnet-component.h	/^  void Init(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
Init	nnet2/nnet-component.h	/^  void Init(const CuMatrixBase<BaseFloat> &matrix) { mat_ = matrix; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Init	nnet2/nnet-component.h	/^  void Init(int32 dim) { dim_ = dim; count_ = 0.0; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return bias_.Dim(); }$/;"	f	class:kaldi::nnet2::FixedBiasComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DctComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DropoutComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::PowerComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::ScaleComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::PnormComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::SpliceComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols() * num_blocks_; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols(); }$/;"	f	class:kaldi::nnet2::AffineComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols(); }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return mat_.NumCols(); }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return reorder_.size(); }$/;"	f	class:kaldi::nnet2::PermuteComponent
InputDim	nnet2/nnet-component.h	/^  virtual int32 InputDim() const { return scales_.Dim(); }$/;"	f	class:kaldi::nnet2::FixedScaleComponent
KALDI_NNET2_NNET_COMPONENT_H_	nnet2/nnet-component.h	25;"	d
LearningRate	nnet2/nnet-component.h	/^  BaseFloat LearningRate() const { return learning_rate_; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
LinearParams	nnet2/nnet-component.h	/^  const CuMatrix<BaseFloat> &LinearParams() const { return linear_params_; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
LinearParams	nnet2/nnet-component.h	/^  const CuMatrix<BaseFloat> &LinearParams() { return linear_params_; }$/;"	f	class:kaldi::nnet2::AffineComponent
MakeOffsetsContiguous	nnet2/nnet-component.h	/^  void MakeOffsetsContiguous () { offsets_.clear(); Check(); }$/;"	f	class:kaldi::nnet2::ChunkInfo
MaxoutComponent	nnet2/nnet-component.h	/^  MaxoutComponent(): input_dim_(0), output_dim_(0) { }$/;"	f	class:kaldi::nnet2::MaxoutComponent
MaxoutComponent	nnet2/nnet-component.h	/^  explicit MaxoutComponent(int32 input_dim, int32 output_dim) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
MaxoutComponent	nnet2/nnet-component.h	/^class MaxoutComponent: public Component {$/;"	c	namespace:kaldi::nnet2
NonlinearComponent	nnet2/nnet-component.h	/^  NonlinearComponent(): dim_(0) { } \/\/ e.g. prior to Read().$/;"	f	class:kaldi::nnet2::NonlinearComponent
NonlinearComponent	nnet2/nnet-component.h	/^  explicit NonlinearComponent(int32 dim) { Init(dim); }$/;"	f	class:kaldi::nnet2::NonlinearComponent
NonlinearComponent	nnet2/nnet-component.h	/^class NonlinearComponent: public Component {$/;"	c	namespace:kaldi::nnet2
NormalizeComponent	nnet2/nnet-component.h	/^  NormalizeComponent() { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
NormalizeComponent	nnet2/nnet-component.h	/^  explicit NormalizeComponent(const NormalizeComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
NormalizeComponent	nnet2/nnet-component.h	/^  explicit NormalizeComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
NormalizeComponent	nnet2/nnet-component.h	/^class NormalizeComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
NumChunks	nnet2/nnet-component.h	/^  inline int32 NumChunks() const { return num_chunks_; }$/;"	f	class:kaldi::nnet2::ChunkInfo
NumCols	nnet2/nnet-component.h	/^  int32 NumCols() const { return feat_dim_; }$/;"	f	class:kaldi::nnet2::ChunkInfo
NumRows	nnet2/nnet-component.h	/^  int32 NumRows() const { $/;"	f	class:kaldi::nnet2::ChunkInfo
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return bias_.Dim(); }$/;"	f	class:kaldi::nnet2::FixedBiasComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return dct_mat_.NumRows() * (dim_ \/ dct_mat_.NumCols()); }$/;"	f	class:kaldi::nnet2::DctComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DropoutComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::PowerComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::ScaleComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::AffineComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return mat_.NumRows(); }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::PnormComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return reorder_.size(); }$/;"	f	class:kaldi::nnet2::PermuteComponent
OutputDim	nnet2/nnet-component.h	/^  virtual int32 OutputDim() const { return scales_.Dim(); }$/;"	f	class:kaldi::nnet2::FixedScaleComponent
PermuteComponent	nnet2/nnet-component.h	/^  PermuteComponent() { } \/\/ e.g. prior to Read() or Init()$/;"	f	class:kaldi::nnet2::PermuteComponent
PermuteComponent	nnet2/nnet-component.h	/^  PermuteComponent(const std::vector<int32> &reorder) { Init(reorder); }$/;"	f	class:kaldi::nnet2::PermuteComponent
PermuteComponent	nnet2/nnet-component.h	/^  PermuteComponent(int32 dim) { Init(dim); }$/;"	f	class:kaldi::nnet2::PermuteComponent
PermuteComponent	nnet2/nnet-component.h	/^class PermuteComponent: public Component {$/;"	c	namespace:kaldi::nnet2
PnormComponent	nnet2/nnet-component.h	/^  PnormComponent(): input_dim_(0), output_dim_(0), p_(0) { }$/;"	f	class:kaldi::nnet2::PnormComponent
PnormComponent	nnet2/nnet-component.h	/^  explicit PnormComponent(int32 input_dim, int32 output_dim, BaseFloat p) {$/;"	f	class:kaldi::nnet2::PnormComponent
PnormComponent	nnet2/nnet-component.h	/^class PnormComponent: public Component {$/;"	c	namespace:kaldi::nnet2
PowerComponent	nnet2/nnet-component.h	/^  PowerComponent(): dim_(0), power_(2) { }$/;"	f	class:kaldi::nnet2::PowerComponent
PowerComponent	nnet2/nnet-component.h	/^  explicit PowerComponent(int32 dim, BaseFloat power = 2) {$/;"	f	class:kaldi::nnet2::PowerComponent
PowerComponent	nnet2/nnet-component.h	/^class PowerComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
Propagate	nnet2/nnet-component.h	/^  void Propagate(const ChunkInfo &in_info,$/;"	f	class:kaldi::nnet2::Component
RandomComponent	nnet2/nnet-component.h	/^class RandomComponent: public Component {$/;"	c	namespace:kaldi::nnet2
RectifiedLinearComponent	nnet2/nnet-component.h	/^  RectifiedLinearComponent() { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
RectifiedLinearComponent	nnet2/nnet-component.h	/^  explicit RectifiedLinearComponent(const RectifiedLinearComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
RectifiedLinearComponent	nnet2/nnet-component.h	/^  explicit RectifiedLinearComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
RectifiedLinearComponent	nnet2/nnet-component.h	/^class RectifiedLinearComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
ResetGenerator	nnet2/nnet-component.h	/^  void ResetGenerator() { random_generator_.SeedGpu(0); }$/;"	f	class:kaldi::nnet2::RandomComponent
ScaleComponent	nnet2/nnet-component.h	/^  ScaleComponent(): dim_(0), scale_(0.0) { }$/;"	f	class:kaldi::nnet2::ScaleComponent
ScaleComponent	nnet2/nnet-component.h	/^  explicit ScaleComponent(const ScaleComponent &other):$/;"	f	class:kaldi::nnet2::ScaleComponent
ScaleComponent	nnet2/nnet-component.h	/^  explicit ScaleComponent(int32 dim, BaseFloat scale): dim_(dim), scale_(scale) { }$/;"	f	class:kaldi::nnet2::ScaleComponent
ScaleComponent	nnet2/nnet-component.h	/^class ScaleComponent: public Component {$/;"	c	namespace:kaldi::nnet2
SetDropoutScale	nnet2/nnet-component.h	/^  void SetDropoutScale(BaseFloat scale) { dropout_scale_ = scale; }$/;"	f	class:kaldi::nnet2::DropoutComponent
SetIndex	nnet2/nnet-component.h	/^  virtual void SetIndex(int32 index) { index_ = index; }$/;"	f	class:kaldi::nnet2::Component
SetLearningRate	nnet2/nnet-component.h	/^  void SetLearningRate(BaseFloat lrate) {  learning_rate_ = lrate; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
SetMaxChange	nnet2/nnet-component.h	/^  void SetMaxChange(BaseFloat max_change) { max_change_ = max_change; }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
SigmoidComponent	nnet2/nnet-component.h	/^  SigmoidComponent() { }$/;"	f	class:kaldi::nnet2::SigmoidComponent
SigmoidComponent	nnet2/nnet-component.h	/^  explicit SigmoidComponent(const SigmoidComponent &other): NonlinearComponent(other) { }    $/;"	f	class:kaldi::nnet2::SigmoidComponent
SigmoidComponent	nnet2/nnet-component.h	/^  explicit SigmoidComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SigmoidComponent
SigmoidComponent	nnet2/nnet-component.h	/^class SigmoidComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
SoftHingeComponent	nnet2/nnet-component.h	/^  SoftHingeComponent() { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
SoftHingeComponent	nnet2/nnet-component.h	/^  explicit SoftHingeComponent(const SoftHingeComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
SoftHingeComponent	nnet2/nnet-component.h	/^  explicit SoftHingeComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
SoftHingeComponent	nnet2/nnet-component.h	/^class SoftHingeComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
SoftmaxComponent	nnet2/nnet-component.h	/^  SoftmaxComponent() { }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
SoftmaxComponent	nnet2/nnet-component.h	/^  explicit SoftmaxComponent(const SoftmaxComponent &other): NonlinearComponent(other) { }  $/;"	f	class:kaldi::nnet2::SoftmaxComponent
SoftmaxComponent	nnet2/nnet-component.h	/^  explicit SoftmaxComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
SoftmaxComponent	nnet2/nnet-component.h	/^class SoftmaxComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
SpliceComponent	nnet2/nnet-component.h	/^  SpliceComponent() { }  \/\/ called only prior to Read() or Init().$/;"	f	class:kaldi::nnet2::SpliceComponent
SpliceComponent	nnet2/nnet-component.h	/^class SpliceComponent: public Component {$/;"	c	namespace:kaldi::nnet2
SpliceMaxComponent	nnet2/nnet-component.h	/^  SpliceMaxComponent() { }  \/\/ called only prior to Read() or Init().$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
SpliceMaxComponent	nnet2/nnet-component.h	/^class SpliceMaxComponent: public Component {$/;"	c	namespace:kaldi::nnet2
SumGroupComponent	nnet2/nnet-component.h	/^  SumGroupComponent() { }$/;"	f	class:kaldi::nnet2::SumGroupComponent
SumGroupComponent	nnet2/nnet-component.h	/^class SumGroupComponent: public Component {$/;"	c	namespace:kaldi::nnet2
TanhComponent	nnet2/nnet-component.h	/^  TanhComponent() { }$/;"	f	class:kaldi::nnet2::TanhComponent
TanhComponent	nnet2/nnet-component.h	/^  explicit TanhComponent(const TanhComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::TanhComponent
TanhComponent	nnet2/nnet-component.h	/^  explicit TanhComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::TanhComponent
TanhComponent	nnet2/nnet-component.h	/^class TanhComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "AdditiveNoiseComponent"; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "AffineComponent"; }$/;"	f	class:kaldi::nnet2::AffineComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "AffineComponentPreconditioned"; }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "BlockAffineComponent"; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "BlockAffineComponentPreconditioned"; }$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "DctComponent"; }$/;"	f	class:kaldi::nnet2::DctComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "DropoutComponent"; }$/;"	f	class:kaldi::nnet2::DropoutComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "FixedAffineComponent"; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "FixedBiasComponent"; }$/;"	f	class:kaldi::nnet2::FixedBiasComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "FixedLinearComponent"; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "FixedScaleComponent"; }$/;"	f	class:kaldi::nnet2::FixedScaleComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "MaxoutComponent"; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "NormalizeComponent"; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "PermuteComponent"; }$/;"	f	class:kaldi::nnet2::PermuteComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "PnormComponent"; }$/;"	f	class:kaldi::nnet2::PnormComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "PowerComponent"; }$/;"	f	class:kaldi::nnet2::PowerComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "RectifiedLinearComponent"; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "ScaleComponent"; }$/;"	f	class:kaldi::nnet2::ScaleComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "SigmoidComponent"; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "SoftHingeComponent"; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "SoftmaxComponent"; }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "SpliceComponent"; }$/;"	f	class:kaldi::nnet2::SpliceComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "SpliceMaxComponent"; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "SumGroupComponent"; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const { return "TanhComponent"; }$/;"	f	class:kaldi::nnet2::TanhComponent
Type	nnet2/nnet-component.h	/^  virtual std::string Type() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
UnVectorize	nnet2/nnet-component.h	/^  virtual void UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
UpdatableComponent	nnet2/nnet-component.h	/^  UpdatableComponent(): learning_rate_(0.001) { }$/;"	f	class:kaldi::nnet2::UpdatableComponent
UpdatableComponent	nnet2/nnet-component.h	/^  UpdatableComponent(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
UpdatableComponent	nnet2/nnet-component.h	/^  UpdatableComponent(const UpdatableComponent &other):$/;"	f	class:kaldi::nnet2::UpdatableComponent
UpdatableComponent	nnet2/nnet-component.h	/^class UpdatableComponent: public Component {$/;"	c	namespace:kaldi::nnet2
Update	nnet2/nnet-component.h	/^  virtual void Update($/;"	f	class:kaldi::nnet2::AffineComponent
Update	nnet2/nnet-component.h	/^  virtual void Update($/;"	f	class:kaldi::nnet2::BlockAffineComponent
ValueSum	nnet2/nnet-component.h	/^  const CuVector<double> &ValueSum() const { return value_sum_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
Vectorize	nnet2/nnet-component.h	/^  virtual void Vectorize(VectorBase<BaseFloat> *params) const { KALDI_ASSERT(0); }$/;"	f	class:kaldi::nnet2::UpdatableComponent
alpha_	nnet2/nnet-component.h	/^  BaseFloat alpha_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditioned
alpha_	nnet2/nnet-component.h	/^  BaseFloat alpha_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
alpha_	nnet2/nnet-component.h	/^  BaseFloat alpha_;$/;"	m	class:kaldi::nnet2::BlockAffineComponentPreconditioned
bias_	nnet2/nnet-component.h	/^  CuVector<BaseFloat> bias_;  $/;"	m	class:kaldi::nnet2::FixedBiasComponent
bias_params_	nnet2/nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::AffineComponent
bias_params_	nnet2/nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
bias_params_	nnet2/nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::FixedAffineComponent
const_component_dim_	nnet2/nnet-component.h	/^  int32 const_component_dim_;$/;"	m	class:kaldi::nnet2::SpliceComponent
context_	nnet2/nnet-component.h	/^  std::vector<int32> context_;$/;"	m	class:kaldi::nnet2::SpliceComponent
context_	nnet2/nnet-component.h	/^  std::vector<int32> context_;$/;"	m	class:kaldi::nnet2::SpliceMaxComponent
count_	nnet2/nnet-component.h	/^  double count_;$/;"	m	class:kaldi::nnet2::NonlinearComponent
dct_mat_	nnet2/nnet-component.h	/^  CuMatrix<BaseFloat> dct_mat_;$/;"	m	class:kaldi::nnet2::DctComponent
deriv_sum_	nnet2/nnet-component.h	/^  CuVector<double> deriv_sum_; \/\/ stats of the derivative of the nonlinearity (only$/;"	m	class:kaldi::nnet2::NonlinearComponent
dim_	nnet2/nnet-component.h	/^  int32 dim_;  $/;"	m	class:kaldi::nnet2::AdditiveNoiseComponent
dim_	nnet2/nnet-component.h	/^  int32 dim_;  $/;"	m	class:kaldi::nnet2::DropoutComponent
dim_	nnet2/nnet-component.h	/^  int32 dim_; \/\/ The input dimension of the (sub)vector.$/;"	m	class:kaldi::nnet2::DctComponent
dim_	nnet2/nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::NonlinearComponent
dim_	nnet2/nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::PowerComponent
dim_	nnet2/nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::ScaleComponent
dim_	nnet2/nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::SpliceMaxComponent
dropout_proportion_	nnet2/nnet-component.h	/^  BaseFloat dropout_proportion_;$/;"	m	class:kaldi::nnet2::DropoutComponent
dropout_scale_	nnet2/nnet-component.h	/^  BaseFloat dropout_scale_; \/\/ Set the scale that we scale "dropout_proportion_"$/;"	m	class:kaldi::nnet2::DropoutComponent
feat_dim_	nnet2/nnet-component.h	/^  int32 feat_dim_;  \/\/ Feature dimension.$/;"	m	class:kaldi::nnet2::ChunkInfo
first_offset_	nnet2/nnet-component.h	/^  int32 first_offset_;  \/\/ Start time offset within each chunk, numbered so that at$/;"	m	class:kaldi::nnet2::ChunkInfo
index_	nnet2/nnet-component.h	/^  int32 index_;$/;"	m	class:kaldi::nnet2::Component
indexes_	nnet2/nnet-component.h	/^  CuArray<Int32Pair> indexes_; \/\/ for each output index, the (start, end) input$/;"	m	class:kaldi::nnet2::SumGroupComponent
input_dim_	nnet2/nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::MaxoutComponent
input_dim_	nnet2/nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::PnormComponent
input_dim_	nnet2/nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::SpliceComponent
input_dim_	nnet2/nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::SumGroupComponent
is_gradient_	nnet2/nnet-component.h	/^  bool is_gradient_; \/\/ If true, treat this as just a gradient.$/;"	m	class:kaldi::nnet2::AffineComponent
is_gradient_	nnet2/nnet-component.h	/^  bool is_gradient_;$/;"	m	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kNormFloor	nnet2/nnet-component.h	/^  static const BaseFloat kNormFloor;$/;"	m	class:kaldi::nnet2::NormalizeComponent
kaldi	nnet2/nnet-component.h	/^namespace kaldi {$/;"	n
last_offset_	nnet2/nnet-component.h	/^  int32 last_offset_;  \/\/ End time offset within each chunk.$/;"	m	class:kaldi::nnet2::ChunkInfo
learning_rate_	nnet2/nnet-component.h	/^  BaseFloat learning_rate_; \/\/\/< learning rate (0.0..0.01)$/;"	m	class:kaldi::nnet2::UpdatableComponent
linear_params_	nnet2/nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::AffineComponent
linear_params_	nnet2/nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
linear_params_	nnet2/nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::FixedAffineComponent
mat_	nnet2/nnet-component.h	/^  CuMatrix<BaseFloat> mat_;$/;"	m	class:kaldi::nnet2::FixedLinearComponent
max_change_	nnet2/nnet-component.h	/^  BaseFloat max_change_; \/\/ If > 0, this is the maximum amount of parameter change (in L2 norm)$/;"	m	class:kaldi::nnet2::AffineComponentPreconditioned
max_change_per_sample_	nnet2/nnet-component.h	/^  BaseFloat max_change_per_sample_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
mutex_	nnet2/nnet-component.h	/^  Mutex mutex_;$/;"	m	class:kaldi::nnet2::NonlinearComponent
nnet2	nnet2/nnet-component.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_blocks_	nnet2/nnet-component.h	/^  int32 num_blocks_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
num_chunks_	nnet2/nnet-component.h	/^  int32 num_chunks_;  \/\/ Number of separate equal-sized chunks of features$/;"	m	class:kaldi::nnet2::ChunkInfo
num_samples_history_	nnet2/nnet-component.h	/^  BaseFloat num_samples_history_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
offsets_	nnet2/nnet-component.h	/^  std::vector<int32> offsets_; \/\/ offsets is only nonempty if the chunk contains$/;"	m	class:kaldi::nnet2::ChunkInfo
output_dim_	nnet2/nnet-component.h	/^  int32 output_dim_;  $/;"	m	class:kaldi::nnet2::SumGroupComponent
output_dim_	nnet2/nnet-component.h	/^  int32 output_dim_;$/;"	m	class:kaldi::nnet2::MaxoutComponent
output_dim_	nnet2/nnet-component.h	/^  int32 output_dim_;$/;"	m	class:kaldi::nnet2::PnormComponent
p_	nnet2/nnet-component.h	/^  BaseFloat p_;$/;"	m	class:kaldi::nnet2::PnormComponent
power_	nnet2/nnet-component.h	/^  BaseFloat power_;$/;"	m	class:kaldi::nnet2::PowerComponent
preconditioner_in_	nnet2/nnet-component.h	/^  OnlinePreconditioner preconditioner_in_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
preconditioner_out_	nnet2/nnet-component.h	/^  OnlinePreconditioner preconditioner_out_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
random_generator_	nnet2/nnet-component.h	/^  CuRand<BaseFloat> random_generator_;$/;"	m	class:kaldi::nnet2::RandomComponent
rank_in_	nnet2/nnet-component.h	/^  int32 rank_in_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
rank_out_	nnet2/nnet-component.h	/^  int32 rank_out_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
reorder_	nnet2/nnet-component.h	/^  bool reorder_; \/\/ If true, transformation matrix we use is not$/;"	m	class:kaldi::nnet2::DctComponent
reorder_	nnet2/nnet-component.h	/^  std::vector<int32> reorder_; \/\/ This class sends input dimension i to$/;"	m	class:kaldi::nnet2::PermuteComponent
reverse_indexes_	nnet2/nnet-component.h	/^  CuArray<int32> reverse_indexes_; \/\/ for each input index, the output index.$/;"	m	class:kaldi::nnet2::SumGroupComponent
scale_	nnet2/nnet-component.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::nnet2::ScaleComponent
scales_	nnet2/nnet-component.h	/^  CuVector<BaseFloat> scales_;  $/;"	m	class:kaldi::nnet2::FixedScaleComponent
stddev_	nnet2/nnet-component.h	/^  BaseFloat stddev_;$/;"	m	class:kaldi::nnet2::AdditiveNoiseComponent
update_period_	nnet2/nnet-component.h	/^  int32 update_period_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
value_sum_	nnet2/nnet-component.h	/^  CuVector<double> value_sum_; \/\/ stats at the output.$/;"	m	class:kaldi::nnet2::NonlinearComponent
~Component	nnet2/nnet-component.h	/^  virtual ~Component() { }$/;"	f	class:kaldi::nnet2::Component
~UpdatableComponent	nnet2/nnet-component.h	/^  virtual ~UpdatableComponent() { }$/;"	f	class:kaldi::nnet2::UpdatableComponent
AcceptExample	nnet2/nnet-compute-discriminative-parallel.cc	/^void DiscriminativeExamplesRepository::AcceptExample($/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
DiscTrainParallelClass	nnet2/nnet-compute-discriminative-parallel.cc	/^  DiscTrainParallelClass(const AmNnet &am_nnet,$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
DiscTrainParallelClass	nnet2/nnet-compute-discriminative-parallel.cc	/^  DiscTrainParallelClass(const DiscTrainParallelClass &other):$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
DiscTrainParallelClass	nnet2/nnet-compute-discriminative-parallel.cc	/^class DiscTrainParallelClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
DiscriminativeExamplesRepository	nnet2/nnet-compute-discriminative-parallel.cc	/^  DiscriminativeExamplesRepository(): buffer_size_(4),$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
DiscriminativeExamplesRepository	nnet2/nnet-compute-discriminative-parallel.cc	/^class DiscriminativeExamplesRepository {$/;"	c	namespace:kaldi::nnet2	file:
ExamplesDone	nnet2/nnet-compute-discriminative-parallel.cc	/^void DiscriminativeExamplesRepository::ExamplesDone() {$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
NnetDiscriminativeUpdateParallel	nnet2/nnet-compute-discriminative-parallel.cc	/^void NnetDiscriminativeUpdateParallel($/;"	f	namespace:kaldi::nnet2
ProvideExample	nnet2/nnet-compute-discriminative-parallel.cc	/^DiscriminativeExamplesRepository::ProvideExample() {$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
am_nnet_	nnet2/nnet-compute-discriminative-parallel.cc	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
buffer_size_	nnet2/nnet-compute-discriminative-parallel.cc	/^  int32 buffer_size_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
done_	nnet2/nnet-compute-discriminative-parallel.cc	/^  bool done_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
empty_semaphore_	nnet2/nnet-compute-discriminative-parallel.cc	/^  Semaphore empty_semaphore_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
examples_	nnet2/nnet-compute-discriminative-parallel.cc	/^  std::deque<DiscriminativeNnetExample*> examples_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
examples_mutex_	nnet2/nnet-compute-discriminative-parallel.cc	/^  Mutex examples_mutex_; \/\/ mutex we lock to modify examples_.$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
full_semaphore_	nnet2/nnet-compute-discriminative-parallel.cc	/^  Semaphore full_semaphore_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
kaldi	nnet2/nnet-compute-discriminative-parallel.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-compute-discriminative-parallel.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_to_update_	nnet2/nnet-compute-discriminative-parallel.cc	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
nnet_to_update_orig_	nnet2/nnet-compute-discriminative-parallel.cc	/^  Nnet *nnet_to_update_orig_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
operator ()	nnet2/nnet-compute-discriminative-parallel.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
opts_	nnet2/nnet-compute-discriminative-parallel.cc	/^  const NnetDiscriminativeUpdateOptions &opts_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
repository_	nnet2/nnet-compute-discriminative-parallel.cc	/^  DiscriminativeExamplesRepository *repository_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
stats_	nnet2/nnet-compute-discriminative-parallel.cc	/^  NnetDiscriminativeStats stats_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
stats_ptr_	nnet2/nnet-compute-discriminative-parallel.cc	/^  NnetDiscriminativeStats *stats_ptr_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
store_separate_gradients_	nnet2/nnet-compute-discriminative-parallel.cc	/^  bool store_separate_gradients_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
tmodel_	nnet2/nnet-compute-discriminative-parallel.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
~DiscTrainParallelClass	nnet2/nnet-compute-discriminative-parallel.cc	/^  ~DiscTrainParallelClass() {$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
KALDI_NNET2_NNET_COMPUTE_DISCRIMINATIVE_PARALLEL_H_	nnet2/nnet-compute-discriminative-parallel.h	21;"	d
kaldi	nnet2/nnet-compute-discriminative-parallel.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-compute-discriminative-parallel.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
Add	nnet2/nnet-compute-discriminative.cc	/^void NnetDiscriminativeStats::Add(const NnetDiscriminativeStats &other) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeStats
Arc	nnet2/nnet-compute-discriminative.cc	/^  typedef LatticeArc Arc;$/;"	t	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
Backprop	nnet2/nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::Backprop() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
GetDiscriminativePosteriors	nnet2/nnet-compute-discriminative.cc	/^double NnetDiscriminativeUpdater::GetDiscriminativePosteriors(Posterior *post) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
GetInputFeatures	nnet2/nnet-compute-discriminative.cc	/^SubMatrix<BaseFloat> NnetDiscriminativeUpdater::GetInputFeatures() const {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
GetOutput	nnet2/nnet-compute-discriminative.cc	/^  CuMatrixBase<BaseFloat> &GetOutput() { return forward_data_.back(); }$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
LatticeComputations	nnet2/nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::LatticeComputations() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
MakePair	nnet2/nnet-compute-discriminative.cc	/^  static inline Int32Pair MakePair(int32 first, int32 second) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
NnetDiscriminativeUpdate	nnet2/nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdate(const AmNnet &am_nnet,$/;"	f	namespace:kaldi::nnet2
NnetDiscriminativeUpdater	nnet2/nnet-compute-discriminative.cc	/^NnetDiscriminativeUpdater::NnetDiscriminativeUpdater($/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
NnetDiscriminativeUpdater	nnet2/nnet-compute-discriminative.cc	/^class NnetDiscriminativeUpdater {$/;"	c	namespace:kaldi::nnet2	file:
Print	nnet2/nnet-compute-discriminative.cc	/^void NnetDiscriminativeStats::Print(std::string criterion) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeStats
Propagate	nnet2/nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::Propagate() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
StateId	nnet2/nnet-compute-discriminative.cc	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
Update	nnet2/nnet-compute-discriminative.cc	/^  void Update() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
am_nnet_	nnet2/nnet-compute-discriminative.cc	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
backward_data_	nnet2/nnet-compute-discriminative.cc	/^  CuMatrix<BaseFloat> backward_data_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
chunk_info_out_	nnet2/nnet-compute-discriminative.cc	/^  std::vector<ChunkInfo> chunk_info_out_; $/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
eg_	nnet2/nnet-compute-discriminative.cc	/^  const DiscriminativeNnetExample &eg_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
forward_data_	nnet2/nnet-compute-discriminative.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_; $/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi	nnet2/nnet-compute-discriminative.cc	/^namespace kaldi {$/;"	n	file:
lat_	nnet2/nnet-compute-discriminative.cc	/^  Lattice lat_; \/\/ we convert the CompactLattice in the eg, into Lattice form.$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
nnet2	nnet2/nnet-compute-discriminative.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_to_update_	nnet2/nnet-compute-discriminative.cc	/^  Nnet *nnet_to_update_; \/\/ will equal am_nnet_.GetNnet(), in SGD case, or$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
opts_	nnet2/nnet-compute-discriminative.cc	/^  const NnetDiscriminativeUpdateOptions &opts_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
silence_phones_	nnet2/nnet-compute-discriminative.cc	/^  std::vector<int32> silence_phones_; \/\/ derived from opts_.silence_phones_str$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
stats_	nnet2/nnet-compute-discriminative.cc	/^  NnetDiscriminativeStats *stats_; \/\/ the objective function, etc.$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
tmodel_	nnet2/nnet-compute-discriminative.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
KALDI_NNET2_NNET_COMPUTE_DISCRIMINATIVE_H_	nnet2/nnet-compute-discriminative.h	21;"	d
NnetDiscriminativeStats	nnet2/nnet-compute-discriminative.h	/^  NnetDiscriminativeStats() { std::memset(this, 0, sizeof(*this)); }$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeStats
NnetDiscriminativeStats	nnet2/nnet-compute-discriminative.h	/^struct NnetDiscriminativeStats {$/;"	s	namespace:kaldi::nnet2
NnetDiscriminativeUpdateOptions	nnet2/nnet-compute-discriminative.h	/^  NnetDiscriminativeUpdateOptions(): criterion("smbr"), acoustic_scale(0.1),$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
NnetDiscriminativeUpdateOptions	nnet2/nnet-compute-discriminative.h	/^struct NnetDiscriminativeUpdateOptions {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/nnet-compute-discriminative.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
acoustic_scale	nnet2/nnet-compute-discriminative.h	/^  BaseFloat acoustic_scale; \/\/ e.g. 0.1$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
boost	nnet2/nnet-compute-discriminative.h	/^  BaseFloat boost; \/\/ for MMI, boosting factor (would be Boosted MMI)... e.g. 0.1.$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
criterion	nnet2/nnet-compute-discriminative.h	/^  std::string criterion; \/\/ "mmi" or "mpfe" or "smbr"$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
drop_frames	nnet2/nnet-compute-discriminative.h	/^  bool drop_frames; \/\/ for MMI, true if we ignore frames where alignment$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
kaldi	nnet2/nnet-compute-discriminative.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-compute-discriminative.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
one_silence_class	nnet2/nnet-compute-discriminative.h	/^  bool one_silence_class;  \/\/ Affects MPE\/SMBR>$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
silence_phones_str	nnet2/nnet-compute-discriminative.h	/^  std::string silence_phones_str; \/\/ colon-separated list of integer ids of silence phones,$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
tot_den_objf	nnet2/nnet-compute-discriminative.h	/^  double tot_den_objf;  \/\/ for MMI, the (weighted) denominator likelihood; for$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_num_count	nnet2/nnet-compute-discriminative.h	/^  double tot_num_count; \/\/ total count of numerator posterior (should be$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_num_objf	nnet2/nnet-compute-discriminative.h	/^  double tot_num_objf;  \/\/ for MMI, the (weighted) numerator likelihood; for$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_t	nnet2/nnet-compute-discriminative.h	/^  double tot_t; \/\/ total number of frames$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_t_weighted	nnet2/nnet-compute-discriminative.h	/^  double tot_t_weighted; \/\/ total number of frames times weight.$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
Compute	nnet2/nnet-compute-online.cc	/^void NnetOnlineComputer::Compute(const CuMatrixBase<BaseFloat> &input,$/;"	f	class:kaldi::nnet2::NnetOnlineComputer
Flush	nnet2/nnet-compute-online.cc	/^void NnetOnlineComputer::Flush(CuMatrix<BaseFloat> *output) {$/;"	f	class:kaldi::nnet2::NnetOnlineComputer
NnetOnlineComputer	nnet2/nnet-compute-online.cc	/^NnetOnlineComputer::NnetOnlineComputer(const Nnet &nnet, bool pad_input)$/;"	f	class:kaldi::nnet2::NnetOnlineComputer
Propagate	nnet2/nnet-compute-online.cc	/^void NnetOnlineComputer::Propagate() {$/;"	f	class:kaldi::nnet2::NnetOnlineComputer
kaldi	nnet2/nnet-compute-online.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-compute-online.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_NNET_COMPUTE_ONLINE_H_	nnet2/nnet-compute-online.h	23;"	d
NnetOnlineComputer	nnet2/nnet-compute-online.h	/^class NnetOnlineComputer {$/;"	c	namespace:kaldi::nnet2
chunk_info_	nnet2/nnet-compute-online.h	/^  std::vector<ChunkInfo> chunk_info_;  \/\/ contains chunk_info(s) for the$/;"	m	class:kaldi::nnet2::NnetOnlineComputer
data_	nnet2/nnet-compute-online.h	/^  std::vector<CuMatrix<BaseFloat> > data_;$/;"	m	class:kaldi::nnet2::NnetOnlineComputer
finished_	nnet2/nnet-compute-online.h	/^  bool finished_;  \/\/ forward-pass is complete$/;"	m	class:kaldi::nnet2::NnetOnlineComputer
is_first_chunk_	nnet2/nnet-compute-online.h	/^  bool is_first_chunk_;$/;"	m	class:kaldi::nnet2::NnetOnlineComputer
kaldi	nnet2/nnet-compute-online.h	/^namespace kaldi {$/;"	n
last_seen_input_frame_	nnet2/nnet-compute-online.h	/^  CuVector<BaseFloat> last_seen_input_frame_;  \/\/ stores the last seen frame$/;"	m	class:kaldi::nnet2::NnetOnlineComputer
nnet2	nnet2/nnet-compute-online.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet_	nnet2/nnet-compute-online.h	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::NnetOnlineComputer
pad_input_	nnet2/nnet-compute-online.h	/^  bool pad_input_;  \/\/ pad input at the beginning of the decode$/;"	m	class:kaldi::nnet2::NnetOnlineComputer
reusable_component_inputs_	nnet2/nnet-compute-online.h	/^  std::vector<CuMatrix<BaseFloat> > reusable_component_inputs_;  $/;"	m	class:kaldi::nnet2::NnetOnlineComputer
unprocessed_buffer_	nnet2/nnet-compute-online.h	/^  CuMatrix<BaseFloat> unprocessed_buffer_;  \/\/ buffer to store unprocessed input$/;"	m	class:kaldi::nnet2::NnetOnlineComputer
UnitTestNnetCompute	nnet2/nnet-compute-test.cc	/^void UnitTestNnetCompute() {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-compute-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2/nnet-compute-test.cc	/^int main() {$/;"	f
nnet2	nnet2/nnet-compute-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
Backprop	nnet2/nnet-compute.cc	/^void NnetComputer::Backprop(CuMatrix<BaseFloat> *tmp_deriv) {$/;"	f	class:kaldi::nnet2::NnetComputer
ComputeLastLayerDeriv	nnet2/nnet-compute.cc	/^BaseFloat NnetComputer::ComputeLastLayerDeriv(const Posterior &pdf_post,$/;"	f	class:kaldi::nnet2::NnetComputer
GetOutput	nnet2/nnet-compute.cc	/^  CuMatrixBase<BaseFloat> &GetOutput() { return forward_data_.back(); }$/;"	f	class:kaldi::nnet2::NnetComputer
NnetComputation	nnet2/nnet-compute.cc	/^void NnetComputation(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
NnetComputer	nnet2/nnet-compute.cc	/^NnetComputer::NnetComputer(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetComputer
NnetComputer	nnet2/nnet-compute.cc	/^class NnetComputer {$/;"	c	namespace:kaldi::nnet2	file:
NnetGradientComputation	nnet2/nnet-compute.cc	/^BaseFloat NnetGradientComputation(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
Propagate	nnet2/nnet-compute.cc	/^void NnetComputer::Propagate() {$/;"	f	class:kaldi::nnet2::NnetComputer
chunk_info_	nnet2/nnet-compute.cc	/^  std::vector <ChunkInfo> chunk_info_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
forward_data_	nnet2/nnet-compute.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
kaldi	nnet2/nnet-compute.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-compute.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_	nnet2/nnet-compute.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
nnet_to_update_	nnet2/nnet-compute.cc	/^  Nnet *nnet_to_update_; \/\/ May be NULL, if just want objective function$/;"	m	class:kaldi::nnet2::NnetComputer	file:
KALDI_NNET2_NNET_COMPUTE_H_	nnet2/nnet-compute.h	21;"	d
kaldi	nnet2/nnet-compute.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-compute.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
UnitTestSolvePackingProblem	nnet2/nnet-example-functions-test.cc	/^void UnitTestSolvePackingProblem() {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-example-functions-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2/nnet-example-functions-test.cc	/^int main() {$/;"	f
nnet2	nnet2/nnet-example-functions-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
AppendDiscriminativeExamples	nnet2/nnet-example-functions.cc	/^void AppendDiscriminativeExamples($/;"	f	namespace:kaldi::nnet2
Arc	nnet2/nnet-example-functions.cc	/^  typedef LatticeArc Arc;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
CollapseTransitionIds	nnet2/nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::CollapseTransitionIds() {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
CombineDiscriminativeExamples	nnet2/nnet-example-functions.cc	/^void CombineDiscriminativeExamples($/;"	f	namespace:kaldi::nnet2
ComputeFrameInfo	nnet2/nnet-example-functions.cc	/^bool DiscriminativeExampleSplitter::ComputeFrameInfo() {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
CreateOutputLattice	nnet2/nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::CreateOutputLattice($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
DiscriminativeExampleSplitter	nnet2/nnet-example-functions.cc	/^  DiscriminativeExampleSplitter($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
DiscriminativeExampleSplitter	nnet2/nnet-example-functions.cc	/^class DiscriminativeExampleSplitter {$/;"	c	namespace:kaldi::nnet2	file:
DoExcise	nnet2/nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::DoExcise(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
DoSplit	nnet2/nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::DoSplit(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
ExampleToPdfPost	nnet2/nnet-example-functions.cc	/^void ExampleToPdfPost($/;"	f	namespace:kaldi::nnet2
Excise	nnet2/nnet-example-functions.cc	/^  void Excise(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
ExciseDiscriminativeExample	nnet2/nnet-example-functions.cc	/^void ExciseDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
FrameInfo	nnet2/nnet-example-functions.cc	/^    FrameInfo(): den_state_count(0), den_pdf_count(0),$/;"	f	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo
FrameInfo	nnet2/nnet-example-functions.cc	/^  struct FrameInfo {$/;"	s	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
GetOutputStateId	nnet2/nnet-example-functions.cc	/^DiscriminativeExampleSplitter::GetOutputStateId($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
Label	nnet2/nnet-example-functions.cc	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
LatticeToDiscriminativeExample	nnet2/nnet-example-functions.cc	/^bool LatticeToDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
NumFrames	nnet2/nnet-example-functions.cc	/^  int32 NumFrames() const { return static_cast<int32>(eg_.num_ali.size()); }$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
OutputOneSplit	nnet2/nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::OutputOneSplit(int32 seg_begin,$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
PrepareLattice	nnet2/nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::PrepareLattice(bool first_time) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
Print	nnet2/nnet-example-functions.cc	/^void SplitExampleStats::Print() {$/;"	f	class:kaldi::nnet2::SplitExampleStats
RemoveAllOutputSymbols	nnet2/nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::RemoveAllOutputSymbols(Lattice *lat) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
RightContext	nnet2/nnet-example-functions.cc	/^  int32 RightContext() { return eg_.input_frames.NumRows() - NumFrames() - eg_.left_context; }$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
SolvePackingProblem	nnet2/nnet-example-functions.cc	/^void SolvePackingProblem(BaseFloat max_cost,$/;"	f	namespace:kaldi::nnet2
Split	nnet2/nnet-example-functions.cc	/^  void Split(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
SplitDiscriminativeExample	nnet2/nnet-example-functions.cc	/^void SplitDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
StateId	nnet2/nnet-example-functions.cc	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
UpdateHash	nnet2/nnet-example-functions.cc	/^void UpdateHash($/;"	f	namespace:kaldi::nnet2
can_excise_frame	nnet2/nnet-example-functions.cc	/^    bool can_excise_frame; \/\/ True if the frame, if part of a segment, can be$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
config_	nnet2/nnet-example-functions.cc	/^  const SplitDiscriminativeExampleConfig &config_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
den_pdf_count	nnet2/nnet-example-functions.cc	/^    int32 den_pdf_count; \/\/ number of distinct pdfs in denominator lattice$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
den_state_count	nnet2/nnet-example-functions.cc	/^    int32 den_state_count;$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
eg_	nnet2/nnet-example-functions.cc	/^  const DiscriminativeNnetExample &eg_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
egs_out_	nnet2/nnet-example-functions.cc	/^  std::vector<DiscriminativeNnetExample> *egs_out_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
end_state	nnet2/nnet-example-functions.cc	/^    StateId end_state;  $/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
frame_info_	nnet2/nnet-example-functions.cc	/^  std::vector<FrameInfo> frame_info_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi	nnet2/nnet-example-functions.cc	/^namespace kaldi {$/;"	n	file:
lat_	nnet2/nnet-example-functions.cc	/^  Lattice lat_; \/\/ lattice generated from eg_.den_lat, with epsilons removed etc.$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
multiple_transition_ids	nnet2/nnet-example-functions.cc	/^    bool multiple_transition_ids; \/\/ true if there are multiple distinct$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
nnet2	nnet2/nnet-example-functions.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nonzero_derivative	nnet2/nnet-example-functions.cc	/^    bool nonzero_derivative; \/\/ True if we need to keep this frame because the$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
num_den_overlap	nnet2/nnet-example-functions.cc	/^    bool num_den_overlap; \/\/ true if num and den overlap.$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
start_state	nnet2/nnet-example-functions.cc	/^    StateId start_state;$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
state_times_	nnet2/nnet-example-functions.cc	/^  std::vector<int32> state_times_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
tmodel_	nnet2/nnet-example-functions.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
KALDI_NNET2_NNET_EXAMPLE_FUNCTIONS_H_	nnet2/nnet-example-functions.h	21;"	d
Register	nnet2/nnet-example-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
SplitDiscriminativeExampleConfig	nnet2/nnet-example-functions.h	/^  SplitDiscriminativeExampleConfig():$/;"	f	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
SplitDiscriminativeExampleConfig	nnet2/nnet-example-functions.h	/^struct SplitDiscriminativeExampleConfig {$/;"	s	namespace:kaldi::nnet2
SplitExampleStats	nnet2/nnet-example-functions.h	/^  SplitExampleStats() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:kaldi::nnet2::SplitExampleStats
SplitExampleStats	nnet2/nnet-example-functions.h	/^struct SplitExampleStats {$/;"	s	namespace:kaldi::nnet2
collapse_transition_ids	nnet2/nnet-example-functions.h	/^  bool collapse_transition_ids;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
criterion	nnet2/nnet-example-functions.h	/^  std::string criterion;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
determinize	nnet2/nnet-example-functions.h	/^  bool determinize;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
drop_frames	nnet2/nnet-example-functions.h	/^  bool drop_frames; \/\/ For MMI, true if we will eventually drop frames in which$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
excise	nnet2/nnet-example-functions.h	/^  bool excise; \/\/ if false, we will skip the "excise" step.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi	nnet2/nnet-example-functions.h	/^namespace kaldi {$/;"	n
longest_lattice	nnet2/nnet-example-functions.h	/^  int32 longest_lattice;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
longest_segment_after_excise	nnet2/nnet-example-functions.h	/^  int32 longest_segment_after_excise;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
longest_segment_after_split	nnet2/nnet-example-functions.h	/^  int32 longest_segment_after_split;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
max_length	nnet2/nnet-example-functions.h	/^  int32 max_length;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
minimize	nnet2/nnet-example-functions.h	/^  bool minimize; \/\/ we'll push and minimize if this is true.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
nnet2	nnet2/nnet-example-functions.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_frames_kept_after_excise	nnet2/nnet-example-functions.h	/^  int64 num_frames_kept_after_excise;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_frames_kept_after_split	nnet2/nnet-example-functions.h	/^  int64 num_frames_kept_after_split;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_frames_must_keep	nnet2/nnet-example-functions.h	/^  int64 num_frames_must_keep;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_frames_orig	nnet2/nnet-example-functions.h	/^  int64 num_frames_orig;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_kept_segments	nnet2/nnet-example-functions.h	/^  int32 num_kept_segments;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_lattices	nnet2/nnet-example-functions.h	/^  int32 num_lattices;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_segments	nnet2/nnet-example-functions.h	/^  int32 num_segments;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
split	nnet2/nnet-example-functions.h	/^  bool split; \/\/ if false, we won't split at all.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
test	nnet2/nnet-example-functions.h	/^  bool test;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
AcceptExamples	nnet2/nnet-example.cc	/^void ExamplesRepository::AcceptExamples($/;"	f	class:kaldi::nnet2::ExamplesRepository
Check	nnet2/nnet-example.cc	/^void DiscriminativeNnetExample::Check() const {$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
ExamplesDone	nnet2/nnet-example.cc	/^void ExamplesRepository::ExamplesDone() {$/;"	f	class:kaldi::nnet2::ExamplesRepository
GetLabelSingle	nnet2/nnet-example.cc	/^int32 NnetExample::GetLabelSingle(int32 frame, BaseFloat *weight) {$/;"	f	class:kaldi::nnet2::NnetExample
HasSimpleLabels	nnet2/nnet-example.cc	/^bool HasSimpleLabels($/;"	f	namespace:kaldi::nnet2
NnetExample	nnet2/nnet-example.cc	/^NnetExample::NnetExample(const NnetExample &input,$/;"	f	class:kaldi::nnet2::NnetExample
ProvideExamples	nnet2/nnet-example.cc	/^bool ExamplesRepository::ProvideExamples($/;"	f	class:kaldi::nnet2::ExamplesRepository
Read	nnet2/nnet-example.cc	/^void DiscriminativeNnetExample::Read(std::istream &is,$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
Read	nnet2/nnet-example.cc	/^void NnetExample::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::NnetExample
SetLabelSingle	nnet2/nnet-example.cc	/^void NnetExample::SetLabelSingle(int32 frame, int32 pdf_id, BaseFloat weight) {$/;"	f	class:kaldi::nnet2::NnetExample
Write	nnet2/nnet-example.cc	/^void DiscriminativeNnetExample::Write(std::ostream &os,$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
Write	nnet2/nnet-example.cc	/^void NnetExample::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::NnetExample
kaldi	nnet2/nnet-example.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-example.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_example_warned_left	nnet2/nnet-example.cc	/^static bool nnet_example_warned_left = false, nnet_example_warned_right = false;$/;"	m	namespace:kaldi::nnet2	file:
nnet_example_warned_right	nnet2/nnet-example.cc	/^static bool nnet_example_warned_left = false, nnet_example_warned_right = false;$/;"	m	namespace:kaldi::nnet2	file:
DiscriminativeNnetExample	nnet2/nnet-example.h	/^struct DiscriminativeNnetExample {$/;"	s	namespace:kaldi::nnet2
DiscriminativeNnetExampleWriter	nnet2/nnet-example.h	/^   DiscriminativeNnetExampleWriter;$/;"	t	namespace:kaldi::nnet2
ExamplesRepository	nnet2/nnet-example.h	/^  ExamplesRepository(): empty_semaphore_(1), done_(false) { }$/;"	f	class:kaldi::nnet2::ExamplesRepository
ExamplesRepository	nnet2/nnet-example.h	/^class ExamplesRepository {$/;"	c	namespace:kaldi::nnet2
KALDI_NNET2_NNET_EXAMPLE_H_	nnet2/nnet-example.h	22;"	d
NnetExample	nnet2/nnet-example.h	/^  NnetExample() { }$/;"	f	struct:kaldi::nnet2::NnetExample
NnetExample	nnet2/nnet-example.h	/^struct NnetExample {$/;"	s	namespace:kaldi::nnet2
NnetExampleWriter	nnet2/nnet-example.h	/^typedef TableWriter<KaldiObjectHolder<NnetExample > > NnetExampleWriter;$/;"	t	namespace:kaldi::nnet2
RandomAccessDiscriminativeNnetExampleReader	nnet2/nnet-example.h	/^   RandomAccessDiscriminativeNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
RandomAccessNnetExampleReader	nnet2/nnet-example.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<NnetExample > > RandomAccessNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
SequentialDiscriminativeNnetExampleReader	nnet2/nnet-example.h	/^   SequentialDiscriminativeNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
SequentialNnetExampleReader	nnet2/nnet-example.h	/^typedef SequentialTableReader<KaldiObjectHolder<NnetExample > > SequentialNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
den_lat	nnet2/nnet-example.h	/^  CompactLattice den_lat; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
done_	nnet2/nnet-example.h	/^  bool done_;$/;"	m	class:kaldi::nnet2::ExamplesRepository
empty_semaphore_	nnet2/nnet-example.h	/^  Semaphore empty_semaphore_;$/;"	m	class:kaldi::nnet2::ExamplesRepository
examples_	nnet2/nnet-example.h	/^  std::vector<NnetExample> examples_;$/;"	m	class:kaldi::nnet2::ExamplesRepository
full_semaphore_	nnet2/nnet-example.h	/^  Semaphore full_semaphore_;$/;"	m	class:kaldi::nnet2::ExamplesRepository
input_frames	nnet2/nnet-example.h	/^  CompressedMatrix input_frames; $/;"	m	struct:kaldi::nnet2::NnetExample
input_frames	nnet2/nnet-example.h	/^  Matrix<BaseFloat> input_frames;$/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
kaldi	nnet2/nnet-example.h	/^namespace kaldi {$/;"	n
labels	nnet2/nnet-example.h	/^  std::vector<std::vector<std::pair<int32, BaseFloat> > > labels;  $/;"	m	struct:kaldi::nnet2::NnetExample
left_context	nnet2/nnet-example.h	/^  int32 left_context;$/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
left_context	nnet2/nnet-example.h	/^  int32 left_context;$/;"	m	struct:kaldi::nnet2::NnetExample
nnet2	nnet2/nnet-example.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_ali	nnet2/nnet-example.h	/^  std::vector<int32> num_ali; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
spk_info	nnet2/nnet-example.h	/^  Vector<BaseFloat> spk_info; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
spk_info	nnet2/nnet-example.h	/^  Vector<BaseFloat> spk_info; $/;"	m	struct:kaldi::nnet2::NnetExample
weight	nnet2/nnet-example.h	/^  BaseFloat weight; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
FixNnet	nnet2/nnet-fix.cc	/^void FixNnet(const NnetFixConfig &config, Nnet *nnet) {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-fix.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-fix.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_NNET_FIX_H_	nnet2/nnet-fix.h	21;"	d
NnetFixConfig	nnet2/nnet-fix.h	/^  NnetFixConfig(): min_average_deriv(0.1), max_average_deriv(0.75),$/;"	f	struct:kaldi::nnet2::NnetFixConfig
NnetFixConfig	nnet2/nnet-fix.h	/^struct NnetFixConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/nnet-fix.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetFixConfig
kaldi	nnet2/nnet-fix.h	/^namespace kaldi {$/;"	n
max_average_deriv	nnet2/nnet-fix.h	/^  BaseFloat max_average_deriv; \/\/ Maximum average derivative that we allow,$/;"	m	struct:kaldi::nnet2::NnetFixConfig
min_average_deriv	nnet2/nnet-fix.h	/^  BaseFloat min_average_deriv; \/\/ Minimum average derivative that we allow,$/;"	m	struct:kaldi::nnet2::NnetFixConfig
nnet2	nnet2/nnet-fix.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
parameter_factor	nnet2/nnet-fix.h	/^  BaseFloat parameter_factor; \/\/ Factor (>1.0) by which we change the parameters if$/;"	m	struct:kaldi::nnet2::NnetFixConfig
relu_bias_change	nnet2/nnet-fix.h	/^  BaseFloat relu_bias_change; \/\/ Change in bias for relus that are usually close to zero.$/;"	m	struct:kaldi::nnet2::NnetFixConfig
IndexOfSoftmaxLayer	nnet2/nnet-functions.cc	/^int32 IndexOfSoftmaxLayer(const Nnet &nnet) {$/;"	f	namespace:kaldi::nnet2
InsertComponents	nnet2/nnet-functions.cc	/^void InsertComponents(const Nnet &src_nnet,$/;"	f	namespace:kaldi::nnet2
ReplaceLastComponents	nnet2/nnet-functions.cc	/^void ReplaceLastComponents(const Nnet &src_nnet,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-functions.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-functions.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_NNET_FUNCTIONS_H_	nnet2/nnet-functions.h	21;"	d
kaldi	nnet2/nnet-functions.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-functions.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
GetRetainedDim	nnet2/nnet-limit-rank.cc	/^  int32 GetRetainedDim(int32 rows, int32 cols) {$/;"	f	class:kaldi::nnet2::LimitRankClass
LimitRankClass	nnet2/nnet-limit-rank.cc	/^  LimitRankClass(const NnetLimitRankOpts &opts,$/;"	f	class:kaldi::nnet2::LimitRankClass
LimitRankClass	nnet2/nnet-limit-rank.cc	/^class LimitRankClass {$/;"	c	namespace:kaldi::nnet2	file:
LimitRankParallel	nnet2/nnet-limit-rank.cc	/^void LimitRankParallel(const NnetLimitRankOpts &opts,$/;"	f	namespace:kaldi::nnet2
c_	nnet2/nnet-limit-rank.cc	/^  int32 c_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
kaldi	nnet2/nnet-limit-rank.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-limit-rank.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_	nnet2/nnet-limit-rank.cc	/^  Nnet *nnet_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
operator ()	nnet2/nnet-limit-rank.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::LimitRankClass
opts_	nnet2/nnet-limit-rank.cc	/^  const NnetLimitRankOpts &opts_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
~LimitRankClass	nnet2/nnet-limit-rank.cc	/^  ~LimitRankClass() { }$/;"	f	class:kaldi::nnet2::LimitRankClass
KALDI_NNET2_NNET_LIMIT_RANK_H_	nnet2/nnet-limit-rank.h	21;"	d
NnetLimitRankOpts	nnet2/nnet-limit-rank.h	/^  NnetLimitRankOpts(): num_threads(1), parameter_proportion(0.75) { }$/;"	f	struct:kaldi::nnet2::NnetLimitRankOpts
NnetLimitRankOpts	nnet2/nnet-limit-rank.h	/^struct NnetLimitRankOpts {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/nnet-limit-rank.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetLimitRankOpts
kaldi	nnet2/nnet-limit-rank.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-limit-rank.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_threads	nnet2/nnet-limit-rank.h	/^  int32 num_threads;$/;"	m	struct:kaldi::nnet2::NnetLimitRankOpts
parameter_proportion	nnet2/nnet-limit-rank.h	/^  BaseFloat parameter_proportion;$/;"	m	struct:kaldi::nnet2::NnetLimitRankOpts
UnitTestNnet	nnet2/nnet-nnet-test.cc	/^void UnitTestNnet() {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-nnet-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2/nnet-nnet-test.cc	/^int main() {$/;"	f
nnet2	nnet2/nnet-nnet-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
AddNnet	nnet2/nnet-nnet.cc	/^void Nnet::AddNnet(BaseFloat alpha,$/;"	f	class:kaldi::nnet2::Nnet
AddNnet	nnet2/nnet-nnet.cc	/^void Nnet::AddNnet(const VectorBase<BaseFloat> &scale_params,$/;"	f	class:kaldi::nnet2::Nnet
Append	nnet2/nnet-nnet.cc	/^void Nnet::Append(Component *new_component) {$/;"	f	class:kaldi::nnet2::Nnet
Check	nnet2/nnet-nnet.cc	/^void Nnet::Check() const {$/;"	f	class:kaldi::nnet2::Nnet
Collapse	nnet2/nnet-nnet.cc	/^void Nnet::Collapse(bool match_updatableness) {$/;"	f	class:kaldi::nnet2::Nnet
ComponentDotProducts	nnet2/nnet-nnet.cc	/^void Nnet::ComponentDotProducts($/;"	f	class:kaldi::nnet2::Nnet
ComputeChunkInfo	nnet2/nnet-nnet.cc	/^void Nnet::ComputeChunkInfo(int32 input_chunk_size,$/;"	f	class:kaldi::nnet2::Nnet
CopyStatsFrom	nnet2/nnet-nnet.cc	/^void Nnet::CopyStatsFrom(const Nnet &other) {$/;"	f	class:kaldi::nnet2::Nnet
Destroy	nnet2/nnet-nnet.cc	/^void Nnet::Destroy() {$/;"	f	class:kaldi::nnet2::Nnet
FirstUpdatableComponent	nnet2/nnet-nnet.cc	/^int32 Nnet::FirstUpdatableComponent() const {$/;"	f	class:kaldi::nnet2::Nnet
GenRandomNnet	nnet2/nnet-nnet.cc	/^Nnet *GenRandomNnet(int32 input_dim,$/;"	f	namespace:kaldi::nnet2
GetComponent	nnet2/nnet-nnet.cc	/^Component& Nnet::GetComponent(int32 component) {$/;"	f	class:kaldi::nnet2::Nnet
GetComponent	nnet2/nnet-nnet.cc	/^const Component& Nnet::GetComponent(int32 component) const {$/;"	f	class:kaldi::nnet2::Nnet
GetLearningRates	nnet2/nnet-nnet.cc	/^void Nnet::GetLearningRates(VectorBase<BaseFloat> *learning_rates) const {$/;"	f	class:kaldi::nnet2::Nnet
GetParameterDim	nnet2/nnet-nnet.cc	/^int32 Nnet::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::Nnet
Info	nnet2/nnet-nnet.cc	/^std::string Nnet::Info() const {$/;"	f	class:kaldi::nnet2::Nnet
Init	nnet2/nnet-nnet.cc	/^void Nnet::Init(std::istream &is) {$/;"	f	class:kaldi::nnet2::Nnet
Init	nnet2/nnet-nnet.cc	/^void Nnet::Init(std::vector<Component*> *components) {$/;"	f	class:kaldi::nnet2::Nnet
InputDim	nnet2/nnet-nnet.cc	/^int32 Nnet::InputDim() const {$/;"	f	class:kaldi::nnet2::Nnet
LastUpdatableComponent	nnet2/nnet-nnet.cc	/^int32 Nnet::LastUpdatableComponent() const {$/;"	f	class:kaldi::nnet2::Nnet
LeftContext	nnet2/nnet-nnet.cc	/^int32 Nnet::LeftContext() const {$/;"	f	class:kaldi::nnet2::Nnet
LimitRankOfLastLayer	nnet2/nnet-nnet.cc	/^void Nnet::LimitRankOfLastLayer(int32 dim) {$/;"	f	class:kaldi::nnet2::Nnet
Nnet	nnet2/nnet-nnet.cc	/^Nnet::Nnet(const Nnet &other): components_(other.components_.size()) {$/;"	f	class:kaldi::nnet2::Nnet
Nnet	nnet2/nnet-nnet.cc	/^Nnet::Nnet(const Nnet &other1, const Nnet &other2) {$/;"	f	class:kaldi::nnet2::Nnet
NumUpdatableComponents	nnet2/nnet-nnet.cc	/^int32 Nnet::NumUpdatableComponents() const {$/;"	f	class:kaldi::nnet2::Nnet
OutputDim	nnet2/nnet-nnet.cc	/^int32 Nnet::OutputDim() const {$/;"	f	class:kaldi::nnet2::Nnet
Read	nnet2/nnet-nnet.cc	/^void Nnet::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::Nnet
RemoveDropout	nnet2/nnet-nnet.cc	/^void Nnet::RemoveDropout() {$/;"	f	class:kaldi::nnet2::Nnet
RemovePreconditioning	nnet2/nnet-nnet.cc	/^void Nnet::RemovePreconditioning() {$/;"	f	class:kaldi::nnet2::Nnet
ResetGenerators	nnet2/nnet-nnet.cc	/^void Nnet::ResetGenerators() { \/\/ resets random-number generators for all random$/;"	f	class:kaldi::nnet2::Nnet
Resize	nnet2/nnet-nnet.cc	/^void Nnet::Resize(int32 new_size) {$/;"	f	class:kaldi::nnet2::Nnet
ResizeOutputLayer	nnet2/nnet-nnet.cc	/^void Nnet::ResizeOutputLayer(int32 new_num_pdfs) {$/;"	f	class:kaldi::nnet2::Nnet
RightContext	nnet2/nnet-nnet.cc	/^int32 Nnet::RightContext() const {$/;"	f	class:kaldi::nnet2::Nnet
Scale	nnet2/nnet-nnet.cc	/^void Nnet::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::Nnet
ScaleComponents	nnet2/nnet-nnet.cc	/^void Nnet::ScaleComponents(const VectorBase<BaseFloat> &scale_params) {$/;"	f	class:kaldi::nnet2::Nnet
ScaleLearningRates	nnet2/nnet-nnet.cc	/^void Nnet::ScaleLearningRates(BaseFloat factor) {$/;"	f	class:kaldi::nnet2::Nnet
ScaleLearningRates	nnet2/nnet-nnet.cc	/^void Nnet::ScaleLearningRates(std::map<std::string, BaseFloat> scale_factors) {$/;"	f	class:kaldi::nnet2::Nnet
SetComponent	nnet2/nnet-nnet.cc	/^void Nnet::SetComponent(int32 c, Component *component) {$/;"	f	class:kaldi::nnet2::Nnet
SetDropoutScale	nnet2/nnet-nnet.cc	/^void Nnet::SetDropoutScale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::Nnet
SetIndexes	nnet2/nnet-nnet.cc	/^void Nnet::SetIndexes() {$/;"	f	class:kaldi::nnet2::Nnet
SetLearningRates	nnet2/nnet-nnet.cc	/^void Nnet::SetLearningRates(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::Nnet
SetLearningRates	nnet2/nnet-nnet.cc	/^void Nnet::SetLearningRates(const VectorBase<BaseFloat> &learning_rates) {$/;"	f	class:kaldi::nnet2::Nnet
SetZero	nnet2/nnet-nnet.cc	/^void Nnet::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::Nnet
SwitchToOnlinePreconditioning	nnet2/nnet-nnet.cc	/^void Nnet::SwitchToOnlinePreconditioning(int32 rank_in, int32 rank_out,$/;"	f	class:kaldi::nnet2::Nnet
UnVectorize	nnet2/nnet-nnet.cc	/^void Nnet::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::Nnet
Vectorize	nnet2/nnet-nnet.cc	/^void Nnet::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::Nnet
Write	nnet2/nnet-nnet.cc	/^void Nnet::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::Nnet
ZeroStats	nnet2/nnet-nnet.cc	/^void Nnet::ZeroStats() {$/;"	f	class:kaldi::nnet2::Nnet
kaldi	nnet2/nnet-nnet.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
operator =	nnet2/nnet-nnet.cc	/^Nnet &Nnet::operator = (const Nnet &other) {$/;"	f	class:kaldi::nnet2::Nnet
KALDI_NNET2_NNET_NNET_H_	nnet2/nnet-nnet.h	22;"	d
Nnet	nnet2/nnet-nnet.h	/^  Nnet() {}$/;"	f	class:kaldi::nnet2::Nnet
Nnet	nnet2/nnet-nnet.h	/^class Nnet {$/;"	c	namespace:kaldi::nnet2
NumComponents	nnet2/nnet-nnet.h	/^  int32 NumComponents() const { return components_.size(); }$/;"	f	class:kaldi::nnet2::Nnet
components_	nnet2/nnet-nnet.h	/^  std::vector<Component*> components_;$/;"	m	class:kaldi::nnet2::Nnet
kaldi	nnet2/nnet-nnet.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
~Nnet	nnet2/nnet-nnet.h	/^  virtual ~Nnet() { Destroy(); }$/;"	f	class:kaldi::nnet2::Nnet
Eta	nnet2/nnet-precondition-online-test.cc	/^BaseFloat OnlinePreconditionerSimple::Eta(int32 N) const {$/;"	f	class:kaldi::nnet2::OnlinePreconditionerSimple
ExactEigsOfProduct	nnet2/nnet-precondition-online-test.cc	/^void ExactEigsOfProduct(const CuMatrixBase<BaseFloat> &M,$/;"	f	namespace:kaldi::nnet2
Init	nnet2/nnet-precondition-online-test.cc	/^void OnlinePreconditionerSimple::Init(const MatrixBase<double> &R0) {$/;"	f	class:kaldi::nnet2::OnlinePreconditionerSimple
OnlinePreconditionerSimple	nnet2/nnet-precondition-online-test.cc	/^  OnlinePreconditionerSimple(): rank_(40), num_samples_history_(2000.0), alpha_(4.0),$/;"	f	class:kaldi::nnet2::OnlinePreconditionerSimple
OnlinePreconditionerSimple	nnet2/nnet-precondition-online-test.cc	/^class OnlinePreconditionerSimple {$/;"	c	namespace:kaldi::nnet2	file:
PreconditionDirections	nnet2/nnet-precondition-online-test.cc	/^void OnlinePreconditionerSimple::PreconditionDirections($/;"	f	class:kaldi::nnet2::OnlinePreconditionerSimple
PreconditionDirectionsCpu	nnet2/nnet-precondition-online-test.cc	/^void OnlinePreconditionerSimple::PreconditionDirectionsCpu($/;"	f	class:kaldi::nnet2::OnlinePreconditionerSimple
SetRank	nnet2/nnet-precondition-online-test.cc	/^  void SetRank(int32 rank) { rank_ = rank; }$/;"	f	class:kaldi::nnet2::OnlinePreconditionerSimple
UnitTestApproxEigsOfProduct	nnet2/nnet-precondition-online-test.cc	/^void UnitTestApproxEigsOfProduct() {$/;"	f	namespace:kaldi::nnet2
UnitTestPreconditionDirectionsOnline	nnet2/nnet-precondition-online-test.cc	/^void UnitTestPreconditionDirectionsOnline() {$/;"	f	namespace:kaldi::nnet2
X_t_	nnet2/nnet-precondition-online-test.cc	/^  Matrix<double> X_t_;$/;"	m	class:kaldi::nnet2::OnlinePreconditionerSimple	file:
alpha_	nnet2/nnet-precondition-online-test.cc	/^  double alpha_;$/;"	m	class:kaldi::nnet2::OnlinePreconditionerSimple	file:
d_t_	nnet2/nnet-precondition-online-test.cc	/^  Vector<double> d_t_;$/;"	m	class:kaldi::nnet2::OnlinePreconditionerSimple	file:
delta_	nnet2/nnet-precondition-online-test.cc	/^  double delta_;$/;"	m	class:kaldi::nnet2::OnlinePreconditionerSimple	file:
epsilon_	nnet2/nnet-precondition-online-test.cc	/^  double epsilon_;$/;"	m	class:kaldi::nnet2::OnlinePreconditionerSimple	file:
kaldi	nnet2/nnet-precondition-online-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2/nnet-precondition-online-test.cc	/^int main() {$/;"	f
nnet2	nnet2/nnet-precondition-online-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
num_samples_history_	nnet2/nnet-precondition-online-test.cc	/^  double num_samples_history_;$/;"	m	class:kaldi::nnet2::OnlinePreconditionerSimple	file:
rank_	nnet2/nnet-precondition-online-test.cc	/^  int32 rank_;  $/;"	m	class:kaldi::nnet2::OnlinePreconditionerSimple	file:
rho_t_	nnet2/nnet-precondition-online-test.cc	/^  double rho_t_;  $/;"	m	class:kaldi::nnet2::OnlinePreconditionerSimple	file:
ApproxEigsOfProduct	nnet2/nnet-precondition-online.cc	/^void ApproxEigsOfProduct(const CuMatrixBase<BaseFloat> &M,$/;"	f	namespace:kaldi::nnet2
CheckOrthogonal	nnet2/nnet-precondition-online.cc	/^static void CheckOrthogonal(CuMatrixBase<BaseFloat> *N,$/;"	f	namespace:kaldi::nnet2
ComputeEt	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::ComputeEt(const VectorBase<BaseFloat> &d_t,$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
ComputeWt1	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::ComputeWt1(int32 N,$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
ComputeZt	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::ComputeZt(int32 N,$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
Eta	nnet2/nnet-precondition-online.cc	/^BaseFloat OnlinePreconditioner::Eta(int32 N) const {$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
Init	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::Init(const CuMatrixBase<BaseFloat> &R0) {$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
OnlinePreconditioner	nnet2/nnet-precondition-online.cc	/^OnlinePreconditioner::OnlinePreconditioner():$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
OnlinePreconditioner	nnet2/nnet-precondition-online.cc	/^OnlinePreconditioner::OnlinePreconditioner(const OnlinePreconditioner &other):$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
PreconditionDirections	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::PreconditionDirections($/;"	f	class:kaldi::nnet2::OnlinePreconditioner
PreconditionDirectionsInternal	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::PreconditionDirectionsInternal($/;"	f	class:kaldi::nnet2::OnlinePreconditioner
ReorthogonalizeXt1	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::ReorthogonalizeXt1($/;"	f	class:kaldi::nnet2::OnlinePreconditioner
SetAlpha	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::SetAlpha(BaseFloat alpha) {$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
SetNumSamplesHistory	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::SetNumSamplesHistory(BaseFloat num_samples_history) {$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
SetRank	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::SetRank(int32 rank) {$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
SetUpdatePeriod	nnet2/nnet-precondition-online.cc	/^void OnlinePreconditioner::SetUpdatePeriod(int32 update_period) {$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
kaldi	nnet2/nnet-precondition-online.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-precondition-online.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
operator =	nnet2/nnet-precondition-online.cc	/^OnlinePreconditioner& OnlinePreconditioner::operator = ($/;"	f	class:kaldi::nnet2::OnlinePreconditioner
GetAlpha	nnet2/nnet-precondition-online.h	/^  BaseFloat GetAlpha() const { return alpha_; }$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
GetNumSamplesHistory	nnet2/nnet-precondition-online.h	/^  BaseFloat GetNumSamplesHistory() const { return num_samples_history_; }$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
GetRank	nnet2/nnet-precondition-online.h	/^  int32 GetRank() const { return rank_; }$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
KALDI_NNET2_NNET_PRECONDITION_ONLINE_H_	nnet2/nnet-precondition-online.h	21;"	d
OnlinePreconditioner	nnet2/nnet-precondition-online.h	/^class OnlinePreconditioner {$/;"	c	namespace:kaldi::nnet2
TurnOnDebug	nnet2/nnet-precondition-online.h	/^  void TurnOnDebug() { self_debug_ = true; }$/;"	f	class:kaldi::nnet2::OnlinePreconditioner
W_t_	nnet2/nnet-precondition-online.h	/^  CuMatrix<BaseFloat> W_t_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
alpha_	nnet2/nnet-precondition-online.h	/^  BaseFloat alpha_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
d_t_	nnet2/nnet-precondition-online.h	/^  Vector<BaseFloat> d_t_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
delta_	nnet2/nnet-precondition-online.h	/^  BaseFloat delta_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
epsilon_	nnet2/nnet-precondition-online.h	/^  BaseFloat epsilon_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
kaldi	nnet2/nnet-precondition-online.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-precondition-online.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_samples_history_	nnet2/nnet-precondition-online.h	/^  BaseFloat num_samples_history_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
num_updates_skipped_	nnet2/nnet-precondition-online.h	/^  int32 num_updates_skipped_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
rank_	nnet2/nnet-precondition-online.h	/^  int32 rank_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
read_write_mutex_	nnet2/nnet-precondition-online.h	/^  Mutex read_write_mutex_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
rho_t_	nnet2/nnet-precondition-online.h	/^  BaseFloat rho_t_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
self_debug_	nnet2/nnet-precondition-online.h	/^  bool self_debug_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
t_	nnet2/nnet-precondition-online.h	/^  int32 t_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
update_mutex_	nnet2/nnet-precondition-online.h	/^  Mutex update_mutex_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
update_period_	nnet2/nnet-precondition-online.h	/^  int32 update_period_;$/;"	m	class:kaldi::nnet2::OnlinePreconditioner
UnitTestPreconditionDirections	nnet2/nnet-precondition-test.cc	/^void UnitTestPreconditionDirections() {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-precondition-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2/nnet-precondition-test.cc	/^int main() {$/;"	f
nnet2	nnet2/nnet-precondition-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
PreconditionDirections	nnet2/nnet-precondition.cc	/^void PreconditionDirections(const CuMatrixBase<BaseFloat> &R,$/;"	f	namespace:kaldi::nnet2
PreconditionDirectionsAlpha	nnet2/nnet-precondition.cc	/^void PreconditionDirectionsAlpha($/;"	f	namespace:kaldi::nnet2
PreconditionDirectionsAlphaRescaled	nnet2/nnet-precondition.cc	/^void PreconditionDirectionsAlphaRescaled($/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-precondition.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-precondition.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_NNET_PRECONDITION_H_	nnet2/nnet-precondition.h	21;"	d
kaldi	nnet2/nnet-precondition.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-precondition.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
AddStats	nnet2/nnet-stats.cc	/^void NnetStats::AddStats(BaseFloat avg_deriv, BaseFloat avg_value) {$/;"	f	class:kaldi::nnet2::NnetStats
AddStats	nnet2/nnet-stats.cc	/^void NnetStats::StatsElement::AddStats(BaseFloat avg_deriv, BaseFloat avg_value) {$/;"	f	class:kaldi::nnet2::NnetStats::StatsElement
AddStatsFromNnet	nnet2/nnet-stats.cc	/^void NnetStats::AddStatsFromNnet(const Nnet &nnet) {$/;"	f	class:kaldi::nnet2::NnetStats
BucketFor	nnet2/nnet-stats.cc	/^int32 NnetStats::BucketFor(BaseFloat avg_deriv) {$/;"	f	class:kaldi::nnet2::NnetStats
GetNnetStats	nnet2/nnet-stats.cc	/^void GetNnetStats(const NnetStatsConfig &config,$/;"	f	namespace:kaldi::nnet2
PrintStats	nnet2/nnet-stats.cc	/^void NnetStats::PrintStats(std::ostream &os) {$/;"	f	class:kaldi::nnet2::NnetStats
PrintStats	nnet2/nnet-stats.cc	/^void NnetStats::StatsElement::PrintStats(std::ostream &os) {$/;"	f	class:kaldi::nnet2::NnetStats::StatsElement
kaldi	nnet2/nnet-stats.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-stats.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_NNET_STATS_H_	nnet2/nnet-stats.h	21;"	d
NnetStats	nnet2/nnet-stats.h	/^  NnetStats(int32 affine_component_index, BaseFloat bucket_width):$/;"	f	class:kaldi::nnet2::NnetStats
NnetStats	nnet2/nnet-stats.h	/^class NnetStats {$/;"	c	namespace:kaldi::nnet2
NnetStatsConfig	nnet2/nnet-stats.h	/^  NnetStatsConfig(): bucket_width(0.025) { }$/;"	f	struct:kaldi::nnet2::NnetStatsConfig
NnetStatsConfig	nnet2/nnet-stats.h	/^struct NnetStatsConfig {  $/;"	s	namespace:kaldi::nnet2
Register	nnet2/nnet-stats.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetStatsConfig
StatsElement	nnet2/nnet-stats.h	/^    StatsElement(BaseFloat deriv_begin,$/;"	f	struct:kaldi::nnet2::NnetStats::StatsElement
StatsElement	nnet2/nnet-stats.h	/^  struct StatsElement {$/;"	s	class:kaldi::nnet2::NnetStats
abs_value_sum	nnet2/nnet-stats.h	/^    BaseFloat abs_value_sum; \/\/ Sum of abs(avg-value).  Tells us whether it's$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
abs_value_sumsq	nnet2/nnet-stats.h	/^    BaseFloat abs_value_sumsq; \/\/ Sum-squared of abs(avg-value).$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
affine_component_index_	nnet2/nnet-stats.h	/^  int32 affine_component_index_; \/\/ Component index of the affine component$/;"	m	class:kaldi::nnet2::NnetStats
bucket_width	nnet2/nnet-stats.h	/^  BaseFloat bucket_width;$/;"	m	struct:kaldi::nnet2::NnetStatsConfig
bucket_width_	nnet2/nnet-stats.h	/^  BaseFloat bucket_width_; \/\/ width of buckets of stats we store (in derivative values).$/;"	m	class:kaldi::nnet2::NnetStats
buckets_	nnet2/nnet-stats.h	/^  std::vector<StatsElement> buckets_; \/\/ Stats divided into buckets by avg_deriv.$/;"	m	class:kaldi::nnet2::NnetStats
count	nnet2/nnet-stats.h	/^    int32 count;      \/\/ Number of nonlinearities in this bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
deriv_begin	nnet2/nnet-stats.h	/^    BaseFloat deriv_begin; \/\/ avg-deriv, beginning of bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
deriv_end	nnet2/nnet-stats.h	/^    BaseFloat deriv_end;   \/\/ avg-deriv, end of bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
deriv_sum	nnet2/nnet-stats.h	/^    BaseFloat deriv_sum;   \/\/ sum of avg-deriv within bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
deriv_sumsq	nnet2/nnet-stats.h	/^    BaseFloat deriv_sumsq;   \/\/ Sum-squared of avg-deriv within bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
global_	nnet2/nnet-stats.h	/^  StatsElement global_; \/\/ All the stats.$/;"	m	class:kaldi::nnet2::NnetStats
kaldi	nnet2/nnet-stats.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-stats.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
DoBackpropParallel	nnet2/nnet-update-parallel.cc	/^double DoBackpropParallel(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
DoBackpropParallelClass	nnet2/nnet-update-parallel.cc	/^  DoBackpropParallelClass(const DoBackpropParallelClass &other):$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
DoBackpropParallelClass	nnet2/nnet-update-parallel.cc	/^  DoBackpropParallelClass(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
DoBackpropParallelClass	nnet2/nnet-update-parallel.cc	/^class DoBackpropParallelClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
DoBackpropSingleThreaded	nnet2/nnet-update-parallel.cc	/^double DoBackpropSingleThreaded(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-update-parallel.cc	/^namespace kaldi {$/;"	n	file:
log_prob_	nnet2/nnet-update-parallel.cc	/^  double log_prob_; \/\/ log-like times num frames.$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
log_prob_ptr_	nnet2/nnet-update-parallel.cc	/^  double *log_prob_ptr_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
nnet2	nnet2/nnet-update-parallel.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_	nnet2/nnet-update-parallel.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
nnet_to_update_	nnet2/nnet-update-parallel.cc	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
nnet_to_update_orig_	nnet2/nnet-update-parallel.cc	/^  Nnet *nnet_to_update_orig_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
operator ()	nnet2/nnet-update-parallel.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
repository_	nnet2/nnet-update-parallel.cc	/^  ExamplesRepository *repository_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
store_separate_gradients_	nnet2/nnet-update-parallel.cc	/^  bool store_separate_gradients_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
tot_weight_	nnet2/nnet-update-parallel.cc	/^  double tot_weight_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
tot_weight_ptr_	nnet2/nnet-update-parallel.cc	/^  double *tot_weight_ptr_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
~DoBackpropParallelClass	nnet2/nnet-update-parallel.cc	/^  ~DoBackpropParallelClass() {$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
ComputeNnetObjfParallel	nnet2/nnet-update-parallel.h	/^inline double ComputeNnetObjfParallel($/;"	f	namespace:kaldi::nnet2
KALDI_NNET2_NNET_UPDATE_PARALLEL_H_	nnet2/nnet-update-parallel.h	21;"	d
kaldi	nnet2/nnet-update-parallel.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-update-parallel.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
Backprop	nnet2/nnet-update.cc	/^void NnetUpdater::Backprop(CuMatrix<BaseFloat> *deriv) const {$/;"	f	class:kaldi::nnet2::NnetUpdater
ComputeForMinibatch	nnet2/nnet-update.cc	/^double NnetUpdater::ComputeForMinibatch($/;"	f	class:kaldi::nnet2::NnetUpdater
ComputeForMinibatch	nnet2/nnet-update.cc	/^double NnetUpdater::ComputeForMinibatch(const std::vector<NnetExample> &data,$/;"	f	class:kaldi::nnet2::NnetUpdater
ComputeNnetGradient	nnet2/nnet-update.cc	/^double ComputeNnetGradient($/;"	f	namespace:kaldi::nnet2
ComputeNnetObjf	nnet2/nnet-update.cc	/^double ComputeNnetObjf($/;"	f	namespace:kaldi::nnet2
ComputeNnetObjf	nnet2/nnet-update.cc	/^double ComputeNnetObjf(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
ComputeObjfAndDeriv	nnet2/nnet-update.cc	/^double NnetUpdater::ComputeObjfAndDeriv($/;"	f	class:kaldi::nnet2::NnetUpdater
ComputeTotAccuracy	nnet2/nnet-update.cc	/^double NnetUpdater::ComputeTotAccuracy($/;"	f	class:kaldi::nnet2::NnetUpdater
DoBackprop	nnet2/nnet-update.cc	/^double DoBackprop(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
FormatInput	nnet2/nnet-update.cc	/^void NnetUpdater::FormatInput(const std::vector<NnetExample> &data) {$/;"	f	class:kaldi::nnet2::NnetUpdater
FormatNnetInput	nnet2/nnet-update.cc	/^void FormatNnetInput(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
GetOutput	nnet2/nnet-update.cc	/^void NnetUpdater::GetOutput(CuMatrix<BaseFloat> *output) {$/;"	f	class:kaldi::nnet2::NnetUpdater
NnetUpdater	nnet2/nnet-update.cc	/^NnetUpdater::NnetUpdater(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetUpdater
Propagate	nnet2/nnet-update.cc	/^void NnetUpdater::Propagate() {$/;"	f	class:kaldi::nnet2::NnetUpdater
TotalNnetTrainingWeight	nnet2/nnet-update.cc	/^BaseFloat TotalNnetTrainingWeight(const std::vector<NnetExample> &egs) {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/nnet-update.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/nnet-update.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_NNET_UPDATE_H_	nnet2/nnet-update.h	22;"	d
NnetUpdater	nnet2/nnet-update.h	/^class NnetUpdater {$/;"	c	namespace:kaldi::nnet2
chunk_info_out_	nnet2/nnet-update.h	/^  std::vector<ChunkInfo> chunk_info_out_; $/;"	m	class:kaldi::nnet2::NnetUpdater
forward_data_	nnet2/nnet-update.h	/^  std::vector<CuMatrix<BaseFloat> > forward_data_; \/\/ The forward data$/;"	m	class:kaldi::nnet2::NnetUpdater
kaldi	nnet2/nnet-update.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/nnet-update.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet_	nnet2/nnet-update.h	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::NnetUpdater
nnet_to_update_	nnet2/nnet-update.h	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::NnetUpdater
num_chunks_	nnet2/nnet-update.h	/^  int32 num_chunks_; \/\/ same as the minibatch size.$/;"	m	class:kaldi::nnet2::NnetUpdater
UnitTestNnetDecodable	nnet2/online-nnet2-decodable-test.cc	/^void UnitTestNnetDecodable() {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/online-nnet2-decodable-test.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2/online-nnet2-decodable-test.cc	/^int main() {$/;"	f
nnet2	nnet2/online-nnet2-decodable-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
ComputeForFrame	nnet2/online-nnet2-decodable.cc	/^void DecodableNnet2Online::ComputeForFrame(int32 frame) {$/;"	f	class:kaldi::nnet2::DecodableNnet2Online
DecodableNnet2Online	nnet2/online-nnet2-decodable.cc	/^DecodableNnet2Online::DecodableNnet2Online($/;"	f	class:kaldi::nnet2::DecodableNnet2Online
IsLastFrame	nnet2/online-nnet2-decodable.cc	/^bool DecodableNnet2Online::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::nnet2::DecodableNnet2Online
LogLikelihood	nnet2/online-nnet2-decodable.cc	/^BaseFloat DecodableNnet2Online::LogLikelihood(int32 frame, int32 index) {$/;"	f	class:kaldi::nnet2::DecodableNnet2Online
NumFramesReady	nnet2/online-nnet2-decodable.cc	/^int32 DecodableNnet2Online::NumFramesReady() const {$/;"	f	class:kaldi::nnet2::DecodableNnet2Online
kaldi	nnet2/online-nnet2-decodable.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/online-nnet2-decodable.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
DecodableNnet2Online	nnet2/online-nnet2-decodable.h	/^class DecodableNnet2Online: public DecodableInterface {$/;"	c	namespace:kaldi::nnet2
DecodableNnet2OnlineOptions	nnet2/online-nnet2-decodable.h	/^  DecodableNnet2OnlineOptions():$/;"	f	struct:kaldi::nnet2::DecodableNnet2OnlineOptions
DecodableNnet2OnlineOptions	nnet2/online-nnet2-decodable.h	/^struct DecodableNnet2OnlineOptions {$/;"	s	namespace:kaldi::nnet2
KALDI_NNET2_ONLINE_NNET2_DECODABLE_H_	nnet2/online-nnet2-decodable.h	22;"	d
NumIndices	nnet2/online-nnet2-decodable.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::nnet2::DecodableNnet2Online
Register	nnet2/online-nnet2-decodable.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::DecodableNnet2OnlineOptions
acoustic_scale	nnet2/online-nnet2-decodable.h	/^  BaseFloat acoustic_scale;$/;"	m	struct:kaldi::nnet2::DecodableNnet2OnlineOptions
begin_frame_	nnet2/online-nnet2-decodable.h	/^  int32 begin_frame_;  \/\/ First frame for which scaled_loglikes_ is valid$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
feat_dim_	nnet2/online-nnet2-decodable.h	/^  int32 feat_dim_;  \/\/ dimensionality of the input features.$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
features_	nnet2/online-nnet2-decodable.h	/^  OnlineFeatureInterface *features_;$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
kaldi	nnet2/online-nnet2-decodable.h	/^namespace kaldi {$/;"	n
left_context_	nnet2/online-nnet2-decodable.h	/^  int32 left_context_;  \/\/ Left context of the network (cached here)$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
log_priors_	nnet2/online-nnet2-decodable.h	/^  CuVector<BaseFloat> log_priors_;  \/\/ log-priors taken from the model.$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
max_nnet_batch_size	nnet2/online-nnet2-decodable.h	/^  int32 max_nnet_batch_size;$/;"	m	struct:kaldi::nnet2::DecodableNnet2OnlineOptions
nnet2	nnet2/online-nnet2-decodable.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet_	nnet2/online-nnet2-decodable.h	/^  const AmNnet &nnet_;$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
num_pdfs_	nnet2/online-nnet2-decodable.h	/^  int32 num_pdfs_;  \/\/ Number of pdfs, equals output-dim of the network (cached$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
opts_	nnet2/online-nnet2-decodable.h	/^  DecodableNnet2OnlineOptions opts_;$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
pad_input	nnet2/online-nnet2-decodable.h	/^  bool pad_input;$/;"	m	struct:kaldi::nnet2::DecodableNnet2OnlineOptions
right_context_	nnet2/online-nnet2-decodable.h	/^  int32 right_context_;  \/\/ Right context of the network (cached here)$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
scaled_loglikes_	nnet2/online-nnet2-decodable.h	/^  Matrix<BaseFloat> scaled_loglikes_;$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
trans_model_	nnet2/online-nnet2-decodable.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::nnet2::DecodableNnet2Online
ComputeRelevantIndexes	nnet2/rescale-nnet.cc	/^void NnetRescaler::ComputeRelevantIndexes() {$/;"	f	class:kaldi::nnet2::NnetRescaler
FormatInput	nnet2/rescale-nnet.cc	/^void NnetRescaler::FormatInput(const std::vector<NnetExample> &data,$/;"	f	class:kaldi::nnet2::NnetRescaler
GetTargetAvgDeriv	nnet2/rescale-nnet.cc	/^BaseFloat NnetRescaler::GetTargetAvgDeriv(int32 c) {$/;"	f	class:kaldi::nnet2::NnetRescaler
NnetRescaler	nnet2/rescale-nnet.cc	/^  NnetRescaler(const NnetRescaleConfig &config,$/;"	f	class:kaldi::nnet2::NnetRescaler
NnetRescaler	nnet2/rescale-nnet.cc	/^class NnetRescaler {$/;"	c	namespace:kaldi::nnet2	file:
Rescale	nnet2/rescale-nnet.cc	/^void NnetRescaler::Rescale() {$/;"	f	class:kaldi::nnet2::NnetRescaler
RescaleComponent	nnet2/rescale-nnet.cc	/^void NnetRescaler::RescaleComponent($/;"	f	class:kaldi::nnet2::NnetRescaler
RescaleNnet	nnet2/rescale-nnet.cc	/^void RescaleNnet(const NnetRescaleConfig &rescale_config,$/;"	f	namespace:kaldi::nnet2
chunk_info_out_	nnet2/rescale-nnet.cc	/^  std::vector <ChunkInfo> chunk_info_out_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
config_	nnet2/rescale-nnet.cc	/^  const NnetRescaleConfig &config_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
examples_	nnet2/rescale-nnet.cc	/^  const std::vector<NnetExample> &examples_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
kaldi	nnet2/rescale-nnet.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/rescale-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_	nnet2/rescale-nnet.cc	/^  Nnet *nnet_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
relevant_indexes_	nnet2/rescale-nnet.cc	/^  std::set<int32> relevant_indexes_; \/\/ values of c with AffineComponent followed$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
KALDI_NNET2_RESCALE_NNET_H_	nnet2/rescale-nnet.h	21;"	d
NnetRescaleConfig	nnet2/rescale-nnet.h	/^  NnetRescaleConfig(): target_avg_deriv(0.2),$/;"	f	struct:kaldi::nnet2::NnetRescaleConfig
NnetRescaleConfig	nnet2/rescale-nnet.h	/^struct NnetRescaleConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/rescale-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetRescaleConfig
delta	nnet2/rescale-nnet.h	/^  BaseFloat delta;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
kaldi	nnet2/rescale-nnet.h	/^namespace kaldi {$/;"	n
max_change	nnet2/rescale-nnet.h	/^  BaseFloat max_change; \/\/ maximum change on any one iteration (to$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
min_change	nnet2/rescale-nnet.h	/^  BaseFloat min_change; \/\/ minimum change on any one iteration (controls$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
nnet2	nnet2/rescale-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_iters	nnet2/rescale-nnet.h	/^  BaseFloat num_iters;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
target_avg_deriv	nnet2/rescale-nnet.h	/^  BaseFloat target_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
target_first_layer_avg_deriv	nnet2/rescale-nnet.h	/^  BaseFloat target_first_layer_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
target_last_layer_avg_deriv	nnet2/rescale-nnet.h	/^  BaseFloat target_last_layer_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
ComputeObjfAndGradient	nnet2/shrink-nnet.cc	/^static BaseFloat ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
ShrinkNnet	nnet2/shrink-nnet.cc	/^void ShrinkNnet(const NnetShrinkConfig &shrink_config,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/shrink-nnet.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/shrink-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_SHRINK_NNET_H_	nnet2/shrink-nnet.h	21;"	d
NnetShrinkConfig	nnet2/shrink-nnet.h	/^  NnetShrinkConfig(): num_bfgs_iters(10), initial_step(0.1) { }$/;"	f	struct:kaldi::nnet2::NnetShrinkConfig
NnetShrinkConfig	nnet2/shrink-nnet.h	/^struct NnetShrinkConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/shrink-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetShrinkConfig
initial_step	nnet2/shrink-nnet.h	/^  BaseFloat initial_step;$/;"	m	struct:kaldi::nnet2::NnetShrinkConfig
kaldi	nnet2/shrink-nnet.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/shrink-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
num_bfgs_iters	nnet2/shrink-nnet.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (e.g. 3 to 5) so we do$/;"	m	struct:kaldi::nnet2::NnetShrinkConfig
BeginNewPhase	nnet2/train-nnet-ensemble.cc	/^void NnetEnsembleTrainer::BeginNewPhase(bool first_time) {$/;"	f	class:kaldi::nnet2::NnetEnsembleTrainer
MakePair	nnet2/train-nnet-ensemble.cc	/^static inline Int32Pair MakePair(int32 first, int32 second) {$/;"	f	namespace:kaldi::nnet2
NnetEnsembleTrainer	nnet2/train-nnet-ensemble.cc	/^NnetEnsembleTrainer::NnetEnsembleTrainer($/;"	f	class:kaldi::nnet2::NnetEnsembleTrainer
TrainOnExample	nnet2/train-nnet-ensemble.cc	/^void NnetEnsembleTrainer::TrainOnExample(const NnetExample &value) {$/;"	f	class:kaldi::nnet2::NnetEnsembleTrainer
TrainOneMinibatch	nnet2/train-nnet-ensemble.cc	/^void NnetEnsembleTrainer::TrainOneMinibatch() {$/;"	f	class:kaldi::nnet2::NnetEnsembleTrainer
kaldi	nnet2/train-nnet-ensemble.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/train-nnet-ensemble.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
~NnetEnsembleTrainer	nnet2/train-nnet-ensemble.cc	/^NnetEnsembleTrainer::~NnetEnsembleTrainer() {$/;"	f	class:kaldi::nnet2::NnetEnsembleTrainer
KALDI_NNET2_TRAIN_NNET_ENSEMBLE_H_	nnet2/train-nnet-ensemble.h	22;"	d
NnetEnsembleTrainer	nnet2/train-nnet-ensemble.h	/^class NnetEnsembleTrainer {$/;"	c	namespace:kaldi::nnet2
NnetEnsembleTrainerConfig	nnet2/train-nnet-ensemble.h	/^  NnetEnsembleTrainerConfig(): minibatch_size(500),$/;"	f	struct:kaldi::nnet2::NnetEnsembleTrainerConfig
NnetEnsembleTrainerConfig	nnet2/train-nnet-ensemble.h	/^struct NnetEnsembleTrainerConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/train-nnet-ensemble.h	/^  void Register (OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetEnsembleTrainerConfig
avg_logprob_this_phase_	nnet2/train-nnet-ensemble.h	/^  double avg_logprob_this_phase_; \/\/ Needed for accumulating train log-prob on each phase.$/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
beta	nnet2/train-nnet-ensemble.h	/^  double beta;$/;"	m	struct:kaldi::nnet2::NnetEnsembleTrainerConfig
beta_	nnet2/train-nnet-ensemble.h	/^  double beta_;$/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
buffer_	nnet2/train-nnet-ensemble.h	/^  std::vector<NnetExample> buffer_; $/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
config_	nnet2/train-nnet-ensemble.h	/^  NnetEnsembleTrainerConfig config_;$/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
count_this_phase_	nnet2/train-nnet-ensemble.h	/^  double count_this_phase_; \/\/ count corresponding to the above.$/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
kaldi	nnet2/train-nnet-ensemble.h	/^namespace kaldi {$/;"	n
minibatch_size	nnet2/train-nnet-ensemble.h	/^  int32 minibatch_size;$/;"	m	struct:kaldi::nnet2::NnetEnsembleTrainerConfig
minibatches_per_phase	nnet2/train-nnet-ensemble.h	/^  int32 minibatches_per_phase;$/;"	m	struct:kaldi::nnet2::NnetEnsembleTrainerConfig
minibatches_seen_this_phase_	nnet2/train-nnet-ensemble.h	/^  int32 minibatches_seen_this_phase_;$/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
nnet2	nnet2/train-nnet-ensemble.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet_ensemble_	nnet2/train-nnet-ensemble.h	/^  std::vector<Nnet*> nnet_ensemble_; \/\/ the nnet ensemble we're training.$/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
num_phases_	nnet2/train-nnet-ensemble.h	/^  int32 num_phases_;$/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
updater_ensemble_	nnet2/train-nnet-ensemble.h	/^  std::vector<NnetUpdater*> updater_ensemble_;$/;"	m	class:kaldi::nnet2::NnetEnsembleTrainer
Backprop	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedUpdater::Backprop(Nnet *nnet_to_update,$/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
BeginNewPhase	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedTrainer::BeginNewPhase(bool first_time) {$/;"	f	class:kaldi::nnet2::NnetPerturbedTrainer
ComputeForMinibatch	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedUpdater::ComputeForMinibatch($/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
ComputeObjfAndDeriv	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedUpdater::ComputeObjfAndDeriv($/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
ComputeSupervisionLabels	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedUpdater::ComputeSupervisionLabels($/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
D_	nnet2/train-nnet-perturbed.cc	/^  BaseFloat *D_;  \/\/ Constant D that controls how much to perturb the data.  We$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
DoBackpropPerturbed	nnet2/train-nnet-perturbed.cc	/^void DoBackpropPerturbed(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
DoBackpropPerturbedParallel	nnet2/train-nnet-perturbed.cc	/^void DoBackpropPerturbedParallel(const NnetPerturbedTrainerConfig &config,$/;"	f	namespace:kaldi::nnet2
FormatInput	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedUpdater::FormatInput(const std::vector<NnetExample> &data) {$/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
InitWithinClassCovar	nnet2/train-nnet-perturbed.cc	/^void InitWithinClassCovar($/;"	f	namespace:kaldi::nnet2
InitWithinClassCovar	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedTrainer::InitWithinClassCovar($/;"	f	class:kaldi::nnet2::NnetPerturbedTrainer
NnetPerturbedTrainer	nnet2/train-nnet-perturbed.cc	/^NnetPerturbedTrainer::NnetPerturbedTrainer($/;"	f	class:kaldi::nnet2::NnetPerturbedTrainer
NnetPerturbedUpdater	nnet2/train-nnet-perturbed.cc	/^NnetPerturbedUpdater::NnetPerturbedUpdater(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
NnetPerturbedUpdater	nnet2/train-nnet-perturbed.cc	/^class NnetPerturbedUpdater {$/;"	c	namespace:kaldi::nnet2	file:
PerturbInput	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedUpdater::PerturbInput($/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
Propagate	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedUpdater::Propagate(int32 begin_layer, int32 end_layer) {$/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
PropagateInitial	nnet2/train-nnet-perturbed.cc	/^  void PropagateInitial() { Propagate(0, num_layers_before_input_); }$/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
PropagateRemaining	nnet2/train-nnet-perturbed.cc	/^  void PropagateRemaining() { Propagate(num_layers_before_input_,$/;"	f	class:kaldi::nnet2::NnetPerturbedUpdater
TrainOnExample	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedTrainer::TrainOnExample(const NnetExample &value) {$/;"	f	class:kaldi::nnet2::NnetPerturbedTrainer
TrainOneMinibatch	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedTrainer::TrainOneMinibatch() {$/;"	f	class:kaldi::nnet2::NnetPerturbedTrainer
TrainParallelPerturbedClass	nnet2/train-nnet-perturbed.cc	/^  TrainParallelPerturbedClass(const NnetPerturbedTrainerConfig &config,$/;"	f	class:kaldi::nnet2::TrainParallelPerturbedClass
TrainParallelPerturbedClass	nnet2/train-nnet-perturbed.cc	/^class TrainParallelPerturbedClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
UpdateD	nnet2/train-nnet-perturbed.cc	/^  void UpdateD(BaseFloat orig_logprob, BaseFloat perturbed_logprob) {$/;"	f	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
UpdateD	nnet2/train-nnet-perturbed.cc	/^void NnetPerturbedTrainer::UpdateD(BaseFloat orig_objf_per_example,                                   $/;"	f	class:kaldi::nnet2::NnetPerturbedTrainer
chunk_info_out_	nnet2/train-nnet-perturbed.cc	/^  std::vector<ChunkInfo> chunk_info_out_;$/;"	m	class:kaldi::nnet2::NnetPerturbedUpdater	file:
config_	nnet2/train-nnet-perturbed.cc	/^  const NnetPerturbedTrainerConfig &config_;$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
forward_data_	nnet2/train-nnet-perturbed.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_; \/\/ The forward data$/;"	m	class:kaldi::nnet2::NnetPerturbedUpdater	file:
kaldi	nnet2/train-nnet-perturbed.cc	/^namespace kaldi {$/;"	n	file:
log_prob_orig_	nnet2/train-nnet-perturbed.cc	/^  double log_prob_orig_;  \/\/ log-like times num frames (before perturbing features)$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
log_prob_orig_ptr_	nnet2/train-nnet-perturbed.cc	/^  double *log_prob_orig_ptr_;$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
log_prob_perturbed_	nnet2/train-nnet-perturbed.cc	/^  double log_prob_perturbed_;  \/\/ log-like times num frames (after perturbing features)$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
log_prob_perturbed_ptr_	nnet2/train-nnet-perturbed.cc	/^  double *log_prob_perturbed_ptr_;$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
nnet2	nnet2/train-nnet-perturbed.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_	nnet2/train-nnet-perturbed.cc	/^  Nnet *nnet_;$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
nnet_	nnet2/train-nnet-perturbed.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::NnetPerturbedUpdater	file:
nnet_to_update_	nnet2/train-nnet-perturbed.cc	/^  Nnet *nnet_to_update_;  $/;"	m	class:kaldi::nnet2::NnetPerturbedUpdater	file:
num_chunks_	nnet2/train-nnet-perturbed.cc	/^  int32 num_chunks_; \/\/ same as the minibatch size.$/;"	m	class:kaldi::nnet2::NnetPerturbedUpdater	file:
num_layers_before_input_	nnet2/train-nnet-perturbed.cc	/^  int32 num_layers_before_input_;  \/\/ Number of layers before whichever layer we$/;"	m	class:kaldi::nnet2::NnetPerturbedUpdater	file:
num_layers_before_input_	nnet2/train-nnet-perturbed.cc	/^  int32 num_layers_before_input_;$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
operator ()	nnet2/train-nnet-perturbed.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::TrainParallelPerturbedClass
repository_	nnet2/train-nnet-perturbed.cc	/^  ExamplesRepository *repository_;$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
tot_weight_	nnet2/train-nnet-perturbed.cc	/^  double tot_weight_;  \/\/ normalizing factor for the above.$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
tot_weight_ptr_	nnet2/train-nnet-perturbed.cc	/^  double *tot_weight_ptr_;$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
within_class_covar_	nnet2/train-nnet-perturbed.cc	/^  const CuMatrix<BaseFloat> &within_class_covar_;$/;"	m	class:kaldi::nnet2::NnetPerturbedUpdater	file:
within_class_covar_	nnet2/train-nnet-perturbed.cc	/^  const CuMatrix<BaseFloat> &within_class_covar_;$/;"	m	class:kaldi::nnet2::TrainParallelPerturbedClass	file:
~NnetPerturbedTrainer	nnet2/train-nnet-perturbed.cc	/^NnetPerturbedTrainer::~NnetPerturbedTrainer() {$/;"	f	class:kaldi::nnet2::NnetPerturbedTrainer
~TrainParallelPerturbedClass	nnet2/train-nnet-perturbed.cc	/^  ~TrainParallelPerturbedClass() {$/;"	f	class:kaldi::nnet2::TrainParallelPerturbedClass
D_	nnet2/train-nnet-perturbed.h	/^  BaseFloat D_;  \/\/ The distance factor D.$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
KALDI_NNET2_TRAIN_NNET_PERTURBED_H_	nnet2/train-nnet-perturbed.h	21;"	d
NnetPerturbedTrainer	nnet2/train-nnet-perturbed.h	/^class NnetPerturbedTrainer {$/;"	c	namespace:kaldi::nnet2
NnetPerturbedTrainerConfig	nnet2/train-nnet-perturbed.h	/^  NnetPerturbedTrainerConfig(): minibatch_size(500),$/;"	f	struct:kaldi::nnet2::NnetPerturbedTrainerConfig
NnetPerturbedTrainerConfig	nnet2/train-nnet-perturbed.h	/^struct NnetPerturbedTrainerConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/train-nnet-perturbed.h	/^  void Register (OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetPerturbedTrainerConfig
buffer_	nnet2/train-nnet-perturbed.h	/^  std::vector<NnetExample> buffer_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
config_	nnet2/train-nnet-perturbed.h	/^  NnetPerturbedTrainerConfig config_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
initial_d	nnet2/train-nnet-perturbed.h	/^  BaseFloat initial_d;$/;"	m	struct:kaldi::nnet2::NnetPerturbedTrainerConfig
kaldi	nnet2/train-nnet-perturbed.h	/^namespace kaldi {$/;"	n
logprob_perturbed_this_phase_	nnet2/train-nnet-perturbed.h	/^  double logprob_perturbed_this_phase_;  \/\/ same for perturbed log-prob$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
logprob_perturbed_total_	nnet2/train-nnet-perturbed.h	/^  double logprob_perturbed_total_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
logprob_this_phase_	nnet2/train-nnet-perturbed.h	/^  double logprob_this_phase_; \/\/ Needed for accumulating train log-prob on each phase.$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
logprob_total_	nnet2/train-nnet-perturbed.h	/^  double logprob_total_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
max_d_factor	nnet2/train-nnet-perturbed.h	/^  BaseFloat max_d_factor;$/;"	m	struct:kaldi::nnet2::NnetPerturbedTrainerConfig
minibatch_size	nnet2/train-nnet-perturbed.h	/^  int32 minibatch_size;$/;"	m	struct:kaldi::nnet2::NnetPerturbedTrainerConfig
minibatches_per_phase	nnet2/train-nnet-perturbed.h	/^  int32 minibatches_per_phase;$/;"	m	struct:kaldi::nnet2::NnetPerturbedTrainerConfig
minibatches_seen_this_phase_	nnet2/train-nnet-perturbed.h	/^  int32 minibatches_seen_this_phase_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
nnet2	nnet2/train-nnet-perturbed.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet_	nnet2/train-nnet-perturbed.h	/^  Nnet *nnet_; \/\/ the nnet we're training.$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
num_layers_before_input_	nnet2/train-nnet-perturbed.h	/^  int32 num_layers_before_input_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
num_phases_	nnet2/train-nnet-perturbed.h	/^  int32 num_phases_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
target_objf_change	nnet2/train-nnet-perturbed.h	/^  BaseFloat target_objf_change;$/;"	m	struct:kaldi::nnet2::NnetPerturbedTrainerConfig
tune_d_power	nnet2/train-nnet-perturbed.h	/^  BaseFloat tune_d_power;$/;"	m	struct:kaldi::nnet2::NnetPerturbedTrainerConfig
weight_this_phase_	nnet2/train-nnet-perturbed.h	/^  double weight_this_phase_; \/\/ count corresponding to the above.$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
weight_total_	nnet2/train-nnet-perturbed.h	/^  double weight_total_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
within_class_covar_	nnet2/train-nnet-perturbed.h	/^  CuMatrix<BaseFloat> within_class_covar_;$/;"	m	class:kaldi::nnet2::NnetPerturbedTrainer
GetNextMinibatch	nnet2/train-nnet.cc	/^  bool GetNextMinibatch(std::vector<NnetExample> *examples,$/;"	f	class:kaldi::nnet2::NnetExampleBackgroundReader
NnetExampleBackgroundReader	nnet2/train-nnet.cc	/^  NnetExampleBackgroundReader(int32 minibatch_size,$/;"	f	class:kaldi::nnet2::NnetExampleBackgroundReader
NnetExampleBackgroundReader	nnet2/train-nnet.cc	/^class NnetExampleBackgroundReader {$/;"	c	namespace:kaldi::nnet2	file:
ReadExamples	nnet2/train-nnet.cc	/^  void ReadExamples() {$/;"	f	class:kaldi::nnet2::NnetExampleBackgroundReader
Run	nnet2/train-nnet.cc	/^  static void* Run(void *ptr_in) {$/;"	f	class:kaldi::nnet2::NnetExampleBackgroundReader
TrainNnetSimple	nnet2/train-nnet.cc	/^int64 TrainNnetSimple(const NnetSimpleTrainerConfig &config,$/;"	f	namespace:kaldi::nnet2
consumer_semaphore_	nnet2/train-nnet.cc	/^  Semaphore consumer_semaphore_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
examples_	nnet2/train-nnet.cc	/^  std::vector<NnetExample> examples_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
finished_	nnet2/train-nnet.cc	/^  bool finished_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
formatted_examples_	nnet2/train-nnet.cc	/^  Matrix<BaseFloat> formatted_examples_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
kaldi	nnet2/train-nnet.cc	/^namespace kaldi {$/;"	n	file:
minibatch_size_	nnet2/train-nnet.cc	/^  int32 minibatch_size_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
nnet2	nnet2/train-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet_	nnet2/train-nnet.cc	/^  Nnet *nnet_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
producer_semaphore_	nnet2/train-nnet.cc	/^  Semaphore producer_semaphore_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
reader_	nnet2/train-nnet.cc	/^  SequentialNnetExampleReader *reader_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
thread_	nnet2/train-nnet.cc	/^  pthread_t thread_;$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
total_weight_	nnet2/train-nnet.cc	/^  double total_weight_;  \/\/ total weight, from TotalNnetTrainingWeight(examples_).$/;"	m	class:kaldi::nnet2::NnetExampleBackgroundReader	file:
~NnetExampleBackgroundReader	nnet2/train-nnet.cc	/^  ~NnetExampleBackgroundReader() {$/;"	f	class:kaldi::nnet2::NnetExampleBackgroundReader
KALDI_NNET2_TRAIN_NNET_H_	nnet2/train-nnet.h	21;"	d
NnetSimpleTrainerConfig	nnet2/train-nnet.h	/^  NnetSimpleTrainerConfig(): minibatch_size(500),$/;"	f	struct:kaldi::nnet2::NnetSimpleTrainerConfig
NnetSimpleTrainerConfig	nnet2/train-nnet.h	/^struct NnetSimpleTrainerConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/train-nnet.h	/^  void Register (OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetSimpleTrainerConfig
kaldi	nnet2/train-nnet.h	/^namespace kaldi {$/;"	n
minibatch_size	nnet2/train-nnet.h	/^  int32 minibatch_size;$/;"	m	struct:kaldi::nnet2::NnetSimpleTrainerConfig
minibatches_per_phase	nnet2/train-nnet.h	/^  int32 minibatches_per_phase;$/;"	m	struct:kaldi::nnet2::NnetSimpleTrainerConfig
nnet2	nnet2/train-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
Widen	nnet2/widen-nnet.cc	/^void AffineComponent::Widen(int32 new_dim,$/;"	f	class:kaldi::nnet2::AffineComponent
WidenNnet	nnet2/widen-nnet.cc	/^void WidenNnet(const NnetWidenConfig &widen_config,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2/widen-nnet.cc	/^namespace kaldi {$/;"	n	file:
nnet2	nnet2/widen-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
KALDI_NNET2_WIDEN_NNET_H_	nnet2/widen-nnet.h	21;"	d
NnetWidenConfig	nnet2/widen-nnet.h	/^  NnetWidenConfig(): hidden_layer_dim(-1),$/;"	f	struct:kaldi::nnet2::NnetWidenConfig
NnetWidenConfig	nnet2/widen-nnet.h	/^struct NnetWidenConfig {$/;"	s	namespace:kaldi::nnet2
Register	nnet2/widen-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetWidenConfig
bias_stddev	nnet2/widen-nnet.h	/^  BaseFloat bias_stddev;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
hidden_layer_dim	nnet2/widen-nnet.h	/^  int32 hidden_layer_dim;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
kaldi	nnet2/widen-nnet.h	/^namespace kaldi {$/;"	n
nnet2	nnet2/widen-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
param_stddev_factor	nnet2/widen-nnet.h	/^  BaseFloat param_stddev_factor;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
ADDLIBS	nnet2bin/Makefile	/^ADDLIBS = ..\/nnet2\/kaldi-nnet2.a ..\/nnet\/kaldi-nnet.a ..\/gmm\/kaldi-gmm.a \\$/;"	m
BINFILES	nnet2bin/Makefile	/^BINFILES = nnet-am-info nnet-init \\$/;"	m
EXTRA_CXXFLAGS	nnet2bin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	nnet2bin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	nnet2bin/Makefile	/^TESTFILES =$/;"	m
main	nnet2bin/cuda-compiled.cc	/^int main(int argc, char *argv[]) {$/;"	f
KlDivergence	nnet2bin/nnet-adjust-priors.cc	/^BaseFloat KlDivergence(const Vector<BaseFloat> &p,$/;"	f	namespace:kaldi::nnet2
PrintPriorDiagnostics	nnet2bin/nnet-adjust-priors.cc	/^void PrintPriorDiagnostics(const Vector<BaseFloat> &old_priors,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-adjust-priors.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-adjust-priors.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-adjust-priors.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
main	nnet2bin/nnet-align-compiled.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetWeights	nnet2bin/nnet-am-average.cc	/^void GetWeights(const std::string &weights_str,$/;"	f	namespace:kaldi
kaldi	nnet2bin/nnet-am-average.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-am-average.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-combine.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-compute.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-fix.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-init.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-limit-rank-final.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-limit-rank.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-mixup.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-reinitialize.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-rescale.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-shrink.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-switch-preconditioning.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-am-widen.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-combine-a.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-combine-egs-discriminative.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-combine-fast.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-combine.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-compare-hash-discriminative.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-compute-from-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-compute-prob.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-compute.cc	/^int main(int argc, char *argv[]) {$/;"	f
AverageConstPart	nnet2bin/nnet-copy-egs-discriminative.cc	/^void AverageConstPart(int32 const_feat_dim,$/;"	f	namespace:kaldi::nnet2
GetCount	nnet2bin/nnet-copy-egs-discriminative.cc	/^int32 GetCount(double expected_count) {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-copy-egs-discriminative.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-copy-egs-discriminative.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-copy-egs-discriminative.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
GetCount	nnet2bin/nnet-copy-egs.cc	/^int32 GetCount(double expected_count) {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-copy-egs.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-copy-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-copy-egs.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
main	nnet2bin/nnet-get-egs-discriminative.cc	/^int main(int argc, char *argv[]) {$/;"	f
ProcessFile	nnet2bin/nnet-get-egs.cc	/^static void ProcessFile(const MatrixBase<BaseFloat> &feats,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-get-egs.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-get-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-get-egs.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
main	nnet2bin/nnet-get-feature-transform-multi.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-get-feature-transform.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetCount	nnet2bin/nnet-get-weighted-egs.cc	/^int32 GetCount(double expected_count) {$/;"	f	namespace:kaldi::nnet2
ProcessFile	nnet2bin/nnet-get-weighted-egs.cc	/^static void ProcessFile(const MatrixBase<BaseFloat> &feats,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-get-weighted-egs.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-get-weighted-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-get-weighted-egs.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
main	nnet2bin/nnet-gradient.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-init.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-insert.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-latgen-faster-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-latgen-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-limit-degradation.cc	/^int main(int argc, char *argv[]) {$/;"	f
NnetLogprobTask	nnet2bin/nnet-logprob-parallel.cc	/^  NnetLogprobTask(const AmNnet &am_nnet,$/;"	f	struct:kaldi::nnet2::NnetLogprobTask
NnetLogprobTask	nnet2bin/nnet-logprob-parallel.cc	/^struct NnetLogprobTask {$/;"	s	namespace:kaldi::nnet2	file:
am_nnet_	nnet2bin/nnet-logprob-parallel.cc	/^  const AmNnet &am_nnet_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
feats_	nnet2bin/nnet-logprob-parallel.cc	/^  CuMatrix<BaseFloat> feats_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
inv_priors_	nnet2bin/nnet-logprob-parallel.cc	/^  const CuVector<BaseFloat> &inv_priors_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
kaldi	nnet2bin/nnet-logprob-parallel.cc	/^namespace kaldi {$/;"	n	file:
key_	nnet2bin/nnet-logprob-parallel.cc	/^  std::string key_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
log_probs_	nnet2bin/nnet-logprob-parallel.cc	/^  CuMatrix<BaseFloat> log_probs_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
logprob_writer_	nnet2bin/nnet-logprob-parallel.cc	/^  BaseFloatCuMatrixWriter *logprob_writer_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
main	nnet2bin/nnet-logprob-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-logprob-parallel.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
operator ()	nnet2bin/nnet-logprob-parallel.cc	/^  void operator () () {$/;"	f	struct:kaldi::nnet2::NnetLogprobTask
~NnetLogprobTask	nnet2bin/nnet-logprob-parallel.cc	/^  ~NnetLogprobTask() { \/\/ Produces output.  Run sequentially.$/;"	f	struct:kaldi::nnet2::NnetLogprobTask
main	nnet2bin/nnet-logprob.cc	/^int main(int argc, char *argv[]) {$/;"	f
NnetLogprobTask	nnet2bin/nnet-logprob2-parallel.cc	/^  NnetLogprobTask(const AmNnet &am_nnet,$/;"	f	struct:kaldi::nnet2::NnetLogprobTask
NnetLogprobTask	nnet2bin/nnet-logprob2-parallel.cc	/^struct NnetLogprobTask {$/;"	s	namespace:kaldi::nnet2	file:
am_nnet_	nnet2bin/nnet-logprob2-parallel.cc	/^  const AmNnet &am_nnet_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
feats_	nnet2bin/nnet-logprob2-parallel.cc	/^  CuMatrix<BaseFloat> feats_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
inv_priors_	nnet2bin/nnet-logprob2-parallel.cc	/^  const CuVector<BaseFloat> &inv_priors_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
kaldi	nnet2bin/nnet-logprob2-parallel.cc	/^namespace kaldi {$/;"	n	file:
key_	nnet2bin/nnet-logprob2-parallel.cc	/^  std::string key_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
log_probs_	nnet2bin/nnet-logprob2-parallel.cc	/^  CuMatrix<BaseFloat> log_probs_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
logprob_writer_divided_	nnet2bin/nnet-logprob2-parallel.cc	/^  BaseFloatMatrixWriter *logprob_writer_divided_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
main	nnet2bin/nnet-logprob2-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-logprob2-parallel.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
operator ()	nnet2bin/nnet-logprob2-parallel.cc	/^  void operator () () {$/;"	f	struct:kaldi::nnet2::NnetLogprobTask
prob_writer_nodiv_	nnet2bin/nnet-logprob2-parallel.cc	/^  BaseFloatMatrixWriter *prob_writer_nodiv_;$/;"	m	struct:kaldi::nnet2::NnetLogprobTask	file:
~NnetLogprobTask	nnet2bin/nnet-logprob2-parallel.cc	/^  ~NnetLogprobTask() { \/\/ Produces output.  Run sequentially.$/;"	f	struct:kaldi::nnet2::NnetLogprobTask
main	nnet2bin/nnet-logprob2.cc	/^int main(int argc, char *argv[]) {$/;"	f
SetMaxChange	nnet2bin/nnet-modify-learning-rates.cc	/^void SetMaxChange(BaseFloat max_change, Nnet *nnet) {$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-modify-learning-rates.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-modify-learning-rates.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-modify-learning-rates.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
main	nnet2bin/nnet-normalize-stddev.cc	/^int main(int argc, char *argv[]) {$/;"	f
TransformTrainingExample	nnet2bin/nnet-perturb-egs-fmllr.cc	/^void TransformTrainingExample(const Matrix<BaseFloat> &fmllr_mat,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-perturb-egs-fmllr.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-perturb-egs-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-perturb-egs-fmllr.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
PerturbTrainingExample	nnet2bin/nnet-perturb-egs.cc	/^void PerturbTrainingExample(const TpMatrix<BaseFloat> &cholesky,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-perturb-egs.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-perturb-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-perturb-egs.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
SplitEgsKey	nnet2bin/nnet-relabel-egs.cc	/^  bool SplitEgsKey(const std::string &key, $/;"	f	namespace:kaldi
kaldi	nnet2bin/nnet-relabel-egs.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-relabel-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-replace-last-layers.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-select-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-show-progress.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-shrink.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-shuffle-egs-discriminative.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-shuffle-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-subset-egs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-to-raw-nnet.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-train-discriminative-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-train-discriminative-simple.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-train-ensemble.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-train-parallel-perturbed.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-train-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-train-perturbed.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-train-simple-perturbed.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet-train-simple.cc	/^int main(int argc, char *argv[]) {$/;"	f
SetPriors	nnet2bin/nnet-train-transitions.cc	/^void SetPriors(const TransitionModel &tmodel,$/;"	f	namespace:kaldi::nnet2
kaldi	nnet2bin/nnet-train-transitions.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet-train-transitions.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet2	nnet2bin/nnet-train-transitions.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
ConvertAddShiftComponent	nnet2bin/nnet1-to-raw-nnet.cc	/^nnet2::Component *ConvertAddShiftComponent($/;"	f	namespace:kaldi
ConvertAffineTransformComponent	nnet2bin/nnet1-to-raw-nnet.cc	/^nnet2::Component *ConvertAffineTransformComponent($/;"	f	namespace:kaldi
ConvertComponent	nnet2bin/nnet1-to-raw-nnet.cc	/^nnet2::Component *ConvertComponent(const nnet1::Component &nnet1_component) {$/;"	f	namespace:kaldi
ConvertNnet1ToNnet2	nnet2bin/nnet1-to-raw-nnet.cc	/^nnet2::Nnet *ConvertNnet1ToNnet2(const nnet1::Nnet &nnet1) {$/;"	f	namespace:kaldi
ConvertRescaleComponent	nnet2bin/nnet1-to-raw-nnet.cc	/^nnet2::Component *ConvertRescaleComponent($/;"	f	namespace:kaldi
ConvertSigmoidComponent	nnet2bin/nnet1-to-raw-nnet.cc	/^nnet2::Component *ConvertSigmoidComponent($/;"	f	namespace:kaldi
ConvertSoftmaxComponent	nnet2bin/nnet1-to-raw-nnet.cc	/^nnet2::Component *ConvertSoftmaxComponent($/;"	f	namespace:kaldi
ConvertSpliceComponent	nnet2bin/nnet1-to-raw-nnet.cc	/^nnet2::Component *ConvertSpliceComponent($/;"	f	namespace:kaldi
kaldi	nnet2bin/nnet1-to-raw-nnet.cc	/^namespace kaldi {$/;"	n	file:
main	nnet2bin/nnet1-to-raw-nnet.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/nnet2-boost-silence.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/raw-nnet-concat.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/raw-nnet-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnet2bin/raw-nnet-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	nnetbin/Makefile	/^ADDLIBS = ..\/nnet\/kaldi-nnet.a ..\/cudamatrix\/kaldi-cudamatrix.a ..\/lat\/kaldi-lat.a \\$/;"	m
BINFILES	nnetbin/Makefile	/^BINFILES = nnet-train-frmshuff \\$/;"	m
EXTRA_CXXFLAGS	nnetbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	nnetbin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	nnetbin/Makefile	/^TESTFILES =$/;"	m
main	nnetbin/cmvn-to-nnet.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/feat-to-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-concat.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-forward.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-initialize.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-kl-hmm-acc.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-kl-hmm-mat-to-component.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-kl-hmm-sum-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-train-frmshuff.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/nnet-train-lstm-streams.cc	/^int main(int argc, char *argv[]) {$/;"	f
LatticeAcousticRescore	nnetbin/nnet-train-mmi-sequential.cc	/^void LatticeAcousticRescore(const Matrix<BaseFloat> &log_like,$/;"	f	namespace:kaldi::nnet1
kaldi	nnetbin/nnet-train-mmi-sequential.cc	/^namespace kaldi {$/;"	n	file:
main	nnetbin/nnet-train-mmi-sequential.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet1	nnetbin/nnet-train-mmi-sequential.cc	/^namespace nnet1 {$/;"	n	namespace:kaldi	file:
LatticeAcousticRescore	nnetbin/nnet-train-mpe-sequential.cc	/^void LatticeAcousticRescore(const Matrix<BaseFloat> &log_like,$/;"	f	namespace:kaldi::nnet1
kaldi	nnetbin/nnet-train-mpe-sequential.cc	/^namespace kaldi {$/;"	n	file:
main	nnetbin/nnet-train-mpe-sequential.cc	/^int main(int argc, char *argv[]) {$/;"	f
nnet1	nnetbin/nnet-train-mpe-sequential.cc	/^namespace nnet1 {$/;"	n	namespace:kaldi	file:
main	nnetbin/nnet-train-perutt.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/paste-post.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/rbm-convert-to-nnet.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/rbm-train-cd1-frmshuff.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/train-transitions.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	nnetbin/transf-to-nnet.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	online/Makefile	/^ADDLIBS = ..\/decoder\/kaldi-decoder.a ..\/lat\/kaldi-lat.a ..\/feat\/kaldi-feat.a \\$/;"	m
EXTRA_LDLIBS	online/Makefile	/^    EXTRA_LDLIBS = ..\/..\/tools\/portaudio\/install\/lib64\/libportaudio.a$/;"	m
EXTRA_LDLIBS	online/Makefile	/^    EXTRA_LDLIBS = ..\/..\/tools\/portaudio\/install\/lib\/libportaudio.a$/;"	m
EXTRA_LDLIBS	online/Makefile	/^EXTRA_LDLIBS =$/;"	m
LIBNAME	online/Makefile	/^LIBNAME = kaldi-online$/;"	m
OBJFILES	online/Makefile	/^OBJFILES = online-audio-source.o online-feat-input.o online-decodable.o online-faster-decoder.o onlinebin-util.o online-tcp-source.o$/;"	m
TESTFILES	online/Makefile	/^TESTFILES = online-feat-test$/;"	m
UNAME	online/Makefile	/^UNAME=$(shell uname)$/;"	m
Callback	online/online-audio-source.cc	/^int OnlinePaSource::Callback(const void *input, void *output,$/;"	f	class:kaldi::OnlinePaSource
OnlinePaSource	online/online-audio-source.cc	/^OnlinePaSource::OnlinePaSource(const uint32 timeout,$/;"	f	class:kaldi::OnlinePaSource
PaCallback	online/online-audio-source.cc	/^int PaCallback(const void *input, void *output,$/;"	f	namespace:kaldi
Read	online/online-audio-source.cc	/^bool OnlinePaSource::Read(Vector<BaseFloat> *data) {$/;"	f	class:kaldi::OnlinePaSource
Read	online/online-audio-source.cc	/^bool OnlineVectorSource::Read(Vector<BaseFloat> *data) {$/;"	f	class:kaldi::OnlineVectorSource
kaldi	online/online-audio-source.cc	/^namespace kaldi {$/;"	n	file:
~OnlinePaSource	online/online-audio-source.cc	/^OnlinePaSource::~OnlinePaSource() {$/;"	f	class:kaldi::OnlinePaSource
KALDI_ONLINE_ONLINE_AUDIO_SOURCE_H_	online/online-audio-source.h	24;"	d
OnlineAudioSourceItf	online/online-audio-source.h	/^class OnlineAudioSourceItf {$/;"	c	namespace:kaldi
OnlinePaSource	online/online-audio-source.h	/^class OnlinePaSource : public OnlineAudioSourceItf {$/;"	c	namespace:kaldi
OnlineVectorSource	online/online-audio-source.h	/^  OnlineVectorSource(const VectorBase<BaseFloat> &input)$/;"	f	class:kaldi::OnlineVectorSource
OnlineVectorSource	online/online-audio-source.h	/^class OnlineVectorSource: public OnlineAudioSourceItf {$/;"	c	namespace:kaldi
SampleType	online/online-audio-source.h	/^  typedef int16 SampleType; \/\/ hardcoded 16-bit audio$/;"	t	class:kaldi::OnlinePaSource
TimedOut	online/online-audio-source.h	/^  bool TimedOut() { return timed_out_; }$/;"	f	class:kaldi::OnlinePaSource
kaldi	online/online-audio-source.h	/^namespace kaldi {$/;"	n
noverflows_	online/online-audio-source.h	/^  uint32 noverflows_; \/\/ number of the ringbuf overflows since the last report$/;"	m	class:kaldi::OnlinePaSource
nread_calls_	online/online-audio-source.h	/^  uint32 nread_calls_; \/\/ number of Read() calls so far$/;"	m	class:kaldi::OnlinePaSource
pa_ringbuf_	online/online-audio-source.h	/^  PaUtilRingBuffer pa_ringbuf_; \/\/ a data structure used to wrap the ring buffer$/;"	m	class:kaldi::OnlinePaSource
pa_started_	online/online-audio-source.h	/^  bool pa_started_; \/\/ becomes "true" after "pa_stream_" is started$/;"	m	class:kaldi::OnlinePaSource
pa_stream_	online/online-audio-source.h	/^  PaStream *pa_stream_;$/;"	m	class:kaldi::OnlinePaSource
pos_	online/online-audio-source.h	/^  uint32 pos_; \/\/ the index of the first element, not yet consumed$/;"	m	class:kaldi::OnlineVectorSource
rb_size_	online/online-audio-source.h	/^  int32 rb_size_;$/;"	m	class:kaldi::OnlinePaSource
rbs_t	online/online-audio-source.h	/^  typedef ring_buffer_size_t rbs_t;$/;"	t	class:kaldi::OnlinePaSource
report_interval_	online/online-audio-source.h	/^  uint32 report_interval_; \/\/ interval (in Read() calls) to report PA rb overflows$/;"	m	class:kaldi::OnlinePaSource
ring_buffer_	online/online-audio-source.h	/^  char *ring_buffer_; \/\/ points to the actual buffer used by PA to store samples$/;"	m	class:kaldi::OnlinePaSource
sample_rate_	online/online-audio-source.h	/^  uint32 sample_rate_; \/\/ the sampling rate of the input audio$/;"	m	class:kaldi::OnlinePaSource
samples_lost_	online/online-audio-source.h	/^  uint32 samples_lost_; \/\/ samples lost, due to PA ring buffer overflow$/;"	m	class:kaldi::OnlinePaSource
src_	online/online-audio-source.h	/^  Vector<BaseFloat> src_;$/;"	m	class:kaldi::OnlineVectorSource
timed_out_	online/online-audio-source.h	/^  bool timed_out_; \/\/ True if the last call to Read() failed to obtain the requested$/;"	m	class:kaldi::OnlinePaSource
timeout_	online/online-audio-source.h	/^  uint32 timeout_; \/\/ timeout in milliseconds. if > 0, after this many ms. we$/;"	m	class:kaldi::OnlinePaSource
~OnlineAudioSourceItf	online/online-audio-source.h	/^  virtual ~OnlineAudioSourceItf() { }$/;"	f	class:kaldi::OnlineAudioSourceItf
CacheFrame	online/online-decodable.cc	/^void OnlineDecodableDiagGmmScaled::CacheFrame(int32 frame) {$/;"	f	class:kaldi::OnlineDecodableDiagGmmScaled
IsLastFrame	online/online-decodable.cc	/^bool OnlineDecodableDiagGmmScaled::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineDecodableDiagGmmScaled
LogLikelihood	online/online-decodable.cc	/^BaseFloat OnlineDecodableDiagGmmScaled::LogLikelihood(int32 frame, int32 index) {$/;"	f	class:kaldi::OnlineDecodableDiagGmmScaled
OnlineDecodableDiagGmmScaled	online/online-decodable.cc	/^OnlineDecodableDiagGmmScaled::OnlineDecodableDiagGmmScaled($/;"	f	class:kaldi::OnlineDecodableDiagGmmScaled
kaldi	online/online-decodable.cc	/^namespace kaldi {$/;"	n	file:
KALDI_ONLINE_ONLINE_DECODABLE_H_	online/online-decodable.h	25;"	d
NumIndices	online/online-decodable.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::OnlineDecodableDiagGmmScaled
OnlineDecodableDiagGmmScaled	online/online-decodable.h	/^class OnlineDecodableDiagGmmScaled : public DecodableInterface {$/;"	c	namespace:kaldi
ac_model_	online/online-decodable.h	/^  const AmDiagGmm &ac_model_;$/;"	m	class:kaldi::OnlineDecodableDiagGmmScaled
ac_scale_	online/online-decodable.h	/^  BaseFloat ac_scale_;$/;"	m	class:kaldi::OnlineDecodableDiagGmmScaled
cache_	online/online-decodable.h	/^  std::vector<std::pair<int32, BaseFloat> > cache_;$/;"	m	class:kaldi::OnlineDecodableDiagGmmScaled
cur_feats_	online/online-decodable.h	/^  Vector<BaseFloat> cur_feats_;$/;"	m	class:kaldi::OnlineDecodableDiagGmmScaled
cur_frame_	online/online-decodable.h	/^  int32 cur_frame_;$/;"	m	class:kaldi::OnlineDecodableDiagGmmScaled
feat_dim_	online/online-decodable.h	/^  const int32 feat_dim_; \/\/ dimensionality of the input features$/;"	m	class:kaldi::OnlineDecodableDiagGmmScaled
features_	online/online-decodable.h	/^  OnlineFeatureMatrix *features_;$/;"	m	class:kaldi::OnlineDecodableDiagGmmScaled
kaldi	online/online-decodable.h	/^namespace kaldi {$/;"	n
trans_model_	online/online-decodable.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::OnlineDecodableDiagGmmScaled
Decode	online/online-faster-decoder.cc	/^OnlineFasterDecoder::Decode(DecodableInterface *decodable) {$/;"	f	class:kaldi::OnlineFasterDecoder
EndOfUtterance	online/online-faster-decoder.cc	/^bool OnlineFasterDecoder::EndOfUtterance() {$/;"	f	class:kaldi::OnlineFasterDecoder
FinishTraceBack	online/online-faster-decoder.cc	/^OnlineFasterDecoder::FinishTraceBack(fst::MutableFst<LatticeArc> *out_fst) {$/;"	f	class:kaldi::OnlineFasterDecoder
MakeLattice	online/online-faster-decoder.cc	/^OnlineFasterDecoder::MakeLattice(const Token *start,$/;"	f	class:kaldi::OnlineFasterDecoder
PartialTraceback	online/online-faster-decoder.cc	/^OnlineFasterDecoder::PartialTraceback(fst::MutableFst<LatticeArc> *out_fst) {$/;"	f	class:kaldi::OnlineFasterDecoder
ResetDecoder	online/online-faster-decoder.cc	/^void OnlineFasterDecoder::ResetDecoder(bool full) {$/;"	f	class:kaldi::OnlineFasterDecoder
TracebackNFrames	online/online-faster-decoder.cc	/^OnlineFasterDecoder::TracebackNFrames(int32 nframes,$/;"	f	class:kaldi::OnlineFasterDecoder
UpdateImmortalToken	online/online-faster-decoder.cc	/^void OnlineFasterDecoder::UpdateImmortalToken() {$/;"	f	class:kaldi::OnlineFasterDecoder
kaldi	online/online-faster-decoder.cc	/^namespace kaldi {$/;"	n	file:
DecodeState	online/online-faster-decoder.h	/^  enum DecodeState {$/;"	g	class:kaldi::OnlineFasterDecoder
KALDI_ONLINE_ONLINE_FASTER_DECODER_H_	online/online-faster-decoder.h	24;"	d
OnlineFasterDecoder	online/online-faster-decoder.h	/^  OnlineFasterDecoder(const fst::Fst<fst::StdArc> &fst,$/;"	f	class:kaldi::OnlineFasterDecoder
OnlineFasterDecoder	online/online-faster-decoder.h	/^class OnlineFasterDecoder : public FasterDecoder {$/;"	c	namespace:kaldi
OnlineFasterDecoderOpts	online/online-faster-decoder.h	/^  OnlineFasterDecoderOpts() :$/;"	f	struct:kaldi::OnlineFasterDecoderOpts
OnlineFasterDecoderOpts	online/online-faster-decoder.h	/^struct OnlineFasterDecoderOpts : public FasterDecoderOptions {$/;"	s	namespace:kaldi
Register	online/online-faster-decoder.h	/^  void Register(OptionsItf *po, bool full) {$/;"	f	struct:kaldi::OnlineFasterDecoderOpts
batch_size	online/online-faster-decoder.h	/^  int32 batch_size; \/\/ number of features decoded in one go$/;"	m	struct:kaldi::OnlineFasterDecoderOpts
beam_update	online/online-faster-decoder.h	/^  BaseFloat beam_update; \/\/ rate of adjustment of the beam$/;"	m	struct:kaldi::OnlineFasterDecoderOpts
effective_beam_	online/online-faster-decoder.h	/^  BaseFloat &effective_beam_; \/\/ the currently used beam$/;"	m	class:kaldi::OnlineFasterDecoder
frame	online/online-faster-decoder.h	/^  int32 frame() { return frame_; }$/;"	f	class:kaldi::OnlineFasterDecoder
frame_	online/online-faster-decoder.h	/^  int32 frame_; \/\/ the next frame to be processed$/;"	m	class:kaldi::OnlineFasterDecoder
immortal_tok_	online/online-faster-decoder.h	/^  Token *immortal_tok_;      \/\/ "immortal" token means it's an ancestor of ...$/;"	m	class:kaldi::OnlineFasterDecoder
inter_utt_sil	online/online-faster-decoder.h	/^  int32 inter_utt_sil; \/\/ minimum silence (#frames) to trigger end of utterance$/;"	m	struct:kaldi::OnlineFasterDecoderOpts
kEndBatch	online/online-faster-decoder.h	/^    kEndBatch = 4 \/\/ End of batch - end of utterance not reached yet$/;"	e	enum:kaldi::OnlineFasterDecoder::DecodeState
kEndFeats	online/online-faster-decoder.h	/^    kEndFeats = 1, \/\/ No more scores are available from the Decodable$/;"	e	enum:kaldi::OnlineFasterDecoder::DecodeState
kEndUtt	online/online-faster-decoder.h	/^    kEndUtt = 2, \/\/ End of utterance, caused by e.g. a sufficiently long silence$/;"	e	enum:kaldi::OnlineFasterDecoder::DecodeState
kaldi	online/online-faster-decoder.h	/^namespace kaldi {$/;"	n
max_beam_	online/online-faster-decoder.h	/^  const BaseFloat max_beam_; \/\/ the maximum allowed beam$/;"	m	class:kaldi::OnlineFasterDecoder
max_beam_update	online/online-faster-decoder.h	/^  BaseFloat max_beam_update; \/\/ maximum rate of beam adjustment$/;"	m	struct:kaldi::OnlineFasterDecoderOpts
max_utt_len_	online/online-faster-decoder.h	/^  int32 max_utt_len_; \/\/ if utt. is longer, we accept shorter silence as utt. separators$/;"	m	struct:kaldi::OnlineFasterDecoderOpts
opts_	online/online-faster-decoder.h	/^  const OnlineFasterDecoderOpts opts_;$/;"	m	class:kaldi::OnlineFasterDecoder
prev_immortal_tok_	online/online-faster-decoder.h	/^  Token *prev_immortal_tok_; \/\/ ... all currently active tokens$/;"	m	class:kaldi::OnlineFasterDecoder
rt_max	online/online-faster-decoder.h	/^  BaseFloat rt_max; \/\/ maximum decoding runtime factor$/;"	m	struct:kaldi::OnlineFasterDecoderOpts
rt_min	online/online-faster-decoder.h	/^  BaseFloat rt_min; \/\/ minimum decoding runtime factor$/;"	m	struct:kaldi::OnlineFasterDecoderOpts
silence_set_	online/online-faster-decoder.h	/^  const ConstIntegerSet<int32> silence_set_; \/\/ silence phones IDs$/;"	m	class:kaldi::OnlineFasterDecoder
state_	online/online-faster-decoder.h	/^  DecodeState state_; \/\/ the current state of the decoder$/;"	m	class:kaldi::OnlineFasterDecoder
trans_model_	online/online-faster-decoder.h	/^  const TransitionModel &trans_model_; \/\/ needed for trans-id -> phone conversion$/;"	m	class:kaldi::OnlineFasterDecoder
update_interval	online/online-faster-decoder.h	/^  int32 update_interval; \/\/ beam update period in # of frames$/;"	m	struct:kaldi::OnlineFasterDecoderOpts
utt_frames_	online/online-faster-decoder.h	/^  int32 utt_frames_; \/\/ # frames processed from the current utterance$/;"	m	class:kaldi::OnlineFasterDecoder
AcceptFrame	online/online-feat-input.cc	/^void OnlineCmnInput::AcceptFrame(const VectorBase<BaseFloat> &input) {$/;"	f	class:kaldi::OnlineCmnInput
AppendFrames	online/online-feat-input.cc	/^void OnlineDeltaInput::AppendFrames(const MatrixBase<BaseFloat> &input1,$/;"	f	class:kaldi::OnlineDeltaInput
Compute	online/online-feat-input.cc	/^bool OnlineCacheInput::Compute(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineCacheInput
Compute	online/online-feat-input.cc	/^bool OnlineCmnInput::Compute(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineCmnInput
Compute	online/online-feat-input.cc	/^bool OnlineDeltaInput::Compute(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineDeltaInput
Compute	online/online-feat-input.cc	/^bool OnlineLdaInput::Compute(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineLdaInput
Compute	online/online-feat-input.cc	/^bool OnlineUdpInput::Compute(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineUdpInput
ComputeInternal	online/online-feat-input.cc	/^bool OnlineCmnInput::ComputeInternal(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineCmnInput
ComputeNextRemainder	online/online-feat-input.cc	/^void OnlineLdaInput::ComputeNextRemainder(const MatrixBase<BaseFloat> &input) {$/;"	f	class:kaldi::OnlineLdaInput
Deallocate	online/online-feat-input.cc	/^void OnlineCacheInput::Deallocate() {$/;"	f	class:kaldi::OnlineCacheInput
DeltaComputation	online/online-feat-input.cc	/^void OnlineDeltaInput::DeltaComputation(const MatrixBase<BaseFloat> &input,$/;"	f	class:kaldi::OnlineDeltaInput
GetCachedData	online/online-feat-input.cc	/^void OnlineCacheInput::GetCachedData(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineCacheInput
GetFrame	online/online-feat-input.cc	/^SubVector<BaseFloat> OnlineFeatureMatrix::GetFrame(int32 frame) {$/;"	f	class:kaldi::OnlineFeatureMatrix
GetNextFeatures	online/online-feat-input.cc	/^void OnlineFeatureMatrix::GetNextFeatures() {$/;"	f	class:kaldi::OnlineFeatureMatrix
IsValidFrame	online/online-feat-input.cc	/^bool OnlineFeatureMatrix::IsValidFrame (int32 frame) {$/;"	f	class:kaldi::OnlineFeatureMatrix
NumOutputFrames	online/online-feat-input.cc	/^int32 OnlineCmnInput::NumOutputFrames(int32 num_new_frames,$/;"	f	class:kaldi::OnlineCmnInput
OnlineDeltaInput	online/online-feat-input.cc	/^OnlineDeltaInput::OnlineDeltaInput(const DeltaFeaturesOptions &delta_opts,$/;"	f	class:kaldi::OnlineDeltaInput
OnlineLdaInput	online/online-feat-input.cc	/^OnlineLdaInput::OnlineLdaInput(OnlineFeatInputItf *input,$/;"	f	class:kaldi::OnlineLdaInput
OnlineUdpInput	online/online-feat-input.cc	/^OnlineUdpInput::OnlineUdpInput(int32 port, int32 feature_dim):$/;"	f	class:kaldi::OnlineUdpInput
OutputFrame	online/online-feat-input.cc	/^void OnlineCmnInput::OutputFrame(VectorBase<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineCmnInput
SpliceFrames	online/online-feat-input.cc	/^void OnlineLdaInput::SpliceFrames(const MatrixBase<BaseFloat> &input1,$/;"	f	class:kaldi::OnlineLdaInput
TransformToOutput	online/online-feat-input.cc	/^void OnlineLdaInput::TransformToOutput(const MatrixBase<BaseFloat> &spliced_feats,$/;"	f	class:kaldi::OnlineLdaInput
kaldi	online/online-feat-input.cc	/^namespace kaldi {$/;"	n	file:
Compute	online/online-feat-input.h	/^OnlineFeInput<E>::Compute(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineFeInput
Context	online/online-feat-input.h	/^  int32 Context() const { return opts_.order * opts_.window; }$/;"	f	class:kaldi::OnlineDeltaInput
Dim	online/online-feat-input.h	/^  int32 Dim() const { return feat_dim_; }$/;"	f	class:kaldi::OnlineFeatureMatrix
Dim	online/online-feat-input.h	/^  int32 Dim() const { return input_->Dim(); }$/;"	f	class:kaldi::OnlineCacheInput
Dim	online/online-feat-input.h	/^  virtual int32 Dim() const { return extractor_->Dim(); }$/;"	f	class:kaldi::OnlineFeInput
Dim	online/online-feat-input.h	/^  virtual int32 Dim() const { return feature_dim_; }$/;"	f	class:kaldi::OnlineUdpInput
Dim	online/online-feat-input.h	/^  virtual int32 Dim() const { return input_->Dim(); }$/;"	f	class:kaldi::OnlineCmnInput
Dim	online/online-feat-input.h	/^  virtual int32 Dim() const { return input_dim_ * (opts_.order + 1); }$/;"	f	class:kaldi::OnlineDeltaInput
Dim	online/online-feat-input.h	/^  virtual int32 Dim() const { return linear_transform_.NumRows(); }$/;"	f	class:kaldi::OnlineLdaInput
KALDI_ONLINE_ONLINE_FEAT_INPUT_H_	online/online-feat-input.h	23;"	d
OnlineCacheInput	online/online-feat-input.h	/^  OnlineCacheInput(OnlineFeatInputItf *input): input_(input) { }$/;"	f	class:kaldi::OnlineCacheInput
OnlineCacheInput	online/online-feat-input.h	/^class OnlineCacheInput : public OnlineFeatInputItf {$/;"	c	namespace:kaldi
OnlineCmnInput	online/online-feat-input.h	/^  OnlineCmnInput(OnlineFeatInputItf *input, int32 cmn_window, int32 min_window)$/;"	f	class:kaldi::OnlineCmnInput
OnlineCmnInput	online/online-feat-input.h	/^class OnlineCmnInput: public OnlineFeatInputItf {$/;"	c	namespace:kaldi
OnlineDeltaInput	online/online-feat-input.h	/^class OnlineDeltaInput: public OnlineFeatInputItf {$/;"	c	namespace:kaldi
OnlineFeInput	online/online-feat-input.h	/^OnlineFeInput<E>::OnlineFeInput(OnlineAudioSourceItf *au_src, E *fe,$/;"	f	class:kaldi::OnlineFeInput
OnlineFeInput	online/online-feat-input.h	/^class OnlineFeInput : public OnlineFeatInputItf {$/;"	c	namespace:kaldi
OnlineFeatInputItf	online/online-feat-input.h	/^class OnlineFeatInputItf {$/;"	c	namespace:kaldi
OnlineFeatureMatrix	online/online-feat-input.h	/^  OnlineFeatureMatrix(const OnlineFeatureMatrixOptions &opts,$/;"	f	class:kaldi::OnlineFeatureMatrix
OnlineFeatureMatrix	online/online-feat-input.h	/^class OnlineFeatureMatrix {$/;"	c	namespace:kaldi
OnlineFeatureMatrixOptions	online/online-feat-input.h	/^  OnlineFeatureMatrixOptions(): batch_size(27),$/;"	f	struct:kaldi::OnlineFeatureMatrixOptions
OnlineFeatureMatrixOptions	online/online-feat-input.h	/^struct OnlineFeatureMatrixOptions {$/;"	s	namespace:kaldi
OnlineLdaInput	online/online-feat-input.h	/^class OnlineLdaInput: public OnlineFeatInputItf {$/;"	c	namespace:kaldi
OnlineUdpInput	online/online-feat-input.h	/^class OnlineUdpInput : public OnlineFeatInputItf {$/;"	c	namespace:kaldi
Register	online/online-feat-input.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineFeatureMatrixOptions
batch_size	online/online-feat-input.h	/^  int32 batch_size; \/\/ number of frames to request each time.$/;"	m	struct:kaldi::OnlineFeatureMatrixOptions
client_addr	online/online-feat-input.h	/^  const sockaddr_in& client_addr() const { return client_addr_; }$/;"	f	class:kaldi::OnlineUdpInput
client_addr_	online/online-feat-input.h	/^  sockaddr_in client_addr_;$/;"	m	class:kaldi::OnlineUdpInput
cmn_window_	online/online-feat-input.h	/^  const int32 cmn_window_; \/\/ > 0$/;"	m	class:kaldi::OnlineCmnInput
data_	online/online-feat-input.h	/^  std::vector<Matrix<BaseFloat>* > data_;$/;"	m	class:kaldi::OnlineCacheInput
descriptor	online/online-feat-input.h	/^  const int32 descriptor() const { return sock_desc_; }$/;"	f	class:kaldi::OnlineUdpInput
extractor_	online/online-feat-input.h	/^  E *extractor_; \/\/ the actual feature extractor used$/;"	m	class:kaldi::OnlineFeInput
feat_dim_	online/online-feat-input.h	/^  int32 feat_dim_;$/;"	m	class:kaldi::OnlineFeatureMatrix
feat_matrix_	online/online-feat-input.h	/^  Matrix<BaseFloat> feat_matrix_;$/;"	m	class:kaldi::OnlineFeatureMatrix
feat_offset_	online/online-feat-input.h	/^  int32 feat_offset_; \/\/ the offset of the first frame in the current batch$/;"	m	class:kaldi::OnlineFeatureMatrix
feature_dim_	online/online-feat-input.h	/^  int32 feature_dim_;$/;"	m	class:kaldi::OnlineUdpInput
finished_	online/online-feat-input.h	/^  bool finished_; \/\/ True if there are no more frames to be got from the input.$/;"	m	class:kaldi::OnlineFeatureMatrix
frame_shift_	online/online-feat-input.h	/^  const int32 frame_shift_;$/;"	m	class:kaldi::OnlineFeInput
frame_size_	online/online-feat-input.h	/^  const int32 frame_size_;$/;"	m	class:kaldi::OnlineFeInput
history_	online/online-feat-input.h	/^  Matrix<BaseFloat> history_; \/\/ circular-buffer history, of dim (cmn_window_ +$/;"	m	class:kaldi::OnlineCmnInput
input_	online/online-feat-input.h	/^  OnlineFeatInputItf *input_; \/\/ underlying\/inferior input object$/;"	m	class:kaldi::OnlineDeltaInput
input_	online/online-feat-input.h	/^  OnlineFeatInputItf *input_; \/\/ underlying\/inferior input object$/;"	m	class:kaldi::OnlineLdaInput
input_	online/online-feat-input.h	/^  OnlineFeatInputItf *input_;$/;"	m	class:kaldi::OnlineCacheInput
input_	online/online-feat-input.h	/^  OnlineFeatInputItf *input_;$/;"	m	class:kaldi::OnlineCmnInput
input_	online/online-feat-input.h	/^  OnlineFeatInputItf *input_;$/;"	m	class:kaldi::OnlineFeatureMatrix
input_dim_	online/online-feat-input.h	/^  const int32 input_dim_; \/\/ dimension of the feature vectors before xform$/;"	m	class:kaldi::OnlineLdaInput
input_dim_	online/online-feat-input.h	/^  const int32 input_dim_;$/;"	m	class:kaldi::OnlineDeltaInput
kaldi	online/online-feat-input.h	/^namespace kaldi {$/;"	n
left_context_	online/online-feat-input.h	/^  const int32 left_context_;$/;"	m	class:kaldi::OnlineLdaInput
linear_transform_	online/online-feat-input.h	/^  Matrix<BaseFloat> linear_transform_; \/\/ transform matrix (linear part only)$/;"	m	class:kaldi::OnlineLdaInput
min_window_	online/online-feat-input.h	/^  const int32 min_window_; \/\/ > 0, < cmn_window_.$/;"	m	class:kaldi::OnlineCmnInput
num_tries	online/online-feat-input.h	/^  int32 num_tries; \/\/ number of tries of getting no output and timing out,$/;"	m	struct:kaldi::OnlineFeatureMatrixOptions
offset_	online/online-feat-input.h	/^  Vector<BaseFloat> offset_; \/\/ Offset, if present; else empty.$/;"	m	class:kaldi::OnlineLdaInput
opts_	online/online-feat-input.h	/^  DeltaFeaturesOptions opts_;$/;"	m	class:kaldi::OnlineDeltaInput
opts_	online/online-feat-input.h	/^  const OnlineFeatureMatrixOptions opts_;$/;"	m	class:kaldi::OnlineFeatureMatrix
remainder_	online/online-feat-input.h	/^  Matrix<BaseFloat> remainder_; \/\/ The last few frames of the input, that may$/;"	m	class:kaldi::OnlineDeltaInput
remainder_	online/online-feat-input.h	/^  Matrix<BaseFloat> remainder_; \/\/ The last few frames of the input, that may$/;"	m	class:kaldi::OnlineLdaInput
right_context_	online/online-feat-input.h	/^  const int32 right_context_;$/;"	m	class:kaldi::OnlineLdaInput
server_addr_	online/online-feat-input.h	/^  sockaddr_in server_addr_;$/;"	m	class:kaldi::OnlineUdpInput
sock_desc_	online/online-feat-input.h	/^  int32 sock_desc_; \/\/ socket descriptor$/;"	m	class:kaldi::OnlineUdpInput
source_	online/online-feat-input.h	/^  OnlineAudioSourceItf *source_; \/\/ audio source$/;"	m	class:kaldi::OnlineFeInput
sum_	online/online-feat-input.h	/^  Vector<double> sum_; \/\/ Sum of the frames from t_out_ - HistoryLength(t_out_),$/;"	m	class:kaldi::OnlineCmnInput
t_in_	online/online-feat-input.h	/^  int64 t_in_; \/\/ Time-counter for what we've obtained from the input.$/;"	m	class:kaldi::OnlineCmnInput
t_out_	online/online-feat-input.h	/^  int64 t_out_; \/\/ Time-counter for what we've written to the output.$/;"	m	class:kaldi::OnlineCmnInput
wave_	online/online-feat-input.h	/^  Vector<BaseFloat> wave_; \/\/ the samples to be passed for extraction$/;"	m	class:kaldi::OnlineFeInput
wave_remainder_	online/online-feat-input.h	/^  Vector<BaseFloat> wave_remainder_; \/\/ the samples remained from the previous$/;"	m	class:kaldi::OnlineFeInput
~OnlineCacheInput	online/online-feat-input.h	/^  virtual ~OnlineCacheInput() { Deallocate(); }$/;"	f	class:kaldi::OnlineCacheInput
~OnlineFeatInputItf	online/online-feat-input.h	/^  virtual ~OnlineFeatInputItf() {}$/;"	f	class:kaldi::OnlineFeatInputItf
AssertEqual	online/online-feat-test.cc	/^template<class Real> static void AssertEqual(const Matrix<Real> &A,$/;"	f	namespace:kaldi
Compute	online/online-feat-test.cc	/^  virtual bool Compute(Matrix<BaseFloat> *output) {$/;"	f	class:kaldi::OnlineMatrixInput
Dim	online/online-feat-test.cc	/^  virtual int32 Dim() const { return feats_.NumCols(); }$/;"	f	class:kaldi::OnlineMatrixInput
GetOutput	online/online-feat-test.cc	/^void GetOutput(OnlineFeatInputItf *a,$/;"	f	namespace:kaldi
OnlineMatrixInput	online/online-feat-test.cc	/^  OnlineMatrixInput(const Matrix<BaseFloat> &feats):$/;"	f	class:kaldi::OnlineMatrixInput
OnlineMatrixInput	online/online-feat-test.cc	/^class OnlineMatrixInput : public OnlineFeatInputItf {$/;"	c	namespace:kaldi	file:
TestOnlineCmnInput	online/online-feat-test.cc	/^void TestOnlineCmnInput() { \/\/ We're also testing OnlineCacheInput here.$/;"	f	namespace:kaldi
TestOnlineDeltaInput	online/online-feat-test.cc	/^void TestOnlineDeltaInput() {$/;"	f	namespace:kaldi
TestOnlineFeatureMatrix	online/online-feat-test.cc	/^void TestOnlineFeatureMatrix() {$/;"	f	namespace:kaldi
TestOnlineLdaInput	online/online-feat-test.cc	/^void TestOnlineLdaInput() {$/;"	f	namespace:kaldi
TestOnlineMatrixInput	online/online-feat-test.cc	/^void TestOnlineMatrixInput() {$/;"	f	namespace:kaldi
feats_	online/online-feat-test.cc	/^  Matrix<BaseFloat> feats_;$/;"	m	class:kaldi::OnlineMatrixInput	file:
kaldi	online/online-feat-test.cc	/^namespace kaldi {$/;"	n	file:
main	online/online-feat-test.cc	/^int main() {$/;"	f
position_	online/online-feat-test.cc	/^  int32 position_;$/;"	m	class:kaldi::OnlineMatrixInput	file:
FillFrame	online/online-tcp-source.cc	/^int OnlineTcpVectorSource::FillFrame(int32 get_size) {$/;"	f	class:kaldi::OnlineTcpVectorSource
GetNextPack	online/online-tcp-source.cc	/^int OnlineTcpVectorSource::GetNextPack() {$/;"	f	class:kaldi::OnlineTcpVectorSource
IsConnected	online/online-tcp-source.cc	/^bool OnlineTcpVectorSource::IsConnected() {$/;"	f	class:kaldi::OnlineTcpVectorSource
OnlineTcpVectorSource	online/online-tcp-source.cc	/^OnlineTcpVectorSource::OnlineTcpVectorSource(int32 socket)$/;"	f	class:kaldi::OnlineTcpVectorSource
Read	online/online-tcp-source.cc	/^bool OnlineTcpVectorSource::Read(Vector<BaseFloat> *data) {$/;"	f	class:kaldi::OnlineTcpVectorSource
ReadFull	online/online-tcp-source.cc	/^bool OnlineTcpVectorSource::ReadFull(char* buf, int32 len) {$/;"	f	class:kaldi::OnlineTcpVectorSource
ResetSamples	online/online-tcp-source.cc	/^void OnlineTcpVectorSource::ResetSamples() {$/;"	f	class:kaldi::OnlineTcpVectorSource
SamplesProcessed	online/online-tcp-source.cc	/^size_t OnlineTcpVectorSource::SamplesProcessed() {$/;"	f	class:kaldi::OnlineTcpVectorSource
int32	online/online-tcp-source.cc	/^typedef kaldi::int32 int32;$/;"	t	namespace:kaldi	file:
kaldi	online/online-tcp-source.cc	/^namespace kaldi {$/;"	n	file:
~OnlineTcpVectorSource	online/online-tcp-source.cc	/^OnlineTcpVectorSource::~OnlineTcpVectorSource() {$/;"	f	class:kaldi::OnlineTcpVectorSource
KALDI_ONLINE_ONLINE_TCP_SOURCE_H_	online/online-tcp-source.h	21;"	d
OnlineTcpVectorSource	online/online-tcp-source.h	/^class OnlineTcpVectorSource : public OnlineAudioSourceItf {$/;"	c	namespace:kaldi
connected	online/online-tcp-source.h	/^  bool connected;$/;"	m	class:kaldi::OnlineTcpVectorSource
frame	online/online-tcp-source.h	/^  char* frame;$/;"	m	class:kaldi::OnlineTcpVectorSource
frame_size	online/online-tcp-source.h	/^  int32 frame_size;$/;"	m	class:kaldi::OnlineTcpVectorSource
kaldi	online/online-tcp-source.h	/^namespace kaldi {$/;"	n
last_pack_rem	online/online-tcp-source.h	/^  int32 last_pack_size, last_pack_rem;$/;"	m	class:kaldi::OnlineTcpVectorSource
last_pack_size	online/online-tcp-source.h	/^  int32 last_pack_size, last_pack_rem;$/;"	m	class:kaldi::OnlineTcpVectorSource
pack	online/online-tcp-source.h	/^  char* pack;$/;"	m	class:kaldi::OnlineTcpVectorSource
pack_size	online/online-tcp-source.h	/^  int32 pack_size;$/;"	m	class:kaldi::OnlineTcpVectorSource
samples_processed	online/online-tcp-source.h	/^  size_t samples_processed;$/;"	m	class:kaldi::OnlineTcpVectorSource
socket_desc	online/online-tcp-source.h	/^  int32 socket_desc;$/;"	m	class:kaldi::OnlineTcpVectorSource
PrintPartialResult	online/onlinebin-util.cc	/^void PrintPartialResult(const std::vector<int32>& words,$/;"	f	namespace:kaldi
ReadDecodeGraph	online/onlinebin-util.cc	/^fst::Fst<fst::StdArc> *ReadDecodeGraph(std::string filename) {$/;"	f	namespace:kaldi
kaldi	online/onlinebin-util.cc	/^namespace kaldi {$/;"	n	file:
KALDI_ONLINE_ONLINEBIN_UTIL_H_	online/onlinebin-util.h	24;"	d
kaldi	online/onlinebin-util.h	/^namespace kaldi {$/;"	n
ADDLIBS	online2/Makefile	/^ADDLIBS = ..\/gmm\/kaldi-gmm.a ..\/transform\/kaldi-transform.a ..\/feat\/kaldi-feat.a \\$/;"	m
LIBNAME	online2/Makefile	/^LIBNAME = kaldi-online2$/;"	m
OBJFILES	online2/Makefile	/^OBJFILES = online-gmm-decodable.o online-feature-pipeline.o online-ivector-feature.o \\$/;"	m
TESTFILES	online2/Makefile	/^TESTFILES =$/;"	m
EndpointDetected	online2/online-endpoint.cc	/^bool EndpointDetected($/;"	f	namespace:kaldi
EndpointDetected	online2/online-endpoint.cc	/^bool EndpointDetected(const OnlineEndpointConfig &config,$/;"	f	namespace:kaldi
RuleActivated	online2/online-endpoint.cc	/^static bool RuleActivated(const OnlineEndpointRule &rule,$/;"	f	namespace:kaldi
TrailingSilenceLength	online2/online-endpoint.cc	/^int32 TrailingSilenceLength(const TransitionModel &tmodel,$/;"	f	namespace:kaldi
kaldi	online2/online-endpoint.cc	/^namespace kaldi {$/;"	n	file:
KALDI_ONLINE2_ONLINE_ENDPOINT_H_	online2/online-endpoint.h	22;"	d
OnlineEndpointConfig	online2/online-endpoint.h	/^  OnlineEndpointConfig():$/;"	f	struct:kaldi::OnlineEndpointConfig
OnlineEndpointConfig	online2/online-endpoint.h	/^struct OnlineEndpointConfig {$/;"	s	namespace:kaldi
OnlineEndpointRule	online2/online-endpoint.h	/^  OnlineEndpointRule(bool must_contain_nonsilence = true,$/;"	f	struct:kaldi::OnlineEndpointRule
OnlineEndpointRule	online2/online-endpoint.h	/^struct OnlineEndpointRule {$/;"	s	namespace:kaldi
Register	online2/online-endpoint.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineEndpointConfig
Register	online2/online-endpoint.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineEndpointRule
RegisterWithPrefix	online2/online-endpoint.h	/^  void RegisterWithPrefix(const std::string &prefix, OptionsItf *po) {$/;"	f	struct:kaldi::OnlineEndpointRule
kaldi	online2/online-endpoint.h	/^namespace kaldi {$/;"	n
max_relative_cost	online2/online-endpoint.h	/^  BaseFloat max_relative_cost;$/;"	m	struct:kaldi::OnlineEndpointRule
min_trailing_silence	online2/online-endpoint.h	/^  BaseFloat min_trailing_silence;$/;"	m	struct:kaldi::OnlineEndpointRule
min_utterance_length	online2/online-endpoint.h	/^  BaseFloat min_utterance_length;$/;"	m	struct:kaldi::OnlineEndpointRule
must_contain_nonsilence	online2/online-endpoint.h	/^  bool must_contain_nonsilence;$/;"	m	struct:kaldi::OnlineEndpointRule
rule1	online2/online-endpoint.h	/^  OnlineEndpointRule rule1;$/;"	m	struct:kaldi::OnlineEndpointConfig
rule2	online2/online-endpoint.h	/^  OnlineEndpointRule rule2;$/;"	m	struct:kaldi::OnlineEndpointConfig
rule3	online2/online-endpoint.h	/^  OnlineEndpointRule rule3;$/;"	m	struct:kaldi::OnlineEndpointConfig
rule4	online2/online-endpoint.h	/^  OnlineEndpointRule rule4;$/;"	m	struct:kaldi::OnlineEndpointConfig
rule5	online2/online-endpoint.h	/^  OnlineEndpointRule rule5;$/;"	m	struct:kaldi::OnlineEndpointConfig
silence_phones	online2/online-endpoint.h	/^  std::string silence_phones; \/\/\/ e.g. 1:2:3:4, colon separated list of phones$/;"	m	struct:kaldi::OnlineEndpointConfig
AcceptWaveform	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::AcceptWaveform($/;"	f	class:kaldi::OnlineFeaturePipeline
AdaptedFeature	online2/online-feature-pipeline.cc	/^OnlineFeatureInterface* OnlineFeaturePipeline::AdaptedFeature() const {$/;"	f	class:kaldi::OnlineFeaturePipeline
Dim	online2/online-feature-pipeline.cc	/^int32 OnlineFeaturePipeline::Dim() const {$/;"	f	class:kaldi::OnlineFeaturePipeline
FrameShiftInSeconds	online2/online-feature-pipeline.cc	/^BaseFloat OnlineFeaturePipelineConfig::FrameShiftInSeconds() const {$/;"	f	class:kaldi::OnlineFeaturePipelineConfig
FreezeCmvn	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::FreezeCmvn() {$/;"	f	class:kaldi::OnlineFeaturePipeline
GetAsMatrix	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::GetAsMatrix(Matrix<BaseFloat> *feats) {$/;"	f	class:kaldi::OnlineFeaturePipeline
GetCmvnState	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::GetCmvnState(OnlineCmvnState *cmvn_state) {$/;"	f	class:kaldi::OnlineFeaturePipeline
GetFrame	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::GetFrame(int32 frame,$/;"	f	class:kaldi::OnlineFeaturePipeline
Init	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::Init() {$/;"	f	class:kaldi::OnlineFeaturePipeline
InputFinished	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::InputFinished() {$/;"	f	class:kaldi::OnlineFeaturePipeline
IsLastFrame	online2/online-feature-pipeline.cc	/^bool OnlineFeaturePipeline::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineFeaturePipeline
New	online2/online-feature-pipeline.cc	/^OnlineFeaturePipeline* OnlineFeaturePipeline::New() const {$/;"	f	class:kaldi::OnlineFeaturePipeline
NumFramesReady	online2/online-feature-pipeline.cc	/^int32 OnlineFeaturePipeline::NumFramesReady() const {$/;"	f	class:kaldi::OnlineFeaturePipeline
OnlineFeaturePipeline	online2/online-feature-pipeline.cc	/^OnlineFeaturePipeline::OnlineFeaturePipeline($/;"	f	class:kaldi::OnlineFeaturePipeline
OnlineFeaturePipelineConfig	online2/online-feature-pipeline.cc	/^OnlineFeaturePipelineConfig::OnlineFeaturePipelineConfig($/;"	f	class:kaldi::OnlineFeaturePipelineConfig
SetCmvnState	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::SetCmvnState(const OnlineCmvnState &cmvn_state) {$/;"	f	class:kaldi::OnlineFeaturePipeline
SetTransform	online2/online-feature-pipeline.cc	/^void OnlineFeaturePipeline::SetTransform($/;"	f	class:kaldi::OnlineFeaturePipeline
UnadaptedFeature	online2/online-feature-pipeline.cc	/^OnlineFeatureInterface* OnlineFeaturePipeline::UnadaptedFeature() const {$/;"	f	class:kaldi::OnlineFeaturePipeline
kaldi	online2/online-feature-pipeline.cc	/^namespace kaldi {$/;"	n	file:
~OnlineFeaturePipeline	online2/online-feature-pipeline.cc	/^OnlineFeaturePipeline::~OnlineFeaturePipeline() {$/;"	f	class:kaldi::OnlineFeaturePipeline
FrameShiftInSeconds	online2/online-feature-pipeline.h	/^  BaseFloat FrameShiftInSeconds() const {$/;"	f	class:kaldi::OnlineFeaturePipeline
HaveFmllrTransform	online2/online-feature-pipeline.h	/^  bool HaveFmllrTransform() { return fmllr_ != NULL; }$/;"	f	class:kaldi::OnlineFeaturePipeline
KALDI_ONLINE2_ONLINE_FEATURE_PIPELINE_H_	online2/online-feature-pipeline.h	22;"	d
OnlineFeaturePipeline	online2/online-feature-pipeline.h	/^class OnlineFeaturePipeline: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineFeaturePipelineCommandLineConfig	online2/online-feature-pipeline.h	/^  OnlineFeaturePipelineCommandLineConfig() :$/;"	f	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
OnlineFeaturePipelineCommandLineConfig	online2/online-feature-pipeline.h	/^struct OnlineFeaturePipelineCommandLineConfig {$/;"	s	namespace:kaldi
OnlineFeaturePipelineConfig	online2/online-feature-pipeline.h	/^  OnlineFeaturePipelineConfig():$/;"	f	struct:kaldi::OnlineFeaturePipelineConfig
OnlineFeaturePipelineConfig	online2/online-feature-pipeline.h	/^struct OnlineFeaturePipelineConfig {$/;"	s	namespace:kaldi
Register	online2/online-feature-pipeline.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
add_deltas	online2/online-feature-pipeline.h	/^  bool add_deltas;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
add_deltas	online2/online-feature-pipeline.h	/^  bool add_deltas;$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
add_pitch	online2/online-feature-pipeline.h	/^  bool add_pitch;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
add_pitch	online2/online-feature-pipeline.h	/^  bool add_pitch;$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
base_feature_	online2/online-feature-pipeline.h	/^  OnlineBaseFeature *base_feature_;        \/\/ MFCC\/PLP$/;"	m	class:kaldi::OnlineFeaturePipeline
cmvn_	online2/online-feature-pipeline.h	/^  OnlineCmvn *cmvn_;$/;"	m	class:kaldi::OnlineFeaturePipeline
cmvn_config	online2/online-feature-pipeline.h	/^  std::string cmvn_config;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
cmvn_opts	online2/online-feature-pipeline.h	/^  OnlineCmvnOptions cmvn_opts;  \/\/ Options for online CMN\/CMVN computation.$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
config_	online2/online-feature-pipeline.h	/^  OnlineFeaturePipelineConfig config_;$/;"	m	class:kaldi::OnlineFeaturePipeline
delta_config	online2/online-feature-pipeline.h	/^  std::string delta_config;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
delta_opts	online2/online-feature-pipeline.h	/^  DeltaFeaturesOptions delta_opts;  \/\/ Options for delta computation, if done.$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
fbank_config	online2/online-feature-pipeline.h	/^  std::string fbank_config;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
fbank_opts	online2/online-feature-pipeline.h	/^  FbankOptions fbank_opts;  \/\/ Options for filterbank computation, if$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
feature_	online2/online-feature-pipeline.h	/^  OnlineFeatureInterface *feature_;        \/\/ CMVN (+ processed pitch)$/;"	m	class:kaldi::OnlineFeaturePipeline
feature_type	online2/online-feature-pipeline.h	/^  std::string feature_type;  \/\/ "mfcc" or "plp" or "fbank"$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
feature_type	online2/online-feature-pipeline.h	/^  std::string feature_type;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
fmllr_	online2/online-feature-pipeline.h	/^  OnlineFeatureInterface *fmllr_;  \/\/ non-NULL if we currently have an fMLLR$/;"	m	class:kaldi::OnlineFeaturePipeline
global_cmvn_stats_	online2/online-feature-pipeline.h	/^  Matrix<BaseFloat> global_cmvn_stats_;  \/\/ Global CMVN stats.$/;"	m	class:kaldi::OnlineFeaturePipeline
global_cmvn_stats_rxfilename	online2/online-feature-pipeline.h	/^  std::string global_cmvn_stats_rxfilename;  \/\/ Filename used for reading global$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
global_cmvn_stats_rxfilename	online2/online-feature-pipeline.h	/^  std::string global_cmvn_stats_rxfilename;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
kaldi	online2/online-feature-pipeline.h	/^namespace kaldi {$/;"	n
lda_	online2/online-feature-pipeline.h	/^  OnlineFeatureInterface *lda_;  \/\/ If non-NULL, the LDA or LDA+MLLT transform.$/;"	m	class:kaldi::OnlineFeaturePipeline
lda_mat_	online2/online-feature-pipeline.h	/^  Matrix<BaseFloat> lda_mat_;  \/\/ LDA matrix, if supplied.$/;"	m	class:kaldi::OnlineFeaturePipeline
lda_rxfilename	online2/online-feature-pipeline.h	/^  std::string lda_rxfilename;  \/\/ Filename for reading LDA or LDA+MLLT matrix,$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
lda_rxfilename	online2/online-feature-pipeline.h	/^  std::string lda_rxfilename;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
mfcc_config	online2/online-feature-pipeline.h	/^  std::string mfcc_config;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
mfcc_opts	online2/online-feature-pipeline.h	/^  MfccOptions mfcc_opts;  \/\/ options for MFCC computation,$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
pitch_	online2/online-feature-pipeline.h	/^  OnlinePitchFeature *pitch_;              \/\/ Raw pitch$/;"	m	class:kaldi::OnlineFeaturePipeline
pitch_config	online2/online-feature-pipeline.h	/^  std::string pitch_config;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
pitch_feature_	online2/online-feature-pipeline.h	/^  OnlineProcessPitch *pitch_feature_;  \/\/ Processed pitch$/;"	m	class:kaldi::OnlineFeaturePipeline
pitch_opts	online2/online-feature-pipeline.h	/^  PitchExtractionOptions pitch_opts;  \/\/ Options for pitch extraction, if done.$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
pitch_process_config	online2/online-feature-pipeline.h	/^  std::string pitch_process_config;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
pitch_process_opts	online2/online-feature-pipeline.h	/^  ProcessPitchOptions pitch_process_opts;  \/\/ Options for pitch$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
plp_config	online2/online-feature-pipeline.h	/^  std::string plp_config;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
plp_opts	online2/online-feature-pipeline.h	/^  PlpOptions plp_opts;  \/\/ Options for PLP computation, if feature_type == "plp"$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
splice_config	online2/online-feature-pipeline.h	/^  std::string splice_config;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
splice_feats	online2/online-feature-pipeline.h	/^  bool splice_feats;$/;"	m	struct:kaldi::OnlineFeaturePipelineCommandLineConfig
splice_feats	online2/online-feature-pipeline.h	/^  bool splice_feats;$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
splice_opts	online2/online-feature-pipeline.h	/^  OnlineSpliceOptions splice_opts;  \/\/ Options for frame splicing, if done.$/;"	m	struct:kaldi::OnlineFeaturePipelineConfig
splice_or_delta_	online2/online-feature-pipeline.h	/^  OnlineFeatureInterface *splice_or_delta_;  \/\/ This may be NULL if we're not$/;"	m	class:kaldi::OnlineFeaturePipeline
CacheFrame	online2/online-gmm-decodable.cc	/^void DecodableDiagGmmScaledOnline::CacheFrame(int32 frame) {$/;"	f	class:kaldi::DecodableDiagGmmScaledOnline
DecodableDiagGmmScaledOnline	online2/online-gmm-decodable.cc	/^DecodableDiagGmmScaledOnline::DecodableDiagGmmScaledOnline($/;"	f	class:kaldi::DecodableDiagGmmScaledOnline
IsLastFrame	online2/online-gmm-decodable.cc	/^bool DecodableDiagGmmScaledOnline::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableDiagGmmScaledOnline
LogLikelihood	online2/online-gmm-decodable.cc	/^BaseFloat DecodableDiagGmmScaledOnline::LogLikelihood(int32 frame, int32 index) {$/;"	f	class:kaldi::DecodableDiagGmmScaledOnline
NumFramesReady	online2/online-gmm-decodable.cc	/^int32 DecodableDiagGmmScaledOnline::NumFramesReady() const {$/;"	f	class:kaldi::DecodableDiagGmmScaledOnline
kaldi	online2/online-gmm-decodable.cc	/^namespace kaldi {$/;"	n	file:
DecodableDiagGmmScaledOnline	online2/online-gmm-decodable.h	/^class DecodableDiagGmmScaledOnline : public DecodableInterface {$/;"	c	namespace:kaldi
KALDI_ONLINE2_ONLINE_GMM_DECODABLE_H_	online2/online-gmm-decodable.h	24;"	d
NumIndices	online2/online-gmm-decodable.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableDiagGmmScaledOnline
ac_model_	online2/online-gmm-decodable.h	/^  const AmDiagGmm &ac_model_;$/;"	m	class:kaldi::DecodableDiagGmmScaledOnline
ac_scale_	online2/online-gmm-decodable.h	/^  BaseFloat ac_scale_;$/;"	m	class:kaldi::DecodableDiagGmmScaledOnline
cache_	online2/online-gmm-decodable.h	/^  std::vector<std::pair<int32, BaseFloat> > cache_;$/;"	m	class:kaldi::DecodableDiagGmmScaledOnline
cur_feats_	online2/online-gmm-decodable.h	/^  Vector<BaseFloat> cur_feats_;$/;"	m	class:kaldi::DecodableDiagGmmScaledOnline
cur_frame_	online2/online-gmm-decodable.h	/^  int32 cur_frame_;$/;"	m	class:kaldi::DecodableDiagGmmScaledOnline
feat_dim_	online2/online-gmm-decodable.h	/^  const int32 feat_dim_;  \/\/ dimensionality of the input features$/;"	m	class:kaldi::DecodableDiagGmmScaledOnline
features_	online2/online-gmm-decodable.h	/^  OnlineFeatureInterface *features_;$/;"	m	class:kaldi::DecodableDiagGmmScaledOnline
kaldi	online2/online-gmm-decodable.h	/^namespace kaldi {$/;"	n
trans_model_	online2/online-gmm-decodable.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::DecodableDiagGmmScaledOnline
AdvanceDecoding	online2/online-gmm-decoding.cc	/^void SingleUtteranceGmmDecoder::AdvanceDecoding() {$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
Check	online2/online-gmm-decoding.cc	/^void OnlineGmmDecodingAdaptationPolicyConfig::Check() const {$/;"	f	class:kaldi::OnlineGmmDecodingAdaptationPolicyConfig
DoAdapt	online2/online-gmm-decoding.cc	/^bool OnlineGmmDecodingAdaptationPolicyConfig::DoAdapt($/;"	f	class:kaldi::OnlineGmmDecodingAdaptationPolicyConfig
EndpointDetected	online2/online-gmm-decoding.cc	/^bool SingleUtteranceGmmDecoder::EndpointDetected($/;"	f	class:kaldi::SingleUtteranceGmmDecoder
EstimateFmllr	online2/online-gmm-decoding.cc	/^void SingleUtteranceGmmDecoder::EstimateFmllr(bool end_of_utterance) {$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
FinalizeDecoding	online2/online-gmm-decoding.cc	/^void SingleUtteranceGmmDecoder::FinalizeDecoding() {$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
GetAdaptationState	online2/online-gmm-decoding.cc	/^void SingleUtteranceGmmDecoder::GetAdaptationState($/;"	f	class:kaldi::SingleUtteranceGmmDecoder
GetBestPath	online2/online-gmm-decoding.cc	/^void SingleUtteranceGmmDecoder::GetBestPath(bool end_of_utterance,$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
GetFinalModel	online2/online-gmm-decoding.cc	/^const AmDiagGmm &OnlineGmmDecodingModels::GetFinalModel() const {$/;"	f	class:kaldi::OnlineGmmDecodingModels
GetFmllrBasis	online2/online-gmm-decoding.cc	/^const BasisFmllrEstimate &OnlineGmmDecodingModels::GetFmllrBasis() const {$/;"	f	class:kaldi::OnlineGmmDecodingModels
GetGaussianPosteriors	online2/online-gmm-decoding.cc	/^bool SingleUtteranceGmmDecoder::GetGaussianPosteriors(bool end_of_utterance,$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
GetLattice	online2/online-gmm-decoding.cc	/^void SingleUtteranceGmmDecoder::GetLattice(bool rescore_if_needed,$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
GetModel	online2/online-gmm-decoding.cc	/^const AmDiagGmm &OnlineGmmDecodingModels::GetModel() const {$/;"	f	class:kaldi::OnlineGmmDecodingModels
GetOnlineAlignmentModel	online2/online-gmm-decoding.cc	/^const AmDiagGmm &OnlineGmmDecodingModels::GetOnlineAlignmentModel() const {$/;"	f	class:kaldi::OnlineGmmDecodingModels
GetTransitionModel	online2/online-gmm-decoding.cc	/^const TransitionModel &OnlineGmmDecodingModels::GetTransitionModel() const {$/;"	f	class:kaldi::OnlineGmmDecodingModels
HaveTransform	online2/online-gmm-decoding.cc	/^bool SingleUtteranceGmmDecoder::HaveTransform() const {$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
OnlineGmmDecodingModels	online2/online-gmm-decoding.cc	/^OnlineGmmDecodingModels::OnlineGmmDecodingModels($/;"	f	class:kaldi::OnlineGmmDecodingModels
Read	online2/online-gmm-decoding.cc	/^void OnlineGmmAdaptationState::Read(std::istream &in_stream, bool binary) {$/;"	f	class:kaldi::OnlineGmmAdaptationState
RescoringIsNeeded	online2/online-gmm-decoding.cc	/^bool SingleUtteranceGmmDecoder::RescoringIsNeeded() const {$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
SingleUtteranceGmmDecoder	online2/online-gmm-decoding.cc	/^SingleUtteranceGmmDecoder::SingleUtteranceGmmDecoder($/;"	f	class:kaldi::SingleUtteranceGmmDecoder
Write	online2/online-gmm-decoding.cc	/^void OnlineGmmAdaptationState::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::OnlineGmmAdaptationState
kaldi	online2/online-gmm-decoding.cc	/^namespace kaldi {$/;"	n	file:
~SingleUtteranceGmmDecoder	online2/online-gmm-decoding.cc	/^SingleUtteranceGmmDecoder::~SingleUtteranceGmmDecoder() {$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
FeaturePipeline	online2/online-gmm-decoding.h	/^  OnlineFeaturePipeline &FeaturePipeline() { return *feature_pipeline_; }$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
FinalRelativeCost	online2/online-gmm-decoding.h	/^  BaseFloat FinalRelativeCost() { return decoder_.FinalRelativeCost(); }$/;"	f	class:kaldi::SingleUtteranceGmmDecoder
KALDI_ONLINE2_ONLINE_GMM_DECODING_H_	online2/online-gmm-decoding.h	22;"	d
OnlineGmmAdaptationState	online2/online-gmm-decoding.h	/^struct OnlineGmmAdaptationState {$/;"	s	namespace:kaldi
OnlineGmmDecodingAdaptationPolicyConfig	online2/online-gmm-decoding.h	/^  OnlineGmmDecodingAdaptationPolicyConfig():$/;"	f	struct:kaldi::OnlineGmmDecodingAdaptationPolicyConfig
OnlineGmmDecodingAdaptationPolicyConfig	online2/online-gmm-decoding.h	/^struct OnlineGmmDecodingAdaptationPolicyConfig {$/;"	s	namespace:kaldi
OnlineGmmDecodingConfig	online2/online-gmm-decoding.h	/^  OnlineGmmDecodingConfig():  fmllr_lattice_beam(3.0), acoustic_scale(0.1),$/;"	f	struct:kaldi::OnlineGmmDecodingConfig
OnlineGmmDecodingConfig	online2/online-gmm-decoding.h	/^struct OnlineGmmDecodingConfig {$/;"	s	namespace:kaldi
OnlineGmmDecodingModels	online2/online-gmm-decoding.h	/^class OnlineGmmDecodingModels {$/;"	c	namespace:kaldi
Register	online2/online-gmm-decoding.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineGmmDecodingAdaptationPolicyConfig
Register	online2/online-gmm-decoding.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineGmmDecodingConfig
SingleUtteranceGmmDecoder	online2/online-gmm-decoding.h	/^class SingleUtteranceGmmDecoder {$/;"	c	namespace:kaldi
acoustic_scale	online2/online-gmm-decoding.h	/^  BaseFloat acoustic_scale;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
adaptation_delay	online2/online-gmm-decoding.h	/^  BaseFloat adaptation_delay;$/;"	m	struct:kaldi::OnlineGmmDecodingAdaptationPolicyConfig
adaptation_first_utt_delay	online2/online-gmm-decoding.h	/^  BaseFloat adaptation_first_utt_delay;$/;"	m	struct:kaldi::OnlineGmmDecodingAdaptationPolicyConfig
adaptation_first_utt_ratio	online2/online-gmm-decoding.h	/^  BaseFloat adaptation_first_utt_ratio;$/;"	m	struct:kaldi::OnlineGmmDecodingAdaptationPolicyConfig
adaptation_policy_opts	online2/online-gmm-decoding.h	/^  OnlineGmmDecodingAdaptationPolicyConfig adaptation_policy_opts;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
adaptation_ratio	online2/online-gmm-decoding.h	/^  BaseFloat adaptation_ratio;$/;"	m	struct:kaldi::OnlineGmmDecodingAdaptationPolicyConfig
adaptation_state_	online2/online-gmm-decoding.h	/^  OnlineGmmAdaptationState adaptation_state_;$/;"	m	class:kaldi::SingleUtteranceGmmDecoder
basis_opts	online2/online-gmm-decoding.h	/^  BasisFmllrOptions basis_opts; \/\/ options for basis-fMLLR adaptation.$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
cmvn_state	online2/online-gmm-decoding.h	/^  OnlineCmvnState cmvn_state;$/;"	m	struct:kaldi::OnlineGmmAdaptationState
config_	online2/online-gmm-decoding.h	/^  OnlineGmmDecodingConfig config_;$/;"	m	class:kaldi::SingleUtteranceGmmDecoder
decoder_	online2/online-gmm-decoding.h	/^  LatticeFasterOnlineDecoder decoder_;$/;"	m	class:kaldi::SingleUtteranceGmmDecoder
faster_decoder_opts	online2/online-gmm-decoding.h	/^  LatticeFasterDecoderConfig faster_decoder_opts;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
feature_pipeline_	online2/online-gmm-decoding.h	/^  OnlineFeaturePipeline *feature_pipeline_;  \/\/ owned here.$/;"	m	class:kaldi::SingleUtteranceGmmDecoder
fmllr_basis_	online2/online-gmm-decoding.h	/^  BasisFmllrEstimate fmllr_basis_;$/;"	m	class:kaldi::OnlineGmmDecodingModels
fmllr_basis_rxfilename	online2/online-gmm-decoding.h	/^  std::string fmllr_basis_rxfilename;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
fmllr_lattice_beam	online2/online-gmm-decoding.h	/^  BaseFloat fmllr_lattice_beam;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
kaldi	online2/online-gmm-decoding.h	/^namespace kaldi {$/;"	n
model_	online2/online-gmm-decoding.h	/^  AmDiagGmm model_;$/;"	m	class:kaldi::OnlineGmmDecodingModels
model_rxfilename	online2/online-gmm-decoding.h	/^  std::string model_rxfilename;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
models_	online2/online-gmm-decoding.h	/^  const OnlineGmmDecodingModels &models_;$/;"	m	class:kaldi::SingleUtteranceGmmDecoder
online_alignment_model_	online2/online-gmm-decoding.h	/^  AmDiagGmm online_alignment_model_;$/;"	m	class:kaldi::OnlineGmmDecodingModels
online_alimdl_rxfilename	online2/online-gmm-decoding.h	/^  std::string online_alimdl_rxfilename;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
orig_adaptation_state_	online2/online-gmm-decoding.h	/^  const OnlineGmmAdaptationState &orig_adaptation_state_;$/;"	m	class:kaldi::SingleUtteranceGmmDecoder
rescore_model_	online2/online-gmm-decoding.h	/^  AmDiagGmm rescore_model_;$/;"	m	class:kaldi::OnlineGmmDecodingModels
rescore_model_rxfilename	online2/online-gmm-decoding.h	/^  std::string rescore_model_rxfilename;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
silence_phones	online2/online-gmm-decoding.h	/^  std::string silence_phones;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
silence_phones_	online2/online-gmm-decoding.h	/^  std::vector<int32> silence_phones_; \/\/ sorted, unique list of silence phones,$/;"	m	class:kaldi::SingleUtteranceGmmDecoder
silence_weight	online2/online-gmm-decoding.h	/^  BaseFloat silence_weight;$/;"	m	struct:kaldi::OnlineGmmDecodingConfig
spk_stats	online2/online-gmm-decoding.h	/^  FmllrDiagGmmAccs spk_stats;$/;"	m	struct:kaldi::OnlineGmmAdaptationState
tmodel_	online2/online-gmm-decoding.h	/^  TransitionModel tmodel_; $/;"	m	class:kaldi::OnlineGmmDecodingModels
transform	online2/online-gmm-decoding.h	/^  Matrix<BaseFloat> transform;$/;"	m	struct:kaldi::OnlineGmmAdaptationState
Check	online2/online-ivector-feature.cc	/^void OnlineIvectorExtractionInfo::Check() const {$/;"	f	class:kaldi::OnlineIvectorExtractionInfo
ComputeCurrentTraceback	online2/online-ivector-feature.cc	/^void OnlineSilenceWeighting::ComputeCurrentTraceback($/;"	f	class:kaldi::OnlineSilenceWeighting
Dim	online2/online-ivector-feature.cc	/^int32 OnlineIvectorFeature::Dim() const {$/;"	f	class:kaldi::OnlineIvectorFeature
GetAdaptationState	online2/online-ivector-feature.cc	/^void OnlineIvectorFeature::GetAdaptationState($/;"	f	class:kaldi::OnlineIvectorFeature
GetBeginFrame	online2/online-ivector-feature.cc	/^int32 OnlineSilenceWeighting::GetBeginFrame() {$/;"	f	class:kaldi::OnlineSilenceWeighting
GetDeltaWeights	online2/online-ivector-feature.cc	/^void OnlineSilenceWeighting::GetDeltaWeights($/;"	f	class:kaldi::OnlineSilenceWeighting
GetFrame	online2/online-ivector-feature.cc	/^void OnlineIvectorFeature::GetFrame(int32 frame,$/;"	f	class:kaldi::OnlineIvectorFeature
Init	online2/online-ivector-feature.cc	/^void OnlineIvectorExtractionInfo::Init($/;"	f	class:kaldi::OnlineIvectorExtractionInfo
IsLastFrame	online2/online-ivector-feature.cc	/^bool OnlineIvectorFeature::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineIvectorFeature
LimitFrames	online2/online-ivector-feature.cc	/^void OnlineIvectorExtractorAdaptationState::LimitFrames($/;"	f	class:kaldi::OnlineIvectorExtractorAdaptationState
NumFramesReady	online2/online-ivector-feature.cc	/^int32 OnlineIvectorFeature::NumFramesReady() const {$/;"	f	class:kaldi::OnlineIvectorFeature
ObjfImprPerFrame	online2/online-ivector-feature.cc	/^BaseFloat OnlineIvectorFeature::ObjfImprPerFrame() const {$/;"	f	class:kaldi::OnlineIvectorFeature
OnlineIvectorExtractionInfo	online2/online-ivector-feature.cc	/^OnlineIvectorExtractionInfo::OnlineIvectorExtractionInfo($/;"	f	class:kaldi::OnlineIvectorExtractionInfo
OnlineIvectorExtractionInfo	online2/online-ivector-feature.cc	/^OnlineIvectorExtractionInfo::OnlineIvectorExtractionInfo():$/;"	f	class:kaldi::OnlineIvectorExtractionInfo
OnlineIvectorExtractorAdaptationState	online2/online-ivector-feature.cc	/^OnlineIvectorExtractorAdaptationState::OnlineIvectorExtractorAdaptationState($/;"	f	class:kaldi::OnlineIvectorExtractorAdaptationState
OnlineIvectorFeature	online2/online-ivector-feature.cc	/^OnlineIvectorFeature::OnlineIvectorFeature($/;"	f	class:kaldi::OnlineIvectorFeature
OnlineSilenceWeighting	online2/online-ivector-feature.cc	/^OnlineSilenceWeighting::OnlineSilenceWeighting($/;"	f	class:kaldi::OnlineSilenceWeighting
PrintDiagnostics	online2/online-ivector-feature.cc	/^void OnlineIvectorFeature::PrintDiagnostics() const {$/;"	f	class:kaldi::OnlineIvectorFeature
Read	online2/online-ivector-feature.cc	/^void OnlineIvectorExtractorAdaptationState::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::OnlineIvectorExtractorAdaptationState
SetAdaptationState	online2/online-ivector-feature.cc	/^void OnlineIvectorFeature::SetAdaptationState($/;"	f	class:kaldi::OnlineIvectorFeature
UbmLogLikePerFrame	online2/online-ivector-feature.cc	/^BaseFloat OnlineIvectorFeature::UbmLogLikePerFrame() const {$/;"	f	class:kaldi::OnlineIvectorFeature
UpdateFrameWeights	online2/online-ivector-feature.cc	/^void OnlineIvectorFeature::UpdateFrameWeights($/;"	f	class:kaldi::OnlineIvectorFeature
UpdateStatsForFrame	online2/online-ivector-feature.cc	/^void OnlineIvectorFeature::UpdateStatsForFrame(int32 t,$/;"	f	class:kaldi::OnlineIvectorFeature
UpdateStatsUntilFrame	online2/online-ivector-feature.cc	/^void OnlineIvectorFeature::UpdateStatsUntilFrame(int32 frame) {$/;"	f	class:kaldi::OnlineIvectorFeature
UpdateStatsUntilFrameWeighted	online2/online-ivector-feature.cc	/^void OnlineIvectorFeature::UpdateStatsUntilFrameWeighted(int32 frame) {$/;"	f	class:kaldi::OnlineIvectorFeature
Write	online2/online-ivector-feature.cc	/^void OnlineIvectorExtractorAdaptationState::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::OnlineIvectorExtractorAdaptationState
kaldi	online2/online-ivector-feature.cc	/^namespace kaldi {$/;"	n	file:
~OnlineIvectorFeature	online2/online-ivector-feature.cc	/^OnlineIvectorFeature::~OnlineIvectorFeature() {$/;"	f	class:kaldi::OnlineIvectorFeature
Active	online2/online-ivector-feature.h	/^  bool Active() const { return config_.Active(); }$/;"	f	class:kaldi::OnlineSilenceWeighting
Active	online2/online-ivector-feature.h	/^  bool Active() const {$/;"	f	struct:kaldi::OnlineSilenceWeightingConfig
FrameInfo	online2/online-ivector-feature.h	/^    FrameInfo(): token(NULL), transition_id(-1), current_weight(0.0) {}$/;"	f	struct:kaldi::OnlineSilenceWeighting::FrameInfo
FrameInfo	online2/online-ivector-feature.h	/^  struct FrameInfo {$/;"	s	class:kaldi::OnlineSilenceWeighting
KALDI_ONLINE2_ONLINE_IVECTOR_FEATURE_H_	online2/online-ivector-feature.h	22;"	d
NumFrames	online2/online-ivector-feature.h	/^  BaseFloat NumFrames() const {$/;"	f	class:kaldi::OnlineIvectorFeature
OnlineIvectorExtractionConfig	online2/online-ivector-feature.h	/^  OnlineIvectorExtractionConfig(): ivector_period(10), num_gselect(5),$/;"	f	struct:kaldi::OnlineIvectorExtractionConfig
OnlineIvectorExtractionConfig	online2/online-ivector-feature.h	/^struct OnlineIvectorExtractionConfig {$/;"	s	namespace:kaldi
OnlineIvectorExtractionInfo	online2/online-ivector-feature.h	/^struct OnlineIvectorExtractionInfo {$/;"	s	namespace:kaldi
OnlineIvectorExtractorAdaptationState	online2/online-ivector-feature.h	/^  OnlineIvectorExtractorAdaptationState(const OnlineIvectorExtractionInfo &info):$/;"	f	struct:kaldi::OnlineIvectorExtractorAdaptationState
OnlineIvectorExtractorAdaptationState	online2/online-ivector-feature.h	/^struct OnlineIvectorExtractorAdaptationState {$/;"	s	namespace:kaldi
OnlineIvectorFeature	online2/online-ivector-feature.h	/^class OnlineIvectorFeature: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineSilenceWeighting	online2/online-ivector-feature.h	/^class OnlineSilenceWeighting {$/;"	c	namespace:kaldi
OnlineSilenceWeightingConfig	online2/online-ivector-feature.h	/^  OnlineSilenceWeightingConfig():$/;"	f	struct:kaldi::OnlineSilenceWeightingConfig
OnlineSilenceWeightingConfig	online2/online-ivector-feature.h	/^struct OnlineSilenceWeightingConfig {$/;"	s	namespace:kaldi
Register	online2/online-ivector-feature.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineIvectorExtractionConfig
Register	online2/online-ivector-feature.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineSilenceWeightingConfig
RegisterWithPrefix	online2/online-ivector-feature.h	/^  void RegisterWithPrefix(std::string prefix, OptionsItf *po) {$/;"	f	struct:kaldi::OnlineSilenceWeightingConfig
base_	online2/online-ivector-feature.h	/^  OnlineFeatureInterface *base_;$/;"	m	class:kaldi::OnlineIvectorFeature
cmvn_	online2/online-ivector-feature.h	/^  OnlineCmvn *cmvn_;$/;"	m	class:kaldi::OnlineIvectorFeature
cmvn_config_rxfilename	online2/online-ivector-feature.h	/^  std::string cmvn_config_rxfilename;  \/\/ to read in OnlineCmvnOptions$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
cmvn_opts	online2/online-ivector-feature.h	/^  OnlineCmvnOptions cmvn_opts;  \/\/ Options for online CMN\/CMVN computation.$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
cmvn_state	online2/online-ivector-feature.h	/^  OnlineCmvnState cmvn_state;  $/;"	m	struct:kaldi::OnlineIvectorExtractorAdaptationState
config_	online2/online-ivector-feature.h	/^  const OnlineSilenceWeightingConfig &config_;$/;"	m	class:kaldi::OnlineSilenceWeighting
current_frame_weight_debug_	online2/online-ivector-feature.h	/^  std::vector<BaseFloat> current_frame_weight_debug_;$/;"	m	class:kaldi::OnlineIvectorFeature
current_ivector_	online2/online-ivector-feature.h	/^  Vector<double> current_ivector_;$/;"	m	class:kaldi::OnlineIvectorFeature
current_weight	online2/online-ivector-feature.h	/^    BaseFloat current_weight;$/;"	m	struct:kaldi::OnlineSilenceWeighting::FrameInfo
delta_weights_	online2/online-ivector-feature.h	/^                      std::greater<std::pair<int32, BaseFloat> > > delta_weights_;$/;"	m	class:kaldi::OnlineIvectorFeature
delta_weights_provided_	online2/online-ivector-feature.h	/^  bool delta_weights_provided_;$/;"	m	class:kaldi::OnlineIvectorFeature
diag_ubm	online2/online-ivector-feature.h	/^  DiagGmm diag_ubm;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
diag_ubm_rxfilename	online2/online-ivector-feature.h	/^  std::string diag_ubm_rxfilename;  \/\/ reads type DiagGmm.$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
extractor	online2/online-ivector-feature.h	/^  IvectorExtractor extractor;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
frame_info_	online2/online-ivector-feature.h	/^  std::vector<FrameInfo> frame_info_;$/;"	m	class:kaldi::OnlineSilenceWeighting
global_cmvn_stats	online2/online-ivector-feature.h	/^  Matrix<double> global_cmvn_stats;  \/\/ Global CMVN stats.$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
global_cmvn_stats_rxfilename	online2/online-ivector-feature.h	/^  std::string global_cmvn_stats_rxfilename; \/\/ to read matrix of global CMVN$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
greedy_ivector_extractor	online2/online-ivector-feature.h	/^  bool greedy_ivector_extractor;$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
greedy_ivector_extractor	online2/online-ivector-feature.h	/^  bool greedy_ivector_extractor;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
info_	online2/online-ivector-feature.h	/^  const OnlineIvectorExtractionInfo &info_;$/;"	m	class:kaldi::OnlineIvectorFeature
ivector_extractor_rxfilename	online2/online-ivector-feature.h	/^  std::string ivector_extractor_rxfilename;  \/\/ reads type IvectorExtractor$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
ivector_period	online2/online-ivector-feature.h	/^  int32 ivector_period;  \/\/ How frequently we re-estimate iVectors.$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
ivector_period	online2/online-ivector-feature.h	/^  int32 ivector_period;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
ivector_stats	online2/online-ivector-feature.h	/^  OnlineIvectorEstimationStats ivector_stats;$/;"	m	struct:kaldi::OnlineIvectorExtractorAdaptationState
ivector_stats_	online2/online-ivector-feature.h	/^  OnlineIvectorEstimationStats ivector_stats_;$/;"	m	class:kaldi::OnlineIvectorFeature
ivectors_history_	online2/online-ivector-feature.h	/^  std::vector<Vector<BaseFloat>* > ivectors_history_;$/;"	m	class:kaldi::OnlineIvectorFeature
kaldi	online2/online-ivector-feature.h	/^namespace kaldi {$/;"	n
lda_	online2/online-ivector-feature.h	/^  OnlineTransform *lda_;  \/\/ LDA on top of raw+splice features.$/;"	m	class:kaldi::OnlineIvectorFeature
lda_mat	online2/online-ivector-feature.h	/^  Matrix<BaseFloat> lda_mat;  \/\/ LDA+MLLT matrix.$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
lda_mat_rxfilename	online2/online-ivector-feature.h	/^  std::string lda_mat_rxfilename;  \/\/ to read the LDA+MLLT matrix$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
lda_normalized_	online2/online-ivector-feature.h	/^  OnlineTransform *lda_normalized_;  \/\/ LDA on top of CMVN+splice$/;"	m	class:kaldi::OnlineIvectorFeature
max_count	online2/online-ivector-feature.h	/^  BaseFloat max_count;  \/\/ Maximum stats count we allow before we start scaling$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
max_count	online2/online-ivector-feature.h	/^  BaseFloat max_count;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
max_remembered_frames	online2/online-ivector-feature.h	/^  BaseFloat max_remembered_frames;$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
max_remembered_frames	online2/online-ivector-feature.h	/^  BaseFloat max_remembered_frames;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
max_state_duration	online2/online-ivector-feature.h	/^  BaseFloat max_state_duration;$/;"	m	struct:kaldi::OnlineSilenceWeightingConfig
min_post	online2/online-ivector-feature.h	/^  BaseFloat min_post;  \/\/ pruning threshold for posteriors for the iVector$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
min_post	online2/online-ivector-feature.h	/^  BaseFloat min_post;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
most_recent_frame_with_weight_	online2/online-ivector-feature.h	/^  int32 most_recent_frame_with_weight_;$/;"	m	class:kaldi::OnlineIvectorFeature
new_data_weight	online2/online-ivector-feature.h	/^  BaseFloat new_data_weight;$/;"	m	struct:kaldi::OnlineSilenceWeightingConfig
num_cg_iters	online2/online-ivector-feature.h	/^  int32 num_cg_iters;  \/\/ set to 15.  I don't believe this is very important, so it's$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
num_cg_iters	online2/online-ivector-feature.h	/^  int32 num_cg_iters;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
num_frames_output_and_correct_	online2/online-ivector-feature.h	/^  int32 num_frames_output_and_correct_;$/;"	m	class:kaldi::OnlineSilenceWeighting
num_frames_stats_	online2/online-ivector-feature.h	/^  int32 num_frames_stats_;$/;"	m	class:kaldi::OnlineIvectorFeature
num_gselect	online2/online-ivector-feature.h	/^  int32 num_gselect;  \/\/ maximum number of posteriors to use per frame for$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
num_gselect	online2/online-ivector-feature.h	/^  int32 num_gselect;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
posterior_scale	online2/online-ivector-feature.h	/^  BaseFloat posterior_scale;  \/\/ Scale on posteriors used for iVector$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
posterior_scale	online2/online-ivector-feature.h	/^  BaseFloat posterior_scale;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
silence_phones_	online2/online-ivector-feature.h	/^  unordered_set<int32> silence_phones_;$/;"	m	class:kaldi::OnlineSilenceWeighting
silence_phones_str	online2/online-ivector-feature.h	/^  std::string silence_phones_str;$/;"	m	struct:kaldi::OnlineSilenceWeightingConfig
silence_weight	online2/online-ivector-feature.h	/^  BaseFloat silence_weight;$/;"	m	struct:kaldi::OnlineSilenceWeightingConfig
splice_	online2/online-ivector-feature.h	/^  OnlineSpliceFrames *splice_; \/\/ splice on top of raw features.$/;"	m	class:kaldi::OnlineIvectorFeature
splice_config_rxfilename	online2/online-ivector-feature.h	/^  std::string splice_config_rxfilename;  \/\/ to read OnlineSpliceOptions$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
splice_normalized_	online2/online-ivector-feature.h	/^  OnlineSpliceFrames *splice_normalized_; \/\/ splice on top of CMVN feats.$/;"	m	class:kaldi::OnlineIvectorFeature
splice_opts	online2/online-ivector-feature.h	/^  OnlineSpliceOptions splice_opts;  \/\/ Options for frame splicing$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
token	online2/online-ivector-feature.h	/^    void *token;$/;"	m	struct:kaldi::OnlineSilenceWeighting::FrameInfo
tot_ubm_loglike_	online2/online-ivector-feature.h	/^  double tot_ubm_loglike_;$/;"	m	class:kaldi::OnlineIvectorFeature
trans_model_	online2/online-ivector-feature.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::OnlineSilenceWeighting
transition_id	online2/online-ivector-feature.h	/^    int32 transition_id;$/;"	m	struct:kaldi::OnlineSilenceWeighting::FrameInfo
updated_with_no_delta_weights_	online2/online-ivector-feature.h	/^  bool updated_with_no_delta_weights_;$/;"	m	class:kaldi::OnlineIvectorFeature
use_most_recent_ivector	online2/online-ivector-feature.h	/^  bool use_most_recent_ivector;$/;"	m	struct:kaldi::OnlineIvectorExtractionConfig
use_most_recent_ivector	online2/online-ivector-feature.h	/^  bool use_most_recent_ivector;$/;"	m	struct:kaldi::OnlineIvectorExtractionInfo
AbortAllThreads	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::AbortAllThreads(bool error) {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
AcceptWaveform	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::AcceptWaveform($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
Check	online2/online-nnet2-decoding-threaded.cc	/^void OnlineNnet2DecodingThreadedConfig::Check() {$/;"	f	class:kaldi::OnlineNnet2DecodingThreadedConfig
EndpointDetected	online2/online-nnet2-decoding-threaded.cc	/^bool SingleUtteranceNnet2DecoderThreaded::EndpointDetected($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
FeatureComputation	online2/online-nnet2-decoding-threaded.cc	/^bool SingleUtteranceNnet2DecoderThreaded::FeatureComputation($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
FinalizeDecoding	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::FinalizeDecoding() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
GetAdaptationState	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::GetAdaptationState($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
GetBestPath	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::GetBestPath($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
GetLattice	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::GetLattice($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
GetRemainingWaveform	online2/online-nnet2-decoding-threaded.cc	/^BaseFloat SingleUtteranceNnet2DecoderThreaded::GetRemainingWaveform($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
InputFinished	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::InputFinished() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
Lock	online2/online-nnet2-decoding-threaded.cc	/^bool ThreadSynchronizer::Lock(ThreadType t) {$/;"	f	class:kaldi::ThreadSynchronizer
NumFramesDecoded	online2/online-nnet2-decoding-threaded.cc	/^int32 SingleUtteranceNnet2DecoderThreaded::NumFramesDecoded() const {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
NumFramesReceivedApprox	online2/online-nnet2-decoding-threaded.cc	/^int32 SingleUtteranceNnet2DecoderThreaded::NumFramesReceivedApprox() const {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
NumWaveformPiecesPending	online2/online-nnet2-decoding-threaded.cc	/^int32 SingleUtteranceNnet2DecoderThreaded::NumWaveformPiecesPending() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
ProcessLoglikes	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::ProcessLoglikes($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
RunDecoderSearch	online2/online-nnet2-decoding-threaded.cc	/^void* SingleUtteranceNnet2DecoderThreaded::RunDecoderSearch(void *ptr_in) {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
RunDecoderSearchInternal	online2/online-nnet2-decoding-threaded.cc	/^bool SingleUtteranceNnet2DecoderThreaded::RunDecoderSearchInternal() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
RunNnetEvaluation	online2/online-nnet2-decoding-threaded.cc	/^void* SingleUtteranceNnet2DecoderThreaded::RunNnetEvaluation(void *ptr_in) {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
RunNnetEvaluationInternal	online2/online-nnet2-decoding-threaded.cc	/^bool SingleUtteranceNnet2DecoderThreaded::RunNnetEvaluationInternal() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
SetAbort	online2/online-nnet2-decoding-threaded.cc	/^void ThreadSynchronizer::SetAbort() {$/;"	f	class:kaldi::ThreadSynchronizer
SingleUtteranceNnet2DecoderThreaded	online2/online-nnet2-decoding-threaded.cc	/^SingleUtteranceNnet2DecoderThreaded::SingleUtteranceNnet2DecoderThreaded($/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
TerminateDecoding	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::TerminateDecoding() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
ThreadSynchronizer	online2/online-nnet2-decoding-threaded.cc	/^ThreadSynchronizer::ThreadSynchronizer():$/;"	f	class:kaldi::ThreadSynchronizer
UnlockFailure	online2/online-nnet2-decoding-threaded.cc	/^bool ThreadSynchronizer::UnlockFailure(ThreadType t) {$/;"	f	class:kaldi::ThreadSynchronizer
UnlockSuccess	online2/online-nnet2-decoding-threaded.cc	/^bool ThreadSynchronizer::UnlockSuccess(ThreadType t) {$/;"	f	class:kaldi::ThreadSynchronizer
Wait	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::Wait() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
WaitForAllThreads	online2/online-nnet2-decoding-threaded.cc	/^void SingleUtteranceNnet2DecoderThreaded::WaitForAllThreads() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
kaldi	online2/online-nnet2-decoding-threaded.cc	/^namespace kaldi {$/;"	n	file:
~SingleUtteranceNnet2DecoderThreaded	online2/online-nnet2-decoding-threaded.cc	/^SingleUtteranceNnet2DecoderThreaded::~SingleUtteranceNnet2DecoderThreaded() {$/;"	f	class:kaldi::SingleUtteranceNnet2DecoderThreaded
~ThreadSynchronizer	online2/online-nnet2-decoding-threaded.cc	/^ThreadSynchronizer::~ThreadSynchronizer() {$/;"	f	class:kaldi::ThreadSynchronizer
KALDI_ONLINE2_ONLINE_NNET2_DECODING_THREADED_H_	online2/online-nnet2-decoding-threaded.h	22;"	d
OnlineNnet2DecodingThreadedConfig	online2/online-nnet2-decoding-threaded.h	/^  OnlineNnet2DecodingThreadedConfig() {$/;"	f	struct:kaldi::OnlineNnet2DecodingThreadedConfig
OnlineNnet2DecodingThreadedConfig	online2/online-nnet2-decoding-threaded.h	/^struct OnlineNnet2DecodingThreadedConfig {$/;"	s	namespace:kaldi
Register	online2/online-nnet2-decoding-threaded.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineNnet2DecodingThreadedConfig
SingleUtteranceNnet2DecoderThreaded	online2/online-nnet2-decoding-threaded.h	/^class SingleUtteranceNnet2DecoderThreaded {$/;"	c	namespace:kaldi
ThreadSynchronizer	online2/online-nnet2-decoding-threaded.h	/^class ThreadSynchronizer {$/;"	c	namespace:kaldi
ThreadType	online2/online-nnet2-decoding-threaded.h	/^  enum ThreadType { kProducer, kConsumer };$/;"	g	class:kaldi::ThreadSynchronizer
abort_	online2/online-nnet2-decoding-threaded.h	/^  bool abort_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
abort_	online2/online-nnet2-decoding-threaded.h	/^  bool abort_;$/;"	m	class:kaldi::ThreadSynchronizer
acoustic_scale	online2/online-nnet2-decoding-threaded.h	/^  BaseFloat acoustic_scale;$/;"	m	struct:kaldi::OnlineNnet2DecodingThreadedConfig
am_nnet_	online2/online-nnet2-decoding-threaded.h	/^  const nnet2::AmNnet &am_nnet_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
config_	online2/online-nnet2-decoding-threaded.h	/^  OnlineNnet2DecodingThreadedConfig config_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
consumer_semaphore_	online2/online-nnet2-decoding-threaded.h	/^  Semaphore consumer_semaphore_;  \/\/ The consumer thread waits on this semaphore$/;"	m	class:kaldi::ThreadSynchronizer
consumer_waiting_	online2/online-nnet2-decoding-threaded.h	/^  bool consumer_waiting_;  \/\/ true if consumer is\/will be waiting on semaphore$/;"	m	class:kaldi::ThreadSynchronizer
decodable_	online2/online-nnet2-decoding-threaded.h	/^  DecodableMatrixMappedOffset decodable_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
decodable_synchronizer_	online2/online-nnet2-decoding-threaded.h	/^  ThreadSynchronizer decodable_synchronizer_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
decode_batch_size	online2/online-nnet2-decoding-threaded.h	/^  int32 decode_batch_size;  \/\/ maximum number of frames at a time that we decode$/;"	m	struct:kaldi::OnlineNnet2DecodingThreadedConfig
decoder_	online2/online-nnet2-decoding-threaded.h	/^  LatticeFasterOnlineDecoder decoder_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
decoder_mutex_	online2/online-nnet2-decoding-threaded.h	/^  Mutex decoder_mutex_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
decoder_opts	online2/online-nnet2-decoding-threaded.h	/^  LatticeFasterDecoderConfig decoder_opts;$/;"	m	struct:kaldi::OnlineNnet2DecodingThreadedConfig
error_	online2/online-nnet2-decoding-threaded.h	/^  bool error_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
feature_batch_size	online2/online-nnet2-decoding-threaded.h	/^  int32 feature_batch_size;  \/\/ maximum number of frames at a time that we decode$/;"	m	struct:kaldi::OnlineNnet2DecodingThreadedConfig
feature_pipeline_	online2/online-nnet2-decoding-threaded.h	/^  OnlineNnet2FeaturePipeline feature_pipeline_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
feature_pipeline_mutex_	online2/online-nnet2-decoding-threaded.h	/^  Mutex feature_pipeline_mutex_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
held_by_	online2/online-nnet2-decoding-threaded.h	/^  ThreadType held_by_;  \/\/ Record of which thread is holding the mutex (if$/;"	m	class:kaldi::ThreadSynchronizer
input_finished_	online2/online-nnet2-decoding-threaded.h	/^  bool input_finished_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
input_waveform_	online2/online-nnet2-decoding-threaded.h	/^  std::deque< Vector<BaseFloat>* > input_waveform_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
kConsumer	online2/online-nnet2-decoding-threaded.h	/^  enum ThreadType { kProducer, kConsumer };$/;"	e	enum:kaldi::ThreadSynchronizer::ThreadType
kProducer	online2/online-nnet2-decoding-threaded.h	/^  enum ThreadType { kProducer, kConsumer };$/;"	e	enum:kaldi::ThreadSynchronizer::ThreadType
kaldi	online2/online-nnet2-decoding-threaded.h	/^namespace kaldi {$/;"	n
max_buffered_features	online2/online-nnet2-decoding-threaded.h	/^  int32 max_buffered_features;  \/\/ maximum frames of features we allow to be$/;"	m	struct:kaldi::OnlineNnet2DecodingThreadedConfig
max_loglikes_copy	online2/online-nnet2-decoding-threaded.h	/^  int32 max_loglikes_copy;   \/\/ maximum unused frames of log-likelihoods we will$/;"	m	struct:kaldi::OnlineNnet2DecodingThreadedConfig
mutex_	online2/online-nnet2-decoding-threaded.h	/^  Mutex mutex_;  \/\/ Locks the buffer object.$/;"	m	class:kaldi::ThreadSynchronizer
nnet_batch_size	online2/online-nnet2-decoding-threaded.h	/^  int32 nnet_batch_size;    \/\/ batch size (number of frames) we evaluate in the$/;"	m	struct:kaldi::OnlineNnet2DecodingThreadedConfig
num_errors_	online2/online-nnet2-decoding-threaded.h	/^  int32 num_errors_;  \/\/ Rumber of times the threads alternated doing Lock() and$/;"	m	class:kaldi::ThreadSynchronizer
num_frames_decoded_	online2/online-nnet2-decoding-threaded.h	/^  int32 num_frames_decoded_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
num_samples_discarded_	online2/online-nnet2-decoding-threaded.h	/^  int64 num_samples_discarded_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
num_samples_received_	online2/online-nnet2-decoding-threaded.h	/^  int64 num_samples_received_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
processed_waveform_	online2/online-nnet2-decoding-threaded.h	/^  std::deque< Vector<BaseFloat>* > processed_waveform_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
producer_semaphore_	online2/online-nnet2-decoding-threaded.h	/^  Semaphore producer_semaphore_;  \/\/ The producer thread waits on this semaphore$/;"	m	class:kaldi::ThreadSynchronizer
producer_waiting_	online2/online-nnet2-decoding-threaded.h	/^  bool producer_waiting_;  \/\/ true if producer is\/will be waiting on semaphore$/;"	m	class:kaldi::ThreadSynchronizer
sampling_rate_	online2/online-nnet2-decoding-threaded.h	/^  BaseFloat sampling_rate_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
silence_weighting_	online2/online-nnet2-decoding-threaded.h	/^  OnlineSilenceWeighting silence_weighting_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
silence_weighting_mutex_	online2/online-nnet2-decoding-threaded.h	/^  Mutex silence_weighting_mutex_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
threads_	online2/online-nnet2-decoding-threaded.h	/^  pthread_t threads_[2];$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
tmodel_	online2/online-nnet2-decoding-threaded.h	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
waveform_synchronizer_	online2/online-nnet2-decoding-threaded.h	/^  ThreadSynchronizer waveform_synchronizer_;$/;"	m	class:kaldi::SingleUtteranceNnet2DecoderThreaded
AdvanceDecoding	online2/online-nnet2-decoding.cc	/^void SingleUtteranceNnet2Decoder::AdvanceDecoding() {$/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
EndpointDetected	online2/online-nnet2-decoding.cc	/^bool SingleUtteranceNnet2Decoder::EndpointDetected($/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
FinalizeDecoding	online2/online-nnet2-decoding.cc	/^void SingleUtteranceNnet2Decoder::FinalizeDecoding() {$/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
GetBestPath	online2/online-nnet2-decoding.cc	/^void SingleUtteranceNnet2Decoder::GetBestPath(bool end_of_utterance,$/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
GetLattice	online2/online-nnet2-decoding.cc	/^void SingleUtteranceNnet2Decoder::GetLattice(bool end_of_utterance,$/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
NumFramesDecoded	online2/online-nnet2-decoding.cc	/^int32 SingleUtteranceNnet2Decoder::NumFramesDecoded() const {$/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
SingleUtteranceNnet2Decoder	online2/online-nnet2-decoding.cc	/^SingleUtteranceNnet2Decoder::SingleUtteranceNnet2Decoder($/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
kaldi	online2/online-nnet2-decoding.cc	/^namespace kaldi {$/;"	n	file:
Decoder	online2/online-nnet2-decoding.h	/^  const LatticeFasterOnlineDecoder &Decoder() const { return decoder_; }$/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
KALDI_ONLINE2_ONLINE_NNET2_DECODING_H_	online2/online-nnet2-decoding.h	22;"	d
OnlineNnet2DecodingConfig	online2/online-nnet2-decoding.h	/^  OnlineNnet2DecodingConfig() {  decodable_opts.acoustic_scale = 0.1; }$/;"	f	struct:kaldi::OnlineNnet2DecodingConfig
OnlineNnet2DecodingConfig	online2/online-nnet2-decoding.h	/^struct OnlineNnet2DecodingConfig {$/;"	s	namespace:kaldi
Register	online2/online-nnet2-decoding.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineNnet2DecodingConfig
SingleUtteranceNnet2Decoder	online2/online-nnet2-decoding.h	/^class SingleUtteranceNnet2Decoder {$/;"	c	namespace:kaldi
config_	online2/online-nnet2-decoding.h	/^  OnlineNnet2DecodingConfig config_;$/;"	m	class:kaldi::SingleUtteranceNnet2Decoder
decodable_	online2/online-nnet2-decoding.h	/^  nnet2::DecodableNnet2Online decodable_;$/;"	m	class:kaldi::SingleUtteranceNnet2Decoder
decodable_opts	online2/online-nnet2-decoding.h	/^  nnet2::DecodableNnet2OnlineOptions decodable_opts;$/;"	m	struct:kaldi::OnlineNnet2DecodingConfig
decoder_	online2/online-nnet2-decoding.h	/^  LatticeFasterOnlineDecoder decoder_;$/;"	m	class:kaldi::SingleUtteranceNnet2Decoder
decoder_opts	online2/online-nnet2-decoding.h	/^  LatticeFasterDecoderConfig decoder_opts;$/;"	m	struct:kaldi::OnlineNnet2DecodingConfig
feature_pipeline_	online2/online-nnet2-decoding.h	/^  OnlineNnet2FeaturePipeline *feature_pipeline_;$/;"	m	class:kaldi::SingleUtteranceNnet2Decoder
kaldi	online2/online-nnet2-decoding.h	/^namespace kaldi {$/;"	n
tmodel_	online2/online-nnet2-decoding.h	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::SingleUtteranceNnet2Decoder
~SingleUtteranceNnet2Decoder	online2/online-nnet2-decoding.h	/^  ~SingleUtteranceNnet2Decoder() { }$/;"	f	class:kaldi::SingleUtteranceNnet2Decoder
AcceptWaveform	online2/online-nnet2-feature-pipeline.cc	/^void OnlineNnet2FeaturePipeline::AcceptWaveform($/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
Dim	online2/online-nnet2-feature-pipeline.cc	/^int32 OnlineNnet2FeaturePipeline::Dim() const { return dim_; }$/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
FrameShiftInSeconds	online2/online-nnet2-feature-pipeline.cc	/^BaseFloat OnlineNnet2FeaturePipelineInfo::FrameShiftInSeconds() const {$/;"	f	class:kaldi::OnlineNnet2FeaturePipelineInfo
GetAdaptationState	online2/online-nnet2-feature-pipeline.cc	/^void OnlineNnet2FeaturePipeline::GetAdaptationState($/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
GetFrame	online2/online-nnet2-feature-pipeline.cc	/^void OnlineNnet2FeaturePipeline::GetFrame(int32 frame,$/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
InputFinished	online2/online-nnet2-feature-pipeline.cc	/^void OnlineNnet2FeaturePipeline::InputFinished() {$/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
IsLastFrame	online2/online-nnet2-feature-pipeline.cc	/^bool OnlineNnet2FeaturePipeline::IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
NumFramesReady	online2/online-nnet2-feature-pipeline.cc	/^int32 OnlineNnet2FeaturePipeline::NumFramesReady() const {$/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
OnlineNnet2FeaturePipeline	online2/online-nnet2-feature-pipeline.cc	/^OnlineNnet2FeaturePipeline::OnlineNnet2FeaturePipeline($/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
OnlineNnet2FeaturePipelineInfo	online2/online-nnet2-feature-pipeline.cc	/^OnlineNnet2FeaturePipelineInfo::OnlineNnet2FeaturePipelineInfo($/;"	f	class:kaldi::OnlineNnet2FeaturePipelineInfo
SetAdaptationState	online2/online-nnet2-feature-pipeline.cc	/^void OnlineNnet2FeaturePipeline::SetAdaptationState($/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
UpdateFrameWeights	online2/online-nnet2-feature-pipeline.cc	/^void OnlineNnet2FeaturePipeline::UpdateFrameWeights($/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
kaldi	online2/online-nnet2-feature-pipeline.cc	/^namespace kaldi {$/;"	n	file:
~OnlineNnet2FeaturePipeline	online2/online-nnet2-feature-pipeline.cc	/^OnlineNnet2FeaturePipeline::~OnlineNnet2FeaturePipeline() {$/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
FrameShiftInSeconds	online2/online-nnet2-feature-pipeline.h	/^  BaseFloat FrameShiftInSeconds() const { return info_.FrameShiftInSeconds(); }$/;"	f	class:kaldi::OnlineNnet2FeaturePipeline
IvectorDim	online2/online-nnet2-feature-pipeline.h	/^  int32 IvectorDim() { return ivector_extractor_info.extractor.IvectorDim(); }$/;"	f	struct:kaldi::OnlineNnet2FeaturePipelineInfo
KALDI_ONLINE2_ONLINE_NNET2_FEATURE_PIPELINE_H_	online2/online-nnet2-feature-pipeline.h	22;"	d
OnlineNnet2FeaturePipeline	online2/online-nnet2-feature-pipeline.h	/^class OnlineNnet2FeaturePipeline: public OnlineFeatureInterface {$/;"	c	namespace:kaldi
OnlineNnet2FeaturePipelineConfig	online2/online-nnet2-feature-pipeline.h	/^  OnlineNnet2FeaturePipelineConfig():$/;"	f	struct:kaldi::OnlineNnet2FeaturePipelineConfig
OnlineNnet2FeaturePipelineConfig	online2/online-nnet2-feature-pipeline.h	/^struct OnlineNnet2FeaturePipelineConfig {$/;"	s	namespace:kaldi
OnlineNnet2FeaturePipelineInfo	online2/online-nnet2-feature-pipeline.h	/^  OnlineNnet2FeaturePipelineInfo():$/;"	f	struct:kaldi::OnlineNnet2FeaturePipelineInfo
OnlineNnet2FeaturePipelineInfo	online2/online-nnet2-feature-pipeline.h	/^struct OnlineNnet2FeaturePipelineInfo {$/;"	s	namespace:kaldi
Register	online2/online-nnet2-feature-pipeline.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::OnlineNnet2FeaturePipelineConfig
add_pitch	online2/online-nnet2-feature-pipeline.h	/^  bool add_pitch;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineConfig
add_pitch	online2/online-nnet2-feature-pipeline.h	/^  bool add_pitch;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
base_feature_	online2/online-nnet2-feature-pipeline.h	/^  OnlineBaseFeature *base_feature_;        \/\/ MFCC\/PLP\/filterbank$/;"	m	class:kaldi::OnlineNnet2FeaturePipeline
dim_	online2/online-nnet2-feature-pipeline.h	/^  int32 dim_;$/;"	m	class:kaldi::OnlineNnet2FeaturePipeline
fbank_config	online2/online-nnet2-feature-pipeline.h	/^  std::string fbank_config;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineConfig
fbank_opts	online2/online-nnet2-feature-pipeline.h	/^  FbankOptions fbank_opts;  \/\/ Options for filterbank computation, if$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
feature_plus_optional_pitch_	online2/online-nnet2-feature-pipeline.h	/^  OnlineFeatureInterface *feature_plus_optional_pitch_;  $/;"	m	class:kaldi::OnlineNnet2FeaturePipeline
feature_type	online2/online-nnet2-feature-pipeline.h	/^  std::string feature_type;  \/\/ "mfcc" or "plp" or "fbank"$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
feature_type	online2/online-nnet2-feature-pipeline.h	/^  std::string feature_type;  \/\/ "plp" or "mfcc" or "fbank"$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineConfig
final_feature_	online2/online-nnet2-feature-pipeline.h	/^  OnlineFeatureInterface *final_feature_;$/;"	m	class:kaldi::OnlineNnet2FeaturePipeline
info_	online2/online-nnet2-feature-pipeline.h	/^  const OnlineNnet2FeaturePipelineInfo &info_;$/;"	m	class:kaldi::OnlineNnet2FeaturePipeline
ivector_extraction_config	online2/online-nnet2-feature-pipeline.h	/^  std::string ivector_extraction_config;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineConfig
ivector_extractor_info	online2/online-nnet2-feature-pipeline.h	/^  OnlineIvectorExtractionInfo ivector_extractor_info;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
ivector_feature_	online2/online-nnet2-feature-pipeline.h	/^  OnlineIvectorFeature *ivector_feature_;  \/\/ iVector feature, if used.$/;"	m	class:kaldi::OnlineNnet2FeaturePipeline
kaldi	online2/online-nnet2-feature-pipeline.h	/^namespace kaldi {$/;"	n
mfcc_config	online2/online-nnet2-feature-pipeline.h	/^  std::string mfcc_config;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineConfig
mfcc_opts	online2/online-nnet2-feature-pipeline.h	/^  MfccOptions mfcc_opts;  \/\/ options for MFCC computation,$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
online_pitch_config	online2/online-nnet2-feature-pipeline.h	/^  std::string online_pitch_config;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineConfig
pitch_	online2/online-nnet2-feature-pipeline.h	/^  OnlinePitchFeature *pitch_;              \/\/ Raw pitch, if used$/;"	m	class:kaldi::OnlineNnet2FeaturePipeline
pitch_feature_	online2/online-nnet2-feature-pipeline.h	/^  OnlineProcessPitch *pitch_feature_;  \/\/ Processed pitch, if pitch used.$/;"	m	class:kaldi::OnlineNnet2FeaturePipeline
pitch_opts	online2/online-nnet2-feature-pipeline.h	/^  PitchExtractionOptions pitch_opts;  \/\/ Options for pitch extraction, if done.$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
pitch_process_opts	online2/online-nnet2-feature-pipeline.h	/^  ProcessPitchOptions pitch_process_opts;  \/\/ Options for pitch post-processing$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
plp_config	online2/online-nnet2-feature-pipeline.h	/^  std::string plp_config;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineConfig
plp_opts	online2/online-nnet2-feature-pipeline.h	/^  PlpOptions plp_opts;  \/\/ Options for PLP computation, if feature_type == "plp"$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
silence_weighting_config	online2/online-nnet2-feature-pipeline.h	/^  OnlineSilenceWeightingConfig silence_weighting_config;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineConfig
silence_weighting_config	online2/online-nnet2-feature-pipeline.h	/^  OnlineSilenceWeightingConfig silence_weighting_config;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
use_ivectors	online2/online-nnet2-feature-pipeline.h	/^  bool use_ivectors;$/;"	m	struct:kaldi::OnlineNnet2FeaturePipelineInfo
AcceptSpeexBits	online2/online-speex-wrapper.cc	/^void OnlineSpeexDecoder::AcceptSpeexBits(const std::vector<char> &spx_enc_bits) {$/;"	f	class:kaldi::OnlineSpeexDecoder
AcceptWaveform	online2/online-speex-wrapper.cc	/^void OnlineSpeexEncoder::AcceptWaveform($/;"	f	class:kaldi::OnlineSpeexEncoder
Decode	online2/online-speex-wrapper.cc	/^void OnlineSpeexDecoder::Decode(const std::vector<char> &speex_char_bits,$/;"	f	class:kaldi::OnlineSpeexDecoder
Encode	online2/online-speex-wrapper.cc	/^void OnlineSpeexEncoder::Encode(const VectorBase<BaseFloat> &wave,$/;"	f	class:kaldi::OnlineSpeexEncoder
InputFinished	online2/online-speex-wrapper.cc	/^void OnlineSpeexEncoder::InputFinished() {$/;"	f	class:kaldi::OnlineSpeexEncoder
OnlineSpeexDecoder	online2/online-speex-wrapper.cc	/^OnlineSpeexDecoder::OnlineSpeexDecoder(const SpeexOptions &config) {$/;"	f	class:kaldi::OnlineSpeexDecoder
OnlineSpeexEncoder	online2/online-speex-wrapper.cc	/^OnlineSpeexEncoder::OnlineSpeexEncoder(const SpeexOptions &config):$/;"	f	class:kaldi::OnlineSpeexEncoder
kaldi	online2/online-speex-wrapper.cc	/^namespace kaldi {$/;"	n	file:
~OnlineSpeexDecoder	online2/online-speex-wrapper.cc	/^OnlineSpeexDecoder::~OnlineSpeexDecoder() {$/;"	f	class:kaldi::OnlineSpeexDecoder
~OnlineSpeexEncoder	online2/online-speex-wrapper.cc	/^OnlineSpeexEncoder::~OnlineSpeexEncoder() {$/;"	f	class:kaldi::OnlineSpeexEncoder
GetSpeexBits	online2/online-speex-wrapper.h	/^    void GetSpeexBits(std::vector<char> *spx_bits) {  \/\/ call it after AcceptWaveform$/;"	f	class:kaldi::OnlineSpeexEncoder
GetWaveform	online2/online-speex-wrapper.h	/^    void GetWaveform(Vector<BaseFloat> *waveform) {  \/\/ call it after AcceptSpeexBits$/;"	f	class:kaldi::OnlineSpeexDecoder
KALDI_ONLINE2_ONLINE_SPEEX_WRAPPER_H_	online2/online-speex-wrapper.h	22;"	d
OnlineSpeexDecoder	online2/online-speex-wrapper.h	/^class OnlineSpeexDecoder {$/;"	c	namespace:kaldi
OnlineSpeexEncoder	online2/online-speex-wrapper.h	/^class OnlineSpeexEncoder {$/;"	c	namespace:kaldi
Register	online2/online-speex-wrapper.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::SpeexOptions
SPEEXBITS	online2/online-speex-wrapper.h	/^  typedef SpeexBits SPEEXBITS;$/;"	t
SPEEXBITS	online2/online-speex-wrapper.h	/^  typedef char SPEEXBITS;$/;"	t
SpeexOptions	online2/online-speex-wrapper.h	/^  SpeexOptions(): sample_rate(16000.0),$/;"	f	struct:kaldi::SpeexOptions
SpeexOptions	online2/online-speex-wrapper.h	/^struct SpeexOptions {$/;"	s	namespace:kaldi
input_finished_	online2/online-speex-wrapper.h	/^    bool input_finished_;$/;"	m	class:kaldi::OnlineSpeexEncoder
kaldi	online2/online-speex-wrapper.h	/^namespace kaldi {$/;"	n
sample_rate	online2/online-speex-wrapper.h	/^  BaseFloat sample_rate;$/;"	m	struct:kaldi::SpeexOptions
sample_rate_	online2/online-speex-wrapper.h	/^    BaseFloat sample_rate_;$/;"	m	class:kaldi::OnlineSpeexEncoder
speex_bits_	online2/online-speex-wrapper.h	/^    SPEEXBITS speex_bits_;$/;"	m	class:kaldi::OnlineSpeexDecoder
speex_bits_	online2/online-speex-wrapper.h	/^    SPEEXBITS speex_bits_;$/;"	m	class:kaldi::OnlineSpeexEncoder
speex_bits_frame_size	online2/online-speex-wrapper.h	/^  int32 speex_bits_frame_size;$/;"	m	struct:kaldi::SpeexOptions
speex_bits_remainder_	online2/online-speex-wrapper.h	/^    std::vector<char> speex_bits_remainder_;$/;"	m	class:kaldi::OnlineSpeexDecoder
speex_decoded_frame_size_	online2/online-speex-wrapper.h	/^    int32 speex_decoded_frame_size_;  \/\/ in samples, typically 320 in wideband mode, 16kHz$/;"	m	class:kaldi::OnlineSpeexDecoder
speex_encoded_char_bits_	online2/online-speex-wrapper.h	/^    std::vector<char> speex_encoded_char_bits_;$/;"	m	class:kaldi::OnlineSpeexEncoder
speex_encoded_frame_size_	online2/online-speex-wrapper.h	/^    int32 speex_encoded_frame_size_;  \/\/ in samples, typically 320 in wideband mode, 16kHz$/;"	m	class:kaldi::OnlineSpeexEncoder
speex_frame_size_	online2/online-speex-wrapper.h	/^    int32 speex_frame_size_;  \/\/ in bytes, will be different according to the quality$/;"	m	class:kaldi::OnlineSpeexDecoder
speex_frame_size_	online2/online-speex-wrapper.h	/^    int32 speex_frame_size_;  \/\/ in bytes, will be different according to the quality$/;"	m	class:kaldi::OnlineSpeexEncoder
speex_quality	online2/online-speex-wrapper.h	/^  int32 speex_quality;$/;"	m	struct:kaldi::SpeexOptions
speex_state_	online2/online-speex-wrapper.h	/^    void *speex_state_;  \/\/ Holds the state of the speex decoder$/;"	m	class:kaldi::OnlineSpeexDecoder
speex_state_	online2/online-speex-wrapper.h	/^    void *speex_state_;  \/\/ Holds the state of the speex encoder$/;"	m	class:kaldi::OnlineSpeexEncoder
speex_wave_frame_size	online2/online-speex-wrapper.h	/^  int32 speex_wave_frame_size;$/;"	m	struct:kaldi::SpeexOptions
waveform_	online2/online-speex-wrapper.h	/^    Vector<BaseFloat> waveform_;  \/\/ Holds the waveform decoded from speex bits$/;"	m	class:kaldi::OnlineSpeexDecoder
waveform_remainder_	online2/online-speex-wrapper.h	/^    Vector<BaseFloat> waveform_remainder_;      \/\/ Holds the waveform that have not been processed$/;"	m	class:kaldi::OnlineSpeexEncoder
Elapsed	online2/online-timing.cc	/^double OnlineTimer::Elapsed() {$/;"	f	class:kaldi::OnlineTimer
OnlineTimer	online2/online-timing.cc	/^OnlineTimer::OnlineTimer(const std::string &utterance_id):$/;"	f	class:kaldi::OnlineTimer
OnlineTimingStats	online2/online-timing.cc	/^OnlineTimingStats::OnlineTimingStats():$/;"	f	class:kaldi::OnlineTimingStats
OutputStats	online2/online-timing.cc	/^void OnlineTimer::OutputStats(OnlineTimingStats *stats) {$/;"	f	class:kaldi::OnlineTimer
Print	online2/online-timing.cc	/^void OnlineTimingStats::Print(bool online){$/;"	f	class:kaldi::OnlineTimingStats
SleepUntil	online2/online-timing.cc	/^void OnlineTimer::SleepUntil(double cur_utterance_length) {$/;"	f	class:kaldi::OnlineTimer
WaitUntil	online2/online-timing.cc	/^void OnlineTimer::WaitUntil(double cur_utterance_length) {$/;"	f	class:kaldi::OnlineTimer
kaldi	online2/online-timing.cc	/^namespace kaldi {$/;"	n	file:
KALDI_ONLINE2_ONLINE_TIMING_H_	online2/online-timing.h	22;"	d
OnlineTimer	online2/online-timing.h	/^class OnlineTimer {$/;"	c	namespace:kaldi
OnlineTimingStats	online2/online-timing.h	/^class OnlineTimingStats {$/;"	c	namespace:kaldi
kaldi	online2/online-timing.h	/^namespace kaldi {$/;"	n
max_delay_	online2/online-timing.h	/^  double max_delay_; \/\/ maximum delay at utterance end.$/;"	m	class:kaldi::OnlineTimingStats
max_delay_utt_	online2/online-timing.h	/^  std::string max_delay_utt_;$/;"	m	class:kaldi::OnlineTimingStats
num_utts_	online2/online-timing.h	/^  int32 num_utts_;$/;"	m	class:kaldi::OnlineTimingStats
timer_	online2/online-timing.h	/^  Timer timer_;$/;"	m	class:kaldi::OnlineTimer
total_audio_	online2/online-timing.h	/^  double total_audio_; \/\/ total time of audio.$/;"	m	class:kaldi::OnlineTimingStats
total_time_taken_	online2/online-timing.h	/^  double total_time_taken_;  \/\/ total time spent processing the audio.$/;"	m	class:kaldi::OnlineTimingStats
total_time_waited_	online2/online-timing.h	/^  double total_time_waited_; \/\/ total time we pretended to wait (but just$/;"	m	class:kaldi::OnlineTimingStats
utterance_id_	online2/online-timing.h	/^  std::string utterance_id_;$/;"	m	class:kaldi::OnlineTimer
utterance_length_	online2/online-timing.h	/^  double utterance_length_;$/;"	m	class:kaldi::OnlineTimer
waited_	online2/online-timing.h	/^  double waited_;$/;"	m	class:kaldi::OnlineTimer
PrintPartialResult	online2/onlinebin-util.cc	/^void PrintPartialResult(const std::vector<int32>& words,$/;"	f	namespace:kaldi
ReadDecodeGraph	online2/onlinebin-util.cc	/^fst::Fst<fst::StdArc> *ReadDecodeGraph(std::string filename) {$/;"	f	namespace:kaldi
kaldi	online2/onlinebin-util.cc	/^namespace kaldi {$/;"	n	file:
KALDI_ONLINE2_ONLINEBIN_UTIL_H_	online2/onlinebin-util.h	24;"	d
kaldi	online2/onlinebin-util.h	/^namespace kaldi {$/;"	n
ADDLIBS	online2bin/Makefile	/^ADDLIBS = ..\/online2\/kaldi-online2.a ..\/ivector\/kaldi-ivector.a \\$/;"	m
BINFILES	online2bin/Makefile	/^BINFILES = online2-wav-gmm-latgen-faster apply-cmvn-online \\$/;"	m
OBJFILES	online2bin/Makefile	/^OBJFILES = $/;"	m
TESTFILES	online2bin/Makefile	/^TESTFILES =$/;"	m
main	online2bin/apply-cmvn-online.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	online2bin/compress-uncompress-speex.cc	/^int main(int argc, char *argv[]) {$/;"	f
ExtendWaveWithSilence	online2bin/extend-wav-with-silence.cc	/^void ExtendWaveWithSilence(const Vector<BaseFloat> &wav_in,$/;"	f	namespace:kaldi
FindQuietestSegment	online2bin/extend-wav-with-silence.cc	/^void FindQuietestSegment(const Vector<BaseFloat> &wav_in,$/;"	f	namespace:kaldi
kaldi	online2bin/extend-wav-with-silence.cc	/^namespace kaldi{$/;"	n	file:
main	online2bin/extend-wav-with-silence.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	online2bin/ivector-extract-online2.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	online2bin/ivector-randomize.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	online2bin/online2-wav-dump-features.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetDiagnosticsAndPrintOutput	online2bin/online2-wav-gmm-latgen-faster.cc	/^void GetDiagnosticsAndPrintOutput(const std::string &utt,$/;"	f	namespace:kaldi
kaldi	online2bin/online2-wav-gmm-latgen-faster.cc	/^namespace kaldi {$/;"	n	file:
main	online2bin/online2-wav-gmm-latgen-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	online2bin/online2-wav-nnet2-am-compute.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetDiagnosticsAndPrintOutput	online2bin/online2-wav-nnet2-latgen-faster.cc	/^void GetDiagnosticsAndPrintOutput(const std::string &utt,$/;"	f	namespace:kaldi
kaldi	online2bin/online2-wav-nnet2-latgen-faster.cc	/^namespace kaldi {$/;"	n	file:
main	online2bin/online2-wav-nnet2-latgen-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
GetDiagnosticsAndPrintOutput	online2bin/online2-wav-nnet2-latgen-threaded.cc	/^void GetDiagnosticsAndPrintOutput(const std::string &utt,$/;"	f	namespace:kaldi
kaldi	online2bin/online2-wav-nnet2-latgen-threaded.cc	/^namespace kaldi {$/;"	n	file:
main	online2bin/online2-wav-nnet2-latgen-threaded.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	onlinebin/Makefile	/^ADDLIBS = ..\/online\/kaldi-online.a ..\/lat\/kaldi-lat.a ..\/decoder\/kaldi-decoder.a  \\$/;"	m
BINFILES	onlinebin/Makefile	/^BINFILES = online-net-client online-server-gmm-decode-faster online-gmm-decode-faster \\$/;"	m
EXTRA_LDLIBS	onlinebin/Makefile	/^    EXTRA_LDLIBS = ..\/..\/tools\/portaudio\/install\/lib64\/libportaudio.a$/;"	m
EXTRA_LDLIBS	onlinebin/Makefile	/^    EXTRA_LDLIBS = ..\/..\/tools\/portaudio\/install\/lib\/libportaudio.a$/;"	m
OBJFILES	onlinebin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	onlinebin/Makefile	/^TESTFILES =$/;"	m
UNAME	onlinebin/Makefile	/^UNAME=$(shell uname)$/;"	m
BIN_DIR	onlinebin/java-online-audio-client/Makefile	/^BIN_DIR=bin$/;"	m
CLASSES	onlinebin/java-online-audio-client/Makefile	/^CLASSES = $(patsubst $(SOURCE_DIR)\/%.java, $(BIN_DIR)\/%.class, $(SOURCES))$/;"	m
JAR_FILE	onlinebin/java-online-audio-client/Makefile	/^JAR_FILE=java-online-audio-client.jar$/;"	m
JAVA_COMPILER	onlinebin/java-online-audio-client/Makefile	/^JAVA_COMPILER=javac$/;"	m
SOURCES	onlinebin/java-online-audio-client/Makefile	/^SOURCES = $(wildcard $(SOURCE_DIR)\/*.java)$/;"	m
SOURCE_DIR	onlinebin/java-online-audio-client/Makefile	/^SOURCE_DIR=src$/;"	m
KaldiASR	onlinebin/java-online-audio-client/src/KaldiASR.java	/^	KaldiASR(String host, int port) throws UnknownHostException, IOException {$/;"	m	class:KaldiASR
KaldiASR	onlinebin/java-online-audio-client/src/KaldiASR.java	/^public class KaldiASR {$/;"	c
OutputFormat	onlinebin/java-online-audio-client/src/KaldiASR.java	/^	enum OutputFormat {$/;"	g	class:KaldiASR
WORDS	onlinebin/java-online-audio-client/src/KaldiASR.java	/^		WORDS, WORDS_ALIGNED$/;"	e	enum:KaldiASR.OutputFormat	file:
WORDS_ALIGNED	onlinebin/java-online-audio-client/src/KaldiASR.java	/^		WORDS, WORDS_ALIGNED$/;"	e	enum:KaldiASR.OutputFormat	file:
close	onlinebin/java-online-audio-client/src/KaldiASR.java	/^	public void close() throws IOException {$/;"	m	class:KaldiASR
input_reader	onlinebin/java-online-audio-client/src/KaldiASR.java	/^	private BufferedReader input_reader;$/;"	f	class:KaldiASR	file:
output_stream	onlinebin/java-online-audio-client/src/KaldiASR.java	/^	private OutputStream output_stream;$/;"	f	class:KaldiASR	file:
recognize	onlinebin/java-online-audio-client/src/KaldiASR.java	/^	public void recognize(InputStream input_stream, long input_size, OutputProcess output_process) throws IOException {$/;"	m	class:KaldiASR
socket	onlinebin/java-online-audio-client/src/KaldiASR.java	/^	private Socket socket;$/;"	f	class:KaldiASR	file:
LabFile	onlinebin/java-online-audio-client/src/MLF.java	/^	public static class LabFile {$/;"	c	class:MLF
MLF	onlinebin/java-online-audio-client/src/MLF.java	/^public class MLF {$/;"	c
add	onlinebin/java-online-audio-client/src/MLF.java	/^	public void add(String filename, OutputProcess outputs) {$/;"	m	class:MLF
filename	onlinebin/java-online-audio-client/src/MLF.java	/^		String filename;$/;"	f	class:MLF.LabFile
labels	onlinebin/java-online-audio-client/src/MLF.java	/^	private Vector<LabFile> labels = new Vector<LabFile>();$/;"	f	class:MLF	file:
save	onlinebin/java-online-audio-client/src/MLF.java	/^	public void save(File file) throws FileNotFoundException, UnsupportedEncodingException {$/;"	m	class:MLF
words	onlinebin/java-online-audio-client/src/MLF.java	/^		Vector<String> words = new Vector<String>();$/;"	f	class:MLF.LabFile
Main	onlinebin/java-online-audio-client/src/Main.java	/^	Main() {$/;"	m	class:Main
Main	onlinebin/java-online-audio-client/src/Main.java	/^public class Main extends JFrame {$/;"	c
asr	onlinebin/java-online-audio-client/src/Main.java	/^	private KaldiASR asr = null;$/;"	f	class:Main	file:
cbHTK	onlinebin/java-online-audio-client/src/Main.java	/^	private JCheckBox cbMLF, cbHTK, cbTextGrid, cbWebVTT;$/;"	f	class:Main	file:
cbMLF	onlinebin/java-online-audio-client/src/Main.java	/^	private JCheckBox cbMLF, cbHTK, cbTextGrid, cbWebVTT;$/;"	f	class:Main	file:
cbTextGrid	onlinebin/java-online-audio-client/src/Main.java	/^	private JCheckBox cbMLF, cbHTK, cbTextGrid, cbWebVTT;$/;"	f	class:Main	file:
cbWebVTT	onlinebin/java-online-audio-client/src/Main.java	/^	private JCheckBox cbMLF, cbHTK, cbTextGrid, cbWebVTT;$/;"	f	class:Main	file:
error	onlinebin/java-online-audio-client/src/Main.java	/^	public static void error(Throwable e) {$/;"	m	class:Main
log	onlinebin/java-online-audio-client/src/Main.java	/^	public static void log(String msg) {$/;"	m	class:Main
main	onlinebin/java-online-audio-client/src/Main.java	/^	public static void main(String[] args) {$/;"	m	class:Main
main_frame	onlinebin/java-online-audio-client/src/Main.java	/^	public static Main main_frame = null;$/;"	f	class:Main
mlf	onlinebin/java-online-audio-client/src/Main.java	/^	private MLF mlf = null;$/;"	f	class:Main	file:
progress	onlinebin/java-online-audio-client/src/Main.java	/^	private JProgressBar progress;$/;"	f	class:Main	file:
progress	onlinebin/java-online-audio-client/src/Main.java	/^	public static void progress(int val) {$/;"	m	class:Main
rbFile	onlinebin/java-online-audio-client/src/Main.java	/^	private JRadioButton rbFile, rbScp;$/;"	f	class:Main	file:
rbScp	onlinebin/java-online-audio-client/src/Main.java	/^	private JRadioButton rbFile, rbScp;$/;"	f	class:Main	file:
recognize	onlinebin/java-online-audio-client/src/Main.java	/^	public void recognize(File raw_file) {$/;"	m	class:Main
resetProgress	onlinebin/java-online-audio-client/src/Main.java	/^	public static void resetProgress(int max) {$/;"	m	class:Main
taLog	onlinebin/java-online-audio-client/src/Main.java	/^	private JTextArea taLog;$/;"	f	class:Main	file:
tfInputFile	onlinebin/java-online-audio-client/src/Main.java	/^	private JComboBox tfInputFile;$/;"	f	class:Main	file:
AUDIO_PACKET_SIZE	onlinebin/java-online-audio-client/src/Options.java	/^	public static int AUDIO_PACKET_SIZE = 1024;$/;"	f	class:Options
KALDI_ENCODING	onlinebin/java-online-audio-client/src/Options.java	/^	public static String KALDI_ENCODING = "CP1250";$/;"	f	class:Options
KALDI_HOST	onlinebin/java-online-audio-client/src/Options.java	/^	public static String KALDI_HOST = "10.4.4.23";$/;"	f	class:Options
KALDI_PORT	onlinebin/java-online-audio-client/src/Options.java	/^	public static int KALDI_PORT = 5010;$/;"	f	class:Options
MLF_FILENAME	onlinebin/java-online-audio-client/src/Options.java	/^	public static String MLF_FILENAME = "out.mlf";$/;"	f	class:Options
Options	onlinebin/java-online-audio-client/src/Options.java	/^public class Options {$/;"	c
PROPERTY_FILE	onlinebin/java-online-audio-client/src/Options.java	/^	public static File PROPERTY_FILE = new File("client.properties");$/;"	f	class:Options
SUBTITLES_CHARS_PER_CUE	onlinebin/java-online-audio-client/src/Options.java	/^	public static int SUBTITLES_CHARS_PER_CUE = 64;$/;"	f	class:Options
SUBTITLES_KEEP_ALIVE	onlinebin/java-online-audio-client/src/Options.java	/^	public static float SUBTITLES_KEEP_ALIVE = 1.0f;$/;"	f	class:Options
SUBTITLES_TIME_DIFF	onlinebin/java-online-audio-client/src/Options.java	/^	public static float SUBTITLES_TIME_DIFF = 2.0f;$/;"	f	class:Options
SUBTITLES_WORD_BY_WORD	onlinebin/java-online-audio-client/src/Options.java	/^	public static boolean SUBTITLES_WORD_BY_WORD = true;$/;"	f	class:Options
load	onlinebin/java-online-audio-client/src/Options.java	/^	public static void load() throws FileNotFoundException, IOException, NumberFormatException {$/;"	m	class:Options
propertiesFileExists	onlinebin/java-online-audio-client/src/Options.java	/^	public static boolean propertiesFileExists() {$/;"	m	class:Options
save	onlinebin/java-online-audio-client/src/Options.java	/^	public static void save() throws FileNotFoundException, IOException {$/;"	m	class:Options
OutputProcess	onlinebin/java-online-audio-client/src/OutputProcess.java	/^public class OutputProcess {$/;"	c
Word	onlinebin/java-online-audio-client/src/OutputProcess.java	/^		public Word(String word, float start, float end) {$/;"	m	class:OutputProcess.Word
Word	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	public static class Word {$/;"	c	class:OutputProcess
addWord	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	public void addWord(Word word) {$/;"	m	class:OutputProcess
end	onlinebin/java-online-audio-client/src/OutputProcess.java	/^		public float end;$/;"	f	class:OutputProcess.Word
finalize	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	public void finalize() throws IOException {$/;"	m	class:OutputProcess
htk_file	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	private File htk_file = null;$/;"	f	class:OutputProcess	file:
saveHTK	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	public void saveHTK(File file) {$/;"	m	class:OutputProcess
saveTextGrid	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	public void saveTextGrid(File file) {$/;"	m	class:OutputProcess
saveWebVVT	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	public void saveWebVVT(File file) {$/;"	m	class:OutputProcess
start	onlinebin/java-online-audio-client/src/OutputProcess.java	/^		public float start;$/;"	f	class:OutputProcess.Word
textgrid_file	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	private File textgrid_file = null;$/;"	f	class:OutputProcess	file:
webvvt_file	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	private File webvvt_file = null;$/;"	f	class:OutputProcess	file:
word	onlinebin/java-online-audio-client/src/OutputProcess.java	/^		public String word;$/;"	f	class:OutputProcess.Word
words	onlinebin/java-online-audio-client/src/OutputProcess.java	/^	public Vector<Word> words = new Vector<Word>();$/;"	f	class:OutputProcess
SCPFile	onlinebin/java-online-audio-client/src/SCPFile.java	/^	SCPFile(File file) throws IOException {$/;"	m	class:SCPFile
SCPFile	onlinebin/java-online-audio-client/src/SCPFile.java	/^public class SCPFile implements Iterable<String> {$/;"	c
items	onlinebin/java-online-audio-client/src/SCPFile.java	/^	Vector<String> items;$/;"	f	class:SCPFile
iterator	onlinebin/java-online-audio-client/src/SCPFile.java	/^	public Iterator<String> iterator() {$/;"	m	class:SCPFile
Segment	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public static class Segment {$/;"	c	class:Segmentation
Segmentation	onlinebin/java-online-audio-client/src/Segmentation.java	/^public abstract class Segmentation {$/;"	c
Tier	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public static class Tier {$/;"	c	class:Segmentation
add	onlinebin/java-online-audio-client/src/Segmentation.java	/^		public void add(double start, double end, String name) {$/;"	m	class:Segmentation.Tier
addSegment	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public void addSegment(int tier, double start, double end, String name) {$/;"	m	class:Segmentation
addTiers	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public void addTiers(Segmentation segmentation)$/;"	m	class:Segmentation
end_time	onlinebin/java-online-audio-client/src/Segmentation.java	/^		public double end_time;$/;"	f	class:Segmentation.Segment
max	onlinebin/java-online-audio-client/src/Segmentation.java	/^		public double max() {$/;"	m	class:Segmentation.Tier
max	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public double max() {$/;"	m	class:Segmentation
min	onlinebin/java-online-audio-client/src/Segmentation.java	/^		public double min() {$/;"	m	class:Segmentation.Tier
min	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public double min() {$/;"	m	class:Segmentation
name	onlinebin/java-online-audio-client/src/Segmentation.java	/^		public String name;$/;"	f	class:Segmentation.Segment
name	onlinebin/java-online-audio-client/src/Segmentation.java	/^		public String name;$/;"	f	class:Segmentation.Tier
read	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public abstract void read(File file) throws IOException;$/;"	m	class:Segmentation
segments	onlinebin/java-online-audio-client/src/Segmentation.java	/^		public List<Segment> segments = new LinkedList<Segment>();$/;"	f	class:Segmentation.Tier
start_time	onlinebin/java-online-audio-client/src/Segmentation.java	/^		public double start_time;$/;"	f	class:Segmentation.Segment
tiers	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public List<Tier> tiers = new LinkedList<Tier>();$/;"	f	class:Segmentation
write	onlinebin/java-online-audio-client/src/Segmentation.java	/^	public abstract void write(File file) throws IOException;$/;"	m	class:Segmentation
StreamSender	onlinebin/java-online-audio-client/src/StreamSender.java	/^	public StreamSender(InputStream input_stream, long input_size, OutputStream output_stream) {$/;"	m	class:StreamSender
StreamSender	onlinebin/java-online-audio-client/src/StreamSender.java	/^public class StreamSender implements Runnable {$/;"	c
input_size	onlinebin/java-online-audio-client/src/StreamSender.java	/^	private long input_size;$/;"	f	class:StreamSender	file:
input_stream	onlinebin/java-online-audio-client/src/StreamSender.java	/^	private InputStream input_stream;$/;"	f	class:StreamSender	file:
output_stream	onlinebin/java-online-audio-client/src/StreamSender.java	/^	private OutputStream output_stream;$/;"	f	class:StreamSender	file:
run	onlinebin/java-online-audio-client/src/StreamSender.java	/^	public void run() {$/;"	m	class:StreamSender
TextGrid	onlinebin/java-online-audio-client/src/TextGrid.java	/^	public TextGrid()$/;"	m	class:TextGrid
TextGrid	onlinebin/java-online-audio-client/src/TextGrid.java	/^	public TextGrid(Segmentation segmentation) {$/;"	m	class:TextGrid
TextGrid	onlinebin/java-online-audio-client/src/TextGrid.java	/^public class TextGrid extends Segmentation {$/;"	c
read	onlinebin/java-online-audio-client/src/TextGrid.java	/^	public void read(File file) throws IOException {$/;"	m	class:TextGrid
write	onlinebin/java-online-audio-client/src/TextGrid.java	/^	public void write(File file) throws IOException {$/;"	m	class:TextGrid
Cue	onlinebin/java-online-audio-client/src/WebVTT.java	/^		Cue() {$/;"	m	class:WebVTT.Cue
Cue	onlinebin/java-online-audio-client/src/WebVTT.java	/^		Cue(Cue copy) {$/;"	m	class:WebVTT.Cue
Cue	onlinebin/java-online-audio-client/src/WebVTT.java	/^	public static class Cue {$/;"	c	class:WebVTT
WebVTT	onlinebin/java-online-audio-client/src/WebVTT.java	/^public class WebVTT {$/;"	c
addWord	onlinebin/java-online-audio-client/src/WebVTT.java	/^	public void addWord(String word, float start, float end) {$/;"	m	class:WebVTT
cues	onlinebin/java-online-audio-client/src/WebVTT.java	/^	private Vector<Cue> cues = new Vector<Cue>();$/;"	f	class:WebVTT	file:
end	onlinebin/java-online-audio-client/src/WebVTT.java	/^		float start = -Float.MAX_VALUE, end = -Float.MAX_VALUE;\/\/ in seconds$/;"	f	class:WebVTT.Cue
finalize	onlinebin/java-online-audio-client/src/WebVTT.java	/^	public void finalize() {$/;"	m	class:WebVTT
last_cue	onlinebin/java-online-audio-client/src/WebVTT.java	/^	Cue last_cue = new Cue();$/;"	f	class:WebVTT
last_cue_end	onlinebin/java-online-audio-client/src/WebVTT.java	/^	float last_cue_end = -Float.MAX_VALUE;$/;"	f	class:WebVTT
save	onlinebin/java-online-audio-client/src/WebVTT.java	/^	public void save(File file) throws FileNotFoundException {$/;"	m	class:WebVTT
start	onlinebin/java-online-audio-client/src/WebVTT.java	/^		float start = -Float.MAX_VALUE, end = -Float.MAX_VALUE;\/\/ in seconds$/;"	f	class:WebVTT.Cue
text	onlinebin/java-online-audio-client/src/WebVTT.java	/^		String text = "";$/;"	f	class:WebVTT.Cue
timeToTimecode	onlinebin/java-online-audio-client/src/WebVTT.java	/^	private String timeToTimecode(float time) {$/;"	m	class:WebVTT	file:
ReadLine	onlinebin/online-audio-client.cc	/^bool ReadLine(int32 desc, std::string* str) {$/;"	f	namespace:kaldi
RecognizedWord	onlinebin/online-audio-client.cc	/^struct RecognizedWord {$/;"	s	namespace:kaldi	file:
TimeToTimecode	onlinebin/online-audio-client.cc	/^std::string TimeToTimecode(float time) {$/;"	f	namespace:kaldi
WriteFull	onlinebin/online-audio-client.cc	/^bool WriteFull(int32 desc, char* data, int32 size) {$/;"	f	namespace:kaldi
buffer_fill	onlinebin/online-audio-client.cc	/^int32 buffer_fill = 0;$/;"	m	namespace:kaldi	file:
buffer_offset	onlinebin/online-audio-client.cc	/^int32 buffer_offset = 0;$/;"	m	namespace:kaldi	file:
end	onlinebin/online-audio-client.cc	/^  float start, end;$/;"	m	struct:kaldi::RecognizedWord	file:
kaldi	onlinebin/online-audio-client.cc	/^namespace kaldi {$/;"	n	file:
main	onlinebin/online-audio-client.cc	/^int main(int argc, char** argv) {$/;"	f
read_buffer	onlinebin/online-audio-client.cc	/^char read_buffer[1025];$/;"	m	namespace:kaldi	file:
start	onlinebin/online-audio-client.cc	/^  float start, end;$/;"	m	struct:kaldi::RecognizedWord	file:
word	onlinebin/online-audio-client.cc	/^  std::string word;$/;"	m	struct:kaldi::RecognizedWord	file:
Accept	onlinebin/online-audio-server-decode-faster.cc	/^int32 TcpServer::Accept() {$/;"	f	class:kaldi::TcpServer
Listen	onlinebin/online-audio-server-decode-faster.cc	/^bool TcpServer::Listen(int32 port) {$/;"	f	class:kaldi::TcpServer
TcpServer	onlinebin/online-audio-server-decode-faster.cc	/^TcpServer::TcpServer() {$/;"	f	class:kaldi::TcpServer
TcpServer	onlinebin/online-audio-server-decode-faster.cc	/^class TcpServer {$/;"	c	namespace:kaldi	file:
WriteLine	onlinebin/online-audio-server-decode-faster.cc	/^bool WriteLine(int32 socket, std::string line) {$/;"	f	namespace:kaldi
h_addr_	onlinebin/online-audio-server-decode-faster.cc	/^  struct sockaddr_in h_addr_;$/;"	m	class:kaldi::TcpServer	typeref:struct:kaldi::TcpServer::sockaddr_in	file:
kFramesPerSecond	onlinebin/online-audio-server-decode-faster.cc	/^const float kFramesPerSecond = 100.0f;$/;"	m	namespace:kaldi	file:
kaldi	onlinebin/online-audio-server-decode-faster.cc	/^namespace kaldi {$/;"	n	file:
main	onlinebin/online-audio-server-decode-faster.cc	/^int32 main(int argc, char *argv[]) {$/;"	f
server_desc_	onlinebin/online-audio-server-decode-faster.cc	/^  int32 server_desc_;$/;"	m	class:kaldi::TcpServer	file:
~TcpServer	onlinebin/online-audio-server-decode-faster.cc	/^TcpServer::~TcpServer() {$/;"	f	class:kaldi::TcpServer
main	onlinebin/online-gmm-decode-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	onlinebin/online-net-client.cc	/^int main(int argc, char *argv[]) {$/;"	f
SendPartialResult	onlinebin/online-server-gmm-decode-faster.cc	/^void SendPartialResult(const std::vector<int32>& words,$/;"	f	namespace:kaldi
kaldi	onlinebin/online-server-gmm-decode-faster.cc	/^namespace kaldi {$/;"	n	file:
main	onlinebin/online-server-gmm-decode-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	onlinebin/online-wav-gmm-decode-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
SAMPLE	probe/exp-test.cc	24;"	d	file:
main	probe/exp-test.cc	/^int main() { $/;"	f
ADDLIBS	sgmm/Makefile	/^ADDLIBS = ..\/gmm\/kaldi-gmm.a ..\/hmm\/kaldi-hmm.a ..\/tree\/kaldi-tree.a ..\/transform\/kaldi-transform.a \\$/;"	m
LIBNAME	sgmm/Makefile	/^LIBNAME = kaldi-sgmm$/;"	m
OBJFILES	sgmm/Makefile	/^OBJFILES = am-sgmm.o estimate-am-sgmm.o fmllr-sgmm.o sgmm-clusterable.o \\$/;"	m
OPENFST_CXXFLAGS	sgmm/Makefile	/^OPENFST_CXXFLAGS = $/;"	m
OPENFST_LDLIBS	sgmm/Makefile	/^OPENFST_LDLIBS = $/;"	m
TESTFILES	sgmm/Makefile	/^TESTFILES = am-sgmm-test estimate-am-sgmm-test fmllr-sgmm-test \\$/;"	m
TestSgmmIO	sgmm/am-sgmm-test.cc	/^void TestSgmmIO(const AmSgmm &sgmm) {$/;"	f
TestSgmmIncreaseDim	sgmm/am-sgmm-test.cc	/^void TestSgmmIncreaseDim(const AmSgmm &sgmm) {$/;"	f
TestSgmmInit	sgmm/am-sgmm-test.cc	/^void TestSgmmInit(const AmSgmm &sgmm) {$/;"	f
TestSgmmPreXform	sgmm/am-sgmm-test.cc	/^void TestSgmmPreXform(const AmSgmm &sgmm) {$/;"	f
TestSgmmSubstates	sgmm/am-sgmm-test.cc	/^void TestSgmmSubstates(const AmSgmm &sgmm) {$/;"	f
UnitTestSgmm	sgmm/am-sgmm-test.cc	/^void UnitTestSgmm() {$/;"	f
main	sgmm/am-sgmm-test.cc	/^int main() {$/;"	f
Check	sgmm/am-sgmm.cc	/^void AmSgmm::Check(bool show_properties) {$/;"	f	class:kaldi::AmSgmm
ComponentPosteriors	sgmm/am-sgmm.cc	/^AmSgmm::ComponentPosteriors(const SgmmPerFrameDerivedVars &per_frame_vars,$/;"	f	class:kaldi::AmSgmm
ComputeDerivedVars	sgmm/am-sgmm.cc	/^void AmSgmm::ComputeDerivedVars() {$/;"	f	class:kaldi::AmSgmm
ComputeDistances	sgmm/am-sgmm.cc	/^void AmSgmmFunctions::ComputeDistances(const AmSgmm &model,$/;"	f	class:kaldi::AmSgmmFunctions
ComputeFeatureNormalizer	sgmm/am-sgmm.cc	/^void ComputeFeatureNormalizer(const FullGmm &gmm, Matrix<BaseFloat> *xform) {$/;"	f	namespace:kaldi
ComputeFmllrPreXform	sgmm/am-sgmm.cc	/^void AmSgmm::ComputeFmllrPreXform(const Vector<BaseFloat> &state_occs,$/;"	f	class:kaldi::AmSgmm
ComputeH	sgmm/am-sgmm.cc	/^void AmSgmm::ComputeH(std::vector< SpMatrix<Real> > *H_i) const {$/;"	f	class:kaldi::AmSgmm
ComputeNormalizers	sgmm/am-sgmm.cc	/^void AmSgmm::ComputeNormalizers() {$/;"	f	class:kaldi::AmSgmm
ComputeNormalizersClass	sgmm/am-sgmm.cc	/^  ComputeNormalizersClass() { } \/\/ Disallow empty constructor.$/;"	f	class:kaldi::ComputeNormalizersClass	file:
ComputeNormalizersClass	sgmm/am-sgmm.cc	/^  ComputeNormalizersClass(AmSgmm *am_sgmm,$/;"	f	class:kaldi::ComputeNormalizersClass
ComputeNormalizersClass	sgmm/am-sgmm.cc	/^class ComputeNormalizersClass: public MultiThreadable { \/\/ For multi-threaded.$/;"	c	namespace:kaldi	file:
ComputeNormalizersInternal	sgmm/am-sgmm.cc	/^void AmSgmm::ComputeNormalizersInternal(int32 num_threads, int32 thread,$/;"	f	class:kaldi::AmSgmm
ComputeNormalizersNormalized	sgmm/am-sgmm.cc	/^void AmSgmm::ComputeNormalizersNormalized($/;"	f	class:kaldi::AmSgmm
ComputePerFrameVars	sgmm/am-sgmm.cc	/^void AmSgmm::ComputePerFrameVars(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::AmSgmm
ComputePerSpkDerivedVars	sgmm/am-sgmm.cc	/^void AmSgmm::ComputePerSpkDerivedVars(SgmmPerSpkDerivedVars *vars) const {$/;"	f	class:kaldi::AmSgmm
ComputeSmoothingTermsFromModel	sgmm/am-sgmm.cc	/^void AmSgmm::ComputeSmoothingTermsFromModel($/;"	f	class:kaldi::AmSgmm
CopyFromSgmm	sgmm/am-sgmm.cc	/^void AmSgmm::CopyFromSgmm(const AmSgmm &other,$/;"	f	class:kaldi::AmSgmm
CopyGlobalsInitVecs	sgmm/am-sgmm.cc	/^void AmSgmm::CopyGlobalsInitVecs(const AmSgmm &other,$/;"	f	class:kaldi::AmSgmm
GaussianSelection	sgmm/am-sgmm.cc	/^BaseFloat AmSgmm::GaussianSelection(const SgmmGselectConfig &config,$/;"	f	class:kaldi::AmSgmm
GaussianSelectionPreselect	sgmm/am-sgmm.cc	/^BaseFloat AmSgmm::GaussianSelectionPreselect(const SgmmGselectConfig &config,$/;"	f	class:kaldi::AmSgmm
GetNtransSigmaInv	sgmm/am-sgmm.cc	/^void AmSgmm::GetNtransSigmaInv(vector< Matrix<Real> > *out) const {$/;"	f	class:kaldi::AmSgmm
IncreasePhoneSpaceDim	sgmm/am-sgmm.cc	/^void AmSgmm::IncreasePhoneSpaceDim(int32 target_dim,$/;"	f	class:kaldi::AmSgmm
IncreaseSpkSpaceDim	sgmm/am-sgmm.cc	/^void AmSgmm::IncreaseSpkSpaceDim(int32 target_dim,$/;"	f	class:kaldi::AmSgmm
InitializeCovars	sgmm/am-sgmm.cc	/^void AmSgmm::InitializeCovars() {$/;"	f	class:kaldi::AmSgmm
InitializeFromFullGmm	sgmm/am-sgmm.cc	/^void AmSgmm::InitializeFromFullGmm(const FullGmm &full_gmm,$/;"	f	class:kaldi::AmSgmm
InitializeMw	sgmm/am-sgmm.cc	/^void AmSgmm::InitializeMw(int32 phn_subspace_dim,$/;"	f	class:kaldi::AmSgmm
InitializeN	sgmm/am-sgmm.cc	/^void AmSgmm::InitializeN(int32 spk_subspace_dim,$/;"	f	class:kaldi::AmSgmm
InitializeVecs	sgmm/am-sgmm.cc	/^void AmSgmm::InitializeVecs(int32 num_states) {$/;"	f	class:kaldi::AmSgmm
LogLikelihood	sgmm/am-sgmm.cc	/^BaseFloat AmSgmm::LogLikelihood(const SgmmPerFrameDerivedVars &per_frame_vars,$/;"	f	class:kaldi::AmSgmm
Read	sgmm/am-sgmm.cc	/^void AmSgmm::Read(std::istream &in_stream, bool binary) {$/;"	f	class:kaldi::AmSgmm
Read	sgmm/am-sgmm.cc	/^void SgmmGauPost::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::SgmmGauPost
SplitSubstates	sgmm/am-sgmm.cc	/^void AmSgmm::SplitSubstates(const Vector<BaseFloat> &state_occupancies,$/;"	f	class:kaldi::AmSgmm
SubstateCounter	sgmm/am-sgmm.cc	/^  SubstateCounter(int32 j, int32 num_substates, BaseFloat occ)$/;"	f	struct:kaldi::SubstateCounter
SubstateCounter	sgmm/am-sgmm.cc	/^struct SubstateCounter {$/;"	s	namespace:kaldi	file:
Write	sgmm/am-sgmm.cc	/^void AmSgmm::Write(std::ostream &out_stream, bool binary,$/;"	f	class:kaldi::AmSgmm
Write	sgmm/am-sgmm.cc	/^void SgmmGauPost::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::SgmmGauPost
_RandGauss	sgmm/am-sgmm.cc	/^static inline float _RandGauss()$/;"	f	namespace:kaldi
am_sgmm_	sgmm/am-sgmm.cc	/^  AmSgmm *am_sgmm_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
entropy_count_	sgmm/am-sgmm.cc	/^  int32 entropy_count_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
entropy_count_ptr_	sgmm/am-sgmm.cc	/^  int32 *entropy_count_ptr_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
entropy_sum_	sgmm/am-sgmm.cc	/^  double entropy_sum_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
entropy_sum_ptr_	sgmm/am-sgmm.cc	/^  double *entropy_sum_ptr_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
kaldi	sgmm/am-sgmm.cc	/^namespace kaldi {$/;"	n	file:
num_substates	sgmm/am-sgmm.cc	/^  int32 num_substates;$/;"	m	struct:kaldi::SubstateCounter	file:
occupancy	sgmm/am-sgmm.cc	/^  BaseFloat occupancy;$/;"	m	struct:kaldi::SubstateCounter	file:
operator ()	sgmm/am-sgmm.cc	/^  inline void operator() () {$/;"	f	class:kaldi::ComputeNormalizersClass
operator <	sgmm/am-sgmm.cc	/^  bool operator < (const SubstateCounter &r) const {$/;"	f	struct:kaldi::SubstateCounter
state_index	sgmm/am-sgmm.cc	/^  int32 state_index;$/;"	m	struct:kaldi::SubstateCounter	file:
~ComputeNormalizersClass	sgmm/am-sgmm.cc	/^  ~ComputeNormalizersClass() {$/;"	f	class:kaldi::ComputeNormalizersClass
AmSgmm	sgmm/am-sgmm.h	/^  AmSgmm() {}$/;"	f	class:kaldi::AmSgmm
AmSgmm	sgmm/am-sgmm.h	/^class AmSgmm {$/;"	c	namespace:kaldi
AmSgmmFunctions	sgmm/am-sgmm.h	/^class AmSgmmFunctions {$/;"	c	namespace:kaldi
Clear	sgmm/am-sgmm.h	/^  void Clear() {$/;"	f	struct:kaldi::SgmmPerSpkDerivedVars
FeatureDim	sgmm/am-sgmm.h	/^  int32 FeatureDim() const { return M_[0].NumRows(); }$/;"	f	class:kaldi::AmSgmm
GetInvCovars	sgmm/am-sgmm.h	/^  const SpMatrix<BaseFloat>& GetInvCovars(int32 gauss_index) const {$/;"	f	class:kaldi::AmSgmm
GetInvCovars	sgmm/am-sgmm.h	/^inline void AmSgmm::GetInvCovars(int32 gauss_index,$/;"	f	class:kaldi::AmSgmm
GetPhoneProjection	sgmm/am-sgmm.h	/^  const Matrix<BaseFloat>& GetPhoneProjection(int32 gauss_index) const {$/;"	f	class:kaldi::AmSgmm
GetSubstateMean	sgmm/am-sgmm.h	/^inline void AmSgmm::GetSubstateMean(int32 j, int32 m, int32 i,$/;"	f	class:kaldi::AmSgmm
GetSubstateSpeakerMean	sgmm/am-sgmm.h	/^inline void AmSgmm::GetSubstateSpeakerMean(int32 j, int32 m, int32 i,$/;"	f	class:kaldi::AmSgmm
GetVarScaledSubstateSpeakerMean	sgmm/am-sgmm.h	/^void AmSgmm::GetVarScaledSubstateSpeakerMean(int32 j, int32 m, int32 i,$/;"	f	class:kaldi::AmSgmm
IsEmpty	sgmm/am-sgmm.h	/^  bool IsEmpty() const {$/;"	f	struct:kaldi::SgmmPerFrameDerivedVars
KALDI_SGMM_AM_SGMM_H_	sgmm/am-sgmm.h	25;"	d
M_	sgmm/am-sgmm.h	/^  std::vector< Matrix<BaseFloat> > M_;$/;"	m	class:kaldi::AmSgmm
M_prior_	sgmm/am-sgmm.h	/^  std::vector< Matrix<BaseFloat> > M_prior_;  \/\/ Matrix-variate Gaussian mean$/;"	m	class:kaldi::AmSgmm
N_	sgmm/am-sgmm.h	/^  std::vector< Matrix<BaseFloat> > N_;$/;"	m	class:kaldi::AmSgmm
NeedsResizing	sgmm/am-sgmm.h	/^  bool NeedsResizing(int32 ngauss, int32 feat_dim, int32 phn_dim) const {$/;"	f	struct:kaldi::SgmmPerFrameDerivedVars
NumGauss	sgmm/am-sgmm.h	/^  int32 NumGauss() const { return M_.size(); }$/;"	f	class:kaldi::AmSgmm
NumPdfs	sgmm/am-sgmm.h	/^  int32 NumPdfs() const { return c_.size(); }$/;"	f	class:kaldi::AmSgmm
NumSubstates	sgmm/am-sgmm.h	/^  int32 NumSubstates(int32 j) const { return c_[j].Dim(); }$/;"	f	class:kaldi::AmSgmm
PhoneSpaceDim	sgmm/am-sgmm.h	/^  int32 PhoneSpaceDim() const { return w_.NumCols(); }$/;"	f	class:kaldi::AmSgmm
RandomAccessSgmmGauPostReader	sgmm/am-sgmm.h	/^typedef RandomAccessTableReader<SgmmGauPostHolder> RandomAccessSgmmGauPostReader;$/;"	t	namespace:kaldi
Register	sgmm/am-sgmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::SgmmGselectConfig
RemoveSpeakerSpace	sgmm/am-sgmm.h	/^  void RemoveSpeakerSpace() { N_.clear(); }$/;"	f	class:kaldi::AmSgmm
Resize	sgmm/am-sgmm.h	/^  void Resize(int32 ngauss, int32 feat_dim, int32 phn_dim) {$/;"	f	struct:kaldi::SgmmPerFrameDerivedVars
SequentialSgmmGauPostReader	sgmm/am-sgmm.h	/^typedef SequentialTableReader<SgmmGauPostHolder> SequentialSgmmGauPostReader;$/;"	t	namespace:kaldi
SgmmGauPost	sgmm/am-sgmm.h	/^  SgmmGauPost() {}$/;"	f	class:kaldi::SgmmGauPost
SgmmGauPost	sgmm/am-sgmm.h	/^  explicit SgmmGauPost(size_t i) : std::vector<SgmmGauPostElement>(i) {}$/;"	f	class:kaldi::SgmmGauPost
SgmmGauPost	sgmm/am-sgmm.h	/^class SgmmGauPost: public std::vector<SgmmGauPostElement> {$/;"	c	namespace:kaldi
SgmmGauPostElement	sgmm/am-sgmm.h	/^struct SgmmGauPostElement {$/;"	s	namespace:kaldi
SgmmGauPostHolder	sgmm/am-sgmm.h	/^typedef KaldiObjectHolder<SgmmGauPost> SgmmGauPostHolder;$/;"	t	namespace:kaldi
SgmmGauPostWriter	sgmm/am-sgmm.h	/^typedef TableWriter<SgmmGauPostHolder> SgmmGauPostWriter;$/;"	t	namespace:kaldi
SgmmGselectConfig	sgmm/am-sgmm.h	/^  SgmmGselectConfig() {$/;"	f	struct:kaldi::SgmmGselectConfig
SgmmGselectConfig	sgmm/am-sgmm.h	/^struct SgmmGselectConfig {$/;"	s	namespace:kaldi
SgmmPerFrameDerivedVars	sgmm/am-sgmm.h	/^  SgmmPerFrameDerivedVars() : xt(0), xti(0, 0), zti(0, 0), nti(0) {}$/;"	f	struct:kaldi::SgmmPerFrameDerivedVars
SgmmPerFrameDerivedVars	sgmm/am-sgmm.h	/^struct SgmmPerFrameDerivedVars {$/;"	s	namespace:kaldi
SgmmPerSpkDerivedVars	sgmm/am-sgmm.h	/^struct SgmmPerSpkDerivedVars {$/;"	s	namespace:kaldi
SigmaInv_	sgmm/am-sgmm.h	/^  std::vector< SpMatrix<BaseFloat> > SigmaInv_;$/;"	m	class:kaldi::AmSgmm
SpkSpaceDim	sgmm/am-sgmm.h	/^  int32 SpkSpaceDim() const { return (N_.size() > 0) ? N_[0].NumCols() : 0; }$/;"	f	class:kaldi::AmSgmm
StateVectors	sgmm/am-sgmm.h	/^  const Matrix<BaseFloat>& StateVectors(int32 state_index) const {$/;"	f	class:kaldi::AmSgmm
c_	sgmm/am-sgmm.h	/^  std::vector< Vector<BaseFloat> > c_;$/;"	m	class:kaldi::AmSgmm
col_cov_inv_	sgmm/am-sgmm.h	/^  SpMatrix<BaseFloat> col_cov_inv_;$/;"	m	class:kaldi::AmSgmm
diag_gmm_nbest	sgmm/am-sgmm.h	/^  int32 diag_gmm_nbest;$/;"	m	struct:kaldi::SgmmGselectConfig
diag_ubm	sgmm/am-sgmm.h	/^  const DiagGmm & diag_ubm() const { return diag_ubm_; }$/;"	f	class:kaldi::AmSgmm
diag_ubm_	sgmm/am-sgmm.h	/^  DiagGmm diag_ubm_;$/;"	m	class:kaldi::AmSgmm
full_gmm_nbest	sgmm/am-sgmm.h	/^  int32 full_gmm_nbest;$/;"	m	struct:kaldi::SgmmGselectConfig
full_ubm	sgmm/am-sgmm.h	/^  const FullGmm & full_ubm() const { return full_ubm_; }$/;"	f	class:kaldi::AmSgmm
full_ubm_	sgmm/am-sgmm.h	/^  FullGmm full_ubm_;$/;"	m	class:kaldi::AmSgmm
gselect	sgmm/am-sgmm.h	/^  std::vector<int32> gselect;$/;"	m	struct:kaldi::SgmmGauPostElement
gselect	sgmm/am-sgmm.h	/^  std::vector<int32> gselect;$/;"	m	struct:kaldi::SgmmPerFrameDerivedVars
kaldi	sgmm/am-sgmm.h	/^namespace kaldi {$/;"	n
n_	sgmm/am-sgmm.h	/^  std::vector< Matrix<BaseFloat> > n_;$/;"	m	class:kaldi::AmSgmm
nti	sgmm/am-sgmm.h	/^  Vector<BaseFloat> nti;  \/\/\/< n_{i}(t), dim = [I], eq.(36)$/;"	m	struct:kaldi::SgmmPerFrameDerivedVars
o_s	sgmm/am-sgmm.h	/^  Matrix<BaseFloat> o_s;  \/\/\/< Per-speaker offsets o_{i}. Dimension is [I][D]$/;"	m	struct:kaldi::SgmmPerSpkDerivedVars
posteriors	sgmm/am-sgmm.h	/^  std::vector<Matrix<BaseFloat> > posteriors;$/;"	m	struct:kaldi::SgmmGauPostElement
row_cov_inv_	sgmm/am-sgmm.h	/^  SpMatrix<BaseFloat> row_cov_inv_;$/;"	m	class:kaldi::AmSgmm
tids	sgmm/am-sgmm.h	/^  std::vector<int32> tids;  \/\/ transition-ids for each entry in "posteriors"$/;"	m	struct:kaldi::SgmmGauPostElement
v_	sgmm/am-sgmm.h	/^  std::vector< Matrix<BaseFloat> > v_;$/;"	m	class:kaldi::AmSgmm
v_s	sgmm/am-sgmm.h	/^  Vector<BaseFloat> v_s;  \/\/\/< Speaker adaptation vector v_^{(s)}. Dim is [T]$/;"	m	struct:kaldi::SgmmPerSpkDerivedVars
w_	sgmm/am-sgmm.h	/^  Matrix<BaseFloat> w_;$/;"	m	class:kaldi::AmSgmm
xt	sgmm/am-sgmm.h	/^  Vector<BaseFloat> xt;   \/\/\/< x'(t), FMLLR-adapted, dim = [D], eq.(33)$/;"	m	struct:kaldi::SgmmPerFrameDerivedVars
xti	sgmm/am-sgmm.h	/^  Matrix<BaseFloat> xti;  \/\/\/< x_{i}(t) = x'(t) - o_i(s): dim = [I][D], eq.(34)$/;"	m	struct:kaldi::SgmmPerFrameDerivedVars
zti	sgmm/am-sgmm.h	/^  Matrix<BaseFloat> zti;  \/\/\/< z_{i}(t), dim = [I][S], eq.(35)$/;"	m	struct:kaldi::SgmmPerFrameDerivedVars
LogLikelihoodZeroBased	sgmm/decodable-am-sgmm.cc	/^BaseFloat DecodableAmSgmm::LogLikelihoodZeroBased(int32 frame, int32 pdf_id) {$/;"	f	class:kaldi::DecodableAmSgmm
ResetLogLikeCache	sgmm/decodable-am-sgmm.cc	/^void DecodableAmSgmm::ResetLogLikeCache() {$/;"	f	class:kaldi::DecodableAmSgmm
kaldi	sgmm/decodable-am-sgmm.cc	/^namespace kaldi {$/;"	n	file:
DecodableAmSgmm	sgmm/decodable-am-sgmm.h	/^  DecodableAmSgmm(const SgmmGselectConfig &opts,$/;"	f	class:kaldi::DecodableAmSgmm
DecodableAmSgmm	sgmm/decodable-am-sgmm.h	/^class DecodableAmSgmm : public DecodableInterface {$/;"	c	namespace:kaldi
DecodableAmSgmmScaled	sgmm/decodable-am-sgmm.h	/^  DecodableAmSgmmScaled(const SgmmGselectConfig &opts,$/;"	f	class:kaldi::DecodableAmSgmmScaled
DecodableAmSgmmScaled	sgmm/decodable-am-sgmm.h	/^class DecodableAmSgmmScaled : public DecodableAmSgmm {$/;"	c	namespace:kaldi
IsLastFrame	sgmm/decodable-am-sgmm.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableAmSgmm
KALDI_SGMM_DECODABLE_AM_SGMM_H_	sgmm/decodable-am-sgmm.h	22;"	d
LikelihoodCacheRecord	sgmm/decodable-am-sgmm.h	/^  struct LikelihoodCacheRecord {$/;"	s	class:kaldi::DecodableAmSgmm
LogLikelihood	sgmm/decodable-am-sgmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm
LogLikelihood	sgmm/decodable-am-sgmm.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmmScaled
NumFramesReady	sgmm/decodable-am-sgmm.h	/^  int32 NumFramesReady() const { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmSgmm
NumIndices	sgmm/decodable-am-sgmm.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmSgmm
acoustic_model_	sgmm/decodable-am-sgmm.h	/^  const AmSgmm &acoustic_model_;$/;"	m	class:kaldi::DecodableAmSgmm
feature_matrix_	sgmm/decodable-am-sgmm.h	/^  const Matrix<BaseFloat> &feature_matrix_;$/;"	m	class:kaldi::DecodableAmSgmm
gselect_	sgmm/decodable-am-sgmm.h	/^  std::vector<int32> gselect_;$/;"	m	class:kaldi::DecodableAmSgmm
gselect_all_	sgmm/decodable-am-sgmm.h	/^  const std::vector<std::vector<int32> > gselect_all_;  \/\/\/< if nonempty,$/;"	m	class:kaldi::DecodableAmSgmm
hit_time	sgmm/decodable-am-sgmm.h	/^    int32 hit_time;     \/\/\/< Frame for which this value is relevant$/;"	m	struct:kaldi::DecodableAmSgmm::LikelihoodCacheRecord
kaldi	sgmm/decodable-am-sgmm.h	/^namespace kaldi {$/;"	n
log_like	sgmm/decodable-am-sgmm.h	/^    BaseFloat log_like;  \/\/\/< Cache value$/;"	m	struct:kaldi::DecodableAmSgmm::LikelihoodCacheRecord
log_like_cache_	sgmm/decodable-am-sgmm.h	/^  std::vector<LikelihoodCacheRecord> log_like_cache_;$/;"	m	class:kaldi::DecodableAmSgmm
log_prune_	sgmm/decodable-am-sgmm.h	/^  BaseFloat log_prune_;$/;"	m	class:kaldi::DecodableAmSgmm
per_frame_vars_	sgmm/decodable-am-sgmm.h	/^  SgmmPerFrameDerivedVars per_frame_vars_;$/;"	m	class:kaldi::DecodableAmSgmm
previous_frame_	sgmm/decodable-am-sgmm.h	/^  int32 previous_frame_;$/;"	m	class:kaldi::DecodableAmSgmm
scale_	sgmm/decodable-am-sgmm.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmSgmmScaled
sgmm_config_	sgmm/decodable-am-sgmm.h	/^  const SgmmGselectConfig &sgmm_config_;$/;"	m	class:kaldi::DecodableAmSgmm
spk_	sgmm/decodable-am-sgmm.h	/^  const SgmmPerSpkDerivedVars &spk_;$/;"	m	class:kaldi::DecodableAmSgmm
trans_model_	sgmm/decodable-am-sgmm.h	/^  const TransitionModel &trans_model_;  \/\/\/< for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmSgmm
ComputePhoneVecStats	sgmm/estimate-am-sgmm-ebw.cc	/^void EbwAmSgmmUpdater::ComputePhoneVecStats($/;"	f	class:kaldi::EbwAmSgmmUpdater
EbwUpdatePhoneVectorsClass	sgmm/estimate-am-sgmm-ebw.cc	/^  EbwUpdatePhoneVectorsClass(const EbwAmSgmmUpdater *updater,$/;"	f	class:kaldi::EbwUpdatePhoneVectorsClass
EbwUpdatePhoneVectorsClass	sgmm/estimate-am-sgmm-ebw.cc	/^class EbwUpdatePhoneVectorsClass: public MultiThreadable { \/\/ For multi-threaded.$/;"	c	namespace:kaldi	file:
H_	sgmm/estimate-am-sgmm-ebw.cc	/^  const std::vector<SpMatrix<double> > &H_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
Update	sgmm/estimate-am-sgmm-ebw.cc	/^void EbwAmSgmmUpdater::Update(const MleAmSgmmAccs &num_accs,$/;"	f	class:kaldi::EbwAmSgmmUpdater
UpdateM	sgmm/estimate-am-sgmm-ebw.cc	/^double EbwAmSgmmUpdater::UpdateM(const MleAmSgmmAccs &num_accs,$/;"	f	class:kaldi::EbwAmSgmmUpdater
UpdateN	sgmm/estimate-am-sgmm-ebw.cc	/^double EbwAmSgmmUpdater::UpdateN(const MleAmSgmmAccs &num_accs,$/;"	f	class:kaldi::EbwAmSgmmUpdater
UpdatePhoneVectors	sgmm/estimate-am-sgmm-ebw.cc	/^double EbwAmSgmmUpdater::UpdatePhoneVectors(const MleAmSgmmAccs &num_accs,$/;"	f	class:kaldi::EbwAmSgmmUpdater
UpdatePhoneVectorsInternal	sgmm/estimate-am-sgmm-ebw.cc	/^void EbwAmSgmmUpdater::UpdatePhoneVectorsInternal($/;"	f	class:kaldi::EbwAmSgmmUpdater
UpdateSubstateWeights	sgmm/estimate-am-sgmm-ebw.cc	/^double EbwAmSgmmUpdater::UpdateSubstateWeights($/;"	f	class:kaldi::EbwAmSgmmUpdater
UpdateVars	sgmm/estimate-am-sgmm-ebw.cc	/^double EbwAmSgmmUpdater::UpdateVars(const MleAmSgmmAccs &num_accs,$/;"	f	class:kaldi::EbwAmSgmmUpdater
UpdateWParallel	sgmm/estimate-am-sgmm-ebw.cc	/^double EbwAmSgmmUpdater::UpdateWParallel(const MleAmSgmmAccs &num_accs,$/;"	f	class:kaldi::EbwAmSgmmUpdater
auxf_impr_	sgmm/estimate-am-sgmm-ebw.cc	/^  double auxf_impr_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
auxf_impr_ptr_	sgmm/estimate-am-sgmm-ebw.cc	/^  double *auxf_impr_ptr_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
den_accs_	sgmm/estimate-am-sgmm-ebw.cc	/^  const MleAmSgmmAccs &den_accs_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
kaldi	sgmm/estimate-am-sgmm-ebw.cc	/^namespace kaldi {$/;"	n	file:
model_	sgmm/estimate-am-sgmm-ebw.cc	/^  AmSgmm *model_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
num_accs_	sgmm/estimate-am-sgmm-ebw.cc	/^  const MleAmSgmmAccs &num_accs_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
operator ()	sgmm/estimate-am-sgmm-ebw.cc	/^  inline void operator() () {$/;"	f	class:kaldi::EbwUpdatePhoneVectorsClass
updater_	sgmm/estimate-am-sgmm-ebw.cc	/^  const EbwAmSgmmUpdater *updater_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
~EbwUpdatePhoneVectorsClass	sgmm/estimate-am-sgmm-ebw.cc	/^  ~EbwUpdatePhoneVectorsClass() {$/;"	f	class:kaldi::EbwUpdatePhoneVectorsClass
EbwAmSgmmOptions	sgmm/estimate-am-sgmm-ebw.h	/^  EbwAmSgmmOptions() {$/;"	f	struct:kaldi::EbwAmSgmmOptions
EbwAmSgmmOptions	sgmm/estimate-am-sgmm-ebw.h	/^struct EbwAmSgmmOptions {$/;"	s	namespace:kaldi
EbwAmSgmmUpdater	sgmm/estimate-am-sgmm-ebw.h	/^  EbwAmSgmmUpdater() {}  \/\/ Prevent unconfigured updater.$/;"	f	class:kaldi::EbwAmSgmmUpdater
EbwAmSgmmUpdater	sgmm/estimate-am-sgmm-ebw.h	/^  explicit EbwAmSgmmUpdater(const EbwAmSgmmOptions &options):$/;"	f	class:kaldi::EbwAmSgmmUpdater
EbwAmSgmmUpdater	sgmm/estimate-am-sgmm-ebw.h	/^class EbwAmSgmmUpdater {$/;"	c	namespace:kaldi
KALDI_SGMM_ESTIMATE_AM_SGMM_EBW_H_	sgmm/estimate-am-sgmm-ebw.h	21;"	d
Register	sgmm/estimate-am-sgmm-ebw.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::EbwAmSgmmOptions
cov_min_value	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat cov_min_value; \/\/\/< E.g. 0.5-- the maximum any eigenvalue of a covariance$/;"	m	struct:kaldi::EbwAmSgmmOptions
epsilon	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat epsilon;  \/\/\/< very small value used in SolveQuadraticProblem; workaround$/;"	m	struct:kaldi::EbwAmSgmmOptions
gamma_j_	sgmm/estimate-am-sgmm-ebw.h	/^  Vector<double> gamma_j_;  \/\/\/< State occupancies$/;"	m	class:kaldi::EbwAmSgmmUpdater
kaldi	sgmm/estimate-am-sgmm-ebw.h	/^namespace kaldi {$/;"	n
lrate_M	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat lrate_M; \/\/\/< Learning rate used in updating M-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmmOptions
lrate_N	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat lrate_N; \/\/\/< Learning rate used in updating N-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmmOptions
lrate_Sigma	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat lrate_Sigma; \/\/\/< Learning rate used in updating Sigma-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmmOptions
lrate_v	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat lrate_v; \/\/\/< Learning rate used in updating v-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmmOptions
lrate_w	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat lrate_w; \/\/\/< Learning rate used in updating w-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmmOptions
max_cond	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat max_cond; \/\/\/< large value used in SolveQuadraticProblem.$/;"	m	struct:kaldi::EbwAmSgmmOptions
min_substate_weight	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat min_substate_weight; \/\/\/< Minimum allowed weight in a sub-state.$/;"	m	struct:kaldi::EbwAmSgmmOptions
options_	sgmm/estimate-am-sgmm-ebw.h	/^  EbwAmSgmmOptions options_;$/;"	m	class:kaldi::EbwAmSgmmUpdater
tau_M	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat tau_M; \/\/\/<  Smoothing constant for the M quantities (phone-subspace projections)$/;"	m	struct:kaldi::EbwAmSgmmOptions
tau_N	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat tau_N; \/\/\/<  Smoothing constant for the N quantities (speaker-subspace projections)$/;"	m	struct:kaldi::EbwAmSgmmOptions
tau_Sigma	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat tau_Sigma; \/\/\/< Tau value for smoothing covariance-matrices Sigma.$/;"	m	struct:kaldi::EbwAmSgmmOptions
tau_c	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat tau_c;  \/\/\/< Tau value for smoothing substate weights (c)$/;"	m	struct:kaldi::EbwAmSgmmOptions
tau_v	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat tau_v; \/\/\/<  Smoothing constant for updates of sub-state vectors v_{jm}$/;"	m	struct:kaldi::EbwAmSgmmOptions
tau_w	sgmm/estimate-am-sgmm-ebw.h	/^  BaseFloat tau_w;  \/\/\/< Tau value for smoothing update of weight projectsions (w)$/;"	m	struct:kaldi::EbwAmSgmmOptions
TestMultiSgmmEst	sgmm/estimate-am-sgmm-multi-test.cc	/^void TestMultiSgmmEst(const std::vector<AmSgmm*> &models,$/;"	f
UnitTestEstimateSgmm	sgmm/estimate-am-sgmm-multi-test.cc	/^void UnitTestEstimateSgmm() {$/;"	f
main	sgmm/estimate-am-sgmm-multi-test.cc	/^int main() {$/;"	f
AddAccumulators	sgmm/estimate-am-sgmm-multi.cc	/^void MleAmSgmmGlobalAccs::AddAccumulators(const AmSgmm &model,$/;"	f	class:kaldi::MleAmSgmmGlobalAccs
ComputeSmoothingTerms	sgmm/estimate-am-sgmm-multi.cc	/^void MleAmSgmmUpdaterMulti::ComputeSmoothingTerms($/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
RenormalizeV	sgmm/estimate-am-sgmm-multi.cc	/^void MleAmSgmmUpdaterMulti::RenormalizeV(const SpMatrix<double> &H_sm,$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
ResizeAccumulators	sgmm/estimate-am-sgmm-multi.cc	/^void MleAmSgmmGlobalAccs::ResizeAccumulators(const AmSgmm &model,$/;"	f	class:kaldi::MleAmSgmmGlobalAccs
Update	sgmm/estimate-am-sgmm-multi.cc	/^void MleAmSgmmUpdaterMulti::Update(const std::vector<MleAmSgmmAccs*> &accs,$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
UpdateGlobals	sgmm/estimate-am-sgmm-multi.cc	/^BaseFloat MleAmSgmmUpdaterMulti::UpdateGlobals(const MleAmSgmmGlobalAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
UpdateM	sgmm/estimate-am-sgmm-multi.cc	/^double MleAmSgmmUpdaterMulti::UpdateM(const MleAmSgmmGlobalAccs &accs) {$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
UpdateN	sgmm/estimate-am-sgmm-multi.cc	/^double MleAmSgmmUpdaterMulti::UpdateN(const MleAmSgmmGlobalAccs &accs) {$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
UpdateVars	sgmm/estimate-am-sgmm-multi.cc	/^double MleAmSgmmUpdaterMulti::UpdateVars(const MleAmSgmmGlobalAccs &accs) {$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
UpdateWParallel	sgmm/estimate-am-sgmm-multi.cc	/^double MleAmSgmmUpdaterMulti::UpdateWParallel($/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
ZeroAccumulators	sgmm/estimate-am-sgmm-multi.cc	/^void MleAmSgmmGlobalAccs::ZeroAccumulators(SgmmUpdateFlagsType flags) {$/;"	f	class:kaldi::MleAmSgmmGlobalAccs
kaldi	sgmm/estimate-am-sgmm-multi.cc	/^namespace kaldi {$/;"	n	file:
FeatureDim	sgmm/estimate-am-sgmm-multi.h	/^  int32 FeatureDim() const { return feature_dim_; }$/;"	f	class:kaldi::MleAmSgmmGlobalAccs
FeatureDim	sgmm/estimate-am-sgmm-multi.h	/^  int32 FeatureDim() const { return global_M_[0].NumRows(); }$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
KALDI_SGMM_ESTIMATE_AM_SGMM_MULTI_H_	sgmm/estimate-am-sgmm-multi.h	21;"	d
MleAmSgmmGlobalAccs	sgmm/estimate-am-sgmm-multi.h	/^  explicit MleAmSgmmGlobalAccs()$/;"	f	class:kaldi::MleAmSgmmGlobalAccs
MleAmSgmmGlobalAccs	sgmm/estimate-am-sgmm-multi.h	/^class MleAmSgmmGlobalAccs {$/;"	c	namespace:kaldi
MleAmSgmmUpdaterMulti	sgmm/estimate-am-sgmm-multi.h	/^  MleAmSgmmUpdaterMulti() {}  \/\/ Prevent unconfigured updater.$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
MleAmSgmmUpdaterMulti	sgmm/estimate-am-sgmm-multi.h	/^  explicit MleAmSgmmUpdaterMulti(const AmSgmm &model,$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
MleAmSgmmUpdaterMulti	sgmm/estimate-am-sgmm-multi.h	/^class MleAmSgmmUpdaterMulti {$/;"	c	namespace:kaldi
NumGauss	sgmm/estimate-am-sgmm-multi.h	/^  int32 NumGauss() const { return global_M_.size(); }$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
NumGauss	sgmm/estimate-am-sgmm-multi.h	/^  int32 NumGauss() const { return num_gaussians_; }$/;"	f	class:kaldi::MleAmSgmmGlobalAccs
PhoneSpaceDim	sgmm/estimate-am-sgmm-multi.h	/^  int32 PhoneSpaceDim() const { return global_w_.NumCols(); }$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
PhoneSpaceDim	sgmm/estimate-am-sgmm-multi.h	/^  int32 PhoneSpaceDim() const { return phn_space_dim_; }$/;"	f	class:kaldi::MleAmSgmmGlobalAccs
Q_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< SpMatrix<double> > Q_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
R_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< SpMatrix<double> > R_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
S_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< SpMatrix<double> > S_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
S_means_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< SpMatrix<double> > S_means_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
SpkSpaceDim	sgmm/estimate-am-sgmm-multi.h	/^  int32 SpkSpaceDim() const {$/;"	f	class:kaldi::MleAmSgmmUpdaterMulti
Y_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< Matrix<double> > Y_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
Z_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< Matrix<double> > Z_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
feature_dim_	sgmm/estimate-am-sgmm-multi.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
gamma_i_	sgmm/estimate-am-sgmm-multi.h	/^  Vector<double> gamma_i_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
global_M_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< Matrix<BaseFloat> > global_M_;$/;"	m	class:kaldi::MleAmSgmmUpdaterMulti
global_N_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< Matrix<BaseFloat> > global_N_;$/;"	m	class:kaldi::MleAmSgmmUpdaterMulti
global_SigmaInv_	sgmm/estimate-am-sgmm-multi.h	/^  std::vector< SpMatrix<BaseFloat> > global_SigmaInv_;$/;"	m	class:kaldi::MleAmSgmmUpdaterMulti
global_w_	sgmm/estimate-am-sgmm-multi.h	/^  Matrix<BaseFloat> global_w_;$/;"	m	class:kaldi::MleAmSgmmUpdaterMulti
kaldi	sgmm/estimate-am-sgmm-multi.h	/^namespace kaldi {$/;"	n
num_gaussians_	sgmm/estimate-am-sgmm-multi.h	/^  int32 num_gaussians_;  \/\/\/< Other model specifications$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
phn_space_dim_	sgmm/estimate-am-sgmm-multi.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
spk_space_dim_	sgmm/estimate-am-sgmm-multi.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
total_frames_	sgmm/estimate-am-sgmm-multi.h	/^  double total_frames_, total_like_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
total_like_	sgmm/estimate-am-sgmm-multi.h	/^  double total_frames_, total_like_;$/;"	m	class:kaldi::MleAmSgmmGlobalAccs
update_options_	sgmm/estimate-am-sgmm-multi.h	/^  MleAmSgmmOptions update_options_;$/;"	m	class:kaldi::MleAmSgmmUpdaterMulti
TestUpdateAndAccsIO	sgmm/estimate-am-sgmm-test.cc	/^void TestUpdateAndAccsIO(const AmSgmm &sgmm,$/;"	f
UnitTestEstimateSgmm	sgmm/estimate-am-sgmm-test.cc	/^void UnitTestEstimateSgmm() {$/;"	f
main	sgmm/estimate-am-sgmm-test.cc	/^int main() {$/;"	f
Accumulate	sgmm/estimate-am-sgmm.cc	/^BaseFloat MleAmSgmmAccs::Accumulate(const AmSgmm &model,$/;"	f	class:kaldi::MleAmSgmmAccs
Accumulate	sgmm/estimate-am-sgmm.cc	/^MleSgmmSpeakerAccs::Accumulate(const AmSgmm &model,$/;"	f	class:kaldi::MleSgmmSpeakerAccs
AccumulateFromPosteriors	sgmm/estimate-am-sgmm.cc	/^BaseFloat MleAmSgmmAccs::AccumulateFromPosteriors($/;"	f	class:kaldi::MleAmSgmmAccs
AccumulateFromPosteriors	sgmm/estimate-am-sgmm.cc	/^MleSgmmSpeakerAccs::AccumulateFromPosteriors(const AmSgmm &model,$/;"	f	class:kaldi::MleSgmmSpeakerAccs
Check	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmAccs::Check(const AmSgmm &model,$/;"	f	class:kaldi::MleAmSgmmAccs
Clear	sgmm/estimate-am-sgmm.cc	/^void MleSgmmSpeakerAccs::Clear() {$/;"	f	class:kaldi::MleSgmmSpeakerAccs
CommitStatsForSpk	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmAccs::CommitStatsForSpk(const AmSgmm &model,$/;"	f	class:kaldi::MleAmSgmmAccs
ComputeMPrior	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::ComputeMPrior(AmSgmm *model) {$/;"	f	class:kaldi::MleAmSgmmUpdater
ComputeQ	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::ComputeQ(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
ComputeSMeans	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::ComputeSMeans(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
ComputeSmoothingTerms	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::ComputeSmoothingTerms(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
GetStateOccupancies	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmAccs::GetStateOccupancies(Vector<BaseFloat> *occs) const {$/;"	f	class:kaldi::MleAmSgmmAccs
H_	sgmm/estimate-am-sgmm.cc	/^  const std::vector<SpMatrix<double> > &H_;$/;"	m	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass	file:
H_	sgmm/estimate-am-sgmm.cc	/^  const std::vector<SpMatrix<double> > &H_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
H_sm_	sgmm/estimate-am-sgmm.cc	/^  const SpMatrix<double> &H_sm_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
MapUpdateM	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::MapUpdateM(const MleAmSgmmAccs &accs, AmSgmm *model) {$/;"	f	class:kaldi::MleAmSgmmUpdater
MleSgmmSpeakerAccs	sgmm/estimate-am-sgmm.cc	/^MleSgmmSpeakerAccs::MleSgmmSpeakerAccs(const AmSgmm &model, BaseFloat prune)$/;"	f	class:kaldi::MleSgmmSpeakerAccs
Read	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmAccs::Read(std::istream &in_stream, bool binary,$/;"	f	class:kaldi::MleAmSgmmAccs
RenormalizeN	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::RenormalizeN($/;"	f	class:kaldi::MleAmSgmmUpdater
RenormalizeV	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::RenormalizeV(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
ResizeAccumulators	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmAccs::ResizeAccumulators(const AmSgmm &model,$/;"	f	class:kaldi::MleAmSgmmAccs
Update	sgmm/estimate-am-sgmm.cc	/^BaseFloat MleAmSgmmUpdater::Update(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
Update	sgmm/estimate-am-sgmm.cc	/^void MleSgmmSpeakerAccs::Update(BaseFloat min_count,$/;"	f	class:kaldi::MleSgmmSpeakerAccs
UpdateM	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdateM(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
UpdateN	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdateN(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
UpdatePhoneVectors	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdatePhoneVectors(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
UpdatePhoneVectorsChecked	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdatePhoneVectorsChecked(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
UpdatePhoneVectorsCheckedFromClusterable	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdatePhoneVectorsCheckedFromClusterable($/;"	f	class:kaldi::MleAmSgmmUpdater
UpdatePhoneVectorsCheckedFromClusterableClass	sgmm/estimate-am-sgmm.cc	/^  UpdatePhoneVectorsCheckedFromClusterableClass($/;"	f	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass
UpdatePhoneVectorsCheckedFromClusterableClass	sgmm/estimate-am-sgmm.cc	/^class UpdatePhoneVectorsCheckedFromClusterableClass: public MultiThreadable { \/\/ For multi-threaded.$/;"	c	namespace:kaldi	file:
UpdatePhoneVectorsCheckedFromClusterableInternal	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::UpdatePhoneVectorsCheckedFromClusterableInternal($/;"	f	class:kaldi::MleAmSgmmUpdater
UpdatePhoneVectorsClass	sgmm/estimate-am-sgmm.cc	/^  UpdatePhoneVectorsClass(const MleAmSgmmUpdater &updater,$/;"	f	class:kaldi::UpdatePhoneVectorsClass
UpdatePhoneVectorsClass	sgmm/estimate-am-sgmm.cc	/^class UpdatePhoneVectorsClass: public MultiThreadable { \/\/ For multi-threaded.$/;"	c	namespace:kaldi	file:
UpdatePhoneVectorsInternal	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::UpdatePhoneVectorsInternal($/;"	f	class:kaldi::MleAmSgmmUpdater
UpdateSubstateWeights	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdateSubstateWeights($/;"	f	class:kaldi::MleAmSgmmUpdater
UpdateVars	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdateVars(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
UpdateWParallel	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdateWParallel(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
UpdateWParallelGetStats	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmUpdater::UpdateWParallelGetStats(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::MleAmSgmmUpdater
UpdateWSequential	sgmm/estimate-am-sgmm.cc	/^double MleAmSgmmUpdater::UpdateWSequential($/;"	f	class:kaldi::MleAmSgmmUpdater
Write	sgmm/estimate-am-sgmm.cc	/^void MleAmSgmmAccs::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::MleAmSgmmAccs
accs_	sgmm/estimate-am-sgmm.cc	/^  const MleAmSgmmAccs &accs_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
auxf_impr_	sgmm/estimate-am-sgmm.cc	/^  double auxf_impr_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
auxf_impr_ptr_	sgmm/estimate-am-sgmm.cc	/^  double *auxf_impr_ptr_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
count_	sgmm/estimate-am-sgmm.cc	/^  double count_;$/;"	m	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass	file:
count_ptr_	sgmm/estimate-am-sgmm.cc	/^  double *count_ptr_;$/;"	m	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass	file:
kaldi	sgmm/estimate-am-sgmm.cc	/^namespace kaldi {$/;"	n	file:
like_impr_	sgmm/estimate-am-sgmm.cc	/^  double like_impr_;$/;"	m	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass	file:
like_impr_	sgmm/estimate-am-sgmm.cc	/^  double like_impr_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
like_impr_ptr_	sgmm/estimate-am-sgmm.cc	/^  double *like_impr_ptr_;$/;"	m	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass	file:
like_impr_ptr_	sgmm/estimate-am-sgmm.cc	/^  double *like_impr_ptr_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
model_	sgmm/estimate-am-sgmm.cc	/^  AmSgmm *model_;$/;"	m	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass	file:
model_	sgmm/estimate-am-sgmm.cc	/^  AmSgmm *model_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
operator ()	sgmm/estimate-am-sgmm.cc	/^  inline void operator() () {$/;"	f	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass
operator ()	sgmm/estimate-am-sgmm.cc	/^  inline void operator() () {$/;"	f	class:kaldi::UpdatePhoneVectorsClass
stats_	sgmm/estimate-am-sgmm.cc	/^  const std::vector<SgmmClusterable*> &stats_;$/;"	m	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass	file:
updater_	sgmm/estimate-am-sgmm.cc	/^  MleAmSgmmUpdater *updater_;$/;"	m	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass	file:
updater_	sgmm/estimate-am-sgmm.cc	/^  const MleAmSgmmUpdater &updater_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
y_sm_	sgmm/estimate-am-sgmm.cc	/^  const Vector<double> &y_sm_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
~MleAmSgmmAccs	sgmm/estimate-am-sgmm.cc	/^MleAmSgmmAccs::~MleAmSgmmAccs() {$/;"	f	class:kaldi::MleAmSgmmAccs
~UpdatePhoneVectorsCheckedFromClusterableClass	sgmm/estimate-am-sgmm.cc	/^  ~UpdatePhoneVectorsCheckedFromClusterableClass() {$/;"	f	class:kaldi::UpdatePhoneVectorsCheckedFromClusterableClass
~UpdatePhoneVectorsClass	sgmm/estimate-am-sgmm.cc	/^  ~UpdatePhoneVectorsClass() {$/;"	f	class:kaldi::UpdatePhoneVectorsClass
F_i_	sgmm/estimate-am-sgmm.h	/^  Matrix<double> F_i_;$/;"	m	class:kaldi::UpdateWParallelClass
F_i_ptr_	sgmm/estimate-am-sgmm.h	/^  Matrix<double> *F_i_ptr_;$/;"	m	class:kaldi::UpdateWParallelClass
FeatureDim	sgmm/estimate-am-sgmm.h	/^  int32 FeatureDim() const { return feature_dim_; }$/;"	f	class:kaldi::MleAmSgmmAccs
GetOccs	sgmm/estimate-am-sgmm.h	/^  const std::vector< Matrix<double> >& GetOccs() const {$/;"	f	class:kaldi::MleAmSgmmAccs
H_spk_	sgmm/estimate-am-sgmm.h	/^  std::vector< SpMatrix<double> > H_spk_;$/;"	m	class:kaldi::MleSgmmSpeakerAccs
KALDI_SGMM_ESTIMATE_AM_SGMM_H_	sgmm/estimate-am-sgmm.h	25;"	d
MleAmSgmmAccs	sgmm/estimate-am-sgmm.h	/^  MleAmSgmmAccs(const AmSgmm &model, SgmmUpdateFlagsType flags,$/;"	f	class:kaldi::MleAmSgmmAccs
MleAmSgmmAccs	sgmm/estimate-am-sgmm.h	/^  explicit MleAmSgmmAccs(BaseFloat rand_prune = 1.0e-05)$/;"	f	class:kaldi::MleAmSgmmAccs
MleAmSgmmAccs	sgmm/estimate-am-sgmm.h	/^class MleAmSgmmAccs {$/;"	c	namespace:kaldi
MleAmSgmmOptions	sgmm/estimate-am-sgmm.h	/^  MleAmSgmmOptions() {$/;"	f	struct:kaldi::MleAmSgmmOptions
MleAmSgmmOptions	sgmm/estimate-am-sgmm.h	/^struct MleAmSgmmOptions {$/;"	s	namespace:kaldi
MleAmSgmmUpdater	sgmm/estimate-am-sgmm.h	/^  MleAmSgmmUpdater() {}  \/\/ Prevent unconfigured updater.$/;"	f	class:kaldi::MleAmSgmmUpdater
MleAmSgmmUpdater	sgmm/estimate-am-sgmm.h	/^  explicit MleAmSgmmUpdater(const MleAmSgmmOptions &options)$/;"	f	class:kaldi::MleAmSgmmUpdater
MleAmSgmmUpdater	sgmm/estimate-am-sgmm.h	/^class MleAmSgmmUpdater {$/;"	c	namespace:kaldi
MleSgmmSpeakerAccs	sgmm/estimate-am-sgmm.h	/^class MleSgmmSpeakerAccs {$/;"	c	namespace:kaldi
NtransSigmaInv_	sgmm/estimate-am-sgmm.h	/^  std::vector< Matrix<double> > NtransSigmaInv_;$/;"	m	class:kaldi::MleSgmmSpeakerAccs
NumGauss	sgmm/estimate-am-sgmm.h	/^  int32 NumGauss() const { return num_gaussians_; }$/;"	f	class:kaldi::MleAmSgmmAccs
NumStates	sgmm/estimate-am-sgmm.h	/^  int32 NumStates() const { return num_states_; }$/;"	f	class:kaldi::MleAmSgmmAccs
PhoneSpaceDim	sgmm/estimate-am-sgmm.h	/^  int32 PhoneSpaceDim() const { return phn_space_dim_; }$/;"	f	class:kaldi::MleAmSgmmAccs
Q_	sgmm/estimate-am-sgmm.h	/^  std::vector< SpMatrix<double> > Q_;$/;"	m	class:kaldi::MleAmSgmmUpdater
R_	sgmm/estimate-am-sgmm.h	/^  std::vector< SpMatrix<double> > R_;$/;"	m	class:kaldi::MleAmSgmmAccs
Reconfigure	sgmm/estimate-am-sgmm.h	/^  void Reconfigure(const MleAmSgmmOptions &options) {$/;"	f	class:kaldi::MleAmSgmmUpdater
Register	sgmm/estimate-am-sgmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::MleAmSgmmOptions
S_	sgmm/estimate-am-sgmm.h	/^  std::vector< SpMatrix<double> > S_;$/;"	m	class:kaldi::MleAmSgmmAccs
S_means_	sgmm/estimate-am-sgmm.h	/^  std::vector< SpMatrix<double> > S_means_;$/;"	m	class:kaldi::MleAmSgmmUpdater
TotalFrames	sgmm/estimate-am-sgmm.h	/^  double TotalFrames() const { return total_frames_; }$/;"	f	class:kaldi::MleAmSgmmAccs
TotalLike	sgmm/estimate-am-sgmm.h	/^  double TotalLike() const { return total_like_; }$/;"	f	class:kaldi::MleAmSgmmAccs
UpdateWParallelClass	sgmm/estimate-am-sgmm.h	/^  UpdateWParallelClass(const MleAmSgmmAccs &accs,$/;"	f	class:kaldi::UpdateWParallelClass
UpdateWParallelClass	sgmm/estimate-am-sgmm.h	/^class UpdateWParallelClass: public MultiThreadable {$/;"	c	namespace:kaldi
Y_	sgmm/estimate-am-sgmm.h	/^  std::vector< Matrix<double> > Y_;$/;"	m	class:kaldi::MleAmSgmmAccs
Z_	sgmm/estimate-am-sgmm.h	/^  std::vector< Matrix<double> > Z_;$/;"	m	class:kaldi::MleAmSgmmAccs
accs_	sgmm/estimate-am-sgmm.h	/^  const MleAmSgmmAccs &accs_;$/;"	m	class:kaldi::UpdateWParallelClass
check_v	sgmm/estimate-am-sgmm.h	/^  bool check_v;$/;"	m	struct:kaldi::MleAmSgmmOptions
cov_diag_ratio	sgmm/estimate-am-sgmm.h	/^  BaseFloat cov_diag_ratio;$/;"	m	struct:kaldi::MleAmSgmmOptions
cov_floor	sgmm/estimate-am-sgmm.h	/^  BaseFloat cov_floor;$/;"	m	struct:kaldi::MleAmSgmmOptions
epsilon	sgmm/estimate-am-sgmm.h	/^  BaseFloat epsilon;  \/\/\/< very small value used to prevent SVD crashing.$/;"	m	struct:kaldi::MleAmSgmmOptions
feature_dim_	sgmm/estimate-am-sgmm.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmmAccs
fixup_H_sm	sgmm/estimate-am-sgmm.h	/^  bool fixup_H_sm;$/;"	m	struct:kaldi::MleAmSgmmOptions
full_col_cov	sgmm/estimate-am-sgmm.h	/^  bool full_col_cov;  \/\/\/< Estimate col covariance instead of using I$/;"	m	struct:kaldi::MleAmSgmmOptions
full_row_cov	sgmm/estimate-am-sgmm.h	/^  bool full_row_cov;  \/\/\/< Estimate row covariance instead of using I$/;"	m	struct:kaldi::MleAmSgmmOptions
g_i_	sgmm/estimate-am-sgmm.h	/^  Matrix<double> g_i_;$/;"	m	class:kaldi::UpdateWParallelClass
g_i_ptr_	sgmm/estimate-am-sgmm.h	/^  Matrix<double> *g_i_ptr_;$/;"	m	class:kaldi::UpdateWParallelClass
gamma_	sgmm/estimate-am-sgmm.h	/^  std::vector< Matrix<double> > gamma_;$/;"	m	class:kaldi::MleAmSgmmAccs
gamma_j_	sgmm/estimate-am-sgmm.h	/^  Vector<double> gamma_j_;  \/\/\/< State occupancies$/;"	m	class:kaldi::MleAmSgmmUpdater
gamma_s_	sgmm/estimate-am-sgmm.h	/^  Vector<double> gamma_s_;$/;"	m	class:kaldi::MleAmSgmmAccs
gamma_s_	sgmm/estimate-am-sgmm.h	/^  Vector<double> gamma_s_;$/;"	m	class:kaldi::MleSgmmSpeakerAccs
kaldi	sgmm/estimate-am-sgmm.h	/^namespace kaldi {$/;"	n
map_M_prior_iters	sgmm/estimate-am-sgmm.h	/^  int map_M_prior_iters;  \/\/\/< num of iterations to update the prior of M$/;"	m	struct:kaldi::MleAmSgmmOptions
max_cond	sgmm/estimate-am-sgmm.h	/^  BaseFloat max_cond;$/;"	m	struct:kaldi::MleAmSgmmOptions
max_cond_H_sm	sgmm/estimate-am-sgmm.h	/^  BaseFloat max_cond_H_sm;$/;"	m	struct:kaldi::MleAmSgmmOptions
model_	sgmm/estimate-am-sgmm.h	/^  const AmSgmm &model_;$/;"	m	class:kaldi::UpdateWParallelClass
num_gaussians_	sgmm/estimate-am-sgmm.h	/^  int32 num_gaussians_, num_states_;  \/\/\/< Other model specifications$/;"	m	class:kaldi::MleAmSgmmAccs
num_states_	sgmm/estimate-am-sgmm.h	/^  int32 num_gaussians_, num_states_;  \/\/\/< Other model specifications$/;"	m	class:kaldi::MleAmSgmmAccs
operator ()	sgmm/estimate-am-sgmm.h	/^  inline void operator() () {$/;"	f	class:kaldi::UpdateWParallelClass
phn_space_dim_	sgmm/estimate-am-sgmm.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmmAccs
rand_prune_	sgmm/estimate-am-sgmm.h	/^  BaseFloat rand_prune_;$/;"	m	class:kaldi::MleAmSgmmAccs
rand_prune_	sgmm/estimate-am-sgmm.h	/^  BaseFloat rand_prune_;$/;"	m	class:kaldi::MleSgmmSpeakerAccs
renormalize_N	sgmm/estimate-am-sgmm.h	/^  bool renormalize_N;  \/\/ Renormalize the speaker space.$/;"	m	struct:kaldi::MleAmSgmmOptions
renormalize_V	sgmm/estimate-am-sgmm.h	/^  bool renormalize_V;  \/\/ Renormalize the phonetic space.$/;"	m	struct:kaldi::MleAmSgmmOptions
spk_space_dim_	sgmm/estimate-am-sgmm.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmmAccs
tau_c	sgmm/estimate-am-sgmm.h	/^  BaseFloat tau_c;    \/\/\/< Tau value for smoothing substate weights (c)$/;"	m	struct:kaldi::MleAmSgmmOptions
tau_map_M	sgmm/estimate-am-sgmm.h	/^  BaseFloat tau_map_M;  \/\/\/< For MAP update of the phonetic subspace M$/;"	m	struct:kaldi::MleAmSgmmOptions
tau_vec	sgmm/estimate-am-sgmm.h	/^  BaseFloat tau_vec;  \/\/\/< Amount of smoothing for v_{jm} update$/;"	m	struct:kaldi::MleAmSgmmOptions
tot_like_	sgmm/estimate-am-sgmm.h	/^  double tot_like_;$/;"	m	class:kaldi::UpdateWParallelClass
tot_like_ptr_	sgmm/estimate-am-sgmm.h	/^  double *tot_like_ptr_;$/;"	m	class:kaldi::UpdateWParallelClass
total_frames_	sgmm/estimate-am-sgmm.h	/^  double total_frames_, total_like_;$/;"	m	class:kaldi::MleAmSgmmAccs
total_like_	sgmm/estimate-am-sgmm.h	/^  double total_frames_, total_like_;$/;"	m	class:kaldi::MleAmSgmmAccs
update_options_	sgmm/estimate-am-sgmm.h	/^  MleAmSgmmOptions update_options_;$/;"	m	class:kaldi::MleAmSgmmUpdater
use_sequential_weight_update	sgmm/estimate-am-sgmm.h	/^  bool use_sequential_weight_update;$/;"	m	struct:kaldi::MleAmSgmmOptions
w_	sgmm/estimate-am-sgmm.h	/^  const Matrix<double> &w_;$/;"	m	class:kaldi::UpdateWParallelClass
weight_projections_iters	sgmm/estimate-am-sgmm.h	/^  int weight_projections_iters;$/;"	m	struct:kaldi::MleAmSgmmOptions
y_	sgmm/estimate-am-sgmm.h	/^  std::vector< Matrix<double> > y_;$/;"	m	class:kaldi::MleAmSgmmAccs
y_s_	sgmm/estimate-am-sgmm.h	/^  Vector<double> y_s_;$/;"	m	class:kaldi::MleSgmmSpeakerAccs
~UpdateWParallelClass	sgmm/estimate-am-sgmm.h	/^  ~UpdateWParallelClass() {$/;"	f	class:kaldi::UpdateWParallelClass
ApplyFmllrXform	sgmm/fmllr-sgmm-test.cc	/^void ApplyFmllrXform(const kaldi::VectorBase<BaseFloat> &in,$/;"	f
TestSgmmFmllr	sgmm/fmllr-sgmm-test.cc	/^void TestSgmmFmllr() {$/;"	f
TestSgmmFmllrAccsIO	sgmm/fmllr-sgmm-test.cc	/^void TestSgmmFmllrAccsIO(const AmSgmm &sgmm,$/;"	f
TestSgmmFmllrSubspace	sgmm/fmllr-sgmm-test.cc	/^void TestSgmmFmllrSubspace(const AmSgmm &sgmm,$/;"	f
main	sgmm/fmllr-sgmm-test.cc	/^int main() {$/;"	f
Accumulate	sgmm/fmllr-sgmm.cc	/^BaseFloat FmllrSgmmAccs::Accumulate(const AmSgmm &model,$/;"	f	class:kaldi::FmllrSgmmAccs
AccumulateForFmllrSubspace	sgmm/fmllr-sgmm.cc	/^void FmllrSgmmAccs::AccumulateForFmllrSubspace(const AmSgmm &sgmm,$/;"	f	class:kaldi::FmllrSgmmAccs
AccumulateFromPosteriors	sgmm/fmllr-sgmm.cc	/^FmllrSgmmAccs::AccumulateFromPosteriors(const AmSgmm &model,$/;"	f	class:kaldi::FmllrSgmmAccs
ApplyHessianXformToGradient	sgmm/fmllr-sgmm.cc	/^static void ApplyHessianXformToGradient(const SgmmFmllrGlobalParams &globals,$/;"	f	namespace:kaldi
ApplyInvHessianXformToChange	sgmm/fmllr-sgmm.cc	/^static void ApplyInvHessianXformToChange(const SgmmFmllrGlobalParams &globals,$/;"	f	namespace:kaldi
ApplyInvPreXformToChange	sgmm/fmllr-sgmm.cc	/^static void ApplyInvPreXformToChange(const SgmmFmllrGlobalParams &globals,$/;"	f	namespace:kaldi
ApplyPreXformToGradient	sgmm/fmllr-sgmm.cc	/^static void ApplyPreXformToGradient(const SgmmFmllrGlobalParams &globals,$/;"	f	namespace:kaldi
CalcFmllrStepSize	sgmm/fmllr-sgmm.cc	/^static BaseFloat CalcFmllrStepSize(const AffineXformStats &stats,$/;"	f	namespace:kaldi
EstimateSgmmFmllrSubspace	sgmm/fmllr-sgmm.cc	/^void EstimateSgmmFmllrSubspace(const SpMatrix<double> &fmllr_grad_scatter,$/;"	f	namespace:kaldi
FmllrObjGradient	sgmm/fmllr-sgmm.cc	/^BaseFloat FmllrSgmmAccs::FmllrObjGradient(const AmSgmm &sgmm,$/;"	f	class:kaldi::FmllrSgmmAccs
Init	sgmm/fmllr-sgmm.cc	/^void FmllrSgmmAccs::Init(int32 dim, int32 num_gaussians) {$/;"	f	class:kaldi::FmllrSgmmAccs
Read	sgmm/fmllr-sgmm.cc	/^void FmllrSgmmAccs::Read(std::istream &in, bool binary, bool add) {$/;"	f	class:kaldi::FmllrSgmmAccs
Read	sgmm/fmllr-sgmm.cc	/^void SgmmFmllrGlobalParams::Read(std::istream &in, bool binary) {$/;"	f	class:kaldi::SgmmFmllrGlobalParams
Update	sgmm/fmllr-sgmm.cc	/^bool FmllrSgmmAccs::Update(const AmSgmm &sgmm,$/;"	f	class:kaldi::FmllrSgmmAccs
Write	sgmm/fmllr-sgmm.cc	/^void FmllrSgmmAccs::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::FmllrSgmmAccs
Write	sgmm/fmllr-sgmm.cc	/^void SgmmFmllrGlobalParams::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::SgmmFmllrGlobalParams
kaldi	sgmm/fmllr-sgmm.cc	/^namespace kaldi {$/;"	n	file:
Dim	sgmm/fmllr-sgmm.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::FmllrSgmmAccs
FmllrSgmmAccs	sgmm/fmllr-sgmm.h	/^  FmllrSgmmAccs() : dim_(-1) {}$/;"	f	class:kaldi::FmllrSgmmAccs
FmllrSgmmAccs	sgmm/fmllr-sgmm.h	/^class FmllrSgmmAccs {$/;"	c	namespace:kaldi
HasBasis	sgmm/fmllr-sgmm.h	/^  bool HasBasis() const { return fmllr_bases_.size() != 0; }$/;"	f	class:kaldi::SgmmFmllrGlobalParams
Init	sgmm/fmllr-sgmm.h	/^inline void SgmmFmllrGlobalParams::Init(const AmSgmm &sgmm,$/;"	f	class:kaldi::SgmmFmllrGlobalParams
IsEmpty	sgmm/fmllr-sgmm.h	/^  bool IsEmpty() const {$/;"	f	class:kaldi::SgmmFmllrGlobalParams
KALDI_SGMM_FMLLR_SGMM_H_	sgmm/fmllr-sgmm.h	23;"	d
Register	sgmm/fmllr-sgmm.h	/^inline void SgmmFmllrConfig::Register(OptionsItf *po) {$/;"	f	class:kaldi::SgmmFmllrConfig
SetZero	sgmm/fmllr-sgmm.h	/^  void SetZero() { stats_.SetZero(); }$/;"	f	class:kaldi::FmllrSgmmAccs
SgmmFmllrConfig	sgmm/fmllr-sgmm.h	/^  SgmmFmllrConfig() {$/;"	f	struct:kaldi::SgmmFmllrConfig
SgmmFmllrConfig	sgmm/fmllr-sgmm.h	/^struct SgmmFmllrConfig {$/;"	s	namespace:kaldi
SgmmFmllrGlobalParams	sgmm/fmllr-sgmm.h	/^class SgmmFmllrGlobalParams {$/;"	c	namespace:kaldi
bases_occ_scale	sgmm/fmllr-sgmm.h	/^  BaseFloat bases_occ_scale;$/;"	m	struct:kaldi::SgmmFmllrConfig
dim_	sgmm/fmllr-sgmm.h	/^  int32 dim_;  \/\/\/< Dimension of feature vectors$/;"	m	class:kaldi::FmllrSgmmAccs
fmllr_bases_	sgmm/fmllr-sgmm.h	/^  std::vector< Matrix<BaseFloat> > fmllr_bases_;$/;"	m	class:kaldi::SgmmFmllrGlobalParams
fmllr_iters	sgmm/fmllr-sgmm.h	/^  int32 fmllr_iters;  \/\/\/< Number of iterations in FMLLR estimation.$/;"	m	struct:kaldi::SgmmFmllrConfig
fmllr_min_count	sgmm/fmllr-sgmm.h	/^  BaseFloat fmllr_min_count;$/;"	m	struct:kaldi::SgmmFmllrConfig
fmllr_min_count_basis	sgmm/fmllr-sgmm.h	/^  BaseFloat fmllr_min_count_basis;$/;"	m	struct:kaldi::SgmmFmllrConfig
fmllr_min_count_full	sgmm/fmllr-sgmm.h	/^  BaseFloat fmllr_min_count_full;$/;"	m	struct:kaldi::SgmmFmllrConfig
inv_xform_	sgmm/fmllr-sgmm.h	/^  Matrix<BaseFloat> inv_xform_;$/;"	m	class:kaldi::SgmmFmllrGlobalParams
kaldi	sgmm/fmllr-sgmm.h	/^namespace kaldi {$/;"	n
mean_scatter_	sgmm/fmllr-sgmm.h	/^  Vector<BaseFloat> mean_scatter_;$/;"	m	class:kaldi::SgmmFmllrGlobalParams
num_fmllr_bases	sgmm/fmllr-sgmm.h	/^  int32 num_fmllr_bases;$/;"	m	struct:kaldi::SgmmFmllrConfig
pre_xform_	sgmm/fmllr-sgmm.h	/^  Matrix<BaseFloat> pre_xform_;$/;"	m	class:kaldi::SgmmFmllrGlobalParams
stats	sgmm/fmllr-sgmm.h	/^  const AffineXformStats &stats() const { return stats_; }$/;"	f	class:kaldi::FmllrSgmmAccs
stats_	sgmm/fmllr-sgmm.h	/^  AffineXformStats stats_;  \/\/\/< Accumulated stats$/;"	m	class:kaldi::FmllrSgmmAccs
step_iters	sgmm/fmllr-sgmm.h	/^  int32 step_iters;  \/\/\/< Iterations to find optimal FMLLR step size.$/;"	m	struct:kaldi::SgmmFmllrConfig
~FmllrSgmmAccs	sgmm/fmllr-sgmm.h	/^  ~FmllrSgmmAccs() {}$/;"	f	class:kaldi::FmllrSgmmAccs
Accumulate	sgmm/sgmm-clusterable.cc	/^void SgmmClusterable::Accumulate($/;"	f	class:kaldi::SgmmClusterable
AccumulateSgmmTreeStats	sgmm/sgmm-clusterable.cc	/^bool AccumulateSgmmTreeStats(const TransitionModel &trans_model,$/;"	f	namespace:kaldi
Add	sgmm/sgmm-clusterable.cc	/^void SgmmClusterable::Add(const Clusterable &other_in) {$/;"	f	class:kaldi::SgmmClusterable
ComputeH	sgmm/sgmm-clusterable.cc	/^void SgmmClusterable::ComputeH() {$/;"	f	class:kaldi::SgmmClusterable
Copy	sgmm/sgmm-clusterable.cc	/^Clusterable *SgmmClusterable::Copy() const {$/;"	f	class:kaldi::SgmmClusterable
Normalizer	sgmm/sgmm-clusterable.cc	/^BaseFloat SgmmClusterable::Normalizer() const {$/;"	f	class:kaldi::SgmmClusterable
Objf	sgmm/sgmm-clusterable.cc	/^BaseFloat SgmmClusterable::Objf() const {$/;"	f	class:kaldi::SgmmClusterable
ReadNew	sgmm/sgmm-clusterable.cc	/^Clusterable *SgmmClusterable::ReadNew(std::istream &is, bool binary) const {$/;"	f	class:kaldi::SgmmClusterable
Scale	sgmm/sgmm-clusterable.cc	/^void SgmmClusterable::Scale(BaseFloat f) {$/;"	f	class:kaldi::SgmmClusterable
SetZero	sgmm/sgmm-clusterable.cc	/^void SgmmClusterable::SetZero() {$/;"	f	class:kaldi::SgmmClusterable
Sub	sgmm/sgmm-clusterable.cc	/^void SgmmClusterable::Sub(const Clusterable &other_in) {$/;"	f	class:kaldi::SgmmClusterable
Write	sgmm/sgmm-clusterable.cc	/^void SgmmClusterable::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::SgmmClusterable
kaldi	sgmm/sgmm-clusterable.cc	/^namespace kaldi {$/;"	n	file:
H_	sgmm/sgmm-clusterable.h	/^  const std::vector< SpMatrix<double> > &H_; \/\/ Reference to a vector of SpMatrix which$/;"	m	class:kaldi::SgmmClusterable
KALDI_SGMM_SGMM_CLUSTERABLE_H_	sgmm/sgmm-clusterable.h	21;"	d
SgmmClusterable	sgmm/sgmm-clusterable.h	/^  SgmmClusterable(const AmSgmm &sgmm,$/;"	f	class:kaldi::SgmmClusterable
SgmmClusterable	sgmm/sgmm-clusterable.h	/^class SgmmClusterable: public Clusterable {$/;"	c	namespace:kaldi
Type	sgmm/sgmm-clusterable.h	/^  virtual std::string Type() const { return "sgmm"; }$/;"	f	class:kaldi::SgmmClusterable
gamma	sgmm/sgmm-clusterable.h	/^  const Vector<double> &gamma () const { return gamma_; }$/;"	f	class:kaldi::SgmmClusterable
gamma_	sgmm/sgmm-clusterable.h	/^  Vector<double> gamma_; \/\/ Occupation counts for each Gaussian index.  Comparable$/;"	m	class:kaldi::SgmmClusterable
kaldi	sgmm/sgmm-clusterable.h	/^namespace kaldi {$/;"	n
my_H_	sgmm/sgmm-clusterable.h	/^  SpMatrix<double> my_H_; \/\/ This quantity is a weighted sum over the H quantities,$/;"	m	class:kaldi::SgmmClusterable
sgmm_	sgmm/sgmm-clusterable.h	/^  const AmSgmm &sgmm_;  \/\/ Reference to the SGMM object, needed to compute$/;"	m	class:kaldi::SgmmClusterable
y	sgmm/sgmm-clusterable.h	/^  const Vector<double> &y() const { return y_; }$/;"	f	class:kaldi::SgmmClusterable
y_	sgmm/sgmm-clusterable.h	/^  Vector<double> y_; \/\/ Statistics comparable to the y_{jm} statistics in the SGMM$/;"	m	class:kaldi::SgmmClusterable
~SgmmClusterable	sgmm/sgmm-clusterable.h	/^  virtual ~SgmmClusterable() {}$/;"	f	class:kaldi::SgmmClusterable
ADDLIBS	sgmm2/Makefile	/^ADDLIBS = ..\/base\/kaldi-base.a ..\/util\/kaldi-util.a ..\/matrix\/kaldi-matrix.a \\$/;"	m
LIBNAME	sgmm2/Makefile	/^LIBNAME = kaldi-sgmm2$/;"	m
OBJFILES	sgmm2/Makefile	/^OBJFILES = am-sgmm2.o estimate-am-sgmm2.o estimate-am-sgmm2-ebw.o fmllr-sgmm2.o \\$/;"	m
OPENFST_CXXFLAGS	sgmm2/Makefile	/^OPENFST_CXXFLAGS = $/;"	m
OPENFST_LDLIBS	sgmm2/Makefile	/^OPENFST_LDLIBS = $/;"	m
TESTFILES	sgmm2/Makefile	/^TESTFILES = am-sgmm2-test estimate-am-sgmm2-test  \\$/;"	m
ApplyProjection	sgmm2/am-sgmm2-project.cc	/^void Sgmm2Project::ApplyProjection(const Matrix<BaseFloat> &total_projection,$/;"	f	class:kaldi::Sgmm2Project
ComputeLdaStats	sgmm2/am-sgmm2-project.cc	/^void Sgmm2Project::ComputeLdaStats(const FullGmm &full_ubm,$/;"	f	class:kaldi::Sgmm2Project
ComputeLdaTransform	sgmm2/am-sgmm2-project.cc	/^void Sgmm2Project::ComputeLdaTransform(const SpMatrix<double> &B,$/;"	f	class:kaldi::Sgmm2Project
ComputeProjection	sgmm2/am-sgmm2-project.cc	/^void Sgmm2Project::ComputeProjection(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::Sgmm2Project
ProjectVariance	sgmm2/am-sgmm2-project.cc	/^void Sgmm2Project::ProjectVariance (const Matrix<double> &total_projection,$/;"	f	class:kaldi::Sgmm2Project
ProjectVariance	sgmm2/am-sgmm2-project.cc	/^void Sgmm2Project::ProjectVariance(const Matrix<double> &total_projection,$/;"	f	class:kaldi::Sgmm2Project
kaldi	sgmm2/am-sgmm2-project.cc	/^namespace kaldi {$/;"	n	file:
KALDI_SGMM2_AM_SGMM2_PROJECT_H_	sgmm2/am-sgmm2-project.h	21;"	d
Sgmm2Project	sgmm2/am-sgmm2-project.h	/^class Sgmm2Project {$/;"	c	namespace:kaldi
kaldi	sgmm2/am-sgmm2-project.h	/^namespace kaldi {$/;"	n
TestSgmm2IO	sgmm2/am-sgmm2-test.cc	/^void TestSgmm2IO(const AmSgmm2 &sgmm) {$/;"	f
TestSgmm2IncreaseDim	sgmm2/am-sgmm2-test.cc	/^void TestSgmm2IncreaseDim(const AmSgmm2 &sgmm) {$/;"	f
TestSgmm2Init	sgmm2/am-sgmm2-test.cc	/^void TestSgmm2Init(const AmSgmm2 &sgmm) {$/;"	f
TestSgmm2PreXform	sgmm2/am-sgmm2-test.cc	/^void TestSgmm2PreXform(const AmSgmm2 &sgmm) {$/;"	f
TestSgmm2Substates	sgmm2/am-sgmm2-test.cc	/^void TestSgmm2Substates(const AmSgmm2 &sgmm) {$/;"	f
UnitTestSgmm2	sgmm2/am-sgmm2-test.cc	/^void UnitTestSgmm2() {$/;"	f
main	sgmm2/am-sgmm2-test.cc	/^int main() {$/;"	f
Check	sgmm2/am-sgmm2.cc	/^void AmSgmm2::Check(bool show_properties) {$/;"	f	class:kaldi::AmSgmm2
ComponentLogLikes	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComponentLogLikes(const Sgmm2PerFrameDerivedVars &per_frame_vars,$/;"	f	class:kaldi::AmSgmm2
ComponentPosteriors	sgmm2/am-sgmm2.cc	/^AmSgmm2::ComponentPosteriors(const Sgmm2PerFrameDerivedVars &per_frame_vars,$/;"	f	class:kaldi::AmSgmm2
ComputeDerivedVars	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputeDerivedVars() {$/;"	f	class:kaldi::AmSgmm2
ComputeFeatureNormalizingTransform	sgmm2/am-sgmm2.cc	/^void ComputeFeatureNormalizingTransform(const FullGmm &gmm, Matrix<BaseFloat> *xform) {$/;"	f	namespace:kaldi
ComputeFmllrPreXform	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputeFmllrPreXform(const Vector<BaseFloat> &state_occs,$/;"	f	class:kaldi::AmSgmm2
ComputeGammaI	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputeGammaI(const Vector<BaseFloat> &state_occupancies,$/;"	f	class:kaldi::AmSgmm2
ComputeH	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputeH(std::vector< SpMatrix<Real> > *H_i) const {$/;"	f	class:kaldi::AmSgmm2
ComputeHsmFromModel	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputeHsmFromModel($/;"	f	class:kaldi::AmSgmm2
ComputeNormalizers	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputeNormalizers() {$/;"	f	class:kaldi::AmSgmm2
ComputeNormalizersClass	sgmm2/am-sgmm2.cc	/^  ComputeNormalizersClass() { } \/\/ Disallow empty constructor.$/;"	f	class:kaldi::ComputeNormalizersClass	file:
ComputeNormalizersClass	sgmm2/am-sgmm2.cc	/^  ComputeNormalizersClass(AmSgmm2 *am_sgmm,$/;"	f	class:kaldi::ComputeNormalizersClass
ComputeNormalizersClass	sgmm2/am-sgmm2.cc	/^class ComputeNormalizersClass: public MultiThreadable { \/\/ For multi-threaded.$/;"	c	namespace:kaldi	file:
ComputeNormalizersInternal	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputeNormalizersInternal(int32 num_threads, int32 thread,$/;"	f	class:kaldi::AmSgmm2
ComputePdfMappings	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputePdfMappings() {$/;"	f	class:kaldi::AmSgmm2
ComputePerFrameVars	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputePerFrameVars(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::AmSgmm2
ComputePerSpkDerivedVars	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputePerSpkDerivedVars(Sgmm2PerSpkDerivedVars *vars) const {$/;"	f	class:kaldi::AmSgmm2
ComputeWeights	sgmm2/am-sgmm2.cc	/^void AmSgmm2::ComputeWeights() {$/;"	f	class:kaldi::AmSgmm2
CopyFromSgmm2	sgmm2/am-sgmm2.cc	/^void AmSgmm2::CopyFromSgmm2(const AmSgmm2 &other,$/;"	f	class:kaldi::AmSgmm2
CopyGlobalsInitVecs	sgmm2/am-sgmm2.cc	/^void AmSgmm2::CopyGlobalsInitVecs(const AmSgmm2 &other,$/;"	f	class:kaldi::AmSgmm2
GaussianSelection	sgmm2/am-sgmm2.cc	/^BaseFloat AmSgmm2::GaussianSelection(const Sgmm2GselectConfig &config,$/;"	f	class:kaldi::AmSgmm2
GetDjms	sgmm2/am-sgmm2.cc	/^BaseFloat AmSgmm2::GetDjms(int32 j1, int32 m,$/;"	f	class:kaldi::AmSgmm2
GetNtransSigmaInv	sgmm2/am-sgmm2.cc	/^void AmSgmm2::GetNtransSigmaInv(vector< Matrix<Real> > *out) const {$/;"	f	class:kaldi::AmSgmm2
IncreasePhoneSpaceDim	sgmm2/am-sgmm2.cc	/^void AmSgmm2::IncreasePhoneSpaceDim(int32 target_dim,$/;"	f	class:kaldi::AmSgmm2
IncreaseSpkSpaceDim	sgmm2/am-sgmm2.cc	/^void AmSgmm2::IncreaseSpkSpaceDim(int32 target_dim,$/;"	f	class:kaldi::AmSgmm2
InitializeCovars	sgmm2/am-sgmm2.cc	/^void AmSgmm2::InitializeCovars() {$/;"	f	class:kaldi::AmSgmm2
InitializeFromFullGmm	sgmm2/am-sgmm2.cc	/^void AmSgmm2::InitializeFromFullGmm(const FullGmm &full_gmm,$/;"	f	class:kaldi::AmSgmm2
InitializeMw	sgmm2/am-sgmm2.cc	/^void AmSgmm2::InitializeMw(int32 phn_subspace_dim,$/;"	f	class:kaldi::AmSgmm2
InitializeNu	sgmm2/am-sgmm2.cc	/^void AmSgmm2::InitializeNu(int32 spk_subspace_dim,$/;"	f	class:kaldi::AmSgmm2
InitializeVecsAndSubstateWeights	sgmm2/am-sgmm2.cc	/^void AmSgmm2::InitializeVecsAndSubstateWeights(BaseFloat self_weight) {$/;"	f	class:kaldi::AmSgmm2
LogLikelihood	sgmm2/am-sgmm2.cc	/^BaseFloat AmSgmm2::LogLikelihood(const Sgmm2PerFrameDerivedVars &per_frame_vars,$/;"	f	class:kaldi::AmSgmm2
NextFrame	sgmm2/am-sgmm2.cc	/^void Sgmm2LikelihoodCache::NextFrame() {$/;"	f	class:kaldi::Sgmm2LikelihoodCache
Pdf2Group	sgmm2/am-sgmm2.cc	/^int32 AmSgmm2::Pdf2Group(int32 j2) const {$/;"	f	class:kaldi::AmSgmm2
Read	sgmm2/am-sgmm2.cc	/^void AmSgmm2::Read(std::istream &in_stream, bool binary) {$/;"	f	class:kaldi::AmSgmm2
Read	sgmm2/am-sgmm2.cc	/^void Sgmm2GauPost::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::Sgmm2GauPost
SplitSubstates	sgmm2/am-sgmm2.cc	/^void AmSgmm2::SplitSubstates(const Vector<BaseFloat> &pdf_occupancies,$/;"	f	class:kaldi::AmSgmm2
SplitSubstatesInGroup	sgmm2/am-sgmm2.cc	/^void AmSgmm2::SplitSubstatesInGroup(const Vector<BaseFloat> &pdf_occupancies,$/;"	f	class:kaldi::AmSgmm2
Write	sgmm2/am-sgmm2.cc	/^void AmSgmm2::Write(std::ostream &out_stream,$/;"	f	class:kaldi::AmSgmm2
Write	sgmm2/am-sgmm2.cc	/^void Sgmm2GauPost::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::Sgmm2GauPost
_RandGauss	sgmm2/am-sgmm2.cc	/^static inline float _RandGauss()$/;"	f	namespace:kaldi
am_sgmm_	sgmm2/am-sgmm2.cc	/^  AmSgmm2 *am_sgmm_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
entropy_count_	sgmm2/am-sgmm2.cc	/^  int32 entropy_count_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
entropy_count_ptr_	sgmm2/am-sgmm2.cc	/^  int32 *entropy_count_ptr_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
entropy_sum_	sgmm2/am-sgmm2.cc	/^  double entropy_sum_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
entropy_sum_ptr_	sgmm2/am-sgmm2.cc	/^  double *entropy_sum_ptr_;$/;"	m	class:kaldi::ComputeNormalizersClass	file:
kaldi	sgmm2/am-sgmm2.cc	/^namespace kaldi {$/;"	n	file:
operator ()	sgmm2/am-sgmm2.cc	/^  inline void operator() () {$/;"	f	class:kaldi::ComputeNormalizersClass
~ComputeNormalizersClass	sgmm2/am-sgmm2.cc	/^  ~ComputeNormalizersClass() {$/;"	f	class:kaldi::ComputeNormalizersClass
AmSgmm2	sgmm2/am-sgmm2.h	/^  AmSgmm2() {}$/;"	f	class:kaldi::AmSgmm2
AmSgmm2	sgmm2/am-sgmm2.h	/^class AmSgmm2 {$/;"	c	namespace:kaldi
Clear	sgmm2/am-sgmm2.h	/^  void Clear() {$/;"	f	class:kaldi::Sgmm2PerSpkDerivedVars
Empty	sgmm2/am-sgmm2.h	/^  bool Empty() { return v_s.Dim() == 0; }$/;"	f	class:kaldi::Sgmm2PerSpkDerivedVars
FeatureDim	sgmm2/am-sgmm2.h	/^  int32 FeatureDim() const { return M_[0].NumRows(); }$/;"	f	class:kaldi::AmSgmm2
GetInvCovars	sgmm2/am-sgmm2.h	/^inline void AmSgmm2::GetInvCovars(int32 gauss_index,$/;"	f	class:kaldi::AmSgmm2
GetSpeakerVector	sgmm2/am-sgmm2.h	/^  const Vector<BaseFloat> &GetSpeakerVector() { return v_s; }$/;"	f	class:kaldi::Sgmm2PerSpkDerivedVars
GetSubstateMean	sgmm2/am-sgmm2.h	/^inline void AmSgmm2::GetSubstateMean(int32 j1, int32 m, int32 i,$/;"	f	class:kaldi::AmSgmm2
GetSubstateSpeakerMean	sgmm2/am-sgmm2.h	/^inline void AmSgmm2::GetSubstateSpeakerMean(int32 j1, int32 m, int32 i,$/;"	f	class:kaldi::AmSgmm2
GetVarScaledSubstateSpeakerMean	sgmm2/am-sgmm2.h	/^void AmSgmm2::GetVarScaledSubstateSpeakerMean(int32 j1, int32 m, int32 i,$/;"	f	class:kaldi::AmSgmm2
HasSpeakerDependentWeights	sgmm2/am-sgmm2.h	/^  bool HasSpeakerDependentWeights() const { return (u_.NumRows() != 0); }$/;"	f	class:kaldi::AmSgmm2
HasSpeakerSpace	sgmm2/am-sgmm2.h	/^  bool HasSpeakerSpace() const { return (!N_.empty()); }$/;"	f	class:kaldi::AmSgmm2
KALDI_SGMM2_AM_SGMM2_H_	sgmm2/am-sgmm2.h	25;"	d
M_	sgmm2/am-sgmm2.h	/^  std::vector< Matrix<BaseFloat> > M_;$/;"	m	class:kaldi::AmSgmm2
M_prior_	sgmm2/am-sgmm2.h	/^  std::vector< Matrix<BaseFloat> > M_prior_;  \/\/ Matrix-variate Gaussian mean$/;"	m	class:kaldi::AmSgmm2
N_	sgmm2/am-sgmm2.h	/^  std::vector< Matrix<BaseFloat> > N_;$/;"	m	class:kaldi::AmSgmm2
NumGauss	sgmm2/am-sgmm2.h	/^  int32 NumGauss() const { return M_.size(); }$/;"	f	class:kaldi::AmSgmm2
NumGroups	sgmm2/am-sgmm2.h	/^  int32 NumGroups() const { return group2pdf_.size(); } \/\/ relates to SCTM.  # pdf groups,$/;"	f	class:kaldi::AmSgmm2
NumPdfs	sgmm2/am-sgmm2.h	/^  int32 NumPdfs() const { return pdf2group_.size(); }$/;"	f	class:kaldi::AmSgmm2
NumSubstatesForGroup	sgmm2/am-sgmm2.h	/^  int32 NumSubstatesForGroup(int32 j1) const {$/;"	f	class:kaldi::AmSgmm2
NumSubstatesForPdf	sgmm2/am-sgmm2.h	/^  int32 NumSubstatesForPdf(int32 j2) const {$/;"	f	class:kaldi::AmSgmm2
PdfCacheElement	sgmm2/am-sgmm2.h	/^    PdfCacheElement(): t(0) { }$/;"	f	struct:kaldi::Sgmm2LikelihoodCache::PdfCacheElement
PdfCacheElement	sgmm2/am-sgmm2.h	/^  struct PdfCacheElement { \/\/ indexed by j2.$/;"	s	struct:kaldi::Sgmm2LikelihoodCache
PhoneSpaceDim	sgmm2/am-sgmm2.h	/^  int32 PhoneSpaceDim() const { return w_.NumCols(); }$/;"	f	class:kaldi::AmSgmm2
RandomAccessSgmm2GauPostReader	sgmm2/am-sgmm2.h	/^typedef RandomAccessTableReader<Sgmm2GauPostHolder> RandomAccessSgmm2GauPostReader;$/;"	t	namespace:kaldi
Register	sgmm2/am-sgmm2.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::Sgmm2GselectConfig
Register	sgmm2/am-sgmm2.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::Sgmm2SplitSubstatesConfig
RemoveSpeakerSpace	sgmm2/am-sgmm2.h	/^  void RemoveSpeakerSpace() { N_.clear(); u_.Resize(0, 0); w_jmi_.clear(); }$/;"	f	class:kaldi::AmSgmm2
Resize	sgmm2/am-sgmm2.h	/^  void Resize(int32 ngauss, int32 feat_dim, int32 phn_dim) { \/\/ resizes but does$/;"	f	struct:kaldi::Sgmm2PerFrameDerivedVars
SequentialSgmm2GauPostReader	sgmm2/am-sgmm2.h	/^typedef SequentialTableReader<Sgmm2GauPostHolder> SequentialSgmm2GauPostReader;$/;"	t	namespace:kaldi
SetSpeakerVector	sgmm2/am-sgmm2.h	/^  void SetSpeakerVector(const Vector<BaseFloat> &v_s_in) {$/;"	f	class:kaldi::Sgmm2PerSpkDerivedVars
Sgmm2GauPost	sgmm2/am-sgmm2.h	/^  Sgmm2GauPost() {}$/;"	f	class:kaldi::Sgmm2GauPost
Sgmm2GauPost	sgmm2/am-sgmm2.h	/^  explicit Sgmm2GauPost(size_t i) : std::vector<Sgmm2GauPostElement>(i) {}$/;"	f	class:kaldi::Sgmm2GauPost
Sgmm2GauPost	sgmm2/am-sgmm2.h	/^class Sgmm2GauPost: public std::vector<Sgmm2GauPostElement> {$/;"	c	namespace:kaldi
Sgmm2GauPostElement	sgmm2/am-sgmm2.h	/^struct Sgmm2GauPostElement {$/;"	s	namespace:kaldi
Sgmm2GauPostHolder	sgmm2/am-sgmm2.h	/^typedef KaldiObjectHolder<Sgmm2GauPost> Sgmm2GauPostHolder;$/;"	t	namespace:kaldi
Sgmm2GauPostWriter	sgmm2/am-sgmm2.h	/^typedef TableWriter<Sgmm2GauPostHolder> Sgmm2GauPostWriter;$/;"	t	namespace:kaldi
Sgmm2GselectConfig	sgmm2/am-sgmm2.h	/^  Sgmm2GselectConfig() {$/;"	f	struct:kaldi::Sgmm2GselectConfig
Sgmm2GselectConfig	sgmm2/am-sgmm2.h	/^struct Sgmm2GselectConfig {$/;"	s	namespace:kaldi
Sgmm2LikelihoodCache	sgmm2/am-sgmm2.h	/^  Sgmm2LikelihoodCache(int32 num_groups, int32 num_pdfs):$/;"	f	struct:kaldi::Sgmm2LikelihoodCache
Sgmm2LikelihoodCache	sgmm2/am-sgmm2.h	/^struct Sgmm2LikelihoodCache {$/;"	s	namespace:kaldi
Sgmm2PerFrameDerivedVars	sgmm2/am-sgmm2.h	/^struct Sgmm2PerFrameDerivedVars {$/;"	s	namespace:kaldi
Sgmm2PerSpkDerivedVars	sgmm2/am-sgmm2.h	/^class Sgmm2PerSpkDerivedVars {$/;"	c	namespace:kaldi
Sgmm2SplitSubstatesConfig	sgmm2/am-sgmm2.h	/^  Sgmm2SplitSubstatesConfig(): split_substates(0),$/;"	f	struct:kaldi::Sgmm2SplitSubstatesConfig
Sgmm2SplitSubstatesConfig	sgmm2/am-sgmm2.h	/^struct Sgmm2SplitSubstatesConfig {$/;"	s	namespace:kaldi
SigmaInv_	sgmm2/am-sgmm2.h	/^  std::vector< SpMatrix<BaseFloat> > SigmaInv_;$/;"	m	class:kaldi::AmSgmm2
SpkSpaceDim	sgmm2/am-sgmm2.h	/^  int32 SpkSpaceDim() const { return (N_.size() > 0) ? N_[0].NumCols() : 0; }$/;"	f	class:kaldi::AmSgmm2
SubstateCacheElement	sgmm2/am-sgmm2.h	/^    SubstateCacheElement(): t(0) { }$/;"	f	struct:kaldi::Sgmm2LikelihoodCache::SubstateCacheElement
SubstateCacheElement	sgmm2/am-sgmm2.h	/^  struct SubstateCacheElement { \/\/ indexed by j1.$/;"	s	struct:kaldi::Sgmm2LikelihoodCache
b_is	sgmm2/am-sgmm2.h	/^  Vector<BaseFloat> b_is; \/\/\/ < [SSGMM]: Eq. (22) in techreport, b_i^{(s)} = \\exp(\\u_i^T \\v^{(s)})$/;"	m	class:kaldi::Sgmm2PerSpkDerivedVars
c_	sgmm2/am-sgmm2.h	/^  std::vector< Vector<BaseFloat> > c_;$/;"	m	class:kaldi::AmSgmm2
col_cov_inv_	sgmm2/am-sgmm2.h	/^  SpMatrix<BaseFloat> col_cov_inv_;$/;"	m	class:kaldi::AmSgmm2
diag_gmm_nbest	sgmm2/am-sgmm2.h	/^  int32 diag_gmm_nbest;$/;"	m	struct:kaldi::Sgmm2GselectConfig
diag_ubm	sgmm2/am-sgmm2.h	/^  const DiagGmm & diag_ubm() const { return diag_ubm_; }$/;"	f	class:kaldi::AmSgmm2
diag_ubm_	sgmm2/am-sgmm2.h	/^  DiagGmm diag_ubm_;$/;"	m	class:kaldi::AmSgmm2
full_gmm_nbest	sgmm2/am-sgmm2.h	/^  int32 full_gmm_nbest;$/;"	m	struct:kaldi::Sgmm2GselectConfig
full_ubm	sgmm2/am-sgmm2.h	/^  const FullGmm & full_ubm() const { return full_ubm_; }$/;"	f	class:kaldi::AmSgmm2
full_ubm_	sgmm2/am-sgmm2.h	/^  FullGmm full_ubm_;$/;"	m	class:kaldi::AmSgmm2
group2pdf_	sgmm2/am-sgmm2.h	/^  std::vector<std::vector<int32> > group2pdf_; \/\/ the reverse map.$/;"	m	class:kaldi::AmSgmm2
gselect	sgmm2/am-sgmm2.h	/^  std::vector<int32> gselect;$/;"	m	struct:kaldi::Sgmm2GauPostElement
gselect	sgmm2/am-sgmm2.h	/^  std::vector<int32> gselect;$/;"	m	struct:kaldi::Sgmm2PerFrameDerivedVars
kaldi	sgmm2/am-sgmm2.h	/^namespace kaldi {$/;"	n
likes	sgmm2/am-sgmm2.h	/^    Vector<BaseFloat> likes; $/;"	m	struct:kaldi::Sgmm2LikelihoodCache::SubstateCacheElement
log_b_is	sgmm2/am-sgmm2.h	/^  Vector<BaseFloat> log_b_is; \/\/\/ < [SSGMM] log of the above (more efficient to store both).$/;"	m	class:kaldi::Sgmm2PerSpkDerivedVars
log_d_jms	sgmm2/am-sgmm2.h	/^  std::vector<Vector<BaseFloat> > log_d_jms; \/\/\/< [SSGMM] normalizers per-speaker and per-substate;$/;"	m	class:kaldi::Sgmm2PerSpkDerivedVars
log_like	sgmm2/am-sgmm2.h	/^    BaseFloat log_like;$/;"	m	struct:kaldi::Sgmm2LikelihoodCache::PdfCacheElement
max_cond	sgmm2/am-sgmm2.h	/^  BaseFloat max_cond;$/;"	m	struct:kaldi::Sgmm2SplitSubstatesConfig
min_count	sgmm2/am-sgmm2.h	/^  BaseFloat min_count;$/;"	m	struct:kaldi::Sgmm2SplitSubstatesConfig
n_	sgmm2/am-sgmm2.h	/^  std::vector< Matrix<BaseFloat> > n_;$/;"	m	class:kaldi::AmSgmm2
nti	sgmm2/am-sgmm2.h	/^  Vector<BaseFloat> nti;  \/\/\/< n_{i}(t), dim = [I], eq.(36) in CSL paper, but$/;"	m	struct:kaldi::Sgmm2PerFrameDerivedVars
o_s	sgmm2/am-sgmm2.h	/^  Matrix<BaseFloat> o_s;  \/\/\/< Per-speaker offsets o_{i}. Dimension is [I][D]$/;"	m	class:kaldi::Sgmm2PerSpkDerivedVars
pdf2group_	sgmm2/am-sgmm2.h	/^  std::vector<int32> pdf2group_;$/;"	m	class:kaldi::AmSgmm2
pdf_cache	sgmm2/am-sgmm2.h	/^  std::vector<PdfCacheElement> pdf_cache; \/\/ indexed by j2.$/;"	m	struct:kaldi::Sgmm2LikelihoodCache
perturb_factor	sgmm2/am-sgmm2.h	/^  BaseFloat perturb_factor;$/;"	m	struct:kaldi::Sgmm2SplitSubstatesConfig
posteriors	sgmm2/am-sgmm2.h	/^  std::vector<Matrix<BaseFloat> > posteriors;$/;"	m	struct:kaldi::Sgmm2GauPostElement
power	sgmm2/am-sgmm2.h	/^  BaseFloat power;$/;"	m	struct:kaldi::Sgmm2SplitSubstatesConfig
remaining_log_like	sgmm2/am-sgmm2.h	/^    BaseFloat remaining_log_like;$/;"	m	struct:kaldi::Sgmm2LikelihoodCache::SubstateCacheElement
row_cov_inv_	sgmm2/am-sgmm2.h	/^  SpMatrix<BaseFloat> row_cov_inv_;$/;"	m	class:kaldi::AmSgmm2
split_substates	sgmm2/am-sgmm2.h	/^  int32 split_substates;$/;"	m	struct:kaldi::Sgmm2SplitSubstatesConfig
substate_cache	sgmm2/am-sgmm2.h	/^  std::vector<SubstateCacheElement> substate_cache; \/\/ indexed by j1.$/;"	m	struct:kaldi::Sgmm2LikelihoodCache
t	sgmm2/am-sgmm2.h	/^    int32 t; \/\/ used in detecting "freshness."$/;"	m	struct:kaldi::Sgmm2LikelihoodCache::PdfCacheElement
t	sgmm2/am-sgmm2.h	/^    int32 t; \/\/ used in detecting "freshness."$/;"	m	struct:kaldi::Sgmm2LikelihoodCache::SubstateCacheElement
t	sgmm2/am-sgmm2.h	/^  int32 t;$/;"	m	struct:kaldi::Sgmm2LikelihoodCache
tids	sgmm2/am-sgmm2.h	/^  std::vector<int32> tids;  \/\/ transition-ids for each entry in "posteriors"$/;"	m	struct:kaldi::Sgmm2GauPostElement
u_	sgmm2/am-sgmm2.h	/^  Matrix<BaseFloat> u_;$/;"	m	class:kaldi::AmSgmm2
v_	sgmm2/am-sgmm2.h	/^  std::vector< Matrix<BaseFloat> > v_;$/;"	m	class:kaldi::AmSgmm2
v_s	sgmm2/am-sgmm2.h	/^  Vector<BaseFloat> v_s;  \/\/\/< Speaker adaptation vector v_^{(s)}. Dim is [T]$/;"	m	class:kaldi::Sgmm2PerSpkDerivedVars
w_	sgmm2/am-sgmm2.h	/^  Matrix<BaseFloat> w_;$/;"	m	class:kaldi::AmSgmm2
w_jmi_	sgmm2/am-sgmm2.h	/^  std::vector< Matrix<BaseFloat> > w_jmi_;$/;"	m	class:kaldi::AmSgmm2
xt	sgmm2/am-sgmm2.h	/^  Vector<BaseFloat> xt;   \/\/\/< x'(t), FMLLR-adapted, dim = [D], eq.(33)$/;"	m	struct:kaldi::Sgmm2PerFrameDerivedVars
xti	sgmm2/am-sgmm2.h	/^  Matrix<BaseFloat> xti;  \/\/\/< x_{i}(t) = x'(t) - o_i(s): dim = [I][D], eq.(34)$/;"	m	struct:kaldi::Sgmm2PerFrameDerivedVars
zti	sgmm2/am-sgmm2.h	/^  Matrix<BaseFloat> zti;  \/\/\/< z_{i}(t), dim = [I][S], eq.(35)$/;"	m	struct:kaldi::Sgmm2PerFrameDerivedVars
LogLikelihoodForPdf	sgmm2/decodable-am-sgmm2.cc	/^BaseFloat DecodableAmSgmm2::LogLikelihoodForPdf(int32 frame, int32 pdf_id) {$/;"	f	class:kaldi::DecodableAmSgmm2
kaldi	sgmm2/decodable-am-sgmm2.cc	/^namespace kaldi {$/;"	n	file:
~DecodableAmSgmm2	sgmm2/decodable-am-sgmm2.cc	/^DecodableAmSgmm2::~DecodableAmSgmm2() {$/;"	f	class:kaldi::DecodableAmSgmm2
DecodableAmSgmm2	sgmm2/decodable-am-sgmm2.h	/^  DecodableAmSgmm2(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::DecodableAmSgmm2
DecodableAmSgmm2	sgmm2/decodable-am-sgmm2.h	/^class DecodableAmSgmm2 : public DecodableInterface {$/;"	c	namespace:kaldi
DecodableAmSgmm2Scaled	sgmm2/decodable-am-sgmm2.h	/^  DecodableAmSgmm2Scaled(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::DecodableAmSgmm2Scaled
DecodableAmSgmm2Scaled	sgmm2/decodable-am-sgmm2.h	/^class DecodableAmSgmm2Scaled : public DecodableAmSgmm2 {$/;"	c	namespace:kaldi
IsLastFrame	sgmm2/decodable-am-sgmm2.h	/^  virtual bool IsLastFrame(int32 frame) const {$/;"	f	class:kaldi::DecodableAmSgmm2
KALDI_SGMM2_DECODABLE_AM_SGMM2_H_	sgmm2/decodable-am-sgmm2.h	22;"	d
LogLikelihood	sgmm2/decodable-am-sgmm2.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm2
LogLikelihood	sgmm2/decodable-am-sgmm2.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmSgmm2Scaled
NumFramesReady	sgmm2/decodable-am-sgmm2.h	/^  int32 NumFramesReady() const { return feature_matrix_->NumRows(); }$/;"	f	class:kaldi::DecodableAmSgmm2
NumIndices	sgmm2/decodable-am-sgmm2.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmSgmm2
cur_frame_	sgmm2/decodable-am-sgmm2.h	/^  int32 cur_frame_;$/;"	m	class:kaldi::DecodableAmSgmm2
delete_vars_	sgmm2/decodable-am-sgmm2.h	/^  bool delete_vars_; \/\/ If true, we will delete feature_matrix_, gselect_, and$/;"	m	class:kaldi::DecodableAmSgmm2
feature_matrix_	sgmm2/decodable-am-sgmm2.h	/^  const Matrix<BaseFloat> *feature_matrix_;$/;"	m	class:kaldi::DecodableAmSgmm2
gselect_	sgmm2/decodable-am-sgmm2.h	/^  const std::vector<std::vector<int32> > *gselect_; $/;"	m	class:kaldi::DecodableAmSgmm2
kaldi	sgmm2/decodable-am-sgmm2.h	/^namespace kaldi {$/;"	n
log_prune_	sgmm2/decodable-am-sgmm2.h	/^  BaseFloat log_prune_;$/;"	m	class:kaldi::DecodableAmSgmm2
per_frame_vars_	sgmm2/decodable-am-sgmm2.h	/^  Sgmm2PerFrameDerivedVars per_frame_vars_;$/;"	m	class:kaldi::DecodableAmSgmm2
scale_	sgmm2/decodable-am-sgmm2.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmSgmm2Scaled
sgmm_	sgmm2/decodable-am-sgmm2.h	/^  const AmSgmm2 &sgmm_;$/;"	m	class:kaldi::DecodableAmSgmm2
sgmm_cache_	sgmm2/decodable-am-sgmm2.h	/^  Sgmm2LikelihoodCache sgmm_cache_;$/;"	m	class:kaldi::DecodableAmSgmm2
spk_	sgmm2/decodable-am-sgmm2.h	/^  Sgmm2PerSpkDerivedVars *spk_;$/;"	m	class:kaldi::DecodableAmSgmm2
trans_model_	sgmm2/decodable-am-sgmm2.h	/^  const TransitionModel &trans_model_;  \/\/\/< for tid to pdf mapping$/;"	m	class:kaldi::DecodableAmSgmm2
ComputePhoneVecStats	sgmm2/estimate-am-sgmm2-ebw.cc	/^void EbwAmSgmm2Updater::ComputePhoneVecStats($/;"	f	class:kaldi::EbwAmSgmm2Updater
EbwUpdatePhoneVectorsClass	sgmm2/estimate-am-sgmm2-ebw.cc	/^  EbwUpdatePhoneVectorsClass(const EbwAmSgmm2Updater *updater,$/;"	f	class:kaldi::EbwUpdatePhoneVectorsClass
EbwUpdatePhoneVectorsClass	sgmm2/estimate-am-sgmm2-ebw.cc	/^class EbwUpdatePhoneVectorsClass: public MultiThreadable { \/\/ For multi-threaded.$/;"	c	namespace:kaldi	file:
H_	sgmm2/estimate-am-sgmm2-ebw.cc	/^  const std::vector<SpMatrix<double> > &H_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
Update	sgmm2/estimate-am-sgmm2-ebw.cc	/^void EbwAmSgmm2Updater::Update(const MleAmSgmm2Accs &num_accs,$/;"	f	class:kaldi::EbwAmSgmm2Updater
UpdateM	sgmm2/estimate-am-sgmm2-ebw.cc	/^double EbwAmSgmm2Updater::UpdateM(const MleAmSgmm2Accs &num_accs,$/;"	f	class:kaldi::EbwAmSgmm2Updater
UpdateN	sgmm2/estimate-am-sgmm2-ebw.cc	/^double EbwAmSgmm2Updater::UpdateN(const MleAmSgmm2Accs &num_accs,$/;"	f	class:kaldi::EbwAmSgmm2Updater
UpdatePhoneVectors	sgmm2/estimate-am-sgmm2-ebw.cc	/^double EbwAmSgmm2Updater::UpdatePhoneVectors(const MleAmSgmm2Accs &num_accs,$/;"	f	class:kaldi::EbwAmSgmm2Updater
UpdatePhoneVectorsInternal	sgmm2/estimate-am-sgmm2-ebw.cc	/^void EbwAmSgmm2Updater::UpdatePhoneVectorsInternal($/;"	f	class:kaldi::EbwAmSgmm2Updater
UpdateSubstateWeights	sgmm2/estimate-am-sgmm2-ebw.cc	/^double EbwAmSgmm2Updater::UpdateSubstateWeights($/;"	f	class:kaldi::EbwAmSgmm2Updater
UpdateU	sgmm2/estimate-am-sgmm2-ebw.cc	/^double EbwAmSgmm2Updater::UpdateU(const MleAmSgmm2Accs &num_accs,$/;"	f	class:kaldi::EbwAmSgmm2Updater
UpdateVars	sgmm2/estimate-am-sgmm2-ebw.cc	/^double EbwAmSgmm2Updater::UpdateVars(const MleAmSgmm2Accs &num_accs,$/;"	f	class:kaldi::EbwAmSgmm2Updater
UpdateW	sgmm2/estimate-am-sgmm2-ebw.cc	/^double EbwAmSgmm2Updater::UpdateW(const MleAmSgmm2Accs &num_accs,$/;"	f	class:kaldi::EbwAmSgmm2Updater
auxf_impr_	sgmm2/estimate-am-sgmm2-ebw.cc	/^  double auxf_impr_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
auxf_impr_ptr_	sgmm2/estimate-am-sgmm2-ebw.cc	/^  double *auxf_impr_ptr_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
den_accs_	sgmm2/estimate-am-sgmm2-ebw.cc	/^  const MleAmSgmm2Accs &den_accs_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
kaldi	sgmm2/estimate-am-sgmm2-ebw.cc	/^namespace kaldi {$/;"	n	file:
model_	sgmm2/estimate-am-sgmm2-ebw.cc	/^  AmSgmm2 *model_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
num_accs_	sgmm2/estimate-am-sgmm2-ebw.cc	/^  const MleAmSgmm2Accs &num_accs_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
operator ()	sgmm2/estimate-am-sgmm2-ebw.cc	/^  inline void operator() () {$/;"	f	class:kaldi::EbwUpdatePhoneVectorsClass
updater_	sgmm2/estimate-am-sgmm2-ebw.cc	/^  const EbwAmSgmm2Updater *updater_;$/;"	m	class:kaldi::EbwUpdatePhoneVectorsClass	file:
~EbwUpdatePhoneVectorsClass	sgmm2/estimate-am-sgmm2-ebw.cc	/^  ~EbwUpdatePhoneVectorsClass() {$/;"	f	class:kaldi::EbwUpdatePhoneVectorsClass
EbwAmSgmm2Options	sgmm2/estimate-am-sgmm2-ebw.h	/^  EbwAmSgmm2Options() {$/;"	f	struct:kaldi::EbwAmSgmm2Options
EbwAmSgmm2Options	sgmm2/estimate-am-sgmm2-ebw.h	/^struct EbwAmSgmm2Options {$/;"	s	namespace:kaldi
EbwAmSgmm2Updater	sgmm2/estimate-am-sgmm2-ebw.h	/^  EbwAmSgmm2Updater() {}  \/\/ Prevent unconfigured updater.$/;"	f	class:kaldi::EbwAmSgmm2Updater
EbwAmSgmm2Updater	sgmm2/estimate-am-sgmm2-ebw.h	/^  explicit EbwAmSgmm2Updater(const EbwAmSgmm2Options &options):$/;"	f	class:kaldi::EbwAmSgmm2Updater
EbwAmSgmm2Updater	sgmm2/estimate-am-sgmm2-ebw.h	/^class EbwAmSgmm2Updater {$/;"	c	namespace:kaldi
KALDI_SGMM2_ESTIMATE_AM_SGMM2_EBW_H_	sgmm2/estimate-am-sgmm2-ebw.h	21;"	d
Register	sgmm2/estimate-am-sgmm2-ebw.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::EbwAmSgmm2Options
cov_min_value	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat cov_min_value; \/\/\/< E.g. 0.5-- the maximum any eigenvalue of a covariance$/;"	m	struct:kaldi::EbwAmSgmm2Options
epsilon	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat epsilon;  \/\/\/< very small value used in SolveQuadraticProblem; workaround$/;"	m	struct:kaldi::EbwAmSgmm2Options
gamma_j_	sgmm2/estimate-am-sgmm2-ebw.h	/^  Vector<double> gamma_j_;  \/\/\/< State occupancies$/;"	m	class:kaldi::EbwAmSgmm2Updater
kaldi	sgmm2/estimate-am-sgmm2-ebw.h	/^namespace kaldi {$/;"	n
lrate_M	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat lrate_M; \/\/\/< Learning rate used in updating M-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmm2Options
lrate_N	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat lrate_N; \/\/\/< Learning rate used in updating N-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmm2Options
lrate_Sigma	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat lrate_Sigma; \/\/\/< Learning rate used in updating Sigma-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmm2Options
lrate_u	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat lrate_u; \/\/\/< Learning rate used in updating u-- default 1.0$/;"	m	struct:kaldi::EbwAmSgmm2Options
lrate_v	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat lrate_v; \/\/\/< Learning rate used in updating v-- default 0.5$/;"	m	struct:kaldi::EbwAmSgmm2Options
lrate_w	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat lrate_w; \/\/\/< Learning rate used in updating w-- default 1.0$/;"	m	struct:kaldi::EbwAmSgmm2Options
max_cond	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat max_cond; \/\/\/< large value used in SolveQuadraticProblem.$/;"	m	struct:kaldi::EbwAmSgmm2Options
max_impr_u	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat max_impr_u; \/\/\/< Maximum improvement\/frame allowed for u [0.25, carried over from ML update.]$/;"	m	struct:kaldi::EbwAmSgmm2Options
min_substate_weight	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat min_substate_weight; \/\/\/< Minimum allowed weight in a sub-state.$/;"	m	struct:kaldi::EbwAmSgmm2Options
options_	sgmm2/estimate-am-sgmm2-ebw.h	/^  EbwAmSgmm2Options options_;$/;"	m	class:kaldi::EbwAmSgmm2Updater
tau_M	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat tau_M; \/\/\/<  Smoothing constant for the M quantities (phone-subspace projections)$/;"	m	struct:kaldi::EbwAmSgmm2Options
tau_N	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat tau_N; \/\/\/<  Smoothing constant for the N quantities (speaker-subspace projections)$/;"	m	struct:kaldi::EbwAmSgmm2Options
tau_Sigma	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat tau_Sigma; \/\/\/< Tau value for smoothing covariance-matrices Sigma.$/;"	m	struct:kaldi::EbwAmSgmm2Options
tau_c	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat tau_c;  \/\/\/< Tau value for smoothing substate weights (c)$/;"	m	struct:kaldi::EbwAmSgmm2Options
tau_u	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat tau_u;  \/\/\/< Tau value for smoothing update of speaker-subspace weight projectsions (u)$/;"	m	struct:kaldi::EbwAmSgmm2Options
tau_v	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat tau_v; \/\/\/<  Smoothing constant for updates of sub-state vectors v_{jm}$/;"	m	struct:kaldi::EbwAmSgmm2Options
tau_w	sgmm2/estimate-am-sgmm2-ebw.h	/^  BaseFloat tau_w;  \/\/\/< Tau value for smoothing update of phonetic-subspace weight projectsions (w)$/;"	m	struct:kaldi::EbwAmSgmm2Options
TestSgmm2AccsIO	sgmm2/estimate-am-sgmm2-test.cc	/^void TestSgmm2AccsIO(const AmSgmm2 &sgmm,$/;"	f
UnitTestEstimateSgmm2	sgmm2/estimate-am-sgmm2-test.cc	/^void UnitTestEstimateSgmm2() {$/;"	f
main	sgmm2/estimate-am-sgmm2-test.cc	/^int main() {$/;"	f
Accumulate	sgmm2/estimate-am-sgmm2.cc	/^BaseFloat MleAmSgmm2Accs::Accumulate(const AmSgmm2 &model,$/;"	f	class:kaldi::MleAmSgmm2Accs
Accumulate	sgmm2/estimate-am-sgmm2.cc	/^MleSgmm2SpeakerAccs::Accumulate(const AmSgmm2 &model,$/;"	f	class:kaldi::MleSgmm2SpeakerAccs
AccumulateFromPosteriors	sgmm2/estimate-am-sgmm2.cc	/^BaseFloat MleAmSgmm2Accs::AccumulateFromPosteriors($/;"	f	class:kaldi::MleAmSgmm2Accs
AccumulateFromPosteriors	sgmm2/estimate-am-sgmm2.cc	/^MleSgmm2SpeakerAccs::AccumulateFromPosteriors(const AmSgmm2 &model,$/;"	f	class:kaldi::MleSgmm2SpeakerAccs
Check	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Accs::Check(const AmSgmm2 &model,$/;"	f	class:kaldi::MleAmSgmm2Accs
Clear	sgmm2/estimate-am-sgmm2.cc	/^void MleSgmm2SpeakerAccs::Clear() {$/;"	f	class:kaldi::MleSgmm2SpeakerAccs
CommitStatsForSpk	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Accs::CommitStatsForSpk(const AmSgmm2 &model,$/;"	f	class:kaldi::MleAmSgmm2Accs
ComputeLogA	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::ComputeLogA(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
ComputeMPrior	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::ComputeMPrior(AmSgmm2 *model) {$/;"	f	class:kaldi::MleAmSgmm2Updater
ComputeQ	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::ComputeQ(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
ComputeSMeans	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::ComputeSMeans(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
GetStateOccupancies	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Accs::GetStateOccupancies(Vector<BaseFloat> *occs) const {$/;"	f	class:kaldi::MleAmSgmm2Accs
H_	sgmm2/estimate-am-sgmm2.cc	/^  const std::vector<SpMatrix<double> > &H_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
MapUpdateM	sgmm2/estimate-am-sgmm2.cc	/^double MleAmSgmm2Updater::MapUpdateM(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
MleSgmm2SpeakerAccs	sgmm2/estimate-am-sgmm2.cc	/^MleSgmm2SpeakerAccs::MleSgmm2SpeakerAccs(const AmSgmm2 &model,$/;"	f	class:kaldi::MleSgmm2SpeakerAccs
Read	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Accs::Read(std::istream &in_stream, bool binary,$/;"	f	class:kaldi::MleAmSgmm2Accs
RenormalizeN	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::RenormalizeN(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
RenormalizeV	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::RenormalizeV(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
ResizeAccumulators	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Accs::ResizeAccumulators(const AmSgmm2 &model,$/;"	f	class:kaldi::MleAmSgmm2Accs
Update	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::Update(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
Update	sgmm2/estimate-am-sgmm2.cc	/^void MleSgmm2SpeakerAccs::Update(const AmSgmm2 &model,$/;"	f	class:kaldi::MleSgmm2SpeakerAccs
UpdateM	sgmm2/estimate-am-sgmm2.cc	/^double MleAmSgmm2Updater::UpdateM(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
UpdateN	sgmm2/estimate-am-sgmm2.cc	/^double MleAmSgmm2Updater::UpdateN(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
UpdateNoU	sgmm2/estimate-am-sgmm2.cc	/^void MleSgmm2SpeakerAccs::UpdateNoU(Vector<BaseFloat> *v_s,$/;"	f	class:kaldi::MleSgmm2SpeakerAccs
UpdatePhoneVectors	sgmm2/estimate-am-sgmm2.cc	/^double MleAmSgmm2Updater::UpdatePhoneVectors($/;"	f	class:kaldi::MleAmSgmm2Updater
UpdatePhoneVectorsClass	sgmm2/estimate-am-sgmm2.cc	/^  UpdatePhoneVectorsClass(const MleAmSgmm2Updater &updater,$/;"	f	class:kaldi::UpdatePhoneVectorsClass
UpdatePhoneVectorsClass	sgmm2/estimate-am-sgmm2.cc	/^class UpdatePhoneVectorsClass: public MultiThreadable { \/\/ For multi-threaded.$/;"	c	namespace:kaldi	file:
UpdatePhoneVectorsInternal	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::UpdatePhoneVectorsInternal($/;"	f	class:kaldi::MleAmSgmm2Updater
UpdateSubstateWeights	sgmm2/estimate-am-sgmm2.cc	/^double MleAmSgmm2Updater::UpdateSubstateWeights($/;"	f	class:kaldi::MleAmSgmm2Updater
UpdateU	sgmm2/estimate-am-sgmm2.cc	/^double MleAmSgmm2Updater::UpdateU(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
UpdateVars	sgmm2/estimate-am-sgmm2.cc	/^double MleAmSgmm2Updater::UpdateVars(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
UpdateW	sgmm2/estimate-am-sgmm2.cc	/^double MleAmSgmm2Updater::UpdateW(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
UpdateWGetStats	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Updater::UpdateWGetStats(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::MleAmSgmm2Updater
UpdateWithU	sgmm2/estimate-am-sgmm2.cc	/^void MleSgmm2SpeakerAccs::UpdateWithU(const AmSgmm2 &model,$/;"	f	class:kaldi::MleSgmm2SpeakerAccs
Write	sgmm2/estimate-am-sgmm2.cc	/^void MleAmSgmm2Accs::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::MleAmSgmm2Accs
accs_	sgmm2/estimate-am-sgmm2.cc	/^  const MleAmSgmm2Accs &accs_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
auxf_impr_	sgmm2/estimate-am-sgmm2.cc	/^  double auxf_impr_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
auxf_impr_ptr_	sgmm2/estimate-am-sgmm2.cc	/^  double *auxf_impr_ptr_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
kaldi	sgmm2/estimate-am-sgmm2.cc	/^namespace kaldi {$/;"	n	file:
log_a_	sgmm2/estimate-am-sgmm2.cc	/^  const std::vector<Matrix<double> > &log_a_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
model_	sgmm2/estimate-am-sgmm2.cc	/^  AmSgmm2 *model_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
operator ()	sgmm2/estimate-am-sgmm2.cc	/^  inline void operator() () {$/;"	f	class:kaldi::UpdatePhoneVectorsClass
updater_	sgmm2/estimate-am-sgmm2.cc	/^  const MleAmSgmm2Updater &updater_;$/;"	m	class:kaldi::UpdatePhoneVectorsClass	file:
~MleAmSgmm2Accs	sgmm2/estimate-am-sgmm2.cc	/^MleAmSgmm2Accs::~MleAmSgmm2Accs() {$/;"	f	class:kaldi::MleAmSgmm2Accs
~UpdatePhoneVectorsClass	sgmm2/estimate-am-sgmm2.cc	/^  ~UpdatePhoneVectorsClass() {$/;"	f	class:kaldi::UpdatePhoneVectorsClass
F_i_	sgmm2/estimate-am-sgmm2.h	/^  Matrix<double> F_i_;$/;"	m	class:kaldi::UpdateWClass
F_i_ptr_	sgmm2/estimate-am-sgmm2.h	/^  Matrix<double> *F_i_ptr_;$/;"	m	class:kaldi::UpdateWClass
FeatureDim	sgmm2/estimate-am-sgmm2.h	/^  int32 FeatureDim() const { return feature_dim_; }$/;"	f	class:kaldi::MleAmSgmm2Accs
H_spk_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< SpMatrix<double> > H_spk_;$/;"	m	class:kaldi::MleSgmm2SpeakerAccs
KALDI_SGMM2_ESTIMATE_AM_SGMM2_H_	sgmm2/estimate-am-sgmm2.h	25;"	d
MleAmSgmm2Accs	sgmm2/estimate-am-sgmm2.h	/^  MleAmSgmm2Accs(const AmSgmm2 &model, SgmmUpdateFlagsType flags,$/;"	f	class:kaldi::MleAmSgmm2Accs
MleAmSgmm2Accs	sgmm2/estimate-am-sgmm2.h	/^  explicit MleAmSgmm2Accs(BaseFloat rand_prune = 1.0e-05)$/;"	f	class:kaldi::MleAmSgmm2Accs
MleAmSgmm2Accs	sgmm2/estimate-am-sgmm2.h	/^class MleAmSgmm2Accs {$/;"	c	namespace:kaldi
MleAmSgmm2Options	sgmm2/estimate-am-sgmm2.h	/^  MleAmSgmm2Options() {$/;"	f	struct:kaldi::MleAmSgmm2Options
MleAmSgmm2Options	sgmm2/estimate-am-sgmm2.h	/^struct MleAmSgmm2Options {$/;"	s	namespace:kaldi
MleAmSgmm2Updater	sgmm2/estimate-am-sgmm2.h	/^  MleAmSgmm2Updater() {}  \/\/ Prevent unconfigured updater.$/;"	f	class:kaldi::MleAmSgmm2Updater
MleAmSgmm2Updater	sgmm2/estimate-am-sgmm2.h	/^  explicit MleAmSgmm2Updater(const MleAmSgmm2Options &options)$/;"	f	class:kaldi::MleAmSgmm2Updater
MleAmSgmm2Updater	sgmm2/estimate-am-sgmm2.h	/^class MleAmSgmm2Updater {$/;"	c	namespace:kaldi
MleSgmm2SpeakerAccs	sgmm2/estimate-am-sgmm2.h	/^class MleSgmm2SpeakerAccs {$/;"	c	namespace:kaldi
NtransSigmaInv_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< Matrix<double> > NtransSigmaInv_;$/;"	m	class:kaldi::MleSgmm2SpeakerAccs
NumGauss	sgmm2/estimate-am-sgmm2.h	/^  int32 NumGauss() const { return num_gaussians_; }$/;"	f	class:kaldi::MleAmSgmm2Accs
NumGroups	sgmm2/estimate-am-sgmm2.h	/^  int32 NumGroups() const { return num_groups_; } \/\/ returns J1$/;"	f	class:kaldi::MleAmSgmm2Accs
NumPdfs	sgmm2/estimate-am-sgmm2.h	/^  int32 NumPdfs() const { return num_pdfs_; } \/\/ returns J2$/;"	f	class:kaldi::MleAmSgmm2Accs
PhoneSpaceDim	sgmm2/estimate-am-sgmm2.h	/^  int32 PhoneSpaceDim() const { return phn_space_dim_; }$/;"	f	class:kaldi::MleAmSgmm2Accs
R_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< SpMatrix<double> > R_;$/;"	m	class:kaldi::MleAmSgmm2Accs
Reconfigure	sgmm2/estimate-am-sgmm2.h	/^  void Reconfigure(const MleAmSgmm2Options &options) {$/;"	f	class:kaldi::MleAmSgmm2Updater
Register	sgmm2/estimate-am-sgmm2.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::MleAmSgmm2Options
S_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< SpMatrix<double> > S_;$/;"	m	class:kaldi::MleAmSgmm2Accs
U_	sgmm2/estimate-am-sgmm2.h	/^  std::vector<SpMatrix<double> > U_;$/;"	m	class:kaldi::MleAmSgmm2Accs
UpdateWClass	sgmm2/estimate-am-sgmm2.h	/^  UpdateWClass(const MleAmSgmm2Accs &accs,$/;"	f	class:kaldi::UpdateWClass
UpdateWClass	sgmm2/estimate-am-sgmm2.h	/^class UpdateWClass: public MultiThreadable {$/;"	c	namespace:kaldi
Y_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< Matrix<double> > Y_;$/;"	m	class:kaldi::MleAmSgmm2Accs
Z_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< Matrix<double> > Z_;$/;"	m	class:kaldi::MleAmSgmm2Accs
a_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< Matrix<double> > a_;$/;"	m	class:kaldi::MleAmSgmm2Accs
a_s_	sgmm2/estimate-am-sgmm2.h	/^  Vector<double> a_s_;$/;"	m	class:kaldi::MleAmSgmm2Accs
a_s_	sgmm2/estimate-am-sgmm2.h	/^  Vector<double> a_s_;$/;"	m	class:kaldi::MleSgmm2SpeakerAccs
accs_	sgmm2/estimate-am-sgmm2.h	/^  const MleAmSgmm2Accs &accs_;$/;"	m	class:kaldi::UpdateWClass
check_v	sgmm2/estimate-am-sgmm2.h	/^  bool check_v;$/;"	m	struct:kaldi::MleAmSgmm2Options
cov_diag_ratio	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat cov_diag_ratio;$/;"	m	struct:kaldi::MleAmSgmm2Options
cov_floor	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat cov_floor;$/;"	m	struct:kaldi::MleAmSgmm2Options
epsilon	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat epsilon;  \/\/\/< very small value used to prevent SVD crashing.$/;"	m	struct:kaldi::MleAmSgmm2Options
feature_dim_	sgmm2/estimate-am-sgmm2.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmm2Accs
full_col_cov	sgmm2/estimate-am-sgmm2.h	/^  bool full_col_cov;  \/\/\/< Estimate col covariance instead of using I$/;"	m	struct:kaldi::MleAmSgmm2Options
full_row_cov	sgmm2/estimate-am-sgmm2.h	/^  bool full_row_cov;  \/\/\/< Estimate row covariance instead of using I$/;"	m	struct:kaldi::MleAmSgmm2Options
g_i_	sgmm2/estimate-am-sgmm2.h	/^  Matrix<double> g_i_;$/;"	m	class:kaldi::UpdateWClass
g_i_ptr_	sgmm2/estimate-am-sgmm2.h	/^  Matrix<double> *g_i_ptr_;$/;"	m	class:kaldi::UpdateWClass
gamma_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< Matrix<double> > gamma_;$/;"	m	class:kaldi::MleAmSgmm2Accs
gamma_c_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< Vector<double> > gamma_c_;$/;"	m	class:kaldi::MleAmSgmm2Accs
gamma_s_	sgmm2/estimate-am-sgmm2.h	/^  Vector<double> gamma_s_;$/;"	m	class:kaldi::MleAmSgmm2Accs
gamma_s_	sgmm2/estimate-am-sgmm2.h	/^  Vector<double> gamma_s_;$/;"	m	class:kaldi::MleSgmm2SpeakerAccs
kaldi	sgmm2/estimate-am-sgmm2.h	/^namespace kaldi {$/;"	n
log_a_	sgmm2/estimate-am-sgmm2.h	/^  const std::vector<Matrix<double> > &log_a_;$/;"	m	class:kaldi::UpdateWClass
map_M_prior_iters	sgmm2/estimate-am-sgmm2.h	/^  int map_M_prior_iters;  \/\/\/< num of iterations to update the prior of M$/;"	m	struct:kaldi::MleAmSgmm2Options
max_cond	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat max_cond;$/;"	m	struct:kaldi::MleAmSgmm2Options
max_impr_u	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat max_impr_u; \/\/\/< max improvement per frame allowed in update of u.$/;"	m	struct:kaldi::MleAmSgmm2Options
model_	sgmm2/estimate-am-sgmm2.h	/^  const AmSgmm2 &model_;$/;"	m	class:kaldi::UpdateWClass
num_gaussians_	sgmm2/estimate-am-sgmm2.h	/^  int32 num_gaussians_, num_pdfs_, num_groups_;  \/\/\/< Other model specifications$/;"	m	class:kaldi::MleAmSgmm2Accs
num_groups_	sgmm2/estimate-am-sgmm2.h	/^  int32 num_gaussians_, num_pdfs_, num_groups_;  \/\/\/< Other model specifications$/;"	m	class:kaldi::MleAmSgmm2Accs
num_pdfs_	sgmm2/estimate-am-sgmm2.h	/^  int32 num_gaussians_, num_pdfs_, num_groups_;  \/\/\/< Other model specifications$/;"	m	class:kaldi::MleAmSgmm2Accs
operator ()	sgmm2/estimate-am-sgmm2.h	/^  inline void operator() () {$/;"	f	class:kaldi::UpdateWClass
options_	sgmm2/estimate-am-sgmm2.h	/^  MleAmSgmm2Options options_;$/;"	m	class:kaldi::MleAmSgmm2Updater
phn_space_dim_	sgmm2/estimate-am-sgmm2.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmm2Accs
rand_prune_	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat rand_prune_;$/;"	m	class:kaldi::MleAmSgmm2Accs
rand_prune_	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat rand_prune_;$/;"	m	class:kaldi::MleSgmm2SpeakerAccs
renormalize_N	sgmm2/estimate-am-sgmm2.h	/^  bool renormalize_N;  \/\/ Renormalize the speaker space.$/;"	m	struct:kaldi::MleAmSgmm2Options
renormalize_V	sgmm2/estimate-am-sgmm2.h	/^  bool renormalize_V;  \/\/ Renormalize the phonetic space.$/;"	m	struct:kaldi::MleAmSgmm2Options
spk_space_dim_	sgmm2/estimate-am-sgmm2.h	/^  int32 feature_dim_, phn_space_dim_, spk_space_dim_;$/;"	m	class:kaldi::MleAmSgmm2Accs
t_	sgmm2/estimate-am-sgmm2.h	/^  Matrix<double> t_;$/;"	m	class:kaldi::MleAmSgmm2Accs
tau_c	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat tau_c;$/;"	m	struct:kaldi::MleAmSgmm2Options
tau_map_M	sgmm2/estimate-am-sgmm2.h	/^  BaseFloat tau_map_M;  \/\/\/< For MAP update of the phonetic subspace M$/;"	m	struct:kaldi::MleAmSgmm2Options
tot_like_	sgmm2/estimate-am-sgmm2.h	/^  double tot_like_;$/;"	m	class:kaldi::UpdateWClass
tot_like_ptr_	sgmm2/estimate-am-sgmm2.h	/^  double *tot_like_ptr_;$/;"	m	class:kaldi::UpdateWClass
total_frames_	sgmm2/estimate-am-sgmm2.h	/^  double total_frames_, total_like_;$/;"	m	class:kaldi::MleAmSgmm2Accs
total_like_	sgmm2/estimate-am-sgmm2.h	/^  double total_frames_, total_like_;$/;"	m	class:kaldi::MleAmSgmm2Accs
use_sequential_weight_update	sgmm2/estimate-am-sgmm2.h	/^  bool use_sequential_weight_update;$/;"	m	struct:kaldi::MleAmSgmm2Options
w_	sgmm2/estimate-am-sgmm2.h	/^  const Matrix<double> &w_;$/;"	m	class:kaldi::UpdateWClass
weight_projections_iters	sgmm2/estimate-am-sgmm2.h	/^  int weight_projections_iters;$/;"	m	struct:kaldi::MleAmSgmm2Options
y_	sgmm2/estimate-am-sgmm2.h	/^  std::vector< Matrix<double> > y_;$/;"	m	class:kaldi::MleAmSgmm2Accs
y_s_	sgmm2/estimate-am-sgmm2.h	/^  Vector<double> y_s_;$/;"	m	class:kaldi::MleSgmm2SpeakerAccs
~UpdateWClass	sgmm2/estimate-am-sgmm2.h	/^  ~UpdateWClass() {$/;"	f	class:kaldi::UpdateWClass
ApplyFmllrXform	sgmm2/fmllr-sgmm2-test.cc	/^void ApplyFmllrXform(const kaldi::VectorBase<BaseFloat> &in,$/;"	f
TestSgmm2Fmllr	sgmm2/fmllr-sgmm2-test.cc	/^void TestSgmm2Fmllr() {$/;"	f
TestSgmm2FmllrAccsIO	sgmm2/fmllr-sgmm2-test.cc	/^void TestSgmm2FmllrAccsIO(const AmSgmm2 &sgmm,$/;"	f
TestSgmm2FmllrSubspace	sgmm2/fmllr-sgmm2-test.cc	/^void TestSgmm2FmllrSubspace(const AmSgmm2 &sgmm,$/;"	f
main	sgmm2/fmllr-sgmm2-test.cc	/^int main() {$/;"	f
Accumulate	sgmm2/fmllr-sgmm2.cc	/^BaseFloat FmllrSgmm2Accs::Accumulate(const AmSgmm2 &model,$/;"	f	class:kaldi::FmllrSgmm2Accs
AccumulateForFmllrSubspace	sgmm2/fmllr-sgmm2.cc	/^void FmllrSgmm2Accs::AccumulateForFmllrSubspace(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::FmllrSgmm2Accs
AccumulateFromPosteriors	sgmm2/fmllr-sgmm2.cc	/^void FmllrSgmm2Accs::AccumulateFromPosteriors($/;"	f	class:kaldi::FmllrSgmm2Accs
ApplyHessianXformToGradient	sgmm2/fmllr-sgmm2.cc	/^static void ApplyHessianXformToGradient(const Sgmm2FmllrGlobalParams &globals,$/;"	f	namespace:kaldi
ApplyInvHessianXformToChange	sgmm2/fmllr-sgmm2.cc	/^static void ApplyInvHessianXformToChange(const Sgmm2FmllrGlobalParams &globals,$/;"	f	namespace:kaldi
ApplyInvPreXformToChange	sgmm2/fmllr-sgmm2.cc	/^static void ApplyInvPreXformToChange(const Sgmm2FmllrGlobalParams &globals,$/;"	f	namespace:kaldi
ApplyPreXformToGradient	sgmm2/fmllr-sgmm2.cc	/^static void ApplyPreXformToGradient(const Sgmm2FmllrGlobalParams &globals,$/;"	f	namespace:kaldi
CalcFmllrStepSize	sgmm2/fmllr-sgmm2.cc	/^static BaseFloat CalcFmllrStepSize(const AffineXformStats &stats,$/;"	f	namespace:kaldi
EstimateSgmm2FmllrSubspace	sgmm2/fmllr-sgmm2.cc	/^void EstimateSgmm2FmllrSubspace(const SpMatrix<double> &fmllr_grad_scatter,$/;"	f	namespace:kaldi
FmllrObjGradient	sgmm2/fmllr-sgmm2.cc	/^BaseFloat FmllrSgmm2Accs::FmllrObjGradient(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::FmllrSgmm2Accs
Init	sgmm2/fmllr-sgmm2.cc	/^void FmllrSgmm2Accs::Init(int32 dim, int32 num_gaussians) {$/;"	f	class:kaldi::FmllrSgmm2Accs
Read	sgmm2/fmllr-sgmm2.cc	/^void FmllrSgmm2Accs::Read(std::istream &in, bool binary, bool add) {$/;"	f	class:kaldi::FmllrSgmm2Accs
Read	sgmm2/fmllr-sgmm2.cc	/^void Sgmm2FmllrGlobalParams::Read(std::istream &in, bool binary) {$/;"	f	class:kaldi::Sgmm2FmllrGlobalParams
Update	sgmm2/fmllr-sgmm2.cc	/^bool FmllrSgmm2Accs::Update(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::FmllrSgmm2Accs
Write	sgmm2/fmllr-sgmm2.cc	/^void FmllrSgmm2Accs::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::FmllrSgmm2Accs
Write	sgmm2/fmllr-sgmm2.cc	/^void Sgmm2FmllrGlobalParams::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::Sgmm2FmllrGlobalParams
kaldi	sgmm2/fmllr-sgmm2.cc	/^namespace kaldi {$/;"	n	file:
Dim	sgmm2/fmllr-sgmm2.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::FmllrSgmm2Accs
FmllrSgmm2Accs	sgmm2/fmllr-sgmm2.h	/^  FmllrSgmm2Accs() : dim_(-1) {}$/;"	f	class:kaldi::FmllrSgmm2Accs
FmllrSgmm2Accs	sgmm2/fmllr-sgmm2.h	/^class FmllrSgmm2Accs {$/;"	c	namespace:kaldi
HasBasis	sgmm2/fmllr-sgmm2.h	/^  bool HasBasis() const { return fmllr_bases_.size() != 0; }$/;"	f	class:kaldi::Sgmm2FmllrGlobalParams
Init	sgmm2/fmllr-sgmm2.h	/^inline void Sgmm2FmllrGlobalParams::Init(const AmSgmm2 &sgmm,$/;"	f	class:kaldi::Sgmm2FmllrGlobalParams
IsEmpty	sgmm2/fmllr-sgmm2.h	/^  bool IsEmpty() const {$/;"	f	class:kaldi::Sgmm2FmllrGlobalParams
KALDI_SGMM2_FMLLR_SGMM2_H_	sgmm2/fmllr-sgmm2.h	23;"	d
Register	sgmm2/fmllr-sgmm2.h	/^inline void Sgmm2FmllrConfig::Register(OptionsItf *po) {$/;"	f	class:kaldi::Sgmm2FmllrConfig
SetZero	sgmm2/fmllr-sgmm2.h	/^  void SetZero() { stats_.SetZero(); }$/;"	f	class:kaldi::FmllrSgmm2Accs
Sgmm2FmllrConfig	sgmm2/fmllr-sgmm2.h	/^  Sgmm2FmllrConfig() {$/;"	f	struct:kaldi::Sgmm2FmllrConfig
Sgmm2FmllrConfig	sgmm2/fmllr-sgmm2.h	/^struct Sgmm2FmllrConfig {$/;"	s	namespace:kaldi
Sgmm2FmllrGlobalParams	sgmm2/fmllr-sgmm2.h	/^class Sgmm2FmllrGlobalParams {$/;"	c	namespace:kaldi
bases_occ_scale	sgmm2/fmllr-sgmm2.h	/^  BaseFloat bases_occ_scale;$/;"	m	struct:kaldi::Sgmm2FmllrConfig
dim_	sgmm2/fmllr-sgmm2.h	/^  int32 dim_;  \/\/\/< Dimension of feature vectors$/;"	m	class:kaldi::FmllrSgmm2Accs
fmllr_bases_	sgmm2/fmllr-sgmm2.h	/^  std::vector< Matrix<BaseFloat> > fmllr_bases_;$/;"	m	class:kaldi::Sgmm2FmllrGlobalParams
fmllr_iters	sgmm2/fmllr-sgmm2.h	/^  int32 fmllr_iters;  \/\/\/< Number of iterations in FMLLR estimation.$/;"	m	struct:kaldi::Sgmm2FmllrConfig
fmllr_min_count	sgmm2/fmllr-sgmm2.h	/^  BaseFloat fmllr_min_count;$/;"	m	struct:kaldi::Sgmm2FmllrConfig
fmllr_min_count_basis	sgmm2/fmllr-sgmm2.h	/^  BaseFloat fmllr_min_count_basis;$/;"	m	struct:kaldi::Sgmm2FmllrConfig
fmllr_min_count_full	sgmm2/fmllr-sgmm2.h	/^  BaseFloat fmllr_min_count_full;$/;"	m	struct:kaldi::Sgmm2FmllrConfig
inv_xform_	sgmm2/fmllr-sgmm2.h	/^  Matrix<BaseFloat> inv_xform_;$/;"	m	class:kaldi::Sgmm2FmllrGlobalParams
kaldi	sgmm2/fmllr-sgmm2.h	/^namespace kaldi {$/;"	n
mean_scatter_	sgmm2/fmllr-sgmm2.h	/^  Vector<BaseFloat> mean_scatter_;$/;"	m	class:kaldi::Sgmm2FmllrGlobalParams
num_fmllr_bases	sgmm2/fmllr-sgmm2.h	/^  int32 num_fmllr_bases;$/;"	m	struct:kaldi::Sgmm2FmllrConfig
pre_xform_	sgmm2/fmllr-sgmm2.h	/^  Matrix<BaseFloat> pre_xform_;$/;"	m	class:kaldi::Sgmm2FmllrGlobalParams
stats	sgmm2/fmllr-sgmm2.h	/^  const AffineXformStats &stats() const { return stats_; }$/;"	f	class:kaldi::FmllrSgmm2Accs
stats_	sgmm2/fmllr-sgmm2.h	/^  AffineXformStats stats_;  \/\/\/< Accumulated stats$/;"	m	class:kaldi::FmllrSgmm2Accs
step_iters	sgmm2/fmllr-sgmm2.h	/^  int32 step_iters;  \/\/\/< Iterations to find optimal FMLLR step size.$/;"	m	struct:kaldi::Sgmm2FmllrConfig
~FmllrSgmm2Accs	sgmm2/fmllr-sgmm2.h	/^  ~FmllrSgmm2Accs() {}$/;"	f	class:kaldi::FmllrSgmm2Accs
ADDLIBS	sgmm2bin/Makefile	/^ADDLIBS =  ..\/decoder\/kaldi-decoder.a ..\/lat\/kaldi-lat.a ..\/feat\/kaldi-feat.a \\$/;"	m
BINFILES	sgmm2bin/Makefile	/^BINFILES = sgmm2-init sgmm2-gselect sgmm2-acc-stats sgmm2-est sgmm2-sum-accs \\$/;"	m
EXTRA_CXXFLAGS	sgmm2bin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	sgmm2bin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	sgmm2bin/Makefile	/^TESTFILES =$/;"	m
main	sgmm2bin/sgmm2-acc-stats-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-acc-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-acc-stats2.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-align-compiled.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-comp-prexform.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-est-ebw.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	sgmm2bin/sgmm2-est-fmllr.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	sgmm2bin/sgmm2-est-fmllr.cc	/^namespace kaldi {$/;"	n	file:
main	sgmm2bin/sgmm2-est-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	sgmm2bin/sgmm2-est-spkvecs-gpost.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	sgmm2bin/sgmm2-est-spkvecs-gpost.cc	/^namespace kaldi {$/;"	n	file:
main	sgmm2bin/sgmm2-est-spkvecs-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	sgmm2bin/sgmm2-est-spkvecs.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	sgmm2bin/sgmm2-est-spkvecs.cc	/^namespace kaldi {$/;"	n	file:
main	sgmm2bin/sgmm2-est-spkvecs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-est.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-gselect.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-init.cc	/^int main(int argc, char *argv[]) {$/;"	f
ProcessUtterance	sgmm2bin/sgmm2-latgen-faster-parallel.cc	/^void ProcessUtterance(const AmSgmm2 &am_sgmm,$/;"	f	namespace:kaldi
kaldi	sgmm2bin/sgmm2-latgen-faster-parallel.cc	/^namespace kaldi {$/;"	n	file:
main	sgmm2bin/sgmm2-latgen-faster-parallel.cc	/^int main(int argc, char *argv[]) {$/;"	f
ProcessUtterance	sgmm2bin/sgmm2-latgen-faster.cc	/^bool ProcessUtterance(LatticeFasterDecoder &decoder,$/;"	f	namespace:kaldi
kaldi	sgmm2bin/sgmm2-latgen-faster.cc	/^namespace kaldi {$/;"	n	file:
main	sgmm2bin/sgmm2-latgen-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-post-to-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-project.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-rescore-lattice.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmm2bin/sgmm2-sum-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	sgmmbin/Makefile	/^ADDLIBS = ..\/decoder\/kaldi-decoder.a ..\/lat\/kaldi-lat.a  ..\/feat\/kaldi-feat.a \\$/;"	m
BINFILES	sgmmbin/Makefile	/^BINFILES = init-ubm sgmm-align-compiled sgmm-acc-stats-ali \\$/;"	m
EXTRA_CXXFLAGS	sgmmbin/Makefile	/^EXTRA_CXXFLAGS = -Wno-sign-compare$/;"	m
OBJFILES	sgmmbin/Makefile	/^OBJFILES =$/;"	m
TESTFILES	sgmmbin/Makefile	/^TESTFILES =$/;"	m
main	sgmmbin/init-ubm.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-acc-fmllrbasis-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-acc-stats-ali.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-acc-stats-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-acc-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-acc-stats2.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-acc-tree-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-align-compiled.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-build-tree.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-calc-distances.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-cluster-phones.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-comp-prexform.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-copy.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-decode-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-est-ebw.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	sgmmbin/sgmm-est-fmllr-gpost.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	sgmmbin/sgmm-est-fmllr-gpost.cc	/^namespace kaldi {$/;"	n	file:
main	sgmmbin/sgmm-est-fmllr-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	sgmmbin/sgmm-est-fmllr.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	sgmmbin/sgmm-est-fmllr.cc	/^namespace kaldi {$/;"	n	file:
main	sgmmbin/sgmm-est-fmllr.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-est-fmllrbasis.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-est-multi.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	sgmmbin/sgmm-est-spkvecs-gpost.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	sgmmbin/sgmm-est-spkvecs-gpost.cc	/^namespace kaldi {$/;"	n	file:
main	sgmmbin/sgmm-est-spkvecs-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
AccumulateForUtterance	sgmmbin/sgmm-est-spkvecs.cc	/^void AccumulateForUtterance(const Matrix<BaseFloat> &feats,$/;"	f	namespace:kaldi
kaldi	sgmmbin/sgmm-est-spkvecs.cc	/^namespace kaldi {$/;"	n	file:
main	sgmmbin/sgmm-est-spkvecs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-est.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-gselect.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-info.cc	/^int main(int argc, char *argv[]) {$/;"	f
InitAndOutputSgmm	sgmmbin/sgmm-init-from-tree-stats.cc	/^void InitAndOutputSgmm(const HmmTopology &topo,$/;"	f	namespace:kaldi
kaldi	sgmmbin/sgmm-init-from-tree-stats.cc	/^namespace kaldi {$/;"	n	file:
main	sgmmbin/sgmm-init-from-tree-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-init.cc	/^int main(int argc, char *argv[]) {$/;"	f
ProcessUtterance	sgmmbin/sgmm-latgen-faster.cc	/^bool ProcessUtterance(LatticeFasterDecoder &decoder,$/;"	f	namespace:kaldi
kaldi	sgmmbin/sgmm-latgen-faster.cc	/^namespace kaldi {$/;"	n	file:
main	sgmmbin/sgmm-latgen-faster.cc	/^int main(int argc, char *argv[]) {$/;"	f
ProcessUtterance	sgmmbin/sgmm-latgen-simple.cc	/^bool ProcessUtterance(LatticeSimpleDecoder &decoder,$/;"	f	namespace:kaldi
kaldi	sgmmbin/sgmm-latgen-simple.cc	/^namespace kaldi {$/;"	n	file:
main	sgmmbin/sgmm-latgen-simple.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-mixup.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-normalize.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-post-to-gpost.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-rescore-lattice.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-sum-accs.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-sum-tree-stats.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	sgmmbin/sgmm-write-ubm.cc	/^int main(int argc, char *argv[]) {$/;"	f
ADDLIBS	thread/Makefile	/^ADDLIBS = ..\/matrix\/kaldi-matrix.a ..\/base\/kaldi-base.a$/;"	m
LIBNAME	thread/Makefile	/^LIBNAME = kaldi-thread$/;"	m
OBJFILES	thread/Makefile	/^OBJFILES =  kaldi-thread.o kaldi-mutex.o kaldi-semaphore.o kaldi-barrier.o$/;"	m
TESTFILES	thread/Makefile	/^TESTFILES = kaldi-thread-test kaldi-task-sequence-test$/;"	m
Barrier	thread/kaldi-barrier.cc	/^Barrier::Barrier(int32 threshold)$/;"	f	class:kaldi::Barrier
SetThreshold	thread/kaldi-barrier.cc	/^void Barrier::SetThreshold(int32 thr) {$/;"	f	class:kaldi::Barrier
Wait	thread/kaldi-barrier.cc	/^int32 Barrier::Wait() {$/;"	f	class:kaldi::Barrier
kaldi	thread/kaldi-barrier.cc	/^namespace kaldi {$/;"	n	file:
~Barrier	thread/kaldi-barrier.cc	/^Barrier::~Barrier() {$/;"	f	class:kaldi::Barrier
Barrier	thread/kaldi-barrier.h	/^class Barrier {$/;"	c	namespace:kaldi
KALDI_THREAD_KALDI_BARRIER_H_	thread/kaldi-barrier.h	22;"	d
counter_	thread/kaldi-barrier.h	/^  int32                 counter_;   \/\/\/< number of threads we wait for$/;"	m	class:kaldi::Barrier
cv_	thread/kaldi-barrier.h	/^  pthread_cond_t      cv_;        \/\/\/< Conditional variable to make barrier wait$/;"	m	class:kaldi::Barrier
cycle_	thread/kaldi-barrier.h	/^  int32                 cycle_;     \/\/\/< cycle flag to keep synchronized$/;"	m	class:kaldi::Barrier
kaldi	thread/kaldi-barrier.h	/^namespace kaldi {$/;"	n
mutex_	thread/kaldi-barrier.h	/^  pthread_mutex_t     mutex_;     \/\/\/< Mutex which control access to barrier $/;"	m	class:kaldi::Barrier
threshold_	thread/kaldi-barrier.h	/^  int32                 threshold_; \/\/\/< size of thread-group$/;"	m	class:kaldi::Barrier
Lock	thread/kaldi-mutex.cc	/^void Mutex::Lock() {$/;"	f	class:kaldi::Mutex
Mutex	thread/kaldi-mutex.cc	/^Mutex::Mutex() {$/;"	f	class:kaldi::Mutex
TryLock	thread/kaldi-mutex.cc	/^bool Mutex::TryLock() {$/;"	f	class:kaldi::Mutex
Unlock	thread/kaldi-mutex.cc	/^void Mutex::Unlock() {$/;"	f	class:kaldi::Mutex
kaldi	thread/kaldi-mutex.cc	/^namespace kaldi {$/;"	n	file:
~Mutex	thread/kaldi-mutex.cc	/^Mutex::~Mutex() {$/;"	f	class:kaldi::Mutex
KALDI_THREAD_KALDI_MUTEX_H_	thread/kaldi-mutex.h	22;"	d
Mutex	thread/kaldi-mutex.h	/^class Mutex {$/;"	c	namespace:kaldi
kaldi	thread/kaldi-mutex.h	/^namespace kaldi {$/;"	n
mutex_	thread/kaldi-mutex.h	/^  pthread_mutex_t mutex_;$/;"	m	class:kaldi::Mutex
Semaphore	thread/kaldi-semaphore.cc	/^Semaphore::Semaphore(int32 initValue) {$/;"	f	class:kaldi::Semaphore
Signal	thread/kaldi-semaphore.cc	/^void Semaphore::Signal() {$/;"	f	class:kaldi::Semaphore
TryWait	thread/kaldi-semaphore.cc	/^bool Semaphore::TryWait() {$/;"	f	class:kaldi::Semaphore
Wait	thread/kaldi-semaphore.cc	/^void Semaphore::Wait() {$/;"	f	class:kaldi::Semaphore
kaldi	thread/kaldi-semaphore.cc	/^namespace kaldi {$/;"	n	file:
~Semaphore	thread/kaldi-semaphore.cc	/^Semaphore::~Semaphore() {$/;"	f	class:kaldi::Semaphore
GetValue	thread/kaldi-semaphore.h	/^  int32 GetValue() {$/;"	f	class:kaldi::Semaphore
KALDI_THREAD_KALDI_SEMAPHORE_H_	thread/kaldi-semaphore.h	22;"	d
Semaphore	thread/kaldi-semaphore.h	/^class Semaphore {$/;"	c	namespace:kaldi
cond_	thread/kaldi-semaphore.h	/^  pthread_cond_t cond_;$/;"	m	class:kaldi::Semaphore
counter_	thread/kaldi-semaphore.h	/^  int32 counter_; \/\/\/< the semaphore counter, 0 means block on Wait() $/;"	m	class:kaldi::Semaphore
kaldi	thread/kaldi-semaphore.h	/^namespace kaldi {$/;"	n
mutex_	thread/kaldi-semaphore.h	/^  pthread_mutex_t mutex_;$/;"	m	class:kaldi::Semaphore
MyTaskClass	thread/kaldi-task-sequence-test.cc	/^  MyTaskClass(int32 i, std::vector<int32> *vec):$/;"	f	class:kaldi::MyTaskClass
MyTaskClass	thread/kaldi-task-sequence-test.cc	/^class MyTaskClass { \/\/ spins for a while, then outputs a pre-given integer.$/;"	c	namespace:kaldi	file:
TestTaskSequencer	thread/kaldi-task-sequence-test.cc	/^void TestTaskSequencer() {$/;"	f	namespace:kaldi
done_	thread/kaldi-task-sequence-test.cc	/^  bool done_;$/;"	m	class:kaldi::MyTaskClass	file:
i_	thread/kaldi-task-sequence-test.cc	/^  int32 i_;$/;"	m	class:kaldi::MyTaskClass	file:
kaldi	thread/kaldi-task-sequence-test.cc	/^namespace kaldi {$/;"	n	file:
main	thread/kaldi-task-sequence-test.cc	/^int main() {$/;"	f
operator ()	thread/kaldi-task-sequence-test.cc	/^  void operator() () {$/;"	f	class:kaldi::MyTaskClass
vec_	thread/kaldi-task-sequence-test.cc	/^  std::vector<int32> *vec_;$/;"	m	class:kaldi::MyTaskClass	file:
~MyTaskClass	thread/kaldi-task-sequence-test.cc	/^  ~MyTaskClass() {$/;"	f	class:kaldi::MyTaskClass
KALDI_THREAD_KALDI_TASK_SEQUENCE_H_	thread/kaldi-task-sequence.h	21;"	d
Register	thread/kaldi-task-sequence.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::TaskSequencerConfig
Run	thread/kaldi-task-sequence.h	/^  void Run(C *c) {$/;"	f	class:kaldi::TaskSequencer
RunTask	thread/kaldi-task-sequence.h	/^  static void* RunTask(void *input) {$/;"	f	class:kaldi::TaskSequencer
RunTaskArgsList	thread/kaldi-task-sequence.h	/^    RunTaskArgsList(TaskSequencer *me, C *c, RunTaskArgsList *tail):$/;"	f	struct:kaldi::TaskSequencer::RunTaskArgsList
RunTaskArgsList	thread/kaldi-task-sequence.h	/^  struct RunTaskArgsList {$/;"	s	class:kaldi::TaskSequencer
TaskSequencer	thread/kaldi-task-sequence.h	/^  TaskSequencer(const TaskSequencerConfig &config):$/;"	f	class:kaldi::TaskSequencer
TaskSequencer	thread/kaldi-task-sequence.h	/^class TaskSequencer {$/;"	c	namespace:kaldi
TaskSequencerConfig	thread/kaldi-task-sequence.h	/^  TaskSequencerConfig(): num_threads(1), num_threads_total(0)  { }$/;"	f	struct:kaldi::TaskSequencerConfig
TaskSequencerConfig	thread/kaldi-task-sequence.h	/^struct TaskSequencerConfig {$/;"	s	namespace:kaldi
Wait	thread/kaldi-task-sequence.h	/^  void Wait() { \/\/ You call this at the end if it's more convenient$/;"	f	class:kaldi::TaskSequencer
c	thread/kaldi-task-sequence.h	/^    C *c; \/\/ Clist element of the task we're expected$/;"	m	struct:kaldi::TaskSequencer::RunTaskArgsList
kaldi	thread/kaldi-task-sequence.h	/^namespace kaldi {$/;"	n
me	thread/kaldi-task-sequence.h	/^    TaskSequencer *me; \/\/ Think of this as a "this" pointer.$/;"	m	struct:kaldi::TaskSequencer::RunTaskArgsList
num_threads	thread/kaldi-task-sequence.h	/^  int32 num_threads;$/;"	m	struct:kaldi::TaskSequencerConfig
num_threads_total	thread/kaldi-task-sequence.h	/^  int32 num_threads_total;$/;"	m	struct:kaldi::TaskSequencerConfig
tail	thread/kaldi-task-sequence.h	/^    RunTaskArgsList *tail;$/;"	m	struct:kaldi::TaskSequencer::RunTaskArgsList
thread	thread/kaldi-task-sequence.h	/^    pthread_t thread;$/;"	m	struct:kaldi::TaskSequencer::RunTaskArgsList
thread_list_	thread/kaldi-task-sequence.h	/^  RunTaskArgsList *thread_list_; $/;"	m	class:kaldi::TaskSequencer
threads_avail_	thread/kaldi-task-sequence.h	/^  Semaphore threads_avail_; \/\/ Initialized to the number of threads we are$/;"	m	class:kaldi::TaskSequencer
tot_threads_avail_	thread/kaldi-task-sequence.h	/^  Semaphore tot_threads_avail_; \/\/ We use this semaphore to ensure we don't$/;"	m	class:kaldi::TaskSequencer
~TaskSequencer	thread/kaldi-task-sequence.h	/^  ~TaskSequencer() {$/;"	f	class:kaldi::TaskSequencer
MyThreadClass	thread/kaldi-thread-test.cc	/^  MyThreadClass() { }  \/\/ Disallow empty constructor.$/;"	f	class:kaldi::MyThreadClass	file:
MyThreadClass	thread/kaldi-thread-test.cc	/^  MyThreadClass(int32 max_to_count, int32 *i): max_to_count_(max_to_count),$/;"	f	class:kaldi::MyThreadClass
MyThreadClass	thread/kaldi-thread-test.cc	/^class MyThreadClass {  \/\/ Sums up integers from 0 to max_to_count-1.$/;"	c	namespace:kaldi	file:
TestMutex	thread/kaldi-thread-test.cc	/^void TestMutex() {$/;"	f	namespace:kaldi
TestThreads	thread/kaldi-thread-test.cc	/^void TestThreads() {$/;"	f	namespace:kaldi
iptr_	thread/kaldi-thread-test.cc	/^  int32 *iptr_;$/;"	m	class:kaldi::MyThreadClass	file:
kaldi	thread/kaldi-thread-test.cc	/^namespace kaldi {$/;"	n	file:
main	thread/kaldi-thread-test.cc	/^int main() {$/;"	f
max_to_count_	thread/kaldi-thread-test.cc	/^  int32 max_to_count_;$/;"	m	class:kaldi::MyThreadClass	file:
num_threads_	thread/kaldi-thread-test.cc	/^  int32 num_threads_;$/;"	m	class:kaldi::MyThreadClass	file:
operator ()	thread/kaldi-thread-test.cc	/^  void operator() () {$/;"	f	class:kaldi::MyThreadClass
private_counter_	thread/kaldi-thread-test.cc	/^  int32 private_counter_;$/;"	m	class:kaldi::MyThreadClass	file:
run	thread/kaldi-thread-test.cc	/^  static void *run(void *c_in) {$/;"	f	class:kaldi::MyThreadClass
thread_id_	thread/kaldi-thread-test.cc	/^  int32 thread_id_;  \/\/ 0 <= thread_number < num_threads$/;"	m	class:kaldi::MyThreadClass	file:
~MyThreadClass	thread/kaldi-thread-test.cc	/^  ~MyThreadClass() {$/;"	f	class:kaldi::MyThreadClass
g_num_threads	thread/kaldi-thread.cc	/^int32 g_num_threads = 8;  \/\/ Initialize this global variable.$/;"	m	namespace:kaldi	file:
kaldi	thread/kaldi-thread.cc	/^namespace kaldi {$/;"	n	file:
~MultiThreadable	thread/kaldi-thread.cc	/^MultiThreadable::~MultiThreadable() {$/;"	f	class:kaldi::MultiThreadable
ExampleClass	thread/kaldi-thread.h	/^class ExampleClass: public MultiThreadable {$/;"	c	namespace:kaldi
KALDI_PTHREAD_PTR	thread/kaldi-thread.h	25;"	d
KALDI_PTHREAD_PTR	thread/kaldi-thread.h	27;"	d
KALDI_THREAD_KALDI_THREAD_H_	thread/kaldi-thread.h	22;"	d
MultiThreadable	thread/kaldi-thread.h	/^class MultiThreadable {$/;"	c	namespace:kaldi
MultiThreader	thread/kaldi-thread.h	/^  MultiThreader(int32 num_threads,$/;"	f	class:kaldi::MultiThreader
MultiThreader	thread/kaldi-thread.h	/^class MultiThreader {$/;"	c	namespace:kaldi
RunMultiThreaded	thread/kaldi-thread.h	/^template<class C> void RunMultiThreaded(const C &c_in) {$/;"	f	namespace:kaldi
cvec_	thread/kaldi-thread.h	/^  std::vector<C> cvec_;$/;"	m	class:kaldi::MultiThreader
kaldi	thread/kaldi-thread.h	/^namespace kaldi {$/;"	n
num_threads_	thread/kaldi-thread.h	/^  int32 num_threads_;$/;"	m	class:kaldi::MultiThreadable
operator ()	thread/kaldi-thread.h	/^  void operator() () {$/;"	f	class:kaldi::ExampleClass
run	thread/kaldi-thread.h	/^  static void *run(void *m_in) {$/;"	f	class:kaldi::MultiThreadable
thread_id_	thread/kaldi-thread.h	/^  int32 thread_id_;  \/\/ 0 <= thread_id_ < num_threads_$/;"	m	class:kaldi::MultiThreadable
threads_	thread/kaldi-thread.h	/^  pthread_t *threads_;$/;"	m	class:kaldi::MultiThreader
~ExampleClass	thread/kaldi-thread.h	/^  ~ExampleClass() {$/;"	f	class:kaldi::ExampleClass
~MultiThreader	thread/kaldi-thread.h	/^  ~MultiThreader() {$/;"	f	class:kaldi::MultiThreader
ADDLIBS	transform/Makefile	/^ADDLIBS = ..\/gmm\/kaldi-gmm.a ..\/thread\/kaldi-thread.a ..\/tree\/kaldi-tree.a \\$/;"	m
LIBNAME	transform/Makefile	/^LIBNAME = kaldi-transform$/;"	m
OBJFILES	transform/Makefile	/^OBJFILES = regression-tree.o regtree-mllr-diag-gmm.o lda-estimate.o \\$/;"	m
TESTFILES	transform/Makefile	/^TESTFILES = regtree-fmllr-diag-gmm-test lda-estimate-test \\$/;"	m
AccuGradientScatter	transform/basis-fmllr-diag-gmm.cc	/^void BasisFmllrAccus::AccuGradientScatter($/;"	f	class:kaldi::BasisFmllrAccus
CalBasisFmllrStepSize	transform/basis-fmllr-diag-gmm.cc	/^BaseFloat CalBasisFmllrStepSize(const AffineXformStats &spk_stats,$/;"	f	namespace:kaldi
ComputeAmDiagPrecond	transform/basis-fmllr-diag-gmm.cc	/^void BasisFmllrEstimate::ComputeAmDiagPrecond(const AmDiagGmm &am_gmm,$/;"	f	class:kaldi::BasisFmllrEstimate
ComputeTransform	transform/basis-fmllr-diag-gmm.cc	/^double BasisFmllrEstimate::ComputeTransform($/;"	f	class:kaldi::BasisFmllrEstimate
EstimateFmllrBasis	transform/basis-fmllr-diag-gmm.cc	/^void BasisFmllrEstimate::EstimateFmllrBasis($/;"	f	class:kaldi::BasisFmllrEstimate
Read	transform/basis-fmllr-diag-gmm.cc	/^void BasisFmllrAccus::Read(std::istream &is, bool binary,$/;"	f	class:kaldi::BasisFmllrAccus
Read	transform/basis-fmllr-diag-gmm.cc	/^void BasisFmllrEstimate::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::BasisFmllrEstimate
ResizeAccus	transform/basis-fmllr-diag-gmm.cc	/^void BasisFmllrAccus::ResizeAccus(int32 dim) {$/;"	f	class:kaldi::BasisFmllrAccus
Write	transform/basis-fmllr-diag-gmm.cc	/^void BasisFmllrAccus::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::BasisFmllrAccus
Write	transform/basis-fmllr-diag-gmm.cc	/^void BasisFmllrEstimate::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::BasisFmllrEstimate
kaldi	transform/basis-fmllr-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
BasisFmllrAccus	transform/basis-fmllr-diag-gmm.h	/^  BasisFmllrAccus() { }$/;"	f	class:kaldi::BasisFmllrAccus
BasisFmllrAccus	transform/basis-fmllr-diag-gmm.h	/^  explicit BasisFmllrAccus(int32 dim) {$/;"	f	class:kaldi::BasisFmllrAccus
BasisFmllrAccus	transform/basis-fmllr-diag-gmm.h	/^class BasisFmllrAccus {$/;"	c	namespace:kaldi
BasisFmllrEstimate	transform/basis-fmllr-diag-gmm.h	/^  BasisFmllrEstimate(): dim_(0), basis_size_(0) { }$/;"	f	class:kaldi::BasisFmllrEstimate
BasisFmllrEstimate	transform/basis-fmllr-diag-gmm.h	/^  explicit BasisFmllrEstimate(int32 dim) {$/;"	f	class:kaldi::BasisFmllrEstimate
BasisFmllrEstimate	transform/basis-fmllr-diag-gmm.h	/^class BasisFmllrEstimate {$/;"	c	namespace:kaldi
BasisFmllrOptions	transform/basis-fmllr-diag-gmm.h	/^  BasisFmllrOptions(): num_iters(10), size_scale(0.2), min_count(50.0), step_size_iters(3) { }$/;"	f	struct:kaldi::BasisFmllrOptions
BasisFmllrOptions	transform/basis-fmllr-diag-gmm.h	/^struct BasisFmllrOptions {$/;"	s	namespace:kaldi
BasisSize	transform/basis-fmllr-diag-gmm.h	/^  int32 BasisSize() const { return basis_size_; }$/;"	f	class:kaldi::BasisFmllrEstimate
Dim	transform/basis-fmllr-diag-gmm.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::BasisFmllrEstimate
KALDI_TRANSFORM_BASIS_FMLLR_DIAG_GMM_H_	transform/basis-fmllr-diag-gmm.h	24;"	d
Register	transform/basis-fmllr-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::BasisFmllrOptions
basis_size_	transform/basis-fmllr-diag-gmm.h	/^  int32 basis_size_;$/;"	m	class:kaldi::BasisFmllrEstimate
beta_	transform/basis-fmllr-diag-gmm.h	/^  double beta_;$/;"	m	class:kaldi::BasisFmllrAccus
dim_	transform/basis-fmllr-diag-gmm.h	/^  int32 dim_;$/;"	m	class:kaldi::BasisFmllrAccus
dim_	transform/basis-fmllr-diag-gmm.h	/^  int32 dim_;$/;"	m	class:kaldi::BasisFmllrEstimate
fmllr_basis_	transform/basis-fmllr-diag-gmm.h	/^  std::vector< Matrix<BaseFloat> > fmllr_basis_;$/;"	m	class:kaldi::BasisFmllrEstimate
grad_scatter_	transform/basis-fmllr-diag-gmm.h	/^  SpMatrix<BaseFloat> grad_scatter_;$/;"	m	class:kaldi::BasisFmllrAccus
kaldi	transform/basis-fmllr-diag-gmm.h	/^namespace kaldi {$/;"	n
min_count	transform/basis-fmllr-diag-gmm.h	/^  BaseFloat min_count;$/;"	m	struct:kaldi::BasisFmllrOptions
num_iters	transform/basis-fmllr-diag-gmm.h	/^  int32 num_iters;$/;"	m	struct:kaldi::BasisFmllrOptions
size_scale	transform/basis-fmllr-diag-gmm.h	/^  BaseFloat size_scale; \/\/ how many basis elements we add for each new frame.$/;"	m	struct:kaldi::BasisFmllrOptions
step_size_iters	transform/basis-fmllr-diag-gmm.h	/^  int32 step_size_iters;$/;"	m	struct:kaldi::BasisFmllrOptions
AccCmvnStats	transform/cmvn.cc	/^void AccCmvnStats(const MatrixBase<BaseFloat> &feats,$/;"	f	namespace:kaldi
AccCmvnStats	transform/cmvn.cc	/^void AccCmvnStats(const VectorBase<BaseFloat> &feats, BaseFloat weight, MatrixBase<double> *stats) {$/;"	f	namespace:kaldi
ApplyCmvn	transform/cmvn.cc	/^void ApplyCmvn(const MatrixBase<double> &stats,$/;"	f	namespace:kaldi
ApplyCmvnReverse	transform/cmvn.cc	/^void ApplyCmvnReverse(const MatrixBase<double> &stats,$/;"	f	namespace:kaldi
FakeStatsForSomeDims	transform/cmvn.cc	/^void FakeStatsForSomeDims(const std::vector<int32> &dims,$/;"	f	namespace:kaldi
InitCmvnStats	transform/cmvn.cc	/^void InitCmvnStats(int32 dim, Matrix<double> *stats) {$/;"	f	namespace:kaldi
kaldi	transform/cmvn.cc	/^namespace kaldi {$/;"	n	file:
KALDI_TRANSFORM_CMVN_H_	transform/cmvn.h	23;"	d
kaldi	transform/cmvn.h	/^namespace kaldi {$/;"	n
CopyFromAffineXformStats	transform/compressed-transform-stats.cc	/^void CompressedAffineXformStats::CopyFromAffineXformStats($/;"	f	class:kaldi::CompressedAffineXformStats
CopyToAffineXformStats	transform/compressed-transform-stats.cc	/^void CompressedAffineXformStats::CopyToAffineXformStats($/;"	f	class:kaldi::CompressedAffineXformStats
ExtractOneG	transform/compressed-transform-stats.cc	/^void CompressedAffineXformStats::ExtractOneG(const SubVector<double> &linearized,$/;"	f	class:kaldi::CompressedAffineXformStats
PrepareOneG	transform/compressed-transform-stats.cc	/^void CompressedAffineXformStats::PrepareOneG(const SpMatrix<double> &Gi,$/;"	f	class:kaldi::CompressedAffineXformStats
Read	transform/compressed-transform-stats.cc	/^void CompressedAffineXformStats::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CompressedAffineXformStats
Write	transform/compressed-transform-stats.cc	/^void CompressedAffineXformStats::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CompressedAffineXformStats
kaldi	transform/compressed-transform-stats.cc	/^namespace kaldi {$/;"	n	file:
CompressedAffineXformStats	transform/compressed-transform-stats.h	/^  CompressedAffineXformStats(): beta_(0.0) { }$/;"	f	class:kaldi::CompressedAffineXformStats
CompressedAffineXformStats	transform/compressed-transform-stats.h	/^  CompressedAffineXformStats(const AffineXformStats &input) {$/;"	f	class:kaldi::CompressedAffineXformStats
CompressedAffineXformStats	transform/compressed-transform-stats.h	/^class CompressedAffineXformStats {$/;"	c	namespace:kaldi
G_	transform/compressed-transform-stats.h	/^  CompressedMatrix G_; \/\/ This dim x [ 1 + (0.5*(dim+1)*(dim+2))] matrix$/;"	m	class:kaldi::CompressedAffineXformStats
KALDI_TRANSFORM_COMPRESSED_TRANSFORM_STATS_H_	transform/compressed-transform-stats.h	22;"	d
K_	transform/compressed-transform-stats.h	/^  Matrix<float> K_;$/;"	m	class:kaldi::CompressedAffineXformStats
beta_	transform/compressed-transform-stats.h	/^  float beta_;$/;"	m	class:kaldi::CompressedAffineXformStats
kaldi	transform/compressed-transform-stats.h	/^namespace kaldi {$/;"	n
ComputeGconsts	transform/decodable-am-diag-gmm-regtree.cc	/^static void ComputeGconsts(const VectorBase<BaseFloat> &weights,$/;"	f	namespace:kaldi
GetXformedGconsts	transform/decodable-am-diag-gmm-regtree.cc	/^const Vector<BaseFloat>& DecodableAmDiagGmmRegtreeMllr::GetXformedGconsts($/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
GetXformedMeanInvVars	transform/decodable-am-diag-gmm-regtree.cc	/^const Matrix<BaseFloat>& DecodableAmDiagGmmRegtreeMllr::GetXformedMeanInvVars($/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
InitCache	transform/decodable-am-diag-gmm-regtree.cc	/^void DecodableAmDiagGmmRegtreeMllr::InitCache() {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
LogLikelihoodZeroBased	transform/decodable-am-diag-gmm-regtree.cc	/^BaseFloat DecodableAmDiagGmmRegtreeFmllr::LogLikelihoodZeroBased(int32 frame,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
LogLikelihoodZeroBased	transform/decodable-am-diag-gmm-regtree.cc	/^BaseFloat DecodableAmDiagGmmRegtreeMllr::LogLikelihoodZeroBased(int32 frame,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi	transform/decodable-am-diag-gmm-regtree.cc	/^namespace kaldi {$/;"	n	file:
~DecodableAmDiagGmmRegtreeMllr	transform/decodable-am-diag-gmm-regtree.cc	/^DecodableAmDiagGmmRegtreeMllr::~DecodableAmDiagGmmRegtreeMllr() {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
DecodableAmDiagGmmRegtreeFmllr	transform/decodable-am-diag-gmm-regtree.h	/^  DecodableAmDiagGmmRegtreeFmllr(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
DecodableAmDiagGmmRegtreeFmllr	transform/decodable-am-diag-gmm-regtree.h	/^class DecodableAmDiagGmmRegtreeFmllr: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
DecodableAmDiagGmmRegtreeMllr	transform/decodable-am-diag-gmm-regtree.h	/^  DecodableAmDiagGmmRegtreeMllr(const AmDiagGmm &am,$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
DecodableAmDiagGmmRegtreeMllr	transform/decodable-am-diag-gmm-regtree.h	/^class DecodableAmDiagGmmRegtreeMllr: public DecodableAmDiagGmmUnmapped {$/;"	c	namespace:kaldi
KALDI_TRANSFORM_DECODABLE_AM_DIAG_GMM_REGTREE_H_	transform/decodable-am-diag-gmm-regtree.h	23;"	d
LogLikelihood	transform/decodable-am-diag-gmm-regtree.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
LogLikelihood	transform/decodable-am-diag-gmm-regtree.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 tid) {$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
NumFramesReady	transform/decodable-am-diag-gmm-regtree.h	/^  virtual int32 NumFramesReady() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
NumFramesReady	transform/decodable-am-diag-gmm-regtree.h	/^  virtual int32 NumFramesReady() { return feature_matrix_.NumRows(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
NumIndices	transform/decodable-am-diag-gmm-regtree.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
NumIndices	transform/decodable-am-diag-gmm-regtree.h	/^  virtual int32 NumIndices() const { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
TransModel	transform/decodable-am-diag-gmm-regtree.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
TransModel	transform/decodable-am-diag-gmm-regtree.h	/^  const TransitionModel *TransModel() { return &trans_model_; }$/;"	f	class:kaldi::DecodableAmDiagGmmRegtreeMllr
data_squared_	transform/decodable-am-diag-gmm-regtree.h	/^  Vector<BaseFloat> data_squared_;  \/\/\/< Cached for fast likelihood calculation$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
fmllr_xform_	transform/decodable-am-diag-gmm-regtree.h	/^  const RegtreeFmllrDiagGmm &fmllr_xform_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
is_cached_	transform/decodable-am-diag-gmm-regtree.h	/^  std::vector<bool> is_cached_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
kaldi	transform/decodable-am-diag-gmm-regtree.h	/^namespace kaldi {$/;"	n
logdets_	transform/decodable-am-diag-gmm-regtree.h	/^  Vector<BaseFloat> logdets_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
mllr_xform_	transform/decodable-am-diag-gmm-regtree.h	/^  const RegtreeMllrDiagGmm &mllr_xform_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
regtree_	transform/decodable-am-diag-gmm-regtree.h	/^  const RegressionTree &regtree_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
regtree_	transform/decodable-am-diag-gmm-regtree.h	/^  const RegressionTree &regtree_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
scale_	transform/decodable-am-diag-gmm-regtree.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
scale_	transform/decodable-am-diag-gmm-regtree.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
trans_model_	transform/decodable-am-diag-gmm-regtree.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
trans_model_	transform/decodable-am-diag-gmm-regtree.h	/^  const TransitionModel &trans_model_;  \/\/ for transition-id to pdf mapping$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
valid_logdets_	transform/decodable-am-diag-gmm-regtree.h	/^  bool valid_logdets_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
xformed_data_	transform/decodable-am-diag-gmm-regtree.h	/^  std::vector< Vector<BaseFloat> > xformed_data_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
xformed_data_squared_	transform/decodable-am-diag-gmm-regtree.h	/^  std::vector< Vector<BaseFloat> > xformed_data_squared_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeFmllr
xformed_gconsts_	transform/decodable-am-diag-gmm-regtree.h	/^  std::vector< Vector<BaseFloat>* > xformed_gconsts_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
xformed_mean_invvars_	transform/decodable-am-diag-gmm-regtree.h	/^  std::vector< Matrix<BaseFloat>* > xformed_mean_invvars_;$/;"	m	class:kaldi::DecodableAmDiagGmmRegtreeMllr
InitRandomGmm	transform/fmllr-diag-gmm-test.cc	/^void InitRandomGmm (DiagGmm *gmm_in) {$/;"	f	namespace:kaldi
UnitTestFmllrDiagGmm	transform/fmllr-diag-gmm-test.cc	/^void UnitTestFmllrDiagGmm() {$/;"	f	namespace:kaldi
UnitTestFmllrDiagGmmDiagonal	transform/fmllr-diag-gmm-test.cc	/^void UnitTestFmllrDiagGmmDiagonal() {$/;"	f	namespace:kaldi
UnitTestFmllrDiagGmmOffset	transform/fmllr-diag-gmm-test.cc	/^void UnitTestFmllrDiagGmmOffset() {$/;"	f	namespace:kaldi
kaldi	transform/fmllr-diag-gmm-test.cc	/^namespace kaldi {$/;"	n	file:
main	transform/fmllr-diag-gmm-test.cc	/^int main() {$/;"	f
AccumulateForGmm	transform/fmllr-diag-gmm.cc	/^BaseFloat FmllrDiagGmmAccs::AccumulateForGmm(const DiagGmm &pdf,$/;"	f	class:kaldi::FmllrDiagGmmAccs
AccumulateForGmmPreselect	transform/fmllr-diag-gmm.cc	/^BaseFloat FmllrDiagGmmAccs::AccumulateForGmmPreselect($/;"	f	class:kaldi::FmllrDiagGmmAccs
AccumulateFromPosteriors	transform/fmllr-diag-gmm.cc	/^void FmllrDiagGmmAccs:: AccumulateFromPosteriors($/;"	f	class:kaldi::FmllrDiagGmmAccs
AccumulateFromPosteriorsPreselect	transform/fmllr-diag-gmm.cc	/^void FmllrDiagGmmAccs:: AccumulateFromPosteriorsPreselect($/;"	f	class:kaldi::FmllrDiagGmmAccs
ApplyFeatureTransformToStats	transform/fmllr-diag-gmm.cc	/^void ApplyFeatureTransformToStats(const MatrixBase<BaseFloat> &xform,$/;"	f	namespace:kaldi
ApplyModelTransformToStats	transform/fmllr-diag-gmm.cc	/^void ApplyModelTransformToStats(const MatrixBase<BaseFloat> &xform,$/;"	f	namespace:kaldi
CommitSingleFrameStats	transform/fmllr-diag-gmm.cc	/^void FmllrDiagGmmAccs::CommitSingleFrameStats() {$/;"	f	class:kaldi::FmllrDiagGmmAccs
ComputeFmllrMatrixDiagGmm	transform/fmllr-diag-gmm.cc	/^BaseFloat ComputeFmllrMatrixDiagGmm(const MatrixBase<BaseFloat> &in_xform,$/;"	f	namespace:kaldi
ComputeFmllrMatrixDiagGmmDiagonal	transform/fmllr-diag-gmm.cc	/^BaseFloat ComputeFmllrMatrixDiagGmmDiagonal(const MatrixBase<BaseFloat> &in_xform,$/;"	f	namespace:kaldi
ComputeFmllrMatrixDiagGmmFull	transform/fmllr-diag-gmm.cc	/^BaseFloat ComputeFmllrMatrixDiagGmmFull(const MatrixBase<BaseFloat> &in_xform,$/;"	f	namespace:kaldi
ComputeFmllrMatrixDiagGmmOffset	transform/fmllr-diag-gmm.cc	/^BaseFloat ComputeFmllrMatrixDiagGmmOffset(const MatrixBase<BaseFloat> &in_xform,$/;"	f	namespace:kaldi
DataHasChanged	transform/fmllr-diag-gmm.cc	/^bool FmllrDiagGmmAccs::DataHasChanged(const VectorBase<BaseFloat> &data) const {$/;"	f	class:kaldi::FmllrDiagGmmAccs
FmllrAuxFuncDiagGmm	transform/fmllr-diag-gmm.cc	/^double FmllrAuxFuncDiagGmm(const MatrixBase<double> &xform,$/;"	f	namespace:kaldi
FmllrAuxFuncDiagGmm	transform/fmllr-diag-gmm.cc	/^float FmllrAuxFuncDiagGmm(const MatrixBase<float> &xform,$/;"	f	namespace:kaldi
FmllrAuxfGradient	transform/fmllr-diag-gmm.cc	/^BaseFloat FmllrAuxfGradient(const MatrixBase<BaseFloat> &xform,$/;"	f	namespace:kaldi
FmllrDiagGmmAccs	transform/fmllr-diag-gmm.cc	/^FmllrDiagGmmAccs::FmllrDiagGmmAccs(const DiagGmm &gmm,$/;"	f	class:kaldi::FmllrDiagGmmAccs
FmllrInnerUpdate	transform/fmllr-diag-gmm.cc	/^void FmllrInnerUpdate(SpMatrix<double> &inv_G,$/;"	f	namespace:kaldi
Init	transform/fmllr-diag-gmm.cc	/^void FmllrDiagGmmAccs::SingleFrameStats::Init(int32 dim) {$/;"	f	class:kaldi::FmllrDiagGmmAccs::SingleFrameStats
InitSingleFrameStats	transform/fmllr-diag-gmm.cc	/^void FmllrDiagGmmAccs::InitSingleFrameStats(const VectorBase<BaseFloat> &data) {$/;"	f	class:kaldi::FmllrDiagGmmAccs
Update	transform/fmllr-diag-gmm.cc	/^void FmllrDiagGmmAccs::Update(const FmllrOptions &opts,$/;"	f	class:kaldi::FmllrDiagGmmAccs
kaldi	transform/fmllr-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
ComputeFmllrLogDet	transform/fmllr-diag-gmm.h	/^inline BaseFloat ComputeFmllrLogDet(const Matrix<BaseFloat> &fmllr_mat) {$/;"	f	namespace:kaldi
FmllrDiagGmmAccs	transform/fmllr-diag-gmm.h	/^  FmllrDiagGmmAccs(const FmllrOptions &opts = FmllrOptions()):$/;"	f	class:kaldi::FmllrDiagGmmAccs
FmllrDiagGmmAccs	transform/fmllr-diag-gmm.h	/^  explicit FmllrDiagGmmAccs(const FmllrDiagGmmAccs &other):$/;"	f	class:kaldi::FmllrDiagGmmAccs
FmllrDiagGmmAccs	transform/fmllr-diag-gmm.h	/^  explicit FmllrDiagGmmAccs(int32 dim, const FmllrOptions &opts = FmllrOptions()):$/;"	f	class:kaldi::FmllrDiagGmmAccs
FmllrDiagGmmAccs	transform/fmllr-diag-gmm.h	/^class FmllrDiagGmmAccs: public AffineXformStats {$/;"	c	namespace:kaldi
FmllrOptions	transform/fmllr-diag-gmm.h	/^  FmllrOptions(): update_type("full"), min_count(500.0), num_iters(40) { }$/;"	f	struct:kaldi::FmllrOptions
FmllrOptions	transform/fmllr-diag-gmm.h	/^struct FmllrOptions {$/;"	s	namespace:kaldi
Init	transform/fmllr-diag-gmm.h	/^  void Init(size_t dim) {$/;"	f	class:kaldi::FmllrDiagGmmAccs
InitFmllr	transform/fmllr-diag-gmm.h	/^inline void InitFmllr(int32 dim,$/;"	f	namespace:kaldi
KALDI_TRANSFORM_FMLLR_DIAG_GMM_H_	transform/fmllr-diag-gmm.h	23;"	d
Register	transform/fmllr-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FmllrOptions
SingleFrameStats	transform/fmllr-diag-gmm.h	/^    SingleFrameStats(const SingleFrameStats &s): x(s.x), a(s.a), b(s.b),$/;"	f	struct:kaldi::FmllrDiagGmmAccs::SingleFrameStats
SingleFrameStats	transform/fmllr-diag-gmm.h	/^    SingleFrameStats(int32 dim = 0) { Init(dim); }$/;"	f	struct:kaldi::FmllrDiagGmmAccs::SingleFrameStats
SingleFrameStats	transform/fmllr-diag-gmm.h	/^  struct SingleFrameStats {$/;"	s	class:kaldi::FmllrDiagGmmAccs
a	transform/fmllr-diag-gmm.h	/^    Vector<BaseFloat> a; \/\/ linear term in per-frame auxf; dim is model-dim.$/;"	m	struct:kaldi::FmllrDiagGmmAccs::SingleFrameStats
b	transform/fmllr-diag-gmm.h	/^    Vector<BaseFloat> b; \/\/ quadratic term in per-frame auxf; dim is model-dim.$/;"	m	struct:kaldi::FmllrDiagGmmAccs::SingleFrameStats
count	transform/fmllr-diag-gmm.h	/^    double count;$/;"	m	struct:kaldi::FmllrDiagGmmAccs::SingleFrameStats
kaldi	transform/fmllr-diag-gmm.h	/^namespace kaldi {$/;"	n
min_count	transform/fmllr-diag-gmm.h	/^  BaseFloat min_count;$/;"	m	struct:kaldi::FmllrOptions
num_iters	transform/fmllr-diag-gmm.h	/^  int32 num_iters;$/;"	m	struct:kaldi::FmllrOptions
opts_	transform/fmllr-diag-gmm.h	/^  FmllrOptions opts_;$/;"	m	class:kaldi::FmllrDiagGmmAccs
single_frame_stats_	transform/fmllr-diag-gmm.h	/^  SingleFrameStats single_frame_stats_;$/;"	m	class:kaldi::FmllrDiagGmmAccs
update_type	transform/fmllr-diag-gmm.h	/^  std::string update_type;  \/\/\/< "full", "diag", "offset", "none"$/;"	m	struct:kaldi::FmllrOptions
x	transform/fmllr-diag-gmm.h	/^    Vector<BaseFloat> x; \/\/ dim-dimensional features.$/;"	m	struct:kaldi::FmllrDiagGmmAccs::SingleFrameStats
InitRandomGmm	transform/fmllr-raw-test.cc	/^void InitRandomGmm (DiagGmm *gmm_in) {$/;"	f	namespace:kaldi
UnitTestFmllrRaw	transform/fmllr-raw-test.cc	/^void UnitTestFmllrRaw(bool use_offset) {$/;"	f	namespace:kaldi
kaldi	transform/fmllr-raw-test.cc	/^namespace kaldi {$/;"	n	file:
main	transform/fmllr-raw-test.cc	/^int main() {$/;"	f
AccumulateForGmm	transform/fmllr-raw.cc	/^BaseFloat FmllrRawAccs::AccumulateForGmm(const DiagGmm &gmm,$/;"	f	class:kaldi::FmllrRawAccs
AccumulateFromPosteriors	transform/fmllr-raw.cc	/^void FmllrRawAccs::AccumulateFromPosteriors($/;"	f	class:kaldi::FmllrRawAccs
CommitSingleFrameStats	transform/fmllr-raw.cc	/^void FmllrRawAccs::CommitSingleFrameStats() {$/;"	f	class:kaldi::FmllrRawAccs
ComputeM	transform/fmllr-raw.cc	/^void FmllrRawAccs::ComputeM(std::vector<Matrix<double> > *M) const {$/;"	f	class:kaldi::FmllrRawAccs
ConvertToPerRowStats	transform/fmllr-raw.cc	/^void FmllrRawAccs::ConvertToPerRowStats($/;"	f	class:kaldi::FmllrRawAccs
ConvertToSimpleStats	transform/fmllr-raw.cc	/^void FmllrRawAccs::ConvertToSimpleStats($/;"	f	class:kaldi::FmllrRawAccs
DataHasChanged	transform/fmllr-raw.cc	/^bool FmllrRawAccs::DataHasChanged(const VectorBase<BaseFloat> &data) const {$/;"	f	class:kaldi::FmllrRawAccs
FmllrRawAccs	transform/fmllr-raw.cc	/^FmllrRawAccs::FmllrRawAccs(int32 raw_dim,$/;"	f	class:kaldi::FmllrRawAccs
GetAuxf	transform/fmllr-raw.cc	/^double FmllrRawAccs::GetAuxf(const Vector<double> &simple_linear_stats,$/;"	f	class:kaldi::FmllrRawAccs
InitSingleFrameStats	transform/fmllr-raw.cc	/^void FmllrRawAccs::InitSingleFrameStats(const VectorBase<BaseFloat> &data) {$/;"	f	class:kaldi::FmllrRawAccs
SetZero	transform/fmllr-raw.cc	/^void FmllrRawAccs::SetZero() {$/;"	f	class:kaldi::FmllrRawAccs
Update	transform/fmllr-raw.cc	/^void FmllrRawAccs::Update(const FmllrRawOptions &opts,$/;"	f	class:kaldi::FmllrRawAccs
kaldi	transform/fmllr-raw.cc	/^namespace kaldi {$/;"	n	file:
FmllrRawAccs	transform/fmllr-raw.h	/^  FmllrRawAccs() { }$/;"	f	class:kaldi::FmllrRawAccs
FmllrRawAccs	transform/fmllr-raw.h	/^class FmllrRawAccs {$/;"	c	namespace:kaldi
FmllrRawOptions	transform/fmllr-raw.h	/^  FmllrRawOptions(): min_count(100.0), num_iters(20) { }$/;"	f	struct:kaldi::FmllrRawOptions
FmllrRawOptions	transform/fmllr-raw.h	/^struct FmllrRawOptions {$/;"	s	namespace:kaldi
FullDim	transform/fmllr-raw.h	/^  int32 FullDim() const { return full_transform_.NumRows(); }$/;"	f	class:kaldi::FmllrRawAccs
KALDI_TRANSFORM_FMLLR_RAW_H_	transform/fmllr-raw.h	22;"	d
ModelDim	transform/fmllr-raw.h	/^  int32 ModelDim() const { return model_dim_; }$/;"	f	class:kaldi::FmllrRawAccs
Q_	transform/fmllr-raw.h	/^  Matrix<double> Q_; \/\/ linear stats, indexed [model_dim + 1][full_dim + 1]$/;"	m	class:kaldi::FmllrRawAccs
RawDim	transform/fmllr-raw.h	/^  int32 RawDim() const { return raw_dim_; }$/;"	f	class:kaldi::FmllrRawAccs
Register	transform/fmllr-raw.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FmllrRawOptions
S_	transform/fmllr-raw.h	/^  Matrix<double> S_; \/\/ quadratic stats, indexed$/;"	m	class:kaldi::FmllrRawAccs
SingleFrameStats	transform/fmllr-raw.h	/^  struct SingleFrameStats {$/;"	s	class:kaldi::FmllrRawAccs
SpliceWidth	transform/fmllr-raw.h	/^  int32 SpliceWidth() const { return FullDim() \/ RawDim(); }$/;"	f	class:kaldi::FmllrRawAccs
a	transform/fmllr-raw.h	/^    Vector<double> a; \/\/ linear term in per-frame auxf; dim is model-dim.$/;"	m	struct:kaldi::FmllrRawAccs::SingleFrameStats
b	transform/fmllr-raw.h	/^    Vector<double> b; \/\/ quadratic term in per-frame auxf; dim is model-dim.$/;"	m	struct:kaldi::FmllrRawAccs::SingleFrameStats
count	transform/fmllr-raw.h	/^    double count;$/;"	m	struct:kaldi::FmllrRawAccs::SingleFrameStats
count_	transform/fmllr-raw.h	/^  double count_; \/\/ The data-count.  Note: in accounting for the determinant, we will$/;"	m	class:kaldi::FmllrRawAccs
full_transform_	transform/fmllr-raw.h	/^  Matrix<BaseFloat> full_transform_; \/\/ Does not include any offset term$/;"	m	class:kaldi::FmllrRawAccs
kaldi	transform/fmllr-raw.h	/^namespace kaldi {$/;"	n
min_count	transform/fmllr-raw.h	/^  BaseFloat min_count;$/;"	m	struct:kaldi::FmllrRawOptions
model_dim_	transform/fmllr-raw.h	/^  int32 model_dim_; \/\/ Model dimension$/;"	m	class:kaldi::FmllrRawAccs
num_iters	transform/fmllr-raw.h	/^  int32 num_iters;$/;"	m	struct:kaldi::FmllrRawOptions
raw_dim_	transform/fmllr-raw.h	/^  int32 raw_dim_; \/\/ Raw MFCC dimension.$/;"	m	class:kaldi::FmllrRawAccs
s	transform/fmllr-raw.h	/^    Vector<BaseFloat> s; \/\/ [FullDim() + 1]-dimensional spliced data, plus 1.0$/;"	m	struct:kaldi::FmllrRawAccs::SingleFrameStats
single_frame_stats_	transform/fmllr-raw.h	/^  SingleFrameStats single_frame_stats_;$/;"	m	class:kaldi::FmllrRawAccs
temp_	transform/fmllr-raw.h	/^  SpMatrix<double> temp_; \/\/ [full_dim + 1][full_dim + 1], outer product of s.$/;"	m	class:kaldi::FmllrRawAccs
transform_offset_	transform/fmllr-raw.h	/^  Vector<BaseFloat> transform_offset_; \/\/ The offset term (or zero).$/;"	m	class:kaldi::FmllrRawAccs
transformed_data	transform/fmllr-raw.h	/^    Vector<BaseFloat> transformed_data; \/\/ [FullDim()] Data times full transform, with offset.$/;"	m	struct:kaldi::FmllrRawAccs::SingleFrameStats
GetFeatDeriv	transform/fmpe-test.cc	/^void GetFeatDeriv(const DiagGmm &gmm,$/;"	f	namespace:kaldi
GetGmmLike	transform/fmpe-test.cc	/^BaseFloat GetGmmLike(const DiagGmm &gmm,$/;"	f	namespace:kaldi
TestFmpe	transform/fmpe-test.cc	/^void TestFmpe() {$/;"	f	namespace:kaldi
kaldi	transform/fmpe-test.cc	/^namespace kaldi {$/;"	n	file:
main	transform/fmpe-test.cc	/^int main() {$/;"	f
AccStats	transform/fmpe.cc	/^void Fmpe::AccStats(const MatrixBase<BaseFloat> &feat_in,$/;"	f	class:kaldi::Fmpe
AccumulateChecks	transform/fmpe.cc	/^void FmpeStats::AccumulateChecks(const MatrixBase<BaseFloat> &feats,$/;"	f	class:kaldi::FmpeStats
ApplyC	transform/fmpe.cc	/^void Fmpe::ApplyC(MatrixBase<BaseFloat> *feat_out, bool reverse) const {$/;"	f	class:kaldi::Fmpe
ApplyContext	transform/fmpe.cc	/^void Fmpe::ApplyContext(const MatrixBase<BaseFloat> &intermed_feat,$/;"	f	class:kaldi::Fmpe
ApplyContextReverse	transform/fmpe.cc	/^void Fmpe::ApplyContextReverse(const MatrixBase<BaseFloat> &feat_deriv,$/;"	f	class:kaldi::Fmpe
ApplyProjection	transform/fmpe.cc	/^void Fmpe::ApplyProjection(const MatrixBase<BaseFloat> &feat_in,$/;"	f	class:kaldi::Fmpe
ApplyProjectionReverse	transform/fmpe.cc	/^void Fmpe::ApplyProjectionReverse(const MatrixBase<BaseFloat> &feat_in,$/;"	f	class:kaldi::Fmpe
ComputeAmGmmFeatureDeriv	transform/fmpe.cc	/^BaseFloat ComputeAmGmmFeatureDeriv(const AmDiagGmm &am_gmm,$/;"	f	namespace:kaldi
ComputeC	transform/fmpe.cc	/^void Fmpe::ComputeC() {$/;"	f	class:kaldi::Fmpe
ComputeFeatures	transform/fmpe.cc	/^void Fmpe::ComputeFeatures(const MatrixBase<BaseFloat> &feat_in,$/;"	f	class:kaldi::Fmpe
ComputeStddevs	transform/fmpe.cc	/^void Fmpe::ComputeStddevs() {$/;"	f	class:kaldi::Fmpe
DerivMinus	transform/fmpe.cc	/^SubMatrix<BaseFloat> FmpeStats::DerivMinus() const { \/\/ const-ness not preserved.$/;"	f	class:kaldi::FmpeStats
DerivPlus	transform/fmpe.cc	/^SubMatrix<BaseFloat> FmpeStats::DerivPlus() const { \/\/ const-ness not preserved.$/;"	f	class:kaldi::FmpeStats
DoChecks	transform/fmpe.cc	/^void FmpeStats::DoChecks() {$/;"	f	class:kaldi::FmpeStats
Fmpe	transform/fmpe.cc	/^Fmpe::Fmpe(const DiagGmm &gmm, const FmpeOptions &config): gmm_(gmm),$/;"	f	class:kaldi::Fmpe
Init	transform/fmpe.cc	/^void FmpeStats::Init(const Fmpe &fmpe) {$/;"	f	class:kaldi::FmpeStats
Read	transform/fmpe.cc	/^void Fmpe::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::Fmpe
Read	transform/fmpe.cc	/^void FmpeOptions::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::FmpeOptions
Read	transform/fmpe.cc	/^void FmpeStats::Read(std::istream &is, bool binary, bool add) {$/;"	f	class:kaldi::FmpeStats
SetContexts	transform/fmpe.cc	/^void Fmpe::SetContexts(std::string context_str) {$/;"	f	class:kaldi::Fmpe
Update	transform/fmpe.cc	/^BaseFloat Fmpe::Update(const FmpeUpdateOptions &config,$/;"	f	class:kaldi::Fmpe
Write	transform/fmpe.cc	/^void Fmpe::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::Fmpe
Write	transform/fmpe.cc	/^void FmpeOptions::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::FmpeOptions
Write	transform/fmpe.cc	/^void FmpeStats::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::FmpeStats
kaldi	transform/fmpe.cc	/^namespace kaldi {$/;"	n	file:
ApplyCReverse	transform/fmpe.h	/^  void ApplyCReverse(MatrixBase<BaseFloat> *deriv) const { ApplyC(deriv, true); }$/;"	f	class:kaldi::Fmpe
C_	transform/fmpe.h	/^  TpMatrix<BaseFloat> C_; \/\/ Cholesky factor of the variance Sigma of$/;"	m	class:kaldi::Fmpe
FeatDim	transform/fmpe.h	/^  int32 FeatDim() const { return gmm_.Dim(); }$/;"	f	class:kaldi::Fmpe
Fmpe	transform/fmpe.h	/^  Fmpe() {}$/;"	f	class:kaldi::Fmpe
Fmpe	transform/fmpe.h	/^class Fmpe {$/;"	c	namespace:kaldi
FmpeOptions	transform/fmpe.h	/^  FmpeOptions(): context_expansion("0,1.0:-1,1.0:1,1.0:-2,0.5;-3,0.5:2,0.5;3,0.5:-4,0.5;-5,0.5:4,0.5;5,0.5:-6,0.333;-7,0.333;-8,0.333:6,0.333;7,0.333;8,0.333"),$/;"	f	struct:kaldi::FmpeOptions
FmpeOptions	transform/fmpe.h	/^struct FmpeOptions {$/;"	s	namespace:kaldi
FmpeStats	transform/fmpe.h	/^  FmpeStats() { };$/;"	f	struct:kaldi::FmpeStats
FmpeStats	transform/fmpe.h	/^  FmpeStats(const Fmpe &fmpe) { Init(fmpe); }$/;"	f	struct:kaldi::FmpeStats
FmpeStats	transform/fmpe.h	/^struct FmpeStats {$/;"	s	namespace:kaldi
FmpeUpdateOptions	transform/fmpe.h	/^  FmpeUpdateOptions(): learning_rate(0.1), l2_weight(100.0) { }$/;"	f	struct:kaldi::FmpeUpdateOptions
FmpeUpdateOptions	transform/fmpe.h	/^struct FmpeUpdateOptions {$/;"	s	namespace:kaldi
KALDI_TRANSFORM_FMPE_H_	transform/fmpe.h	22;"	d
NumContexts	transform/fmpe.h	/^  int32 NumContexts() const { return static_cast<int32>(contexts_.size()); }$/;"	f	class:kaldi::Fmpe
NumGauss	transform/fmpe.h	/^  int32 NumGauss() const { return gmm_.NumGauss(); }$/;"	f	class:kaldi::Fmpe
ProjectionTNumCols	transform/fmpe.h	/^  int32 ProjectionTNumCols() const { return FeatDim() * NumContexts(); }$/;"	f	class:kaldi::Fmpe
ProjectionTNumRows	transform/fmpe.h	/^  int32 ProjectionTNumRows() const { return (FeatDim()+1) * NumGauss(); }$/;"	f	class:kaldi::Fmpe
Register	transform/fmpe.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FmpeOptions
Register	transform/fmpe.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FmpeUpdateOptions
checks	transform/fmpe.h	/^  Matrix<double> checks; \/\/ contains quantities we use to check the$/;"	m	struct:kaldi::FmpeStats
config_	transform/fmpe.h	/^  FmpeOptions config_;$/;"	m	class:kaldi::Fmpe
context_expansion	transform/fmpe.h	/^  std::string context_expansion; \/\/ This string describes the various contexts...$/;"	m	struct:kaldi::FmpeOptions
contexts_	transform/fmpe.h	/^  std::vector<std::vector<std::pair<int32, BaseFloat> > > contexts_;$/;"	m	class:kaldi::Fmpe
deriv	transform/fmpe.h	/^  Matrix<BaseFloat> deriv; \/\/ contains positive and negative parts of derivatives$/;"	m	struct:kaldi::FmpeStats
gmm_	transform/fmpe.h	/^  DiagGmm gmm_; \/\/ The GMM used to get posteriors.$/;"	m	class:kaldi::Fmpe
kaldi	transform/fmpe.h	/^namespace kaldi {$/;"	n
l2_weight	transform/fmpe.h	/^  BaseFloat l2_weight; \/\/ Weight on l2 regularization term$/;"	m	struct:kaldi::FmpeUpdateOptions
learning_rate	transform/fmpe.h	/^  BaseFloat learning_rate; \/\/ Learning rate constant.  Like inverse of E$/;"	m	struct:kaldi::FmpeUpdateOptions
post_scale	transform/fmpe.h	/^  BaseFloat post_scale; \/\/ Scale on the posterior component of the high-dim$/;"	m	struct:kaldi::FmpeOptions
projT_	transform/fmpe.h	/^  Matrix<BaseFloat> projT_; \/\/ The transpose of the projection matrix;$/;"	m	class:kaldi::Fmpe
stddevs_	transform/fmpe.h	/^  Matrix<BaseFloat> stddevs_; \/\/ The standard deviations of the$/;"	m	class:kaldi::Fmpe
AccumulateFromPosteriors	transform/hlda.cc	/^AccumulateFromPosteriors(int32 pdf_id,$/;"	f	class:kaldi::HldaAccsDiagGmm
Init	transform/hlda.cc	/^void HldaAccsDiagGmm::Init(const AmDiagGmm &am,$/;"	f	class:kaldi::HldaAccsDiagGmm
Read	transform/hlda.cc	/^void HldaAccsDiagGmm::Read(std::istream &is, bool binary, bool add) {$/;"	f	class:kaldi::HldaAccsDiagGmm
Update	transform/hlda.cc	/^void HldaAccsDiagGmm::Update(AmDiagGmm *am,$/;"	f	class:kaldi::HldaAccsDiagGmm
Write	transform/hlda.cc	/^void HldaAccsDiagGmm::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::HldaAccsDiagGmm
kaldi	transform/hlda.cc	/^namespace kaldi {$/;"	n	file:
FeatureDim	transform/hlda.h	/^  int32 FeatureDim() { return (S_.empty() ? 0 : S_[0].NumRows()); }$/;"	f	class:kaldi::HldaAccsDiagGmm
HldaAccsDiagGmm	transform/hlda.h	/^  HldaAccsDiagGmm() { }$/;"	f	class:kaldi::HldaAccsDiagGmm
HldaAccsDiagGmm	transform/hlda.h	/^  HldaAccsDiagGmm(const AmDiagGmm &model,$/;"	f	class:kaldi::HldaAccsDiagGmm
HldaAccsDiagGmm	transform/hlda.h	/^class HldaAccsDiagGmm {$/;"	c	namespace:kaldi
KALDI_TRANSFORM_HLDA_H_	transform/hlda.h	21;"	d
ModelDim	transform/hlda.h	/^  int32 ModelDim() { return (S_.empty() ? 0 : S_.size()-1); }$/;"	f	class:kaldi::HldaAccsDiagGmm
S_	transform/hlda.h	/^  std::vector<SpMatrix<double> > S_;  \/\/ the S matrices: [model-dim+1] matrices of size (feat-dim) x (feat-dim)$/;"	m	class:kaldi::HldaAccsDiagGmm
kaldi	transform/hlda.h	/^namespace kaldi {$/;"	n
mean_accs_	transform/hlda.h	/^  std::vector<Matrix<double> > mean_accs_;  \/\/ [num-pdfs][gauss][feat_dim+1]$/;"	m	class:kaldi::HldaAccsDiagGmm
mean_accs_sub_	transform/hlda.h	/^  std::vector<Matrix<double> > mean_accs_sub_;$/;"	m	class:kaldi::HldaAccsDiagGmm
occs_	transform/hlda.h	/^  std::vector<Vector<double> > occs_;  \/\/ occupancies for the Gaussians. [num-pdfs][gauss]$/;"	m	class:kaldi::HldaAccsDiagGmm
occs_sub_	transform/hlda.h	/^  std::vector<Vector<double> > occs_sub_;$/;"	m	class:kaldi::HldaAccsDiagGmm
sample_gconst_	transform/hlda.h	/^  BaseFloat sample_gconst_;  \/\/ a sample gconst from the model, as a check$/;"	m	class:kaldi::HldaAccsDiagGmm
speedup_	transform/hlda.h	/^  BaseFloat speedup_;$/;"	m	class:kaldi::HldaAccsDiagGmm
UnitTestEstimateLda	transform/lda-estimate-test.cc	/^UnitTestEstimateLda() {$/;"	f
main	transform/lda-estimate-test.cc	/^main() {$/;"	f
rand_posdef_spmatrix	transform/lda-estimate-test.cc	/^void rand_posdef_spmatrix(size_t dim, SpMatrix<BaseFloat> *matrix,$/;"	f
test_io	transform/lda-estimate-test.cc	/^test_io(const LdaEstimate &lda_est, bool binary) {$/;"	f
Accumulate	transform/lda-estimate.cc	/^void LdaEstimate::Accumulate(const VectorBase<BaseFloat> &data,$/;"	f	class:kaldi::LdaEstimate
AddMeanOffset	transform/lda-estimate.cc	/^void LdaEstimate::AddMeanOffset(const VectorBase<double> &mean_dbl,$/;"	f	class:kaldi::LdaEstimate
Estimate	transform/lda-estimate.cc	/^void LdaEstimate::Estimate(const LdaEstimateOptions &opts,$/;"	f	class:kaldi::LdaEstimate
GetStats	transform/lda-estimate.cc	/^void LdaEstimate::GetStats(SpMatrix<double> *total_covar,$/;"	f	class:kaldi::LdaEstimate
Init	transform/lda-estimate.cc	/^void LdaEstimate::Init(int32 num_classes, int32 dimension) {$/;"	f	class:kaldi::LdaEstimate
Read	transform/lda-estimate.cc	/^void LdaEstimate::Read(std::istream &in_stream, bool binary, bool add) {$/;"	f	class:kaldi::LdaEstimate
Scale	transform/lda-estimate.cc	/^void LdaEstimate::Scale(BaseFloat f) {$/;"	f	class:kaldi::LdaEstimate
Write	transform/lda-estimate.cc	/^void LdaEstimate::Write(std::ostream &out_stream, bool binary) const {$/;"	f	class:kaldi::LdaEstimate
ZeroAccumulators	transform/lda-estimate.cc	/^void LdaEstimate::ZeroAccumulators() {$/;"	f	class:kaldi::LdaEstimate
kaldi	transform/lda-estimate.cc	/^namespace kaldi {$/;"	n	file:
Dim	transform/lda-estimate.h	/^  int32 Dim() const { return first_acc_.NumCols(); }$/;"	f	class:kaldi::LdaEstimate
KALDI_TRANSFORM_LDA_ESTIMATE_H_	transform/lda-estimate.h	21;"	d
LdaEstimate	transform/lda-estimate.h	/^  LdaEstimate() {}$/;"	f	class:kaldi::LdaEstimate
LdaEstimate	transform/lda-estimate.h	/^class LdaEstimate {$/;"	c	namespace:kaldi
LdaEstimateOptions	transform/lda-estimate.h	/^  LdaEstimateOptions(): remove_offset(false), dim(40), allow_large_dim(false),$/;"	f	struct:kaldi::LdaEstimateOptions
LdaEstimateOptions	transform/lda-estimate.h	/^struct LdaEstimateOptions {$/;"	s	namespace:kaldi
NumClasses	transform/lda-estimate.h	/^  int32 NumClasses() const { return first_acc_.NumRows(); }$/;"	f	class:kaldi::LdaEstimate
Register	transform/lda-estimate.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::LdaEstimateOptions
allow_large_dim	transform/lda-estimate.h	/^  bool allow_large_dim;$/;"	m	struct:kaldi::LdaEstimateOptions
dim	transform/lda-estimate.h	/^  int32 dim;$/;"	m	struct:kaldi::LdaEstimateOptions
first_acc_	transform/lda-estimate.h	/^  Matrix<double> first_acc_;$/;"	m	class:kaldi::LdaEstimate
kaldi	transform/lda-estimate.h	/^namespace kaldi {$/;"	n
remove_offset	transform/lda-estimate.h	/^  bool remove_offset;$/;"	m	struct:kaldi::LdaEstimateOptions
total_second_acc_	transform/lda-estimate.h	/^  SpMatrix<double> total_second_acc_;$/;"	m	class:kaldi::LdaEstimate
within_class_factor	transform/lda-estimate.h	/^  BaseFloat within_class_factor; \/\/ TODO: remove this eventually, it$/;"	m	struct:kaldi::LdaEstimateOptions
zero_acc_	transform/lda-estimate.h	/^  Vector<double> zero_acc_;$/;"	m	class:kaldi::LdaEstimate
ComputeTransform	transform/lvtln.cc	/^void LinearVtln::ComputeTransform(const FmllrDiagGmmAccs &accs,$/;"	f	class:kaldi::LinearVtln
GetTransform	transform/lvtln.cc	/^void LinearVtln::GetTransform(int32 i, MatrixBase<BaseFloat> *transform) const {$/;"	f	class:kaldi::LinearVtln
GetWarp	transform/lvtln.cc	/^BaseFloat LinearVtln::GetWarp(int32 i) const {$/;"	f	class:kaldi::LinearVtln
LinearVtln	transform/lvtln.cc	/^LinearVtln::LinearVtln(int32 dim, int32 num_classes, int32 default_class) {$/;"	f	class:kaldi::LinearVtln
Read	transform/lvtln.cc	/^void LinearVtln::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::LinearVtln
SetTransform	transform/lvtln.cc	/^void LinearVtln::SetTransform(int32 i, const MatrixBase<BaseFloat> &transform) {$/;"	f	class:kaldi::LinearVtln
SetWarp	transform/lvtln.cc	/^void LinearVtln::SetWarp(int32 i, BaseFloat warp) {$/;"	f	class:kaldi::LinearVtln
Write	transform/lvtln.cc	/^void LinearVtln::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::LinearVtln
kaldi	transform/lvtln.cc	/^namespace kaldi {$/;"	n	file:
A_	transform/lvtln.h	/^  std::vector<Matrix<BaseFloat> > A_;  \/\/ Square parts of the FMLLR matrices.$/;"	m	class:kaldi::LinearVtln
Dim	transform/lvtln.h	/^  int32 Dim() const { KALDI_ASSERT(!A_.empty()); return A_[0].NumRows(); }$/;"	f	class:kaldi::LinearVtln
KALDI_TRANSFORM_LVTLN_H_	transform/lvtln.h	22;"	d
LinearVtln	transform/lvtln.h	/^  LinearVtln() { } \/\/ This initializer will probably be used prior to calling$/;"	f	class:kaldi::LinearVtln
LinearVtln	transform/lvtln.h	/^class LinearVtln {$/;"	c	namespace:kaldi
NumClasses	transform/lvtln.h	/^  int32 NumClasses() const { return A_.size(); }$/;"	f	class:kaldi::LinearVtln
default_class_	transform/lvtln.h	/^  int32 default_class_;  \/\/ transform we return if we have no data.$/;"	m	class:kaldi::LinearVtln
kaldi	transform/lvtln.h	/^namespace kaldi {$/;"	n
logdets_	transform/lvtln.h	/^  std::vector<BaseFloat> logdets_;$/;"	m	class:kaldi::LinearVtln
warps_	transform/lvtln.h	/^  std::vector<BaseFloat> warps_; \/\/ This variable can be used to store the$/;"	m	class:kaldi::LinearVtln
AccumulateFromGmm	transform/mllt.cc	/^BaseFloat MlltAccs::AccumulateFromGmm(const DiagGmm &gmm,$/;"	f	class:kaldi::MlltAccs
AccumulateFromGmmPreselect	transform/mllt.cc	/^BaseFloat MlltAccs::AccumulateFromGmmPreselect($/;"	f	class:kaldi::MlltAccs
AccumulateFromPosteriors	transform/mllt.cc	/^void MlltAccs::AccumulateFromPosteriors(const DiagGmm &gmm,$/;"	f	class:kaldi::MlltAccs
Init	transform/mllt.cc	/^void MlltAccs::Init(int32 dim, BaseFloat rand_prune) {  \/\/ initializes (destroys anything that was there before).$/;"	f	class:kaldi::MlltAccs
Read	transform/mllt.cc	/^void MlltAccs::Read(std::istream &is, bool binary, bool add) {$/;"	f	class:kaldi::MlltAccs
Update	transform/mllt.cc	/^void MlltAccs::Update(double beta,$/;"	f	class:kaldi::MlltAccs
Write	transform/mllt.cc	/^void MlltAccs::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::MlltAccs
kaldi	transform/mllt.cc	/^namespace kaldi {$/;"	n	file:
Dim	transform/mllt.h	/^  int32 Dim() { return G_.size(); };  \/\/ returns model dimension.$/;"	f	class:kaldi::MlltAccs
G_	transform/mllt.h	/^  std::vector<SpMatrix<double> > G_;  \/\/ the G matrices (d matrices of size d x d)$/;"	m	class:kaldi::MlltAccs
KALDI_TRANSFORM_MLLT_H_	transform/mllt.h	22;"	d
MlltAccs	transform/mllt.h	/^  MlltAccs(): rand_prune_(0.0), beta_(0.0) { }$/;"	f	class:kaldi::MlltAccs
MlltAccs	transform/mllt.h	/^  MlltAccs(int32 dim, BaseFloat rand_prune = 0.25) { Init(dim, rand_prune); }$/;"	f	class:kaldi::MlltAccs
MlltAccs	transform/mllt.h	/^class MlltAccs {$/;"	c	namespace:kaldi
Update	transform/mllt.h	/^  void Update(MatrixBase<BaseFloat> *M,$/;"	f	class:kaldi::MlltAccs
beta_	transform/mllt.h	/^  double beta_;  \/\/ count.$/;"	m	class:kaldi::MlltAccs
kaldi	transform/mllt.h	/^namespace kaldi {$/;"	n
rand_prune_	transform/mllt.h	/^  BaseFloat rand_prune_;$/;"	m	class:kaldi::MlltAccs
UnitTestRegressionTree	transform/regression-tree-test.cc	/^UnitTestRegressionTree() {$/;"	f
main	transform/regression-tree-test.cc	/^main() {$/;"	f
rand_diag_gmm	transform/regression-tree-test.cc	/^rand_diag_gmm(size_t num_comp, size_t dim, DiagGmm *gmm) {$/;"	f
test_io	transform/regression-tree-test.cc	/^test_io(const RegressionTree &regtree,$/;"	f
BuildTree	transform/regression-tree.cc	/^void RegressionTree::BuildTree(const Vector<BaseFloat> &state_occs,$/;"	f	class:kaldi::RegressionTree
GatherStats	transform/regression-tree.cc	/^bool RegressionTree::GatherStats(const vector<AffineXformStats*> &stats_in,$/;"	f	class:kaldi::RegressionTree
GetActiveParents	transform/regression-tree.cc	/^static bool GetActiveParents(int32 node, const vector<int32> &parents,$/;"	f	namespace:kaldi
MakeGauss2Bclass	transform/regression-tree.cc	/^void RegressionTree::MakeGauss2Bclass(const AmDiagGmm &am) {$/;"	f	class:kaldi::RegressionTree
Read	transform/regression-tree.cc	/^void RegressionTree::Read(std::istream &in, bool binary,$/;"	f	class:kaldi::RegressionTree
Write	transform/regression-tree.cc	/^void RegressionTree::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::RegressionTree
kaldi	transform/regression-tree.cc	/^namespace kaldi {$/;"	n	file:
Gauss2BaseclassId	transform/regression-tree.h	/^  int32 Gauss2BaseclassId(size_t pdf_id, size_t gauss_id) const {$/;"	f	class:kaldi::RegressionTree
GetBaseclass	transform/regression-tree.h	/^  const std::vector< std::pair<int32, int32> >& GetBaseclass(int32 bclass)$/;"	f	class:kaldi::RegressionTree
KALDI_TRANSFORM_REGRESSION_TREE_H_	transform/regression-tree.h	23;"	d
NumBaseclasses	transform/regression-tree.h	/^  int32 NumBaseclasses() const { return num_baseclasses_; }$/;"	f	class:kaldi::RegressionTree
RegressionTree	transform/regression-tree.h	/^  RegressionTree() {}$/;"	f	class:kaldi::RegressionTree
RegressionTree	transform/regression-tree.h	/^class RegressionTree {$/;"	c	namespace:kaldi
baseclasses_	transform/regression-tree.h	/^  std::vector< std::vector< std::pair<int32, int32> > > baseclasses_;$/;"	m	class:kaldi::RegressionTree
gauss2bclass_	transform/regression-tree.h	/^  std::vector< std::vector<int32> > gauss2bclass_;$/;"	m	class:kaldi::RegressionTree
kaldi	transform/regression-tree.h	/^namespace kaldi {$/;"	n
num_baseclasses_	transform/regression-tree.h	/^  int32 num_baseclasses_;  \/\/\/< Number of leaf nodes$/;"	m	class:kaldi::RegressionTree
num_nodes_	transform/regression-tree.h	/^  int32 num_nodes_;  \/\/\/< Total (non-leaf+leaf) nodes$/;"	m	class:kaldi::RegressionTree
parents_	transform/regression-tree.h	/^  std::vector<int32> parents_;$/;"	m	class:kaldi::RegressionTree
RandFullCova	transform/regtree-fmllr-diag-gmm-test.cc	/^RandFullCova(Matrix<BaseFloat> *matrix) {$/;"	f	namespace:kaldi
UnitTestRegtreeFmllrDiagGmm	transform/regtree-fmllr-diag-gmm-test.cc	/^void UnitTestRegtreeFmllrDiagGmm(cova_type feature_type, size_t max_bclass) {$/;"	f	namespace:kaldi
cova_type	transform/regtree-fmllr-diag-gmm-test.cc	/^enum cova_type {$/;"	g	namespace:kaldi	file:
diag	transform/regtree-fmllr-diag-gmm-test.cc	/^  diag$/;"	e	enum:kaldi::cova_type	file:
full	transform/regtree-fmllr-diag-gmm-test.cc	/^  full,$/;"	e	enum:kaldi::cova_type	file:
generate_features	transform/regtree-fmllr-diag-gmm-test.cc	/^generate_features(cova_type covariance_type,$/;"	f	namespace:kaldi
kaldi	transform/regtree-fmllr-diag-gmm-test.cc	/^namespace kaldi {$/;"	n	file:
main	transform/regtree-fmllr-diag-gmm-test.cc	/^int main() {$/;"	f
AccumulateForGaussian	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmmAccs::AccumulateForGaussian($/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
AccumulateForGmm	transform/regtree-fmllr-diag-gmm.cc	/^BaseFloat RegtreeFmllrDiagGmmAccs::AccumulateForGmm($/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
ComputeLogDets	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmm::ComputeLogDets() {$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
Init	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmm::Init(size_t num_xforms, size_t dim) {$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
Init	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmmAccs::Init(size_t num_bclass, size_t dim) {$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
Read	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmm::Read(std::istream &in, bool binary) {$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
Read	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmmAccs::Read(std::istream &in, bool binary, bool add) {$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
SetUnit	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmm::SetUnit() {$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
SetZero	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmmAccs::SetZero() {$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
TransformFeature	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmm::TransformFeature(const VectorBase<BaseFloat> &in,$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
Update	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmmAccs::Update(const RegressionTree &regtree,$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
Validate	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmm::Validate() {$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
Write	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmm::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
Write	transform/regtree-fmllr-diag-gmm.cc	/^void RegtreeFmllrDiagGmmAccs::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
kaldi	transform/regtree-fmllr-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
Base2RegClass	transform/regtree-fmllr-diag-gmm.h	/^  int32 Base2RegClass(int32 bclass) const { return bclass2xforms_[bclass]; }$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
Dim	transform/regtree-fmllr-diag-gmm.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
Dim	transform/regtree-fmllr-diag-gmm.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
GetLogDets	transform/regtree-fmllr-diag-gmm.h	/^inline void RegtreeFmllrDiagGmm::GetLogDets(VectorBase<BaseFloat> *out) const {$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
GetXformMatrix	transform/regtree-fmllr-diag-gmm.h	/^inline void RegtreeFmllrDiagGmm::GetXformMatrix(int32 xform_index,$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
KALDI_TRANSFORM_REGTREE_FMLLR_DIAG_GMM_H_	transform/regtree-fmllr-diag-gmm.h	23;"	d
NumBaseClasses	transform/regtree-fmllr-diag-gmm.h	/^  int32 NumBaseClasses() const { return bclass2xforms_.size(); }$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
NumBaseClasses	transform/regtree-fmllr-diag-gmm.h	/^  int32 NumBaseClasses() const { return num_baseclasses_; }$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
NumRegClasses	transform/regtree-fmllr-diag-gmm.h	/^  int32 NumRegClasses() const { return num_xforms_; }$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
RandomAccessRegtreeFmllrDiagGmmReader	transform/regtree-fmllr-diag-gmm.h	/^            RandomAccessRegtreeFmllrDiagGmmReader;$/;"	t	namespace:kaldi
RandomAccessRegtreeFmllrDiagGmmReaderMapped	transform/regtree-fmllr-diag-gmm.h	/^            RandomAccessRegtreeFmllrDiagGmmReaderMapped;$/;"	t	namespace:kaldi
Register	transform/regtree-fmllr-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::RegtreeFmllrOptions
RegtreeFmllrDiagGmm	transform/regtree-fmllr-diag-gmm.h	/^  RegtreeFmllrDiagGmm() : dim_(-1), num_xforms_(-1), valid_logdet_(false) {}$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
RegtreeFmllrDiagGmm	transform/regtree-fmllr-diag-gmm.h	/^  explicit RegtreeFmllrDiagGmm(const RegtreeFmllrDiagGmm &other)$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
RegtreeFmllrDiagGmm	transform/regtree-fmllr-diag-gmm.h	/^class RegtreeFmllrDiagGmm {$/;"	c	namespace:kaldi
RegtreeFmllrDiagGmmAccs	transform/regtree-fmllr-diag-gmm.h	/^  RegtreeFmllrDiagGmmAccs() : num_baseclasses_(-1), dim_(-1) {}$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
RegtreeFmllrDiagGmmAccs	transform/regtree-fmllr-diag-gmm.h	/^class RegtreeFmllrDiagGmmAccs {$/;"	c	namespace:kaldi
RegtreeFmllrDiagGmmSeqReader	transform/regtree-fmllr-diag-gmm.h	/^typedef SequentialTableReader< KaldiObjectHolder<RegtreeFmllrDiagGmm> >  RegtreeFmllrDiagGmmSeqReader;  $/;"	t	namespace:kaldi
RegtreeFmllrDiagGmmWriter	transform/regtree-fmllr-diag-gmm.h	/^typedef TableWriter< KaldiObjectHolder<RegtreeFmllrDiagGmm> >  RegtreeFmllrDiagGmmWriter;$/;"	t	namespace:kaldi
RegtreeFmllrOptions	transform/regtree-fmllr-diag-gmm.h	/^  RegtreeFmllrOptions(): update_type("full"), min_count(1000.0),$/;"	f	struct:kaldi::RegtreeFmllrOptions
RegtreeFmllrOptions	transform/regtree-fmllr-diag-gmm.h	/^struct RegtreeFmllrOptions {$/;"	s	namespace:kaldi
SetParameters	transform/regtree-fmllr-diag-gmm.h	/^inline void RegtreeFmllrDiagGmm::SetParameters(const MatrixBase<BaseFloat> &mat,$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
baseclass_stats	transform/regtree-fmllr-diag-gmm.h	/^  const std::vector<AffineXformStats*> &baseclass_stats() const {$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
baseclass_stats_	transform/regtree-fmllr-diag-gmm.h	/^  std::vector<AffineXformStats*> baseclass_stats_;$/;"	m	class:kaldi::RegtreeFmllrDiagGmmAccs
bclass2xforms_	transform/regtree-fmllr-diag-gmm.h	/^  std::vector<int32> bclass2xforms_;$/;"	m	class:kaldi::RegtreeFmllrDiagGmm
dim_	transform/regtree-fmllr-diag-gmm.h	/^  int32 dim_;             \/\/\/< Dimension of feature vectors$/;"	m	class:kaldi::RegtreeFmllrDiagGmm
dim_	transform/regtree-fmllr-diag-gmm.h	/^  int32 dim_;$/;"	m	class:kaldi::RegtreeFmllrDiagGmmAccs
kaldi	transform/regtree-fmllr-diag-gmm.h	/^namespace kaldi {$/;"	n
logdet_	transform/regtree-fmllr-diag-gmm.h	/^  Vector<BaseFloat> logdet_;    \/\/\/< Log-determinants of the Jacobians$/;"	m	class:kaldi::RegtreeFmllrDiagGmm
min_count	transform/regtree-fmllr-diag-gmm.h	/^  BaseFloat min_count;  \/\/\/< Minimum occupancy for computing a transform$/;"	m	struct:kaldi::RegtreeFmllrOptions
num_baseclasses_	transform/regtree-fmllr-diag-gmm.h	/^  int32 num_baseclasses_;$/;"	m	class:kaldi::RegtreeFmllrDiagGmmAccs
num_iters	transform/regtree-fmllr-diag-gmm.h	/^  int32 num_iters;      \/\/\/< Number of iterations (if using an iterative update)$/;"	m	struct:kaldi::RegtreeFmllrOptions
num_xforms_	transform/regtree-fmllr-diag-gmm.h	/^  int32 num_xforms_;            \/\/\/< Number of transform matrices$/;"	m	class:kaldi::RegtreeFmllrDiagGmm
set_bclass2xforms	transform/regtree-fmllr-diag-gmm.h	/^  void set_bclass2xforms(const std::vector<int32> &in) { bclass2xforms_ = in; }$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
update_type	transform/regtree-fmllr-diag-gmm.h	/^  std::string update_type;  \/\/\/< "full", "diag", "offset", "none"$/;"	m	struct:kaldi::RegtreeFmllrOptions
use_regtree	transform/regtree-fmllr-diag-gmm.h	/^  bool use_regtree;     \/\/\/< If 'true', find transforms to generate using regression tree.$/;"	m	struct:kaldi::RegtreeFmllrOptions
valid_logdet_	transform/regtree-fmllr-diag-gmm.h	/^  bool valid_logdet_;           \/\/\/< Whether logdets are for current transforms$/;"	m	class:kaldi::RegtreeFmllrDiagGmm
xform_matrices_	transform/regtree-fmllr-diag-gmm.h	/^  std::vector< Matrix<BaseFloat> > xform_matrices_;  \/\/\/< Transform matrices$/;"	m	class:kaldi::RegtreeFmllrDiagGmm
~RegtreeFmllrDiagGmm	transform/regtree-fmllr-diag-gmm.h	/^  ~RegtreeFmllrDiagGmm() {}$/;"	f	class:kaldi::RegtreeFmllrDiagGmm
~RegtreeFmllrDiagGmmAccs	transform/regtree-fmllr-diag-gmm.h	/^  ~RegtreeFmllrDiagGmmAccs() { DeletePointers(&baseclass_stats_); }$/;"	f	class:kaldi::RegtreeFmllrDiagGmmAccs
TestMllrAccsIO	transform/regtree-mllr-diag-gmm-test.cc	/^void TestMllrAccsIO(const kaldi::AmDiagGmm &am_gmm,$/;"	f
TestXformMean	transform/regtree-mllr-diag-gmm-test.cc	/^void TestXformMean(const kaldi::AmDiagGmm &am_gmm,$/;"	f
UnitTestRegtreeMllrDiagGmm	transform/regtree-mllr-diag-gmm-test.cc	/^void UnitTestRegtreeMllrDiagGmm() {$/;"	f
main	transform/regtree-mllr-diag-gmm-test.cc	/^int main() {$/;"	f
AccumulateForGaussian	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmmAccs::AccumulateForGaussian($/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
AccumulateForGmm	transform/regtree-mllr-diag-gmm.cc	/^BaseFloat RegtreeMllrDiagGmmAccs::AccumulateForGmm($/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
ComputeMllrMatrix	transform/regtree-mllr-diag-gmm.cc	/^static void ComputeMllrMatrix(const Matrix<double> &K,$/;"	f	namespace:kaldi
GetTransformedMeans	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmm::GetTransformedMeans(const RegressionTree &regtree,$/;"	f	class:kaldi::RegtreeMllrDiagGmm
Init	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmm::Init(int32 num_xforms, int32 dim) {$/;"	f	class:kaldi::RegtreeMllrDiagGmm
Init	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmmAccs::Init(int32 num_bclass, int32 dim) {$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
MllrAuxFunction	transform/regtree-mllr-diag-gmm.cc	/^static BaseFloat MllrAuxFunction(const Matrix<BaseFloat> &xform,$/;"	f	namespace:kaldi
Read	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmm::Read(std::istream &in, bool binary) {$/;"	f	class:kaldi::RegtreeMllrDiagGmm
Read	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmmAccs::Read(std::istream &in, bool binary, bool add) {$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
SetUnit	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmm::SetUnit() {$/;"	f	class:kaldi::RegtreeMllrDiagGmm
SetZero	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmmAccs::SetZero() {$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
TransformModel	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmm::TransformModel(const RegressionTree &regtree,$/;"	f	class:kaldi::RegtreeMllrDiagGmm
Update	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmmAccs::Update(const RegressionTree &regtree,$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
Write	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmm::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::RegtreeMllrDiagGmm
Write	transform/regtree-mllr-diag-gmm.cc	/^void RegtreeMllrDiagGmmAccs::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
kaldi	transform/regtree-mllr-diag-gmm.cc	/^namespace kaldi {$/;"	n	file:
Dim	transform/regtree-mllr-diag-gmm.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
KALDI_TRANSFORM_REGTREE_MLLR_DIAG_GMM_H_	transform/regtree-mllr-diag-gmm.h	21;"	d
NumBaseClasses	transform/regtree-mllr-diag-gmm.h	/^  int32 NumBaseClasses() const { return num_baseclasses_; }$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
RandomAccessRegtreeMllrDiagGmmReader	transform/regtree-mllr-diag-gmm.h	/^            RandomAccessRegtreeMllrDiagGmmReader;$/;"	t	namespace:kaldi
RandomAccessRegtreeMllrDiagGmmReaderMapped	transform/regtree-mllr-diag-gmm.h	/^            RandomAccessRegtreeMllrDiagGmmReaderMapped;$/;"	t	namespace:kaldi
Register	transform/regtree-mllr-diag-gmm.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::RegtreeMllrOptions
RegtreeMllrDiagGmm	transform/regtree-mllr-diag-gmm.h	/^  RegtreeMllrDiagGmm() {}$/;"	f	class:kaldi::RegtreeMllrDiagGmm
RegtreeMllrDiagGmm	transform/regtree-mllr-diag-gmm.h	/^class RegtreeMllrDiagGmm {$/;"	c	namespace:kaldi
RegtreeMllrDiagGmmAccs	transform/regtree-mllr-diag-gmm.h	/^  RegtreeMllrDiagGmmAccs() {}$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
RegtreeMllrDiagGmmAccs	transform/regtree-mllr-diag-gmm.h	/^class RegtreeMllrDiagGmmAccs {$/;"	c	namespace:kaldi
RegtreeMllrDiagGmmSeqReader	transform/regtree-mllr-diag-gmm.h	/^            RegtreeMllrDiagGmmSeqReader;$/;"	t	namespace:kaldi
RegtreeMllrDiagGmmWriter	transform/regtree-mllr-diag-gmm.h	/^            RegtreeMllrDiagGmmWriter;$/;"	t	namespace:kaldi
RegtreeMllrOptions	transform/regtree-mllr-diag-gmm.h	/^  RegtreeMllrOptions(): min_count(1000.0), use_regtree(true) { }$/;"	f	struct:kaldi::RegtreeMllrOptions
RegtreeMllrOptions	transform/regtree-mllr-diag-gmm.h	/^struct RegtreeMllrOptions {$/;"	s	namespace:kaldi
SetParameters	transform/regtree-mllr-diag-gmm.h	/^inline void RegtreeMllrDiagGmm::SetParameters(const MatrixBase<BaseFloat> &mat,$/;"	f	class:kaldi::RegtreeMllrDiagGmm
baseclass_stats	transform/regtree-mllr-diag-gmm.h	/^  const std::vector<AffineXformStats*> &baseclass_stats() const {$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
baseclass_stats_	transform/regtree-mllr-diag-gmm.h	/^  std::vector<AffineXformStats*> baseclass_stats_;$/;"	m	class:kaldi::RegtreeMllrDiagGmmAccs
bclass2xforms_	transform/regtree-mllr-diag-gmm.h	/^  std::vector<int32> bclass2xforms_;$/;"	m	class:kaldi::RegtreeMllrDiagGmm
dim_	transform/regtree-mllr-diag-gmm.h	/^  int32 dim_;    \/\/\/< Dimension of feature vectors$/;"	m	class:kaldi::RegtreeMllrDiagGmmAccs
dim_	transform/regtree-mllr-diag-gmm.h	/^  int32 dim_;  \/\/\/< Dimension of feature vectors$/;"	m	class:kaldi::RegtreeMllrDiagGmm
kaldi	transform/regtree-mllr-diag-gmm.h	/^namespace kaldi {$/;"	n
min_count	transform/regtree-mllr-diag-gmm.h	/^  BaseFloat min_count;  \/\/\/< Minimum occupancy for computing a transform$/;"	m	struct:kaldi::RegtreeMllrOptions
num_baseclasses_	transform/regtree-mllr-diag-gmm.h	/^  int32 num_baseclasses_;    \/\/\/< Number of baseclasses$/;"	m	class:kaldi::RegtreeMllrDiagGmmAccs
num_xforms_	transform/regtree-mllr-diag-gmm.h	/^  int32 num_xforms_;  \/\/\/< Number of transforms == xform_matrices_.size()$/;"	m	class:kaldi::RegtreeMllrDiagGmm
set_bclass2xforms	transform/regtree-mllr-diag-gmm.h	/^  void set_bclass2xforms(const std::vector<int32> &in) { bclass2xforms_ = in; }$/;"	f	class:kaldi::RegtreeMllrDiagGmm
use_regtree	transform/regtree-mllr-diag-gmm.h	/^  bool use_regtree;$/;"	m	struct:kaldi::RegtreeMllrOptions
xform_matrices	transform/regtree-mllr-diag-gmm.h	/^  const std::vector< Matrix<BaseFloat> > xform_matrices() const {$/;"	f	class:kaldi::RegtreeMllrDiagGmm
xform_matrices_	transform/regtree-mllr-diag-gmm.h	/^  std::vector< Matrix<BaseFloat> > xform_matrices_;$/;"	m	class:kaldi::RegtreeMllrDiagGmm
~RegtreeMllrDiagGmmAccs	transform/regtree-mllr-diag-gmm.h	/^  ~RegtreeMllrDiagGmmAccs() { DeletePointers(&baseclass_stats_); }$/;"	f	class:kaldi::RegtreeMllrDiagGmmAccs
Add	transform/transform-common.cc	/^void AffineXformStats::Add(const AffineXformStats &other) {$/;"	f	class:kaldi::AffineXformStats
ApplyAffineTransform	transform/transform-common.cc	/^void ApplyAffineTransform(const MatrixBase<BaseFloat> &xform,$/;"	f	namespace:kaldi
ComposeTransforms	transform/transform-common.cc	/^bool ComposeTransforms(const Matrix<BaseFloat> &a, const Matrix<BaseFloat> &b,$/;"	f	namespace:kaldi
CopyStats	transform/transform-common.cc	/^void AffineXformStats::CopyStats(const AffineXformStats &other) {$/;"	f	class:kaldi::AffineXformStats
Init	transform/transform-common.cc	/^void AffineXformStats::Init(int32 dim, int32 num_gs) {$/;"	f	class:kaldi::AffineXformStats
Read	transform/transform-common.cc	/^void AffineXformStats::Read(std::istream &in, bool binary, bool add) {$/;"	f	class:kaldi::AffineXformStats
SetZero	transform/transform-common.cc	/^void AffineXformStats::SetZero() {$/;"	f	class:kaldi::AffineXformStats
Write	transform/transform-common.cc	/^void AffineXformStats::Write(std::ostream &out, bool binary) const {$/;"	f	class:kaldi::AffineXformStats
kaldi	transform/transform-common.cc	/^namespace kaldi {$/;"	n	file:
AffineXformStats	transform/transform-common.h	/^  AffineXformStats(): beta_(0.0), dim_(0.0) {}$/;"	f	class:kaldi::AffineXformStats
AffineXformStats	transform/transform-common.h	/^  AffineXformStats(const AffineXformStats &other): beta_(other.beta_),$/;"	f	class:kaldi::AffineXformStats
AffineXformStats	transform/transform-common.h	/^class AffineXformStats {$/;"	c	namespace:kaldi
Dim	transform/transform-common.h	/^  int32 Dim() const { return dim_; }$/;"	f	class:kaldi::AffineXformStats
G_	transform/transform-common.h	/^  std::vector< SpMatrix<double> > G_;$/;"	m	class:kaldi::AffineXformStats
KALDI_TRANSFORM_TRANSFORM_COMMON_H_	transform/transform-common.h	21;"	d
K_	transform/transform-common.h	/^  Matrix<double> K_;   $/;"	m	class:kaldi::AffineXformStats
beta_	transform/transform-common.h	/^  double beta_;        $/;"	m	class:kaldi::AffineXformStats
dim_	transform/transform-common.h	/^  int32 dim_;      $/;"	m	class:kaldi::AffineXformStats
kaldi	transform/transform-common.h	/^namespace kaldi {$/;"	n
ADDLIBS	tree/Makefile	/^ADDLIBS = ..\/util\/kaldi-util.a ..\/matrix\/kaldi-matrix.a ..\/base\/kaldi-base.a$/;"	m
LIBNAME	tree/Makefile	/^LIBNAME = kaldi-tree$/;"	m
OBJFILES	tree/Makefile	/^OBJFILES = event-map.o context-dep.o clusterable-classes.o cluster-utils.o \\$/;"	m
TESTFILES	tree/Makefile	/^TESTFILES = event-map-test context-dep-test build-tree-utils-test \\$/;"	m
InitRand	tree/build-tree-questions.cc	/^void Questions::InitRand(const BuildTreeStatsType &stats, int32 num_quest, int32 num_iters_refine,$/;"	f	class:kaldi::Questions
Read	tree/build-tree-questions.cc	/^void Questions::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::Questions
Read	tree/build-tree-questions.cc	/^void QuestionsForKey::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::QuestionsForKey
Write	tree/build-tree-questions.cc	/^void Questions::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::Questions
Write	tree/build-tree-questions.cc	/^void QuestionsForKey::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::QuestionsForKey
kaldi	tree/build-tree-questions.cc	/^namespace kaldi {$/;"	n	file:
AllKeysType	tree/build-tree-questions.h	/^typedef enum { kAllKeysInsistIdentical, kAllKeysIntersection, kAllKeysUnion } AllKeysType;$/;"	t	namespace:kaldi	typeref:enum:kaldi::__anon3
BuildTreeStatsType	tree/build-tree-questions.h	/^typedef std::vector<std::pair<EventType, Clusterable*> > BuildTreeStatsType;$/;"	t	namespace:kaldi
Check	tree/build-tree-questions.h	/^  void Check() const {$/;"	f	struct:kaldi::QuestionsForKey
GetKeysWithQuestions	tree/build-tree-questions.h	/^  void GetKeysWithQuestions(std::vector<EventKeyType> *keys_out) const {$/;"	f	class:kaldi::Questions
GetQuestionsOf	tree/build-tree-questions.h	/^  const QuestionsForKey &GetQuestionsOf(EventKeyType key) const {$/;"	f	class:kaldi::Questions
HasQuestionsForKey	tree/build-tree-questions.h	/^  const bool HasQuestionsForKey(EventKeyType key) const { return (key_idx_.count(key) != 0); }$/;"	f	class:kaldi::Questions
KALDI_TREE_BUILD_TREE_QUESTIONS_H_	tree/build-tree-questions.h	21;"	d
Questions	tree/build-tree-questions.h	/^  Questions() { }$/;"	f	class:kaldi::Questions
Questions	tree/build-tree-questions.h	/^class Questions {  \/\/ careful, this is a class.$/;"	c	namespace:kaldi
QuestionsForKey	tree/build-tree-questions.h	/^  QuestionsForKey(int32 num_iters = 5): refine_opts(num_iters, 2) {$/;"	f	struct:kaldi::QuestionsForKey
QuestionsForKey	tree/build-tree-questions.h	/^struct QuestionsForKey {  \/\/ Configuration class associated with a particular key$/;"	s	namespace:kaldi
SetQuestionsOf	tree/build-tree-questions.h	/^  void SetQuestionsOf(EventKeyType key, const QuestionsForKey &options_of_key) {$/;"	f	class:kaldi::Questions
initial_questions	tree/build-tree-questions.h	/^  std::vector<std::vector<EventValueType> > initial_questions;$/;"	m	struct:kaldi::QuestionsForKey
kAllKeysInsistIdentical	tree/build-tree-questions.h	/^typedef enum { kAllKeysInsistIdentical, kAllKeysIntersection, kAllKeysUnion } AllKeysType;$/;"	e	enum:kaldi::__anon3
kAllKeysIntersection	tree/build-tree-questions.h	/^typedef enum { kAllKeysInsistIdentical, kAllKeysIntersection, kAllKeysUnion } AllKeysType;$/;"	e	enum:kaldi::__anon3
kAllKeysUnion	tree/build-tree-questions.h	/^typedef enum { kAllKeysInsistIdentical, kAllKeysIntersection, kAllKeysUnion } AllKeysType;$/;"	e	enum:kaldi::__anon3
kaldi	tree/build-tree-questions.h	/^namespace kaldi {$/;"	n
key_idx_	tree/build-tree-questions.h	/^  std::map<EventKeyType, size_t> key_idx_;$/;"	m	class:kaldi::Questions
key_options_	tree/build-tree-questions.h	/^  std::vector<QuestionsForKey*> key_options_;$/;"	m	class:kaldi::Questions
refine_opts	tree/build-tree-questions.h	/^  RefineClustersOptions refine_opts;  \/\/ if refine_opts.max_iter == 0,$/;"	m	struct:kaldi::QuestionsForKey
~Questions	tree/build-tree-questions.h	/^  ~Questions() { kaldi::DeletePointers(&key_options_); }$/;"	f	class:kaldi::Questions
TestBuildTree	tree/build-tree-test.cc	/^void TestBuildTree() {$/;"	f	namespace:kaldi
TestGenRandStats	tree/build-tree-test.cc	/^void TestGenRandStats() {$/;"	f	namespace:kaldi
kaldi	tree/build-tree-test.cc	/^namespace kaldi {$/;"	n	file:
main	tree/build-tree-test.cc	/^int main() {$/;"	f
TestBuildTreeStatsIo	tree/build-tree-utils-test.cc	/^void TestBuildTreeStatsIo(bool binary) {$/;"	f	namespace:kaldi
TestClusterEventMap	tree/build-tree-utils-test.cc	/^void TestClusterEventMap() {$/;"	f	namespace:kaldi
TestClusterEventMapGetMappingAndRenumberEventMap	tree/build-tree-utils-test.cc	/^void TestClusterEventMapGetMappingAndRenumberEventMap() {$/;"	f	namespace:kaldi
TestClusterEventMapGetMappingAndRenumberEventMap2	tree/build-tree-utils-test.cc	/^void TestClusterEventMapGetMappingAndRenumberEventMap2() {$/;"	f	namespace:kaldi
TestClusterEventMapRestricted	tree/build-tree-utils-test.cc	/^void TestClusterEventMapRestricted() {$/;"	f	namespace:kaldi
TestConvertStats	tree/build-tree-utils-test.cc	/^void TestConvertStats() {$/;"	f	namespace:kaldi
TestDoTableSplit	tree/build-tree-utils-test.cc	/^void TestDoTableSplit() {$/;"	f	namespace:kaldi
TestFindAllKeys	tree/build-tree-utils-test.cc	/^void TestFindAllKeys() {$/;"	f	namespace:kaldi
TestPossibleValues	tree/build-tree-utils-test.cc	/^void TestPossibleValues() {$/;"	f	namespace:kaldi
TestQuestionsInitRand	tree/build-tree-utils-test.cc	/^void TestQuestionsInitRand() {$/;"	f	namespace:kaldi
TestShareEventMapLeaves	tree/build-tree-utils-test.cc	/^void TestShareEventMapLeaves() {$/;"	f	namespace:kaldi
TestSplitDecisionTree	tree/build-tree-utils-test.cc	/^void TestSplitDecisionTree() {$/;"	f	namespace:kaldi
TestSplitStatsByKey	tree/build-tree-utils-test.cc	/^void TestSplitStatsByKey() {$/;"	f	namespace:kaldi
TestTrivialTree	tree/build-tree-utils-test.cc	/^void TestTrivialTree() {$/;"	f	namespace:kaldi
kaldi	tree/build-tree-utils-test.cc	/^namespace kaldi {$/;"	n	file:
main	tree/build-tree-utils-test.cc	/^int main() {$/;"	f
BestSplit	tree/build-tree-utils.cc	/^  BaseFloat BestSplit() { return best_split_impr_; } \/\/ returns objf improvement (>=0) of best possible split.$/;"	f	class:kaldi::DecisionTreeSplitter
ClusterEventMap	tree/build-tree-utils.cc	/^EventMap *ClusterEventMap(const EventMap &e_in, const BuildTreeStatsType &stats,$/;"	f	namespace:kaldi
ClusterEventMapGetMapping	tree/build-tree-utils.cc	/^int ClusterEventMapGetMapping(const EventMap &e_in,$/;"	f	namespace:kaldi
ClusterEventMapRestrictedByKeys	tree/build-tree-utils.cc	/^EventMap *ClusterEventMapRestrictedByKeys(const EventMap &e_in,$/;"	f	namespace:kaldi
ClusterEventMapRestrictedByMap	tree/build-tree-utils.cc	/^EventMap *ClusterEventMapRestrictedByMap(const EventMap &e_in,$/;"	f	namespace:kaldi
ClusterEventMapRestrictedHelper	tree/build-tree-utils.cc	/^static int32 ClusterEventMapRestrictedHelper(const EventMap &e_in,$/;"	f	namespace:kaldi
ComputeInitialSplit	tree/build-tree-utils.cc	/^BaseFloat ComputeInitialSplit(const std::vector<Clusterable*> &summed_stats,$/;"	f	namespace:kaldi
ConvertStats	tree/build-tree-utils.cc	/^bool ConvertStats(int32 oldN, int32 oldP, int32 newN, int32 newP,$/;"	f	namespace:kaldi
DecisionTreeSplitter	tree/build-tree-utils.cc	/^  DecisionTreeSplitter(EventAnswerType leaf, const BuildTreeStatsType &stats,$/;"	f	class:kaldi::DecisionTreeSplitter
DecisionTreeSplitter	tree/build-tree-utils.cc	/^class DecisionTreeSplitter {$/;"	c	namespace:kaldi	file:
DeleteBuildTreeStats	tree/build-tree-utils.cc	/^void DeleteBuildTreeStats(BuildTreeStatsType *stats) {$/;"	f	namespace:kaldi
DoSplit	tree/build-tree-utils.cc	/^  void DoSplit(int32 *next_leaf) {$/;"	f	class:kaldi::DecisionTreeSplitter
DoSplitInternal	tree/build-tree-utils.cc	/^  void DoSplitInternal(int32 *next_leaf) {$/;"	f	class:kaldi::DecisionTreeSplitter	file:
DoTableSplit	tree/build-tree-utils.cc	/^EventMap *DoTableSplit(const EventMap &orig, EventKeyType key,  const BuildTreeStatsType &stats,$/;"	f	namespace:kaldi
DoTableSplitMultiple	tree/build-tree-utils.cc	/^EventMap *DoTableSplitMultiple(const EventMap &orig, const std::vector<EventKeyType> &keys,  const BuildTreeStatsType &stats, int32 *num_leaves) {$/;"	f	namespace:kaldi
FilterStatsByKey	tree/build-tree-utils.cc	/^void FilterStatsByKey(const BuildTreeStatsType &stats_in,$/;"	f	namespace:kaldi
FindAllKeys	tree/build-tree-utils.cc	/^void FindAllKeys(const BuildTreeStatsType &stats, AllKeysType keys_type, std::vector<EventKeyType> *keys_out) {$/;"	f	namespace:kaldi
FindBestSplit	tree/build-tree-utils.cc	/^  void FindBestSplit() {$/;"	f	class:kaldi::DecisionTreeSplitter	file:
FindBestSplitForKey	tree/build-tree-utils.cc	/^BaseFloat FindBestSplitForKey(const BuildTreeStatsType &stats,$/;"	f	namespace:kaldi
GetEventKeys	tree/build-tree-utils.cc	/^static void GetEventKeys(const EventType &vec, std::vector<EventKeyType> *keys) {$/;"	f	namespace:kaldi
GetMap	tree/build-tree-utils.cc	/^  EventMap *GetMap() {$/;"	f	class:kaldi::DecisionTreeSplitter
GetStubMap	tree/build-tree-utils.cc	/^EventMap *GetStubMap(int32 P,$/;"	f	namespace:kaldi
GetToLengthMap	tree/build-tree-utils.cc	/^EventMap *GetToLengthMap(const BuildTreeStatsType &stats, int32 P,$/;"	f	namespace:kaldi
MapEventMapLeaves	tree/build-tree-utils.cc	/^EventMap *MapEventMapLeaves(const EventMap &e_in,$/;"	f	namespace:kaldi
ObjfGivenMap	tree/build-tree-utils.cc	/^BaseFloat ObjfGivenMap(const BuildTreeStatsType &stats_in, const EventMap &e) {$/;"	f	namespace:kaldi
PossibleValues	tree/build-tree-utils.cc	/^bool PossibleValues(EventKeyType key,$/;"	f	namespace:kaldi
ReadBuildTreeStats	tree/build-tree-utils.cc	/^void ReadBuildTreeStats(std::istream &is, bool binary, const Clusterable &example, BuildTreeStatsType *stats) {$/;"	f	namespace:kaldi
RenumberEventMap	tree/build-tree-utils.cc	/^EventMap *RenumberEventMap(const EventMap &e_in, int32 *num_leaves) {$/;"	f	namespace:kaldi
ShareEventMapLeaves	tree/build-tree-utils.cc	/^EventMap *ShareEventMapLeaves(const EventMap &e_in, EventKeyType key,$/;"	f	namespace:kaldi
SplitDecisionTree	tree/build-tree-utils.cc	/^EventMap *SplitDecisionTree(const EventMap &input_map,$/;"	f	namespace:kaldi
SplitStatsByKey	tree/build-tree-utils.cc	/^void SplitStatsByKey(const BuildTreeStatsType &stats_in, EventKeyType key, std::vector<BuildTreeStatsType> *stats_out) {$/;"	f	namespace:kaldi
SplitStatsByMap	tree/build-tree-utils.cc	/^void SplitStatsByMap(const BuildTreeStatsType &stats, const EventMap &e, std::vector<BuildTreeStatsType> *stats_out) {$/;"	f	namespace:kaldi
SumNormalizer	tree/build-tree-utils.cc	/^BaseFloat SumNormalizer(const BuildTreeStatsType &stats_in) {$/;"	f	namespace:kaldi
SumObjf	tree/build-tree-utils.cc	/^BaseFloat SumObjf(const BuildTreeStatsType &stats_in) {$/;"	f	namespace:kaldi
SumStats	tree/build-tree-utils.cc	/^Clusterable *SumStats(const BuildTreeStatsType &stats_in) {$/;"	f	namespace:kaldi
SumStatsVec	tree/build-tree-utils.cc	/^void SumStatsVec(const std::vector<BuildTreeStatsType> &stats_in, std::vector<Clusterable*> *stats_out) {$/;"	f	namespace:kaldi
WriteBuildTreeStats	tree/build-tree-utils.cc	/^void WriteBuildTreeStats(std::ostream &os, bool binary, const BuildTreeStatsType &stats) {$/;"	f	namespace:kaldi
best_split_impr_	tree/build-tree-utils.cc	/^  BaseFloat best_split_impr_;$/;"	m	class:kaldi::DecisionTreeSplitter	file:
kaldi	tree/build-tree-utils.cc	/^namespace kaldi {$/;"	n	file:
key_	tree/build-tree-utils.cc	/^  EventKeyType key_;$/;"	m	class:kaldi::DecisionTreeSplitter	file:
leaf_	tree/build-tree-utils.cc	/^  EventAnswerType leaf_;$/;"	m	class:kaldi::DecisionTreeSplitter	file:
no_	tree/build-tree-utils.cc	/^  DecisionTreeSplitter *no_;$/;"	m	class:kaldi::DecisionTreeSplitter	file:
q_opts_	tree/build-tree-utils.cc	/^  const Questions &q_opts_;$/;"	m	class:kaldi::DecisionTreeSplitter	file:
stats_	tree/build-tree-utils.cc	/^  BuildTreeStatsType stats_;  \/\/ vector of stats.  pointers inside there not owned here.$/;"	m	class:kaldi::DecisionTreeSplitter	file:
yes_	tree/build-tree-utils.cc	/^  DecisionTreeSplitter *yes_;$/;"	m	class:kaldi::DecisionTreeSplitter	file:
yes_set_	tree/build-tree-utils.cc	/^  std::vector<EventValueType> yes_set_;$/;"	m	class:kaldi::DecisionTreeSplitter	file:
~DecisionTreeSplitter	tree/build-tree-utils.cc	/^  ~DecisionTreeSplitter() {$/;"	f	class:kaldi::DecisionTreeSplitter
KALDI_TREE_BUILD_TREE_UTILS_H_	tree/build-tree-utils.h	21;"	d
TrivialTree	tree/build-tree-utils.h	/^inline EventMap *TrivialTree(int32 *num_leaves) {$/;"	f	namespace:kaldi
kaldi	tree/build-tree-utils.h	/^namespace kaldi {$/;"	n
AutomaticallyObtainQuestions	tree/build-tree.cc	/^void AutomaticallyObtainQuestions(BuildTreeStatsType &stats,$/;"	f	namespace:kaldi
BuildTree	tree/build-tree.cc	/^EventMap *BuildTree(Questions &qopts,$/;"	f	namespace:kaldi
BuildTreeTwoLevel	tree/build-tree.cc	/^EventMap *BuildTreeTwoLevel(Questions &qopts,$/;"	f	namespace:kaldi
ComputeTreeMapping	tree/build-tree.cc	/^static void ComputeTreeMapping(const EventMap &small_tree,$/;"	f	namespace:kaldi
GenRandStats	tree/build-tree.cc	/^void GenRandStats(int32 dim, int32 num_stats, int32 N, int32 P,$/;"	f	namespace:kaldi
KMeansClusterPhones	tree/build-tree.cc	/^void KMeansClusterPhones(BuildTreeStatsType &stats,$/;"	f	namespace:kaldi
ObtainSetsOfPhones	tree/build-tree.cc	/^static void ObtainSetsOfPhones(const std::vector<std::vector<int32> > &phone_sets,  \/\/ the original phone sets, may$/;"	f	namespace:kaldi
ReadRootsFile	tree/build-tree.cc	/^void ReadRootsFile(std::istream &is,$/;"	f	namespace:kaldi
ReadSymbolTableAsIntegers	tree/build-tree.cc	/^void ReadSymbolTableAsIntegers(std::string filename,$/;"	f	namespace:kaldi
kaldi	tree/build-tree.cc	/^namespace kaldi {$/;"	n	file:
KALDI_TREE_BUILD_TREE_H_	tree/build-tree.h	21;"	d
kaldi	tree/build-tree.h	/^namespace kaldi {$/;"	n
TestAddToClusters	tree/cluster-utils-test.cc	/^static void TestAddToClusters() {$/;"	f	namespace:kaldi
TestAddToClustersOptimized	tree/cluster-utils-test.cc	/^static void TestAddToClustersOptimized() {$/;"	f	namespace:kaldi
TestClusterBottomUp	tree/cluster-utils-test.cc	/^static void TestClusterBottomUp() {$/;"	f	namespace:kaldi
TestClusterKMeans	tree/cluster-utils-test.cc	/^static void TestClusterKMeans() {$/;"	f	namespace:kaldi
TestClusterKMeansVector	tree/cluster-utils-test.cc	/^static void TestClusterKMeansVector() {$/;"	f	namespace:kaldi
TestClusterTopDown	tree/cluster-utils-test.cc	/^static void TestClusterTopDown() {$/;"	f	namespace:kaldi
TestClusterUtils	tree/cluster-utils-test.cc	/^static void TestClusterUtils() {  \/\/ just some very basic tests of the GaussClusterable class.$/;"	f	namespace:kaldi
TestClusterUtilsVector	tree/cluster-utils-test.cc	/^static void TestClusterUtilsVector() {  \/\/ just some very basic tests of the VectorClusterable class.$/;"	f	namespace:kaldi
TestDistance	tree/cluster-utils-test.cc	/^static void TestDistance() {$/;"	f	namespace:kaldi
TestEnsureClusterableVectorNotNull	tree/cluster-utils-test.cc	/^static void TestEnsureClusterableVectorNotNull() {$/;"	f	namespace:kaldi
TestObjfMinus	tree/cluster-utils-test.cc	/^static void TestObjfMinus() {$/;"	f	namespace:kaldi
TestObjfPlus	tree/cluster-utils-test.cc	/^static void TestObjfPlus() {$/;"	f	namespace:kaldi
TestRefineClusters	tree/cluster-utils-test.cc	/^static void TestRefineClusters() {$/;"	f	namespace:kaldi
TestSum	tree/cluster-utils-test.cc	/^static void TestSum() {$/;"	f	namespace:kaldi
TestSumObjfAndSumNormalizer	tree/cluster-utils-test.cc	/^static void TestSumObjfAndSumNormalizer() {$/;"	f	namespace:kaldi
TestTreeCluster	tree/cluster-utils-test.cc	/^static void TestTreeCluster() {$/;"	f	namespace:kaldi
kaldi	tree/cluster-utils-test.cc	/^namespace kaldi {$/;"	n	file:
main	tree/cluster-utils-test.cc	/^int main() {$/;"	f
AddToClusters	tree/cluster-utils.cc	/^void AddToClusters(const std::vector<Clusterable*> &stats,$/;"	f	namespace:kaldi
AddToClustersOptimized	tree/cluster-utils.cc	/^void AddToClustersOptimized(const std::vector<Clusterable*> &stats,$/;"	f	namespace:kaldi
BottomUpClusterer	tree/cluster-utils.cc	/^  BottomUpClusterer(const std::vector<Clusterable*> &points,$/;"	f	class:kaldi::BottomUpClusterer
BottomUpClusterer	tree/cluster-utils.cc	/^class BottomUpClusterer {$/;"	c	namespace:kaldi	file:
CanMerge	tree/cluster-utils.cc	/^bool BottomUpClusterer::CanMerge(int32 i, int32 j, BaseFloat dist) {$/;"	f	class:kaldi::BottomUpClusterer
CanMerge	tree/cluster-utils.cc	/^bool CompartmentalizedBottomUpClusterer::CanMerge(int32 comp, int32 i, int32 j,$/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
ClustIndexInt	tree/cluster-utils.cc	/^  typedef uint_smaller ClustIndexInt;$/;"	t	class:kaldi::RefineClusterer	file:
Cluster	tree/cluster-utils.cc	/^  BaseFloat Cluster(std::vector<Clusterable*> *clusters_out,$/;"	f	class:kaldi::TreeClusterer
Cluster	tree/cluster-utils.cc	/^BaseFloat BottomUpClusterer::Cluster() {$/;"	f	class:kaldi::BottomUpClusterer
Cluster	tree/cluster-utils.cc	/^BaseFloat CompartmentalizedBottomUpClusterer::Cluster($/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
ClusterBottomUp	tree/cluster-utils.cc	/^BaseFloat ClusterBottomUp(const std::vector<Clusterable*> &points,$/;"	f	namespace:kaldi
ClusterBottomUpCompartmentalized	tree/cluster-utils.cc	/^BaseFloat ClusterBottomUpCompartmentalized($/;"	f	namespace:kaldi
ClusterKMeans	tree/cluster-utils.cc	/^BaseFloat ClusterKMeans(const std::vector<Clusterable*> &points,$/;"	f	namespace:kaldi
ClusterKMeansOnce	tree/cluster-utils.cc	/^BaseFloat ClusterKMeansOnce(const std::vector<Clusterable*> &points,$/;"	f	namespace:kaldi
ClusterTopDown	tree/cluster-utils.cc	/^BaseFloat ClusterTopDown(const std::vector<Clusterable*> &points,$/;"	f	namespace:kaldi
CompBotClustElem	tree/cluster-utils.cc	/^  CompBotClustElem(BaseFloat d, int32 comp, int32 i, int32 j)$/;"	f	struct:kaldi::CompBotClustElem
CompBotClustElem	tree/cluster-utils.cc	/^struct CompBotClustElem {$/;"	s	namespace:kaldi	file:
CompartmentalizedBottomUpClusterer	tree/cluster-utils.cc	/^  CompartmentalizedBottomUpClusterer($/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
CompartmentalizedBottomUpClusterer	tree/cluster-utils.cc	/^class CompartmentalizedBottomUpClusterer {$/;"	c	namespace:kaldi	file:
CreateAssignmentsOutput	tree/cluster-utils.cc	/^  void CreateAssignmentsOutput(std::vector<int32> *assignments_out) {$/;"	f	class:kaldi::TreeClusterer	file:
CreateClustAssignmentsOutput	tree/cluster-utils.cc	/^  void CreateClustAssignmentsOutput(std::vector<int32> *clust_assignments_out) {$/;"	f	class:kaldi::TreeClusterer	file:
CreateClustersOutput	tree/cluster-utils.cc	/^  void CreateClustersOutput(std::vector<Clusterable*> *clusters_out) {$/;"	f	class:kaldi::TreeClusterer	file:
CreateOutput	tree/cluster-utils.cc	/^  void CreateOutput(std::vector<Clusterable*> *clusters_out,$/;"	f	class:kaldi::TreeClusterer	file:
Distance	tree/cluster-utils.cc	/^  BaseFloat& Distance(int32 i, int32 j) {$/;"	f	class:kaldi::BottomUpClusterer	file:
DoSplit	tree/cluster-utils.cc	/^  void DoSplit(Node *node) {$/;"	f	class:kaldi::TreeClusterer	file:
EnsureClusterableVectorNotNull	tree/cluster-utils.cc	/^void EnsureClusterableVectorNotNull(std::vector<Clusterable*> *stats) {$/;"	f	namespace:kaldi
FindBestSplit	tree/cluster-utils.cc	/^  void FindBestSplit(Node *node) {$/;"	f	class:kaldi::TreeClusterer	file:
GetInfo	tree/cluster-utils.cc	/^  point_info &GetInfo(int32 point, int32 idx) {$/;"	f	class:kaldi::RefineClusterer	file:
Init	tree/cluster-utils.cc	/^  void Init() {  \/\/ Initializes top node.$/;"	f	class:kaldi::TreeClusterer	file:
InitPoint	tree/cluster-utils.cc	/^  void InitPoint(int32 point) {$/;"	f	class:kaldi::RefineClusterer	file:
InitPoints	tree/cluster-utils.cc	/^  void InitPoints() {$/;"	f	class:kaldi::RefineClusterer	file:
InitializeAssignments	tree/cluster-utils.cc	/^void BottomUpClusterer::InitializeAssignments() {$/;"	f	class:kaldi::BottomUpClusterer
InitializeAssignments	tree/cluster-utils.cc	/^void CompartmentalizedBottomUpClusterer::InitializeAssignments() {$/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
Iterate	tree/cluster-utils.cc	/^  void Iterate() {$/;"	f	class:kaldi::RefineClusterer	file:
LocalInt	tree/cluster-utils.cc	/^  typedef int32 LocalInt;$/;"	t	class:kaldi::RefineClusterer	file:
MergeClusters	tree/cluster-utils.cc	/^BaseFloat CompartmentalizedBottomUpClusterer::MergeClusters(int32 comp, int32 i,$/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
MergeClusters	tree/cluster-utils.cc	/^void BottomUpClusterer::MergeClusters(int32 i, int32 j) {$/;"	f	class:kaldi::BottomUpClusterer
MovePoint	tree/cluster-utils.cc	/^  void MovePoint(int32 point, int32 new_index) {$/;"	f	class:kaldi::RefineClusterer	file:
Node	tree/cluster-utils.cc	/^  struct Node {$/;"	s	class:kaldi::TreeClusterer	file:
NonleafOutputIndex	tree/cluster-utils.cc	/^  int32 NonleafOutputIndex(int32 index) {$/;"	f	class:kaldi::TreeClusterer	file:
ProcessPoint	tree/cluster-utils.cc	/^  void ProcessPoint(int32 point) {$/;"	f	class:kaldi::RefineClusterer	file:
QueueElement	tree/cluster-utils.cc	/^  typedef std::pair<BaseFloat, std::pair<uint_smaller, uint_smaller> > QueueElement;$/;"	t	class:kaldi::BottomUpClusterer	file:
QueueType	tree/cluster-utils.cc	/^      std::greater<CompBotClustElem> > QueueType;$/;"	t	class:kaldi::CompartmentalizedBottomUpClusterer	file:
QueueType	tree/cluster-utils.cc	/^      std::greater<QueueElement>  > QueueType;$/;"	t	class:kaldi::BottomUpClusterer	file:
Read	tree/cluster-utils.cc	/^void RefineClustersOptions::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::RefineClustersOptions
ReconstructQueue	tree/cluster-utils.cc	/^void BottomUpClusterer::ReconstructQueue() {$/;"	f	class:kaldi::BottomUpClusterer
ReconstructQueue	tree/cluster-utils.cc	/^void CompartmentalizedBottomUpClusterer::ReconstructQueue() {$/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
Refine	tree/cluster-utils.cc	/^  BaseFloat Refine() {$/;"	f	class:kaldi::RefineClusterer
RefineClusterer	tree/cluster-utils.cc	/^  RefineClusterer(const std::vector<Clusterable*> &points,$/;"	f	class:kaldi::RefineClusterer
RefineClusterer	tree/cluster-utils.cc	/^class RefineClusterer {$/;"	c	namespace:kaldi	file:
RefineClusters	tree/cluster-utils.cc	/^BaseFloat RefineClusters(const std::vector<Clusterable*> &points,$/;"	f	namespace:kaldi
Renumber	tree/cluster-utils.cc	/^void BottomUpClusterer::Renumber() {$/;"	f	class:kaldi::BottomUpClusterer
Renumber	tree/cluster-utils.cc	/^void CompartmentalizedBottomUpClusterer::Renumber(int32 comp) {$/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
SetDistance	tree/cluster-utils.cc	/^void BottomUpClusterer::SetDistance(int32 i, int32 j) {$/;"	f	class:kaldi::BottomUpClusterer
SetDistance	tree/cluster-utils.cc	/^void CompartmentalizedBottomUpClusterer::SetDistance(int32 comp,$/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
SetInitialDistances	tree/cluster-utils.cc	/^void BottomUpClusterer::SetInitialDistances() {$/;"	f	class:kaldi::BottomUpClusterer
SetInitialDistances	tree/cluster-utils.cc	/^void CompartmentalizedBottomUpClusterer::SetInitialDistances() {$/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
SumClusterable	tree/cluster-utils.cc	/^Clusterable* SumClusterable(const std::vector<Clusterable*> &vec) {$/;"	f	namespace:kaldi
SumClusterableNormalizer	tree/cluster-utils.cc	/^BaseFloat SumClusterableNormalizer(const std::vector<Clusterable*> &vec) {$/;"	f	namespace:kaldi
SumClusterableObjf	tree/cluster-utils.cc	/^BaseFloat SumClusterableObjf(const std::vector<Clusterable*> &vec) {$/;"	f	namespace:kaldi
TreeCluster	tree/cluster-utils.cc	/^BaseFloat TreeCluster(const std::vector<Clusterable*> &points,$/;"	f	namespace:kaldi
TreeClusterer	tree/cluster-utils.cc	/^  TreeClusterer(const std::vector<Clusterable*> &points,$/;"	f	class:kaldi::TreeClusterer
TreeClusterer	tree/cluster-utils.cc	/^class TreeClusterer {$/;"	c	namespace:kaldi	file:
UpdateClust	tree/cluster-utils.cc	/^  void UpdateClust(int32 clust) {$/;"	f	class:kaldi::RefineClusterer	file:
UpdateInfo	tree/cluster-utils.cc	/^  void UpdateInfo(int32 point, int32 idx) {$/;"	f	class:kaldi::RefineClusterer	file:
Write	tree/cluster-utils.cc	/^void RefineClustersOptions::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::RefineClustersOptions
ans_	tree/cluster-utils.cc	/^  BaseFloat ans_;  \/\/ objf improvement.$/;"	m	class:kaldi::RefineClusterer	file:
ans_	tree/cluster-utils.cc	/^  BaseFloat ans_;  \/\/ objf improvement.$/;"	m	class:kaldi::TreeClusterer	file:
ans_	tree/cluster-utils.cc	/^  BaseFloat ans_;$/;"	m	class:kaldi::BottomUpClusterer	file:
assignments	tree/cluster-utils.cc	/^      std::vector<int32> assignments;  \/\/ assignments of points to clusters.$/;"	m	struct:kaldi::TreeClusterer::Node::__anon2	file:
assignments_	tree/cluster-utils.cc	/^  std::vector<int32> *assignments_;$/;"	m	class:kaldi::BottomUpClusterer	file:
assignments_	tree/cluster-utils.cc	/^  std::vector<int32> *assignments_;$/;"	m	class:kaldi::RefineClusterer	file:
assignments_	tree/cluster-utils.cc	/^  vector< vector<int32> > assignments_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
best_split	tree/cluster-utils.cc	/^      BaseFloat best_split;$/;"	m	struct:kaldi::TreeClusterer::Node::__anon2	file:
cfg_	tree/cluster-utils.cc	/^  RefineClustersOptions cfg_;  \/\/ note, we change top_n in config; don't make this member a reference member.$/;"	m	class:kaldi::RefineClusterer	file:
cfg_	tree/cluster-utils.cc	/^  TreeClusterOptions cfg_;$/;"	m	class:kaldi::TreeClusterer	file:
children	tree/cluster-utils.cc	/^    std::vector<Node*> children;  \/\/ vector of size branch_factor.   if non-leaf.$/;"	m	struct:kaldi::TreeClusterer::Node	file:
clust	tree/cluster-utils.cc	/^    LocalInt clust;$/;"	m	struct:kaldi::RefineClusterer::__anon1	file:
clust_objf_	tree/cluster-utils.cc	/^  std::vector<BaseFloat> clust_objf_;  \/\/ [clust], objf for cluster.$/;"	m	class:kaldi::RefineClusterer	file:
clust_time_	tree/cluster-utils.cc	/^  std::vector<LocalInt> clust_time_;  \/\/ Modification time of cluster.$/;"	m	class:kaldi::RefineClusterer	file:
clusters	tree/cluster-utils.cc	/^      std::vector<Clusterable*> clusters;  \/\/ [branch_factor]... if we do split.$/;"	m	struct:kaldi::TreeClusterer::Node::__anon2	file:
clusters_	tree/cluster-utils.cc	/^  std::vector<Clusterable*> *clusters_;$/;"	m	class:kaldi::BottomUpClusterer	file:
clusters_	tree/cluster-utils.cc	/^  std::vector<Clusterable*> *clusters_;$/;"	m	class:kaldi::RefineClusterer	file:
clusters_	tree/cluster-utils.cc	/^  vector< vector<Clusterable*> > clusters_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
compartment	tree/cluster-utils.cc	/^  int32 compartment, point1, point2;$/;"	m	struct:kaldi::CompBotClustElem	file:
dist	tree/cluster-utils.cc	/^  BaseFloat dist;$/;"	m	struct:kaldi::CompBotClustElem	file:
dist_vec_	tree/cluster-utils.cc	/^  std::vector<BaseFloat> dist_vec_;$/;"	m	class:kaldi::BottomUpClusterer	file:
dist_vec_	tree/cluster-utils.cc	/^  vector< vector<BaseFloat> > dist_vec_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
index	tree/cluster-utils.cc	/^    int32 index;  \/\/ index into leaf_nodes or nonleaf_nodes as applicable.$/;"	m	struct:kaldi::TreeClusterer::Node	file:
info_	tree/cluster-utils.cc	/^  std::vector<point_info> info_;  \/\/ size is [num_points_ * cfg_.top_n].$/;"	m	class:kaldi::RefineClusterer	file:
int_smaller	tree/cluster-utils.cc	/^typedef int16 int_smaller;$/;"	t	namespace:kaldi	file:
is_leaf	tree/cluster-utils.cc	/^    bool is_leaf;$/;"	m	struct:kaldi::TreeClusterer::Node	file:
kaldi	tree/cluster-utils.cc	/^namespace kaldi {$/;"	n	file:
leaf	tree/cluster-utils.cc	/^    } leaf;$/;"	m	struct:kaldi::TreeClusterer::Node	typeref:struct:kaldi::TreeClusterer::Node::__anon2	file:
leaf_nodes_	tree/cluster-utils.cc	/^  std::vector<Node*> leaf_nodes_;$/;"	m	class:kaldi::TreeClusterer	file:
max_clust_	tree/cluster-utils.cc	/^  int32 max_clust_;$/;"	m	class:kaldi::TreeClusterer	file:
max_merge_thresh_	tree/cluster-utils.cc	/^  BaseFloat max_merge_thresh_;$/;"	m	class:kaldi::BottomUpClusterer	file:
max_merge_thresh_	tree/cluster-utils.cc	/^  BaseFloat max_merge_thresh_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
min_clust_	tree/cluster-utils.cc	/^  int32 min_clust_;$/;"	m	class:kaldi::BottomUpClusterer	file:
min_clust_	tree/cluster-utils.cc	/^  int32 min_clust_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
my_clust_index_	tree/cluster-utils.cc	/^  std::vector<ClustIndexInt> my_clust_index_;  \/\/ says for each point, which index 0...cfg_.top_n-1 currently$/;"	m	class:kaldi::RefineClusterer	file:
nclusters_	tree/cluster-utils.cc	/^  int32 nclusters_;$/;"	m	class:kaldi::BottomUpClusterer	file:
nclusters_	tree/cluster-utils.cc	/^  int32 ncompartments_, nclusters_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
ncompartments_	tree/cluster-utils.cc	/^  int32 ncompartments_, nclusters_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
node_total	tree/cluster-utils.cc	/^    Clusterable *node_total;  \/\/ sum of all data with this node.$/;"	m	struct:kaldi::TreeClusterer::Node	file:
nonleaf_nodes_	tree/cluster-utils.cc	/^  std::vector<Node*> nonleaf_nodes_;$/;"	m	class:kaldi::TreeClusterer	file:
npoints_	tree/cluster-utils.cc	/^  int32 npoints_;$/;"	m	class:kaldi::BottomUpClusterer	file:
npoints_	tree/cluster-utils.cc	/^  vector<int32> npoints_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
num_clust_	tree/cluster-utils.cc	/^  int32 num_clust_;$/;"	m	class:kaldi::RefineClusterer	file:
num_points_	tree/cluster-utils.cc	/^  int32 num_points_;$/;"	m	class:kaldi::RefineClusterer	file:
objf	tree/cluster-utils.cc	/^    BaseFloat objf;  \/\/ Objf of this cluster plus this point (or minus, if own cluster).$/;"	m	struct:kaldi::RefineClusterer::__anon1	file:
operator >	tree/cluster-utils.cc	/^bool operator > (const CompBotClustElem &a, const CompBotClustElem &b) {$/;"	f	namespace:kaldi
parent	tree/cluster-utils.cc	/^    Node *parent;$/;"	m	struct:kaldi::TreeClusterer::Node	file:
point1	tree/cluster-utils.cc	/^  int32 compartment, point1, point2;$/;"	m	struct:kaldi::CompBotClustElem	file:
point2	tree/cluster-utils.cc	/^  int32 compartment, point1, point2;$/;"	m	struct:kaldi::CompBotClustElem	file:
point_indices	tree/cluster-utils.cc	/^      std::vector<int32> point_indices;$/;"	m	struct:kaldi::TreeClusterer::Node::__anon2	file:
point_info	tree/cluster-utils.cc	/^  } point_info;$/;"	t	class:kaldi::RefineClusterer	typeref:struct:kaldi::RefineClusterer::__anon1	file:
points	tree/cluster-utils.cc	/^      std::vector<Clusterable*> points;$/;"	m	struct:kaldi::TreeClusterer::Node::__anon2	file:
points_	tree/cluster-utils.cc	/^  const std::vector<Clusterable*> &points_;$/;"	m	class:kaldi::BottomUpClusterer	file:
points_	tree/cluster-utils.cc	/^  const std::vector<Clusterable*> &points_;$/;"	m	class:kaldi::RefineClusterer	file:
points_	tree/cluster-utils.cc	/^  const std::vector<Clusterable*> &points_;$/;"	m	class:kaldi::TreeClusterer	file:
points_	tree/cluster-utils.cc	/^  const vector< vector<Clusterable*> > &points_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
queue_	tree/cluster-utils.cc	/^  QueueType queue_;$/;"	m	class:kaldi::BottomUpClusterer	file:
queue_	tree/cluster-utils.cc	/^  QueueType queue_;$/;"	m	class:kaldi::CompartmentalizedBottomUpClusterer	file:
queue_	tree/cluster-utils.cc	/^  std::priority_queue<std::pair<BaseFloat, Node*> > queue_;  \/\/ contains leaves.$/;"	m	class:kaldi::TreeClusterer	file:
t_	tree/cluster-utils.cc	/^  int32 t_;$/;"	m	class:kaldi::RefineClusterer	file:
time	tree/cluster-utils.cc	/^    LocalInt time;$/;"	m	struct:kaldi::RefineClusterer::__anon1	file:
tmp_assignments_	tree/cluster-utils.cc	/^  std::vector<int32> tmp_assignments_;$/;"	m	class:kaldi::BottomUpClusterer	file:
tmp_clusters_	tree/cluster-utils.cc	/^  std::vector<Clusterable*> tmp_clusters_;$/;"	m	class:kaldi::BottomUpClusterer	file:
uint_smaller	tree/cluster-utils.cc	/^typedef uint16 uint_smaller;$/;"	t	namespace:kaldi	file:
~BottomUpClusterer	tree/cluster-utils.cc	/^  ~BottomUpClusterer() { DeletePointers(&tmp_clusters_); }$/;"	f	class:kaldi::BottomUpClusterer
~CompartmentalizedBottomUpClusterer	tree/cluster-utils.cc	/^  ~CompartmentalizedBottomUpClusterer() {$/;"	f	class:kaldi::CompartmentalizedBottomUpClusterer
~TreeClusterer	tree/cluster-utils.cc	/^  ~TreeClusterer() {$/;"	f	class:kaldi::TreeClusterer
ClusterKMeansOptions	tree/cluster-utils.h	/^  ClusterKMeansOptions()$/;"	f	struct:kaldi::ClusterKMeansOptions
ClusterKMeansOptions	tree/cluster-utils.h	/^struct ClusterKMeansOptions {$/;"	s	namespace:kaldi
KALDI_TREE_CLUSTER_UTILS_H_	tree/cluster-utils.h	22;"	d
RefineClustersOptions	tree/cluster-utils.h	/^  RefineClustersOptions() : num_iters(100), top_n(5) {}$/;"	f	struct:kaldi::RefineClustersOptions
RefineClustersOptions	tree/cluster-utils.h	/^  RefineClustersOptions(int32 num_iters_in, int32 top_n_in)$/;"	f	struct:kaldi::RefineClustersOptions
RefineClustersOptions	tree/cluster-utils.h	/^struct RefineClustersOptions {$/;"	s	namespace:kaldi
TreeClusterOptions	tree/cluster-utils.h	/^  TreeClusterOptions()$/;"	f	struct:kaldi::TreeClusterOptions
TreeClusterOptions	tree/cluster-utils.h	/^struct TreeClusterOptions  {$/;"	s	namespace:kaldi
branch_factor	tree/cluster-utils.h	/^  int32 branch_factor;$/;"	m	struct:kaldi::TreeClusterOptions
kaldi	tree/cluster-utils.h	/^namespace kaldi {$/;"	n
kmeans_cfg	tree/cluster-utils.h	/^  ClusterKMeansOptions kmeans_cfg;$/;"	m	struct:kaldi::TreeClusterOptions
num_iters	tree/cluster-utils.h	/^  int32 num_iters;  \/\/ must be >= 0.  If zero, does nothing.$/;"	m	struct:kaldi::RefineClustersOptions
num_iters	tree/cluster-utils.h	/^  int32 num_iters;$/;"	m	struct:kaldi::ClusterKMeansOptions
num_tries	tree/cluster-utils.h	/^  int32 num_tries;  \/\/ if >1, try whole procedure >once and pick best.$/;"	m	struct:kaldi::ClusterKMeansOptions
refine_cfg	tree/cluster-utils.h	/^  RefineClustersOptions refine_cfg;$/;"	m	struct:kaldi::ClusterKMeansOptions
thresh	tree/cluster-utils.h	/^  BaseFloat thresh;  \/\/ Objf change: if >0, may be used to control number of leaves.$/;"	m	struct:kaldi::TreeClusterOptions
top_n	tree/cluster-utils.h	/^  int32 top_n;  \/\/ must be >= 2.$/;"	m	struct:kaldi::RefineClustersOptions
verbose	tree/cluster-utils.h	/^  bool verbose;$/;"	m	struct:kaldi::ClusterKMeansOptions
Add	tree/clusterable-classes.cc	/^void GaussClusterable::Add(const Clusterable &other_in) {$/;"	f	class:kaldi::GaussClusterable
Add	tree/clusterable-classes.cc	/^void ScalarClusterable::Add(const Clusterable &other_in) {$/;"	f	class:kaldi::ScalarClusterable
Add	tree/clusterable-classes.cc	/^void VectorClusterable::Add(const Clusterable &other_in) {$/;"	f	class:kaldi::VectorClusterable
AddStats	tree/clusterable-classes.cc	/^void GaussClusterable::AddStats(const VectorBase<BaseFloat> &vec,$/;"	f	class:kaldi::GaussClusterable
Copy	tree/clusterable-classes.cc	/^Clusterable* GaussClusterable::Copy() const {$/;"	f	class:kaldi::GaussClusterable
Copy	tree/clusterable-classes.cc	/^Clusterable* ScalarClusterable::Copy() const {$/;"	f	class:kaldi::ScalarClusterable
Copy	tree/clusterable-classes.cc	/^Clusterable* VectorClusterable::Copy() const {$/;"	f	class:kaldi::VectorClusterable
Distance	tree/clusterable-classes.cc	/^BaseFloat Clusterable::Distance(const Clusterable &other) const {$/;"	f	class:kaldi::Clusterable
Info	tree/clusterable-classes.cc	/^std::string ScalarClusterable::Info() {$/;"	f	class:kaldi::ScalarClusterable
Objf	tree/clusterable-classes.cc	/^BaseFloat GaussClusterable::Objf() const {$/;"	f	class:kaldi::GaussClusterable
Objf	tree/clusterable-classes.cc	/^BaseFloat ScalarClusterable::Objf() const {$/;"	f	class:kaldi::ScalarClusterable
Objf	tree/clusterable-classes.cc	/^BaseFloat VectorClusterable::Objf() const {$/;"	f	class:kaldi::VectorClusterable
ObjfMinus	tree/clusterable-classes.cc	/^BaseFloat Clusterable::ObjfMinus(const Clusterable &other) const {$/;"	f	class:kaldi::Clusterable
ObjfPlus	tree/clusterable-classes.cc	/^BaseFloat Clusterable::ObjfPlus(const Clusterable &other) const {$/;"	f	class:kaldi::Clusterable
Read	tree/clusterable-classes.cc	/^void GaussClusterable::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::GaussClusterable
Read	tree/clusterable-classes.cc	/^void ScalarClusterable::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::ScalarClusterable
Read	tree/clusterable-classes.cc	/^void VectorClusterable::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::VectorClusterable
ReadNew	tree/clusterable-classes.cc	/^Clusterable* GaussClusterable::ReadNew(std::istream &is, bool binary) const {$/;"	f	class:kaldi::GaussClusterable
ReadNew	tree/clusterable-classes.cc	/^Clusterable* ScalarClusterable::ReadNew(std::istream &is, bool binary) const {$/;"	f	class:kaldi::ScalarClusterable
ReadNew	tree/clusterable-classes.cc	/^Clusterable* VectorClusterable::ReadNew(std::istream &is, bool binary) const {$/;"	f	class:kaldi::VectorClusterable
Scale	tree/clusterable-classes.cc	/^void GaussClusterable::Scale(BaseFloat f) {$/;"	f	class:kaldi::GaussClusterable
Scale	tree/clusterable-classes.cc	/^void VectorClusterable::Scale(BaseFloat f) {$/;"	f	class:kaldi::VectorClusterable
Sub	tree/clusterable-classes.cc	/^void GaussClusterable::Sub(const Clusterable &other_in) {$/;"	f	class:kaldi::GaussClusterable
Sub	tree/clusterable-classes.cc	/^void ScalarClusterable::Sub(const Clusterable &other_in) {$/;"	f	class:kaldi::ScalarClusterable
Sub	tree/clusterable-classes.cc	/^void VectorClusterable::Sub(const Clusterable &other_in) {$/;"	f	class:kaldi::VectorClusterable
VectorClusterable	tree/clusterable-classes.cc	/^VectorClusterable::VectorClusterable(const Vector<BaseFloat> &vector,$/;"	f	class:kaldi::VectorClusterable
Write	tree/clusterable-classes.cc	/^void GaussClusterable::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::GaussClusterable
Write	tree/clusterable-classes.cc	/^void ScalarClusterable::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::ScalarClusterable
Write	tree/clusterable-classes.cc	/^void VectorClusterable::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::VectorClusterable
kaldi	tree/clusterable-classes.cc	/^namespace kaldi {$/;"	n	file:
GaussClusterable	tree/clusterable-classes.h	/^  GaussClusterable(): count_(0.0), var_floor_(0.0) {}$/;"	f	class:kaldi::GaussClusterable
GaussClusterable	tree/clusterable-classes.h	/^  GaussClusterable(int32 dim, BaseFloat var_floor):$/;"	f	class:kaldi::GaussClusterable
GaussClusterable	tree/clusterable-classes.h	/^class GaussClusterable: public Clusterable {$/;"	c	namespace:kaldi
GaussClusterable	tree/clusterable-classes.h	/^inline GaussClusterable::GaussClusterable(const Vector<BaseFloat> &x_stats,$/;"	f	class:kaldi::GaussClusterable
KALDI_TREE_CLUSTERABLE_CLASSES_H_	tree/clusterable-classes.h	22;"	d
Mean	tree/clusterable-classes.h	/^  BaseFloat Mean() { return (count_ != 0 ? x_\/count_ : 0.0); }$/;"	f	class:kaldi::ScalarClusterable
Normalizer	tree/clusterable-classes.h	/^  virtual BaseFloat Normalizer() const { return count_; }$/;"	f	class:kaldi::GaussClusterable
Normalizer	tree/clusterable-classes.h	/^  virtual BaseFloat Normalizer() const { return weight_; }$/;"	f	class:kaldi::VectorClusterable
Normalizer	tree/clusterable-classes.h	/^  virtual BaseFloat Normalizer() const {$/;"	f	class:kaldi::ScalarClusterable
ScalarClusterable	tree/clusterable-classes.h	/^  ScalarClusterable(): x_(0), x2_(0), count_(0) {}$/;"	f	class:kaldi::ScalarClusterable
ScalarClusterable	tree/clusterable-classes.h	/^  explicit ScalarClusterable(BaseFloat x): x_(x), x2_(x*x), count_(1) {}$/;"	f	class:kaldi::ScalarClusterable
ScalarClusterable	tree/clusterable-classes.h	/^class ScalarClusterable: public Clusterable {$/;"	c	namespace:kaldi
SetZero	tree/clusterable-classes.h	/^  virtual void SetZero() { count_ = x_ = x2_ = 0.0; }$/;"	f	class:kaldi::ScalarClusterable
SetZero	tree/clusterable-classes.h	/^  virtual void SetZero() { weight_ = 0.0; sumsq_ = 0.0; stats_.Set(0.0); }$/;"	f	class:kaldi::VectorClusterable
SetZero	tree/clusterable-classes.h	/^inline void GaussClusterable::SetZero() {$/;"	f	class:kaldi::GaussClusterable
Type	tree/clusterable-classes.h	/^  virtual std::string Type() const {  return "gauss"; }$/;"	f	class:kaldi::GaussClusterable
Type	tree/clusterable-classes.h	/^  virtual std::string Type() const {  return "vector"; }$/;"	f	class:kaldi::VectorClusterable
Type	tree/clusterable-classes.h	/^  virtual std::string Type() const { return "scalar"; }$/;"	f	class:kaldi::ScalarClusterable
VectorClusterable	tree/clusterable-classes.h	/^  VectorClusterable(): weight_(0.0), sumsq_(0.0) {}$/;"	f	class:kaldi::VectorClusterable
VectorClusterable	tree/clusterable-classes.h	/^class VectorClusterable: public Clusterable {$/;"	c	namespace:kaldi
count	tree/clusterable-classes.h	/^  BaseFloat count() const { return count_; }$/;"	f	class:kaldi::GaussClusterable
count_	tree/clusterable-classes.h	/^  BaseFloat count_;$/;"	m	class:kaldi::ScalarClusterable
count_	tree/clusterable-classes.h	/^  double count_;$/;"	m	class:kaldi::GaussClusterable
kaldi	tree/clusterable-classes.h	/^namespace kaldi {$/;"	n
stats_	tree/clusterable-classes.h	/^  Matrix<double> stats_; \/\/ two rows: sum, then sum-squared.$/;"	m	class:kaldi::GaussClusterable
stats_	tree/clusterable-classes.h	/^  Vector<double> stats_; \/\/ Equals the weighted sum of the source vectors.$/;"	m	class:kaldi::VectorClusterable
sumsq_	tree/clusterable-classes.h	/^  double sumsq_;  \/\/ Equals the sum over all sources, of weight_ * vec.vec,$/;"	m	class:kaldi::VectorClusterable
var_floor_	tree/clusterable-classes.h	/^  double var_floor_;  \/\/ should be common for all objects created.$/;"	m	class:kaldi::GaussClusterable
weight_	tree/clusterable-classes.h	/^  double weight_;  \/\/ sum of weights of the source vectors.  Never negative.$/;"	m	class:kaldi::VectorClusterable
x2_	tree/clusterable-classes.h	/^  BaseFloat x2_;$/;"	m	class:kaldi::ScalarClusterable
x2_stats	tree/clusterable-classes.h	/^  SubVector<double> x2_stats() const { return stats_.Row(1); }$/;"	f	class:kaldi::GaussClusterable
x_	tree/clusterable-classes.h	/^  BaseFloat x_;$/;"	m	class:kaldi::ScalarClusterable
x_stats	tree/clusterable-classes.h	/^  SubVector<double> x_stats() const { return stats_.Row(0); }$/;"	f	class:kaldi::GaussClusterable
~GaussClusterable	tree/clusterable-classes.h	/^  virtual ~GaussClusterable() {}$/;"	f	class:kaldi::GaussClusterable
~VectorClusterable	tree/clusterable-classes.h	/^  virtual ~VectorClusterable() {}$/;"	f	class:kaldi::VectorClusterable
TestContextDep	tree/context-dep-test.cc	/^void TestContextDep() {$/;"	f	namespace:kaldi
TestGenRandContextDependency	tree/context-dep-test.cc	/^void TestGenRandContextDependency() {$/;"	f	namespace:kaldi
TestMonophoneContextDependency	tree/context-dep-test.cc	/^void TestMonophoneContextDependency() {$/;"	f	namespace:kaldi
kaldi	tree/context-dep-test.cc	/^namespace kaldi {$/;"	n	file:
main	tree/context-dep-test.cc	/^int main() {$/;"	f
Compute	tree/context-dep.cc	/^bool ContextDependency::Compute(const std::vector<int32> &phoneseq,$/;"	f	class:kaldi::ContextDependency
GenRandContextDependency	tree/context-dep.cc	/^ContextDependency *GenRandContextDependency(const std::vector<int32> &phone_ids,$/;"	f	namespace:kaldi
GenRandContextDependencyLarge	tree/context-dep.cc	/^ContextDependency *GenRandContextDependencyLarge(const std::vector<int32> &phone_ids,$/;"	f	namespace:kaldi
GetPdfInfo	tree/context-dep.cc	/^void ContextDependency::GetPdfInfo(const std::vector<int32> &phones,$/;"	f	class:kaldi::ContextDependency
MonophoneContextDependency	tree/context-dep.cc	/^MonophoneContextDependency(const std::vector<int32> phones,$/;"	f	namespace:kaldi
MonophoneContextDependencyShared	tree/context-dep.cc	/^MonophoneContextDependencyShared(const std::vector<std::vector<int32> > phone_sets,$/;"	f	namespace:kaldi
Read	tree/context-dep.cc	/^void ContextDependency::Read (std::istream &is, bool binary) {$/;"	f	class:kaldi::ContextDependency
Write	tree/context-dep.cc	/^void ContextDependency::Write (std::ostream &os, bool binary) const {$/;"	f	class:kaldi::ContextDependency
kaldi	tree/context-dep.cc	/^namespace kaldi {$/;"	n	file:
CentralPosition	tree/context-dep.h	/^  virtual int32 CentralPosition() const { return P_; }$/;"	f	class:kaldi::ContextDependency
ContextDependency	tree/context-dep.h	/^  ContextDependency(): N_(0), P_(0), to_pdf_(NULL) { }$/;"	f	class:kaldi::ContextDependency
ContextDependency	tree/context-dep.h	/^  ContextDependency(int32 N, int32 P,$/;"	f	class:kaldi::ContextDependency
ContextDependency	tree/context-dep.h	/^class ContextDependency: public ContextDependencyInterface {$/;"	c	namespace:kaldi
ContextWidth	tree/context-dep.h	/^  virtual int32 ContextWidth() const { return N_; }$/;"	f	class:kaldi::ContextDependency
Copy	tree/context-dep.h	/^  virtual ContextDependencyInterface *Copy() const {$/;"	f	class:kaldi::ContextDependency
KALDI_TREE_CONTEXT_DEP_H_	tree/context-dep.h	21;"	d
N_	tree/context-dep.h	/^  int32 N_;  \/\/$/;"	m	class:kaldi::ContextDependency
NumPdfs	tree/context-dep.h	/^  virtual int32 NumPdfs() const {$/;"	f	class:kaldi::ContextDependency
P_	tree/context-dep.h	/^  int32 P_;$/;"	m	class:kaldi::ContextDependency
ToPdfMap	tree/context-dep.h	/^  const EventMap &ToPdfMap() const { return *to_pdf_; }$/;"	f	class:kaldi::ContextDependency
kPdfClass	tree/context-dep.h	/^static const EventKeyType kPdfClass = -1;  \/\/ The "name" to which we assign the$/;"	m	namespace:kaldi
kaldi	tree/context-dep.h	/^namespace kaldi {$/;"	n
to_pdf_	tree/context-dep.h	/^  EventMap *to_pdf_;  \/\/ owned here.$/;"	m	class:kaldi::ContextDependency
~ContextDependency	tree/context-dep.h	/^  ~ContextDependency() { if (to_pdf_ != NULL) delete to_pdf_; }$/;"	f	class:kaldi::ContextDependency
RandomEventMap	tree/event-map-test.cc	/^EventMap *RandomEventMap(const std::vector<EventKeyType> &keys) {$/;"	f	namespace:kaldi
TestEventMap	tree/event-map-test.cc	/^void TestEventMap() {$/;"	f	namespace:kaldi
TestEventMapIo	tree/event-map-test.cc	/^void TestEventMapIo(bool binary) {$/;"	f	namespace:kaldi
TestEventMapMapValues	tree/event-map-test.cc	/^void TestEventMapMapValues() {$/;"	f	namespace:kaldi
TestEventMapPrune	tree/event-map-test.cc	/^void TestEventMapPrune() {$/;"	f	namespace:kaldi
TestEventTypeIo	tree/event-map-test.cc	/^void TestEventTypeIo(bool binary) {$/;"	f	namespace:kaldi
kMaxVal	tree/event-map-test.cc	/^const int32 kMaxVal = 20;$/;"	m	namespace:kaldi	file:
kaldi	tree/event-map-test.cc	/^namespace kaldi {$/;"	n	file:
main	tree/event-map-test.cc	/^int main() {$/;"	f
Check	tree/event-map.cc	/^void EventMap::Check(const std::vector<std::pair<EventKeyType, EventValueType> > &event) {$/;"	f	class:kaldi::EventMap
EventTypeToString	tree/event-map.cc	/^std::string EventTypeToString(const EventType &evec) {$/;"	f	namespace:kaldi
GetTreeStructure	tree/event-map.cc	/^bool GetTreeStructure(const EventMap &map,$/;"	f	namespace:kaldi
GetTreeStructureInternal	tree/event-map.cc	/^static bool GetTreeStructureInternal($/;"	f	namespace:kaldi
IsLeafNode	tree/event-map.cc	/^static bool IsLeafNode(const EventMap *e) {$/;"	f	namespace:kaldi
Lookup	tree/event-map.cc	/^bool EventMap::Lookup(const EventType &event,$/;"	f	class:kaldi::EventMap
MapValues	tree/event-map.cc	/^EventMap* SplitEventMap::MapValues($/;"	f	class:kaldi::SplitEventMap
MapValues	tree/event-map.cc	/^EventMap* TableEventMap::MapValues($/;"	f	class:kaldi::TableEventMap
Prune	tree/event-map.cc	/^EventMap* SplitEventMap::Prune() const {$/;"	f	class:kaldi::SplitEventMap
Prune	tree/event-map.cc	/^EventMap* TableEventMap::Prune() const {$/;"	f	class:kaldi::TableEventMap
Read	tree/event-map.cc	/^ConstantEventMap* ConstantEventMap::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::ConstantEventMap
Read	tree/event-map.cc	/^EventMap *EventMap::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::EventMap
Read	tree/event-map.cc	/^SplitEventMap* SplitEventMap::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::SplitEventMap
Read	tree/event-map.cc	/^TableEventMap* TableEventMap::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::TableEventMap
ReadEventType	tree/event-map.cc	/^void ReadEventType(std::istream &is, bool binary, EventType *evec) {$/;"	f	namespace:kaldi
TableEventMap	tree/event-map.cc	/^TableEventMap::TableEventMap(EventKeyType key, const std::map<EventValueType, EventAnswerType> &map_in): key_(key) {$/;"	f	class:kaldi::TableEventMap
TableEventMap	tree/event-map.cc	/^TableEventMap::TableEventMap(EventKeyType key, const std::map<EventValueType, EventMap*> &map_in): key_(key) {$/;"	f	class:kaldi::TableEventMap
Write	tree/event-map.cc	/^void ConstantEventMap::Write(std::ostream &os, bool binary) {$/;"	f	class:kaldi::ConstantEventMap
Write	tree/event-map.cc	/^void EventMap::Write(std::ostream &os, bool binary, EventMap *emap) {$/;"	f	class:kaldi::EventMap
Write	tree/event-map.cc	/^void SplitEventMap::Write(std::ostream &os, bool binary) {$/;"	f	class:kaldi::SplitEventMap
Write	tree/event-map.cc	/^void TableEventMap::Write(std::ostream &os, bool binary) {$/;"	f	class:kaldi::TableEventMap
WriteEventType	tree/event-map.cc	/^void WriteEventType(std::ostream &os, bool binary, const EventType &evec) {$/;"	f	namespace:kaldi
kaldi	tree/event-map.cc	/^namespace kaldi {$/;"	n	file:
operator ()	tree/event-map.cc	/^size_t EventMapVectorHash::operator ()(const EventType &vec) {$/;"	f	class:kaldi::EventMapVectorHash
ConstantEventMap	tree/event-map.h	/^  explicit ConstantEventMap(EventAnswerType answer): answer_(answer) { }$/;"	f	class:kaldi::ConstantEventMap
ConstantEventMap	tree/event-map.h	/^class ConstantEventMap: public EventMap {$/;"	c	namespace:kaldi
Copy	tree/event-map.h	/^  EventMap *Copy() const { std::vector<EventMap*> new_leaves; return Copy(new_leaves); }$/;"	f	class:kaldi::EventMap
Copy	tree/event-map.h	/^  virtual EventMap *Copy(const std::vector<EventMap*> &new_leaves) const {$/;"	f	class:kaldi::ConstantEventMap
Copy	tree/event-map.h	/^  virtual EventMap *Copy(const std::vector<EventMap*> &new_leaves) const {$/;"	f	class:kaldi::SplitEventMap
Copy	tree/event-map.h	/^  virtual EventMap *Copy(const std::vector<EventMap*> &new_leaves) const {$/;"	f	class:kaldi::TableEventMap
Destroy	tree/event-map.h	/^  void Destroy() {$/;"	f	class:kaldi::SplitEventMap
EventAnswerType	tree/event-map.h	/^typedef int32 EventAnswerType;$/;"	t	namespace:kaldi
EventKeyType	tree/event-map.h	/^typedef int32 EventKeyType;$/;"	t	namespace:kaldi
EventMap	tree/event-map.h	/^class EventMap {$/;"	c	namespace:kaldi
EventMapVectorEqual	tree/event-map.h	/^struct EventMapVectorEqual {  \/\/ Equality object for EventType pointers-- test equality of underlying vector.$/;"	s	namespace:kaldi
EventMapVectorHash	tree/event-map.h	/^struct EventMapVectorHash {  \/\/ Hashing object for EventMapVector.  Works for both pointers and references.$/;"	s	namespace:kaldi
EventType	tree/event-map.h	/^typedef std::vector<std::pair<EventKeyType, EventValueType> > EventType;$/;"	t	namespace:kaldi
EventValueType	tree/event-map.h	/^typedef int32 EventValueType;$/;"	t	namespace:kaldi
GetChildren	tree/event-map.h	/^  virtual void GetChildren(std::vector<EventMap*> *out) const { out->clear(); }$/;"	f	class:kaldi::ConstantEventMap
GetChildren	tree/event-map.h	/^  virtual void GetChildren(std::vector<EventMap*> *out) const {$/;"	f	class:kaldi::SplitEventMap
GetChildren	tree/event-map.h	/^  virtual void GetChildren(std::vector<EventMap*> *out) const {$/;"	f	class:kaldi::TableEventMap
KALDI_TREE_EVENT_MAP_H_	tree/event-map.h	21;"	d
MakeEventPair	tree/event-map.h	/^inline std::pair<EventKeyType, EventValueType> MakeEventPair (EventKeyType k, EventValueType v) {  $/;"	f	namespace:kaldi
Map	tree/event-map.h	/^  virtual bool Map(const EventType &event, EventAnswerType *ans) const {$/;"	f	class:kaldi::ConstantEventMap
Map	tree/event-map.h	/^  virtual bool Map(const EventType &event, EventAnswerType *ans) const {$/;"	f	class:kaldi::SplitEventMap
Map	tree/event-map.h	/^  virtual bool Map(const EventType &event, EventAnswerType *ans) const {$/;"	f	class:kaldi::TableEventMap
MapValues	tree/event-map.h	/^  virtual EventMap *MapValues($/;"	f	class:kaldi::ConstantEventMap
MaxResult	tree/event-map.h	/^  virtual EventAnswerType MaxResult() const {  \/\/ child classes may override this for efficiency; here is basic version.$/;"	f	class:kaldi::EventMap
MultiMap	tree/event-map.h	/^  virtual void MultiMap(const EventType &,$/;"	f	class:kaldi::ConstantEventMap
MultiMap	tree/event-map.h	/^  virtual void MultiMap(const EventType &event, std::vector<EventAnswerType> *ans) const {$/;"	f	class:kaldi::SplitEventMap
MultiMap	tree/event-map.h	/^  virtual void MultiMap(const EventType &event, std::vector<EventAnswerType> *ans) const {$/;"	f	class:kaldi::TableEventMap
Prune	tree/event-map.h	/^  virtual EventMap *Prune() const {$/;"	f	class:kaldi::ConstantEventMap
SplitEventMap	tree/event-map.h	/^  SplitEventMap(EventKeyType key, const ConstIntegerSet<EventValueType> &yes_set,$/;"	f	class:kaldi::SplitEventMap
SplitEventMap	tree/event-map.h	/^  SplitEventMap(EventKeyType key, const std::vector<EventValueType> &yes_set,$/;"	f	class:kaldi::SplitEventMap
SplitEventMap	tree/event-map.h	/^class SplitEventMap: public EventMap {  \/\/ A decision tree [non-leaf] node.$/;"	c	namespace:kaldi
TableEventMap	tree/event-map.h	/^  explicit TableEventMap(EventKeyType key, const std::vector<EventMap*> &table): key_(key), table_(table) {}$/;"	f	class:kaldi::TableEventMap
TableEventMap	tree/event-map.h	/^class TableEventMap: public EventMap {$/;"	c	namespace:kaldi
answer_	tree/event-map.h	/^  EventAnswerType answer_;$/;"	m	class:kaldi::ConstantEventMap
kaldi	tree/event-map.h	/^namespace kaldi {$/;"	n
key_	tree/event-map.h	/^  EventKeyType key_;$/;"	m	class:kaldi::SplitEventMap
key_	tree/event-map.h	/^  EventKeyType key_;$/;"	m	class:kaldi::TableEventMap
no_	tree/event-map.h	/^  EventMap *no_;  \/\/ owned here.$/;"	m	class:kaldi::SplitEventMap
operator ()	tree/event-map.h	/^  size_t operator () (const EventType *p1, const EventType *p2) { return (*p1 == *p2); }$/;"	f	struct:kaldi::EventMapVectorEqual
operator ()	tree/event-map.h	/^  size_t operator () (const EventType *ptr) { return (*this)(*ptr); }$/;"	f	struct:kaldi::EventMapVectorHash
table_	tree/event-map.h	/^  std::vector<EventMap*> table_;$/;"	m	class:kaldi::TableEventMap
yes_	tree/event-map.h	/^  EventMap *yes_;  \/\/ owned here.$/;"	m	class:kaldi::SplitEventMap
yes_set_	tree/event-map.h	/^  ConstIntegerSet<EventValueType> yes_set_;  \/\/ more efficient Map function.$/;"	m	class:kaldi::SplitEventMap
~EventMap	tree/event-map.h	/^  virtual ~EventMap() {}$/;"	f	class:kaldi::EventMap
~SplitEventMap	tree/event-map.h	/^  virtual ~SplitEventMap() { Destroy(); }$/;"	f	class:kaldi::SplitEventMap
~TableEventMap	tree/event-map.h	/^  virtual ~TableEventMap() {$/;"	f	class:kaldi::TableEventMap
MakeEdgeLabel	tree/tree-renderer.cc	/^TreeRenderer::MakeEdgeLabel(const EventKeyType &key,$/;"	f	class:kaldi::TreeRenderer
Render	tree/tree-renderer.cc	/^void TreeRenderer::Render(const EventType *query = 0) {$/;"	f	class:kaldi::TreeRenderer
RenderConstant	tree/tree-renderer.cc	/^void TreeRenderer::RenderConstant(const EventType *query, int32 id) {$/;"	f	class:kaldi::TreeRenderer
RenderNonLeaf	tree/tree-renderer.cc	/^TreeRenderer::RenderNonLeaf(int32 id, const EventKeyType &key, bool in_query) {$/;"	f	class:kaldi::TreeRenderer
RenderSplit	tree/tree-renderer.cc	/^void TreeRenderer::RenderSplit(const EventType *query, int32 id) {$/;"	f	class:kaldi::TreeRenderer
RenderSubTree	tree/tree-renderer.cc	/^void TreeRenderer::RenderSubTree(const EventType *query, int32 id) {$/;"	f	class:kaldi::TreeRenderer
RenderTable	tree/tree-renderer.cc	/^void TreeRenderer::RenderTable(const EventType *query, int32 id) {$/;"	f	class:kaldi::TreeRenderer
kEdgeColor	tree/tree-renderer.cc	/^const std::string TreeRenderer::kEdgeColor = "black";$/;"	m	class:kaldi::TreeRenderer	file:
kEdgeColorQuery	tree/tree-renderer.cc	/^const std::string TreeRenderer::kEdgeColorQuery = "red";$/;"	m	class:kaldi::TreeRenderer	file:
kEdgeWidth	tree/tree-renderer.cc	/^const int32 TreeRenderer::kEdgeWidth = 1;$/;"	m	class:kaldi::TreeRenderer	file:
kEdgeWidthQuery	tree/tree-renderer.cc	/^const int32 TreeRenderer::kEdgeWidthQuery = 3;$/;"	m	class:kaldi::TreeRenderer	file:
kaldi	tree/tree-renderer.cc	/^namespace kaldi {$/;"	n	file:
KALDI_TREE_TREE_RENDERER_H_	tree/tree-renderer.h	21;"	d
N_	tree/tree-renderer.h	/^  int32 N_, P_; \/\/ context-width and central position$/;"	m	class:kaldi::TreeRenderer
P_	tree/tree-renderer.h	/^  int32 N_, P_; \/\/ context-width and central position$/;"	m	class:kaldi::TreeRenderer
TreeRenderer	tree/tree-renderer.h	/^  TreeRenderer(std::istream &is, bool binary, std::ostream &os,$/;"	f	class:kaldi::TreeRenderer
TreeRenderer	tree/tree-renderer.h	/^class TreeRenderer {$/;"	c	namespace:kaldi
binary_	tree/tree-renderer.h	/^  bool binary_; \/\/ is the input stream binary?$/;"	m	class:kaldi::TreeRenderer
is_	tree/tree-renderer.h	/^  std::istream &is_; \/\/ the stream from which the tree is read$/;"	m	class:kaldi::TreeRenderer
kEdgeColor	tree/tree-renderer.h	/^  const static std::string kEdgeColor; \/\/ normal color for states and edges$/;"	m	class:kaldi::TreeRenderer
kEdgeColorQuery	tree/tree-renderer.h	/^  const static std::string kEdgeColorQuery; \/\/ edge and state color when in query$/;"	m	class:kaldi::TreeRenderer
kEdgeWidth	tree/tree-renderer.h	/^  const static int32 kEdgeWidth; \/\/ normal width of the edges and state contours$/;"	m	class:kaldi::TreeRenderer
kEdgeWidthQuery	tree/tree-renderer.h	/^  const static int32 kEdgeWidthQuery; \/\/ edge and state width when in query$/;"	m	class:kaldi::TreeRenderer
kaldi	tree/tree-renderer.h	/^namespace kaldi {$/;"	n
next_id_	tree/tree-renderer.h	/^  int32 next_id_; \/\/ the first unused GraphViz node ID$/;"	m	class:kaldi::TreeRenderer
out_	tree/tree-renderer.h	/^  std::ostream &out_; \/\/ the GraphViz representation is written to this stream$/;"	m	class:kaldi::TreeRenderer
phone_syms_	tree/tree-renderer.h	/^  fst::SymbolTable &phone_syms_; \/\/ phone symbols to be used as edge labels$/;"	m	class:kaldi::TreeRenderer
use_tooltips_	tree/tree-renderer.h	/^  bool use_tooltips_;  \/\/ use tooltips(useful in e.g. SVG) instead of labels$/;"	m	class:kaldi::TreeRenderer
ADDLIBS	util/Makefile	/^ADDLIBS = ..\/matrix\/kaldi-matrix.a ..\/base\/kaldi-base.a$/;"	m
LIBNAME	util/Makefile	/^LIBNAME = kaldi-util$/;"	m
OBJFILES	util/Makefile	/^OBJFILES = text-utils.o kaldi-io.o \\$/;"	m
TESTFILES	util/Makefile	/^TESTFILES = const-integer-set-test stl-utils-test text-utils-test \\$/;"	m
KALDI_UTIL_BASIC_FILEBUF_H_	util/basic-filebuf.h	12;"	d
_M_always_noconv	util/basic-filebuf.h	/^    bool _M_always_noconv;$/;"	m	class:kaldi::basic_filebuf
_M_cm	util/basic-filebuf.h	/^    std::ios_base::openmode _M_cm;$/;"	m	class:kaldi::basic_filebuf
_M_cv	util/basic-filebuf.h	/^    const std::codecvt<char_type, char, state_type>* _M_cv;$/;"	m	class:kaldi::basic_filebuf
_M_ebs	util/basic-filebuf.h	/^    size_t _M_ebs;$/;"	m	class:kaldi::basic_filebuf
_M_extbuf	util/basic-filebuf.h	/^    char*       _M_extbuf;$/;"	m	class:kaldi::basic_filebuf
_M_extbuf_min	util/basic-filebuf.h	/^    char _M_extbuf_min[8];$/;"	m	class:kaldi::basic_filebuf
_M_extbufend	util/basic-filebuf.h	/^    const char* _M_extbufend;$/;"	m	class:kaldi::basic_filebuf
_M_extbufnext	util/basic-filebuf.h	/^    const char* _M_extbufnext;$/;"	m	class:kaldi::basic_filebuf
_M_file	util/basic-filebuf.h	/^    FILE* _M_file;$/;"	m	class:kaldi::basic_filebuf
_M_get_mode	util/basic-filebuf.h	/^const char* basic_filebuf<CharT, Traits>::_M_get_mode(std::ios_base::openmode mode)$/;"	f	class:kaldi::basic_filebuf
_M_ibs	util/basic-filebuf.h	/^    size_t _M_ibs;$/;"	m	class:kaldi::basic_filebuf
_M_intbuf	util/basic-filebuf.h	/^    char_type* _M_intbuf;$/;"	m	class:kaldi::basic_filebuf
_M_om	util/basic-filebuf.h	/^    std::ios_base::openmode _M_om;$/;"	m	class:kaldi::basic_filebuf
_M_owns_eb	util/basic-filebuf.h	/^    bool _M_owns_eb;$/;"	m	class:kaldi::basic_filebuf
_M_owns_ib	util/basic-filebuf.h	/^    bool _M_owns_ib;$/;"	m	class:kaldi::basic_filebuf
_M_read_mode	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::_M_read_mode()$/;"	f	class:kaldi::basic_filebuf
_M_st	util/basic-filebuf.h	/^    state_type _M_st;$/;"	m	class:kaldi::basic_filebuf
_M_st_last	util/basic-filebuf.h	/^    state_type _M_st_last;$/;"	m	class:kaldi::basic_filebuf
_M_write_mode	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::_M_write_mode()$/;"	f	class:kaldi::basic_filebuf
basic_filebuf	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::basic_filebuf()$/;"	f	class:kaldi::basic_filebuf
basic_filebuf	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::basic_filebuf(basic_filebuf&& rhs)$/;"	f	class:kaldi::basic_filebuf
basic_filebuf	util/basic-filebuf.h	/^class basic_filebuf : public std::basic_streambuf<CharT, Traits>$/;"	c	namespace:kaldi
char_type	util/basic-filebuf.h	/^    typedef CharT                            char_type;$/;"	t	class:kaldi::basic_filebuf
close	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::close()$/;"	f	class:kaldi::basic_filebuf
fd	util/basic-filebuf.h	/^    int fd() { return fileno(this->_M_file); }$/;"	f	class:kaldi::basic_filebuf
file	util/basic-filebuf.h	/^    FILE* file() { return this->_M_file; }$/;"	f	class:kaldi::basic_filebuf
imbue	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::imbue(const std::locale& loc)$/;"	f	class:kaldi::basic_filebuf
int_type	util/basic-filebuf.h	/^    typedef typename traits_type::int_type   int_type;$/;"	t	class:kaldi::basic_filebuf
is_open	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::is_open() const$/;"	f	class:kaldi::basic_filebuf
kaldi	util/basic-filebuf.h	/^namespace kaldi$/;"	n
off_type	util/basic-filebuf.h	/^    typedef typename traits_type::off_type   off_type;$/;"	t	class:kaldi::basic_filebuf
open	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::open(FILE* f, std::ios_base::openmode mode)$/;"	f	class:kaldi::basic_filebuf
open	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::open(const char* s, std::ios_base::openmode mode)$/;"	f	class:kaldi::basic_filebuf
open	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::open(const std::string& s, std::ios_base::openmode mode)$/;"	f	class:kaldi::basic_filebuf
open	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::open(int fd, std::ios_base::openmode mode)$/;"	f	class:kaldi::basic_filebuf
operator =	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::operator=(basic_filebuf&& rhs)$/;"	f	class:kaldi::basic_filebuf
overflow	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::overflow(int_type c)$/;"	f	class:kaldi::basic_filebuf
override	util/basic-filebuf.h	/^                     std::ios_base::openmode wch = std::ios_base::in | std::ios_base::out) override;$/;"	m	class:kaldi::basic_filebuf
override	util/basic-filebuf.h	/^    int sync() override;$/;"	m	class:kaldi::basic_filebuf
override	util/basic-filebuf.h	/^    int_type overflow (int_type c = traits_type::eof()) override;$/;"	m	class:kaldi::basic_filebuf
override	util/basic-filebuf.h	/^    int_type pbackfail(int_type c = traits_type::eof()) override;$/;"	m	class:kaldi::basic_filebuf
override	util/basic-filebuf.h	/^    int_type underflow() override;$/;"	m	class:kaldi::basic_filebuf
override	util/basic-filebuf.h	/^    std::basic_streambuf<char_type, traits_type>* setbuf(char_type* s, std::streamsize n) override;$/;"	m	class:kaldi::basic_filebuf
override	util/basic-filebuf.h	/^    void imbue(const std::locale& loc) override;$/;"	m	class:kaldi::basic_filebuf
pbackfail	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::pbackfail(int_type c)$/;"	f	class:kaldi::basic_filebuf
pos_type	util/basic-filebuf.h	/^    typedef typename traits_type::pos_type   pos_type;$/;"	t	class:kaldi::basic_filebuf
seekoff	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::seekoff(off_type off, std::ios_base::seekdir way,$/;"	f	class:kaldi::basic_filebuf
seekpos	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::seekpos(pos_type sp, std::ios_base::openmode)$/;"	f	class:kaldi::basic_filebuf
setbuf	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::setbuf(char_type* s, std::streamsize n)$/;"	f	class:kaldi::basic_filebuf
state_type	util/basic-filebuf.h	/^    typedef typename traits_type::state_type state_type;$/;"	t	class:kaldi::basic_filebuf
swap	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::swap(basic_filebuf& rhs)$/;"	f	class:kaldi::basic_filebuf
swap	util/basic-filebuf.h	/^swap(basic_filebuf<CharT, Traits>& x, basic_filebuf<CharT, Traits>& y)$/;"	f	namespace:kaldi
sync	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::sync()$/;"	f	class:kaldi::basic_filebuf
traits_type	util/basic-filebuf.h	/^    typedef Traits                           traits_type;$/;"	t	class:kaldi::basic_filebuf
underflow	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::underflow()$/;"	f	class:kaldi::basic_filebuf
~basic_filebuf	util/basic-filebuf.h	/^basic_filebuf<CharT, Traits>::~basic_filebuf()$/;"	f	class:kaldi::basic_filebuf
KALDI_UTIL_COMMON_UTILS_H_	util/common-utils.h	20;"	d
InitInternal	util/const-integer-set-inl.h	/^void ConstIntegerSet<I>::InitInternal() {$/;"	f	class:kaldi::ConstIntegerSet
KALDI_UTIL_CONST_INTEGER_SET_INL_H_	util/const-integer-set-inl.h	22;"	d
Read	util/const-integer-set-inl.h	/^void ConstIntegerSet<I>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::ConstIntegerSet
Write	util/const-integer-set-inl.h	/^void ConstIntegerSet<I>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::ConstIntegerSet
count	util/const-integer-set-inl.h	/^int ConstIntegerSet<I>::count(I i) const {$/;"	f	class:kaldi::ConstIntegerSet
kaldi	util/const-integer-set-inl.h	/^namespace kaldi {$/;"	n
TestSetOfNumbers	util/const-integer-set-test.cc	/^template<class Int> void TestSetOfNumbers(bool binary) {$/;"	f	namespace:kaldi
kaldi	util/const-integer-set-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/const-integer-set-test.cc	/^int main() {$/;"	f
ConstIntegerSet	util/const-integer-set.h	/^  ConstIntegerSet(): lowest_member_(1), highest_member_(0) { }$/;"	f	class:kaldi::ConstIntegerSet
ConstIntegerSet	util/const-integer-set.h	/^  explicit ConstIntegerSet(const ConstIntegerSet<I> &other): slow_set_(other.slow_set_) {$/;"	f	class:kaldi::ConstIntegerSet
ConstIntegerSet	util/const-integer-set.h	/^  explicit ConstIntegerSet(const std::set<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
ConstIntegerSet	util/const-integer-set.h	/^  explicit ConstIntegerSet(const std::vector<I> &input): slow_set_(input) {$/;"	f	class:kaldi::ConstIntegerSet
ConstIntegerSet	util/const-integer-set.h	/^template<class I> class ConstIntegerSet {$/;"	c	namespace:kaldi
Init	util/const-integer-set.h	/^  void Init(const std::set<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
Init	util/const-integer-set.h	/^  void Init(const std::vector<I> &input) {$/;"	f	class:kaldi::ConstIntegerSet
KALDI_UTIL_CONST_INTEGER_SET_H_	util/const-integer-set.h	22;"	d
begin	util/const-integer-set.h	/^  iterator begin() const { return slow_set_.begin(); }$/;"	f	class:kaldi::ConstIntegerSet
contiguous_	util/const-integer-set.h	/^  bool contiguous_;$/;"	m	class:kaldi::ConstIntegerSet
empty	util/const-integer-set.h	/^  bool empty() const { return slow_set_.empty(); }$/;"	f	class:kaldi::ConstIntegerSet
end	util/const-integer-set.h	/^  iterator end() const { return slow_set_.end(); }$/;"	f	class:kaldi::ConstIntegerSet
highest_member_	util/const-integer-set.h	/^  I highest_member_;$/;"	m	class:kaldi::ConstIntegerSet
iterator	util/const-integer-set.h	/^  typedef typename std::vector<I>::const_iterator iterator;$/;"	t	class:kaldi::ConstIntegerSet
kaldi	util/const-integer-set.h	/^namespace kaldi {$/;"	n
lowest_member_	util/const-integer-set.h	/^  I lowest_member_;$/;"	m	class:kaldi::ConstIntegerSet
quick_	util/const-integer-set.h	/^  bool quick_;$/;"	m	class:kaldi::ConstIntegerSet
quick_set_	util/const-integer-set.h	/^  std::vector<bool> quick_set_;$/;"	m	class:kaldi::ConstIntegerSet
size	util/const-integer-set.h	/^  size_t size() const { return slow_set_.size(); }$/;"	f	class:kaldi::ConstIntegerSet
slow_set_	util/const-integer-set.h	/^  std::vector<I> slow_set_;$/;"	m	class:kaldi::ConstIntegerSet
KALDI_UTIL_EDIT_DISTANCE_INL_H_	util/edit-distance-inl.h	21;"	d
LevenshteinAlignment	util/edit-distance-inl.h	/^int32 LevenshteinAlignment(const std::vector<T> &a,$/;"	f	namespace:kaldi
LevenshteinEditDistance	util/edit-distance-inl.h	/^int32 LevenshteinEditDistance(const std::vector<T> &a,$/;"	f	namespace:kaldi
LevenshteinEditDistance	util/edit-distance-inl.h	/^int32 LevenshteinEditDistance(const std::vector<T> &ref,$/;"	f	namespace:kaldi
del_num	util/edit-distance-inl.h	/^  int32 del_num;$/;"	m	struct:kaldi::error_stats
error_stats	util/edit-distance-inl.h	/^struct error_stats{$/;"	s	namespace:kaldi
ins_num	util/edit-distance-inl.h	/^  int32 ins_num;$/;"	m	struct:kaldi::error_stats
kaldi	util/edit-distance-inl.h	/^namespace kaldi {$/;"	n
sub_num	util/edit-distance-inl.h	/^  int32 sub_num;$/;"	m	struct:kaldi::error_stats
total_cost	util/edit-distance-inl.h	/^  int32 total_cost;  \/\/ minimum total cost to the current alignment.$/;"	m	struct:kaldi::error_stats
TestEditDistance	util/edit-distance-test.cc	/^void TestEditDistance() {$/;"	f	namespace:kaldi
TestEditDistance2	util/edit-distance-test.cc	/^void TestEditDistance2() {$/;"	f	namespace:kaldi
TestEditDistance2String	util/edit-distance-test.cc	/^void TestEditDistance2String() {$/;"	f	namespace:kaldi
TestEditDistanceString	util/edit-distance-test.cc	/^void TestEditDistanceString() {$/;"	f	namespace:kaldi
TestLevenshteinAlignment	util/edit-distance-test.cc	/^void TestLevenshteinAlignment() {$/;"	f	namespace:kaldi
kaldi	util/edit-distance-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/edit-distance-test.cc	/^int main() {$/;"	f
KALDI_UTIL_EDIT_DISTANCE_H_	util/edit-distance.h	22;"	d
kaldi	util/edit-distance.h	/^namespace kaldi {$/;"	n
Clear	util/hash-list-inl.h	/^typename HashList<I, T>::Elem* HashList<I, T>::Clear() {$/;"	f	class:kaldi::HashList
Delete	util/hash-list-inl.h	/^inline void HashList<I, T>::Delete(Elem *e) {$/;"	f	class:kaldi::HashList
Find	util/hash-list-inl.h	/^inline typename HashList<I, T>::Elem* HashList<I, T>::Find(I key) {$/;"	f	class:kaldi::HashList
GetList	util/hash-list-inl.h	/^const typename HashList<I, T>::Elem* HashList<I, T>::GetList() const {$/;"	f	class:kaldi::HashList
HashList	util/hash-list-inl.h	/^template<class I, class T> HashList<I, T>::HashList() {$/;"	f	class:kaldi::HashList
Insert	util/hash-list-inl.h	/^void HashList<I, T>::Insert(I key, T val) {$/;"	f	class:kaldi::HashList
InsertMore	util/hash-list-inl.h	/^void HashList<I, T>::InsertMore(I key, T val) {$/;"	f	class:kaldi::HashList
KALDI_UTIL_HASH_LIST_INL_H_	util/hash-list-inl.h	23;"	d
New	util/hash-list-inl.h	/^inline typename HashList<I, T>::Elem* HashList<I, T>::New() {$/;"	f	class:kaldi::HashList
SetSize	util/hash-list-inl.h	/^template<class I, class T> void HashList<I, T>::SetSize(size_t size) {$/;"	f	class:kaldi::HashList
kaldi	util/hash-list-inl.h	/^namespace kaldi {$/;"	n
~HashList	util/hash-list-inl.h	/^HashList<I, T>::~HashList() {$/;"	f	class:kaldi::HashList
TestHashList	util/hash-list-test.cc	/^template<class Int, class T> void TestHashList() {$/;"	f	namespace:kaldi
kaldi	util/hash-list-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/hash-list-test.cc	/^int main() {$/;"	f
Elem	util/hash-list.h	/^  struct Elem {$/;"	s	class:kaldi::HashList
HashBucket	util/hash-list.h	/^    inline HashBucket(size_t i, Elem *e): prev_bucket(i), last_elem(e) {}$/;"	f	struct:kaldi::HashList::HashBucket
HashBucket	util/hash-list.h	/^  struct HashBucket {$/;"	s	class:kaldi::HashList
HashList	util/hash-list.h	/^template<class I, class T> class HashList {$/;"	c	namespace:kaldi
KALDI_UTIL_HASH_LIST_H_	util/hash-list.h	23;"	d
Size	util/hash-list.h	/^  inline size_t Size() { return hash_size_; }$/;"	f	class:kaldi::HashList
allocate_block_size_	util/hash-list.h	/^  static const size_t allocate_block_size_ = 1024;  \/\/ Number of Elements to allocate in one block.  Must be$/;"	m	class:kaldi::HashList
allocated_	util/hash-list.h	/^  std::vector<Elem*> allocated_;  \/\/ list of allocated blocks.$/;"	m	class:kaldi::HashList
bucket_list_tail_	util/hash-list.h	/^  size_t bucket_list_tail_;  \/\/ tail of list of active hash buckets.$/;"	m	class:kaldi::HashList
buckets_	util/hash-list.h	/^  std::vector<HashBucket> buckets_;$/;"	m	class:kaldi::HashList
freed_head_	util/hash-list.h	/^  Elem *freed_head_;  \/\/ head of list of currently freed elements. [ready for allocation]$/;"	m	class:kaldi::HashList
hash_size_	util/hash-list.h	/^  size_t hash_size_;  \/\/ number of hash buckets.$/;"	m	class:kaldi::HashList
kaldi	util/hash-list.h	/^namespace kaldi {$/;"	n
key	util/hash-list.h	/^    I key;$/;"	m	struct:kaldi::HashList::Elem
last_elem	util/hash-list.h	/^    Elem *last_elem;  \/\/ pointer to last element in this bucket (NULL if empty)$/;"	m	struct:kaldi::HashList::HashBucket
list_head_	util/hash-list.h	/^  Elem *list_head_;  \/\/ head of currently stored list.$/;"	m	class:kaldi::HashList
prev_bucket	util/hash-list.h	/^    size_t prev_bucket;  \/\/ index to next bucket (-1 if list tail).  Note: list of buckets$/;"	m	struct:kaldi::HashList::HashBucket
tail	util/hash-list.h	/^    Elem *tail;$/;"	m	struct:kaldi::HashList::Elem
val	util/hash-list.h	/^    T val;$/;"	m	struct:kaldi::HashList::Elem
BasicHolder	util/kaldi-holder-inl.h	/^  BasicHolder(): t_(static_cast<T>(-1)) { }$/;"	f	class:kaldi::BasicHolder
BasicHolder	util/kaldi-holder-inl.h	/^template<class BasicType> class BasicHolder {$/;"	c	namespace:kaldi
BasicPairVectorHolder	util/kaldi-holder-inl.h	/^  BasicPairVectorHolder() { }$/;"	f	class:kaldi::BasicPairVectorHolder
BasicPairVectorHolder	util/kaldi-holder-inl.h	/^template<class BasicType> class BasicPairVectorHolder {$/;"	c	namespace:kaldi
BasicVectorHolder	util/kaldi-holder-inl.h	/^  BasicVectorHolder() { }$/;"	f	class:kaldi::BasicVectorHolder
BasicVectorHolder	util/kaldi-holder-inl.h	/^template<class BasicType> class BasicVectorHolder {$/;"	c	namespace:kaldi
BasicVectorVectorHolder	util/kaldi-holder-inl.h	/^  BasicVectorVectorHolder() { }$/;"	f	class:kaldi::BasicVectorVectorHolder
BasicVectorVectorHolder	util/kaldi-holder-inl.h	/^template<class BasicType> class BasicVectorVectorHolder {$/;"	c	namespace:kaldi
Clear	util/kaldi-holder-inl.h	/^  void Clear() { feats_.Resize(0, 0); }$/;"	f	class:kaldi::SphinxMatrixHolder
Clear	util/kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicPairVectorHolder
Clear	util/kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicVectorHolder
Clear	util/kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::BasicVectorVectorHolder
Clear	util/kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::TokenHolder
Clear	util/kaldi-holder-inl.h	/^  void Clear() { t_.clear(); }$/;"	f	class:kaldi::TokenVectorHolder
Clear	util/kaldi-holder-inl.h	/^  void Clear() { t_.first.Resize(0, 0); }$/;"	f	class:kaldi::HtkMatrixHolder
Clear	util/kaldi-holder-inl.h	/^  void Clear() { }$/;"	f	class:kaldi::BasicHolder
Clear	util/kaldi-holder-inl.h	/^  void Clear() {$/;"	f	class:kaldi::KaldiObjectHolder
HtkMatrixHolder	util/kaldi-holder-inl.h	/^  HtkMatrixHolder() {}$/;"	f	class:kaldi::HtkMatrixHolder
HtkMatrixHolder	util/kaldi-holder-inl.h	/^class HtkMatrixHolder {$/;"	c	namespace:kaldi
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return false; }$/;"	f	class:kaldi::TokenHolder
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return false; }$/;"	f	class:kaldi::TokenVectorHolder
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicHolder
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicPairVectorHolder
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicVectorHolder
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::BasicVectorVectorHolder
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::HtkMatrixHolder
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::KaldiObjectHolder
IsReadInBinary	util/kaldi-holder-inl.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::SphinxMatrixHolder
KALDI_UTIL_KALDI_HOLDER_INL_H_	util/kaldi-holder-inl.h	22;"	d
KaldiObjectHolder	util/kaldi-holder-inl.h	/^  KaldiObjectHolder(): t_(NULL) { }$/;"	f	class:kaldi::KaldiObjectHolder
KaldiObjectHolder	util/kaldi-holder-inl.h	/^template<class KaldiType> class KaldiObjectHolder {$/;"	c	namespace:kaldi
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicHolder
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicPairVectorHolder
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicVectorHolder
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::BasicVectorVectorHolder
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::HtkMatrixHolder
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::KaldiObjectHolder
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::SphinxMatrixHolder
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::TokenHolder
Read	util/kaldi-holder-inl.h	/^  bool Read(std::istream &is) {$/;"	f	class:kaldi::TokenVectorHolder
SphinxMatrixHolder	util/kaldi-holder-inl.h	/^  SphinxMatrixHolder() {}$/;"	f	class:kaldi::SphinxMatrixHolder
SphinxMatrixHolder	util/kaldi-holder-inl.h	/^template<int kFeatDim> class SphinxMatrixHolder {$/;"	c	namespace:kaldi
T	util/kaldi-holder-inl.h	/^  typedef BasicType T;$/;"	t	class:kaldi::BasicHolder
T	util/kaldi-holder-inl.h	/^  typedef KaldiType T;$/;"	t	class:kaldi::KaldiObjectHolder
T	util/kaldi-holder-inl.h	/^  typedef Matrix<BaseFloat> T;$/;"	t	class:kaldi::SphinxMatrixHolder
T	util/kaldi-holder-inl.h	/^  typedef std::pair<Matrix<BaseFloat>, HtkHeader> T;$/;"	t	class:kaldi::HtkMatrixHolder
T	util/kaldi-holder-inl.h	/^  typedef std::string T;$/;"	t	class:kaldi::TokenHolder
T	util/kaldi-holder-inl.h	/^  typedef std::vector<BasicType> T;$/;"	t	class:kaldi::BasicVectorHolder
T	util/kaldi-holder-inl.h	/^  typedef std::vector<std::pair<BasicType, BasicType> > T;$/;"	t	class:kaldi::BasicPairVectorHolder
T	util/kaldi-holder-inl.h	/^  typedef std::vector<std::string> T;$/;"	t	class:kaldi::TokenVectorHolder
T	util/kaldi-holder-inl.h	/^  typedef std::vector<std::vector<BasicType> > T;$/;"	t	class:kaldi::BasicVectorVectorHolder
TokenHolder	util/kaldi-holder-inl.h	/^  TokenHolder() {}$/;"	f	class:kaldi::TokenHolder
TokenHolder	util/kaldi-holder-inl.h	/^class TokenHolder {$/;"	c	namespace:kaldi
TokenVectorHolder	util/kaldi-holder-inl.h	/^  TokenVectorHolder() { }$/;"	f	class:kaldi::TokenVectorHolder
TokenVectorHolder	util/kaldi-holder-inl.h	/^class TokenVectorHolder {$/;"	c	namespace:kaldi
Value	util/kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicPairVectorHolder
Value	util/kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicVectorHolder
Value	util/kaldi-holder-inl.h	/^  const T &Value() const {  return t_; }$/;"	f	class:kaldi::BasicVectorVectorHolder
Value	util/kaldi-holder-inl.h	/^  const T &Value() const { return feats_; }$/;"	f	class:kaldi::SphinxMatrixHolder
Value	util/kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::HtkMatrixHolder
Value	util/kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::TokenHolder
Value	util/kaldi-holder-inl.h	/^  const T &Value() const { return t_; }$/;"	f	class:kaldi::TokenVectorHolder
Value	util/kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::BasicHolder
Value	util/kaldi-holder-inl.h	/^  const T &Value() const {$/;"	f	class:kaldi::KaldiObjectHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &m) {$/;"	f	class:kaldi::SphinxMatrixHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicPairVectorHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicVectorHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::BasicVectorVectorHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::HtkMatrixHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool binary, const T &t) {$/;"	f	class:kaldi::KaldiObjectHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool, const T &t) {  \/\/ ignore binary-mode.$/;"	f	class:kaldi::TokenHolder
Write	util/kaldi-holder-inl.h	/^  static bool Write(std::ostream &os, bool, const T &t) {  \/\/ ignore binary-mode.$/;"	f	class:kaldi::TokenVectorHolder
feats_	util/kaldi-holder-inl.h	/^  T feats_;$/;"	m	class:kaldi::SphinxMatrixHolder
kaldi	util/kaldi-holder-inl.h	/^namespace kaldi {$/;"	n
t_	util/kaldi-holder-inl.h	/^  T *t_;$/;"	m	class:kaldi::KaldiObjectHolder
t_	util/kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicHolder
t_	util/kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicPairVectorHolder
t_	util/kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicVectorHolder
t_	util/kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::BasicVectorVectorHolder
t_	util/kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::HtkMatrixHolder
t_	util/kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::TokenHolder
t_	util/kaldi-holder-inl.h	/^  T t_;$/;"	m	class:kaldi::TokenVectorHolder
~BasicHolder	util/kaldi-holder-inl.h	/^  ~BasicHolder() { }$/;"	f	class:kaldi::BasicHolder
~BasicPairVectorHolder	util/kaldi-holder-inl.h	/^  ~BasicPairVectorHolder() { }$/;"	f	class:kaldi::BasicPairVectorHolder
~BasicVectorHolder	util/kaldi-holder-inl.h	/^  ~BasicVectorHolder() { }$/;"	f	class:kaldi::BasicVectorHolder
~BasicVectorVectorHolder	util/kaldi-holder-inl.h	/^  ~BasicVectorVectorHolder() { }$/;"	f	class:kaldi::BasicVectorVectorHolder
~KaldiObjectHolder	util/kaldi-holder-inl.h	/^  ~KaldiObjectHolder() { if (t_) delete t_; }$/;"	f	class:kaldi::KaldiObjectHolder
~TokenHolder	util/kaldi-holder-inl.h	/^  ~TokenHolder() { }$/;"	f	class:kaldi::TokenHolder
Clear	util/kaldi-holder.h	/^  void Clear() { }$/;"	f	class:kaldi::GenericHolder
GenericHolder	util/kaldi-holder.h	/^  GenericHolder() { }$/;"	f	class:kaldi::GenericHolder
GenericHolder	util/kaldi-holder.h	/^template<class SomeType> class GenericHolder {$/;"	c	namespace:kaldi
IsReadInBinary	util/kaldi-holder.h	/^  static bool IsReadInBinary() { return true; }$/;"	f	class:kaldi::GenericHolder
KALDI_UTIL_KALDI_HOLDER_H_	util/kaldi-holder.h	22;"	d
T	util/kaldi-holder.h	/^  typedef SomeType T;$/;"	t	class:kaldi::GenericHolder
Value	util/kaldi-holder.h	/^  const T &Value() const { return t_; } \/\/ if t is a pointer, would return *t_;$/;"	f	class:kaldi::GenericHolder
kaldi	util/kaldi-holder.h	/^namespace kaldi {$/;"	n
t_	util/kaldi-holder.h	/^  T t_;  \/\/ t_ may alternatively be of type T*.$/;"	m	class:kaldi::GenericHolder
~GenericHolder	util/kaldi-holder.h	/^  ~GenericHolder() { }$/;"	f	class:kaldi::GenericHolder
IsOpen	util/kaldi-io-inl.h	/^bool Input::IsOpen() {$/;"	f	class:kaldi::Input
IsOpen	util/kaldi-io-inl.h	/^bool Output::IsOpen() {$/;"	f	class:kaldi::Output
KALDI_UTIL_KALDI_IO_INL_H_	util/kaldi-io-inl.h	20;"	d
Open	util/kaldi-io-inl.h	/^bool Input::Open(const std::string &rxfilename, bool *binary) {$/;"	f	class:kaldi::Input
OpenTextMode	util/kaldi-io-inl.h	/^bool Input::OpenTextMode(const std::string &rxfilename) {$/;"	f	class:kaldi::Input
kaldi	util/kaldi-io-inl.h	/^namespace kaldi {$/;"	n
UnitTestClassifyRxfilename	util/kaldi-io-test.cc	/^void UnitTestClassifyRxfilename() {$/;"	f	namespace:kaldi
UnitTestClassifyWxfilename	util/kaldi-io-test.cc	/^void UnitTestClassifyWxfilename() {$/;"	f	namespace:kaldi
UnitTestIoNew	util/kaldi-io-test.cc	/^void UnitTestIoNew(bool binary) {$/;"	f	namespace:kaldi
UnitTestIoPipe	util/kaldi-io-test.cc	/^void UnitTestIoPipe(bool binary) {$/;"	f	namespace:kaldi
UnitTestIoStandard	util/kaldi-io-test.cc	/^void UnitTestIoStandard() {$/;"	f	namespace:kaldi
kaldi	util/kaldi-io-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/kaldi-io-test.cc	/^int main() {$/;"	f
ClassifyRxfilename	util/kaldi-io.cc	/^InputType ClassifyRxfilename(const std::string &filename) {$/;"	f	namespace:kaldi
ClassifyWxfilename	util/kaldi-io.cc	/^OutputType ClassifyWxfilename(const std::string &filename) {$/;"	f	namespace:kaldi
Close	util/kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::FileOutputImpl
Close	util/kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::PipeOutputImpl
Close	util/kaldi-io.cc	/^  virtual bool Close() {$/;"	f	class:kaldi::StandardOutputImpl
Close	util/kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::FileInputImpl
Close	util/kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::OffsetFileInputImpl
Close	util/kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::PipeInputImpl
Close	util/kaldi-io.cc	/^  virtual void Close() {$/;"	f	class:kaldi::StandardInputImpl
Close	util/kaldi-io.cc	/^bool Output::Close() {$/;"	f	class:kaldi::Output
Close	util/kaldi-io.cc	/^void Input::Close() {$/;"	f	class:kaldi::Input
FileInputImpl	util/kaldi-io.cc	/^class FileInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
FileOutputImpl	util/kaldi-io.cc	/^class FileOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
Input	util/kaldi-io.cc	/^Input::Input(const std::string &rxfilename, bool *binary): impl_(NULL) {$/;"	f	class:kaldi::Input
InputImplBase	util/kaldi-io.cc	/^class InputImplBase {$/;"	c	namespace:kaldi	file:
MyType	util/kaldi-io.cc	/^  virtual InputType MyType() { return kFileInput; }$/;"	f	class:kaldi::FileInputImpl
MyType	util/kaldi-io.cc	/^  virtual InputType MyType() { return kOffsetFileInput; }$/;"	f	class:kaldi::OffsetFileInputImpl
MyType	util/kaldi-io.cc	/^  virtual InputType MyType() { return kPipeInput; }$/;"	f	class:kaldi::PipeInputImpl
MyType	util/kaldi-io.cc	/^  virtual InputType MyType() { return kStandardInput; }$/;"	f	class:kaldi::StandardInputImpl
OffsetFileInputImpl	util/kaldi-io.cc	/^class OffsetFileInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
Open	util/kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::FileInputImpl
Open	util/kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::FileOutputImpl
Open	util/kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::StandardInputImpl
Open	util/kaldi-io.cc	/^  virtual bool Open(const std::string &filename, bool binary) {$/;"	f	class:kaldi::StandardOutputImpl
Open	util/kaldi-io.cc	/^  virtual bool Open(const std::string &rxfilename, bool binary) {$/;"	f	class:kaldi::OffsetFileInputImpl
Open	util/kaldi-io.cc	/^  virtual bool Open(const std::string &rxfilename, bool binary) {$/;"	f	class:kaldi::PipeInputImpl
Open	util/kaldi-io.cc	/^  virtual bool Open(const std::string &wxfilename, bool binary) {$/;"	f	class:kaldi::PipeOutputImpl
Open	util/kaldi-io.cc	/^bool Output::Open(const std::string &wxfn, bool binary, bool header) {$/;"	f	class:kaldi::Output
OpenInternal	util/kaldi-io.cc	/^bool Input::OpenInternal(const std::string &rxfilename,$/;"	f	class:kaldi::Input
Output	util/kaldi-io.cc	/^Output::Output(const std::string &wxfilename, bool binary, bool write_header):$/;"	f	class:kaldi::Output
OutputImplBase	util/kaldi-io.cc	/^class OutputImplBase {$/;"	c	namespace:kaldi	file:
PipeInputImpl	util/kaldi-io.cc	/^  PipeInputImpl(): f_ (NULL), is_(NULL) { }$/;"	f	class:kaldi::PipeInputImpl
PipeInputImpl	util/kaldi-io.cc	/^class PipeInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
PipeOutputImpl	util/kaldi-io.cc	/^  PipeOutputImpl(): f_ (NULL), os_(NULL) { }$/;"	f	class:kaldi::PipeOutputImpl
PipeOutputImpl	util/kaldi-io.cc	/^class PipeOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
PipebufType	util/kaldi-io.cc	/^typedef basic_pipebuf<char> PipebufType;$/;"	t	namespace:kaldi	file:
PrintableRxfilename	util/kaldi-io.cc	/^std::string PrintableRxfilename(std::string rxfilename) {$/;"	f	namespace:kaldi
PrintableWxfilename	util/kaldi-io.cc	/^std::string PrintableWxfilename(std::string wxfilename) {$/;"	f	namespace:kaldi
Seek	util/kaldi-io.cc	/^  bool Seek(size_t offset) {$/;"	f	class:kaldi::OffsetFileInputImpl
SplitFilename	util/kaldi-io.cc	/^  static void SplitFilename(const std::string &rxfilename,$/;"	f	class:kaldi::OffsetFileInputImpl
StandardInputImpl	util/kaldi-io.cc	/^  StandardInputImpl(): is_open_(false) { }$/;"	f	class:kaldi::StandardInputImpl
StandardInputImpl	util/kaldi-io.cc	/^class StandardInputImpl: public InputImplBase {$/;"	c	namespace:kaldi	file:
StandardOutputImpl	util/kaldi-io.cc	/^  StandardOutputImpl(): is_open_(false) { }$/;"	f	class:kaldi::StandardOutputImpl
StandardOutputImpl	util/kaldi-io.cc	/^class StandardOutputImpl: public OutputImplBase {$/;"	c	namespace:kaldi	file:
Stream	util/kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::FileInputImpl
Stream	util/kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::OffsetFileInputImpl
Stream	util/kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::PipeInputImpl
Stream	util/kaldi-io.cc	/^  virtual std::istream &Stream() {$/;"	f	class:kaldi::StandardInputImpl
Stream	util/kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::FileOutputImpl
Stream	util/kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::PipeOutputImpl
Stream	util/kaldi-io.cc	/^  virtual std::ostream &Stream() {$/;"	f	class:kaldi::StandardOutputImpl
Stream	util/kaldi-io.cc	/^std::istream &Input::Stream() {$/;"	f	class:kaldi::Input
Stream	util/kaldi-io.cc	/^std::ostream &Output::Stream() {  \/\/ will throw if not open; else returns stream.$/;"	f	class:kaldi::Output
binary_	util/kaldi-io.cc	/^  bool binary_;  \/\/ true if was opened in binary mode.$/;"	m	class:kaldi::OffsetFileInputImpl	file:
f_	util/kaldi-io.cc	/^  FILE *f_;$/;"	m	class:kaldi::PipeInputImpl	file:
f_	util/kaldi-io.cc	/^  FILE *f_;$/;"	m	class:kaldi::PipeOutputImpl	file:
fb_	util/kaldi-io.cc	/^  PipebufType *fb_;$/;"	m	class:kaldi::PipeInputImpl	file:
fb_	util/kaldi-io.cc	/^  PipebufType *fb_;$/;"	m	class:kaldi::PipeOutputImpl	file:
filename_	util/kaldi-io.cc	/^  std::string filename_;  \/\/ the actual filename$/;"	m	class:kaldi::OffsetFileInputImpl	file:
filename_	util/kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::FileOutputImpl	file:
filename_	util/kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::PipeInputImpl	file:
filename_	util/kaldi-io.cc	/^  std::string filename_;$/;"	m	class:kaldi::PipeOutputImpl	file:
is_	util/kaldi-io.cc	/^  std::ifstream is_;$/;"	m	class:kaldi::FileInputImpl	file:
is_	util/kaldi-io.cc	/^  std::ifstream is_;$/;"	m	class:kaldi::OffsetFileInputImpl	file:
is_	util/kaldi-io.cc	/^  std::istream *is_;$/;"	m	class:kaldi::PipeInputImpl	file:
is_open_	util/kaldi-io.cc	/^  bool is_open_;$/;"	m	class:kaldi::StandardInputImpl	file:
is_open_	util/kaldi-io.cc	/^  bool is_open_;$/;"	m	class:kaldi::StandardOutputImpl	file:
kaldi	util/kaldi-io.cc	/^namespace kaldi {$/;"	n	file:
os_	util/kaldi-io.cc	/^  std::ofstream os_;$/;"	m	class:kaldi::FileOutputImpl	file:
os_	util/kaldi-io.cc	/^  std::ostream *os_;$/;"	m	class:kaldi::PipeOutputImpl	file:
~FileInputImpl	util/kaldi-io.cc	/^  virtual ~FileInputImpl() {$/;"	f	class:kaldi::FileInputImpl
~FileOutputImpl	util/kaldi-io.cc	/^  virtual ~FileOutputImpl() {$/;"	f	class:kaldi::FileOutputImpl
~Input	util/kaldi-io.cc	/^Input::~Input() { if (impl_) Close(); }$/;"	f	class:kaldi::Input
~InputImplBase	util/kaldi-io.cc	/^  virtual ~InputImplBase() { }$/;"	f	class:kaldi::InputImplBase
~OffsetFileInputImpl	util/kaldi-io.cc	/^  virtual ~OffsetFileInputImpl() {$/;"	f	class:kaldi::OffsetFileInputImpl
~Output	util/kaldi-io.cc	/^Output::~Output() {$/;"	f	class:kaldi::Output
~OutputImplBase	util/kaldi-io.cc	/^  virtual ~OutputImplBase() { }$/;"	f	class:kaldi::OutputImplBase
~PipeInputImpl	util/kaldi-io.cc	/^  virtual ~PipeInputImpl() {$/;"	f	class:kaldi::PipeInputImpl
~PipeOutputImpl	util/kaldi-io.cc	/^  virtual ~PipeOutputImpl() {$/;"	f	class:kaldi::PipeOutputImpl
~StandardInputImpl	util/kaldi-io.cc	/^  virtual ~StandardInputImpl() { }$/;"	f	class:kaldi::StandardInputImpl
~StandardOutputImpl	util/kaldi-io.cc	/^  virtual ~StandardOutputImpl() {$/;"	f	class:kaldi::StandardOutputImpl
Input	util/kaldi-io.h	/^  Input(): impl_(NULL) {}$/;"	f	class:kaldi::Input
Input	util/kaldi-io.h	/^class Input {$/;"	c	namespace:kaldi
InputType	util/kaldi-io.h	/^enum InputType {$/;"	g	namespace:kaldi
KALDI_UTIL_KALDI_IO_H_	util/kaldi-io.h	20;"	d
Output	util/kaldi-io.h	/^  Output(): impl_(NULL) {};$/;"	f	class:kaldi::Output
Output	util/kaldi-io.h	/^class Output {$/;"	c	namespace:kaldi
OutputType	util/kaldi-io.h	/^enum OutputType {$/;"	g	namespace:kaldi
ReadKaldiObject	util/kaldi-io.h	/^template <class C> inline void ReadKaldiObject(const std::string &filename,$/;"	f	namespace:kaldi
WriteKaldiObject	util/kaldi-io.h	/^template <class C> inline void WriteKaldiObject(const C &c,$/;"	f	namespace:kaldi
filename_	util/kaldi-io.h	/^  std::string filename_;$/;"	m	class:kaldi::Output
impl_	util/kaldi-io.h	/^  InputImplBase *impl_;$/;"	m	class:kaldi::Input
impl_	util/kaldi-io.h	/^  OutputImplBase *impl_;  \/\/ non-NULL if open.$/;"	m	class:kaldi::Output
kFileInput	util/kaldi-io.h	/^  kFileInput,$/;"	e	enum:kaldi::InputType
kFileOutput	util/kaldi-io.h	/^  kFileOutput,$/;"	e	enum:kaldi::OutputType
kNoInput	util/kaldi-io.h	/^  kNoInput,$/;"	e	enum:kaldi::InputType
kNoOutput	util/kaldi-io.h	/^  kNoOutput,$/;"	e	enum:kaldi::OutputType
kOffsetFileInput	util/kaldi-io.h	/^  kOffsetFileInput,$/;"	e	enum:kaldi::InputType
kPipeInput	util/kaldi-io.h	/^  kPipeInput$/;"	e	enum:kaldi::InputType
kPipeOutput	util/kaldi-io.h	/^  kPipeOutput$/;"	e	enum:kaldi::OutputType
kStandardInput	util/kaldi-io.h	/^  kStandardInput,$/;"	e	enum:kaldi::InputType
kStandardOutput	util/kaldi-io.h	/^  kStandardOutput,$/;"	e	enum:kaldi::OutputType
kaldi	util/kaldi-io.h	/^namespace kaldi {$/;"	n
KALDI_UTIL_KALDI_PIPEBUF_H_	util/kaldi-pipebuf.h	26;"	d
kaldi	util/kaldi-pipebuf.h	/^namespace kaldi$/;"	n
CheckImpl	util/kaldi-table-inl.h	/^void RandomAccessTableReader<Holder>::CheckImpl() const {$/;"	f	class:kaldi::RandomAccessTableReader
CheckImpl	util/kaldi-table-inl.h	/^void SequentialTableReader<Holder>::CheckImpl() const {$/;"	f	class:kaldi::SequentialTableReader
CheckImpl	util/kaldi-table-inl.h	/^void TableWriter<Holder>::CheckImpl() const {$/;"	f	class:kaldi::TableWriter
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterArchiveImpl
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterBothImpl
Close	util/kaldi-table-inl.h	/^  virtual bool Close() {$/;"	f	class:kaldi::TableWriterScriptImpl
Close	util/kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::Close() {$/;"	f	class:kaldi::RandomAccessTableReader
Close	util/kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Close() {$/;"	f	class:kaldi::SequentialTableReader
Close	util/kaldi-table-inl.h	/^bool TableWriter<Holder>::Close() {$/;"	f	class:kaldi::TableWriter
CloseInternal	util/kaldi-table-inl.h	/^  bool CloseInternal() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
Done	util/kaldi-table-inl.h	/^  virtual bool Done() const {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Done	util/kaldi-table-inl.h	/^  virtual bool Done() const {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Done	util/kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Done() {$/;"	f	class:kaldi::SequentialTableReader
FindKeyInternal	util/kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
FindKeyInternal	util/kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key, const T **value_ptr = NULL) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
FindKeyInternal	util/kaldi-table-inl.h	/^  bool FindKeyInternal(const std::string &key, size_t *index) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
Flush	util/kaldi-table-inl.h	/^  virtual void Flush() { }$/;"	f	class:kaldi::TableWriterScriptImpl
Flush	util/kaldi-table-inl.h	/^  virtual void Flush() {$/;"	f	class:kaldi::TableWriterArchiveImpl
Flush	util/kaldi-table-inl.h	/^  virtual void Flush() {$/;"	f	class:kaldi::TableWriterBothImpl
Flush	util/kaldi-table-inl.h	/^void TableWriter<Holder>::Flush() {$/;"	f	class:kaldi::TableWriter
FreeCurrent	util/kaldi-table-inl.h	/^  virtual void FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
FreeCurrent	util/kaldi-table-inl.h	/^  void FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
FreeCurrent	util/kaldi-table-inl.h	/^void SequentialTableReader<Holder>::FreeCurrent() {$/;"	f	class:kaldi::SequentialTableReader
HandlePendingDelete	util/kaldi-table-inl.h	/^  void HandlePendingDelete() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
HandlePendingDelete	util/kaldi-table-inl.h	/^  void HandlePendingDelete() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
HasKey	util/kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
HasKey	util/kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
HasKey	util/kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
HasKey	util/kaldi-table-inl.h	/^  virtual bool HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
HasKey	util/kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::HasKey(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReader
HasKey	util/kaldi-table-inl.h	/^bool RandomAccessTableReaderMapped<Holder>::HasKey(const std::string &utt) {$/;"	f	class:kaldi::RandomAccessTableReaderMapped
HasKeyInternal	util/kaldi-table-inl.h	/^  virtual bool HasKeyInternal(const std::string &key, bool preload) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
IsOpen	util/kaldi-table-inl.h	/^  virtual bool IsOpen() const {  return (state_ == kReadScript);  }$/;"	f	class:kaldi::TableWriterScriptImpl
IsOpen	util/kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
IsOpen	util/kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
IsOpen	util/kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
IsOpen	util/kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
IsOpen	util/kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::TableWriterArchiveImpl
IsOpen	util/kaldi-table-inl.h	/^  virtual bool IsOpen() const {$/;"	f	class:kaldi::TableWriterBothImpl
IsOpen	util/kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::IsOpen() const {$/;"	f	class:kaldi::SequentialTableReader
IsOpen	util/kaldi-table-inl.h	/^bool TableWriter<Holder>::IsOpen() const {$/;"	f	class:kaldi::TableWriter
KALDI_UTIL_KALDI_TABLE_INL_H_	util/kaldi-table-inl.h	23;"	d
Key	util/kaldi-table-inl.h	/^  virtual std::string Key() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Key	util/kaldi-table-inl.h	/^  virtual std::string Key() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Key	util/kaldi-table-inl.h	/^std::string SequentialTableReader<Holder>::Key() {$/;"	f	class:kaldi::SequentialTableReader
LoadCurrent	util/kaldi-table-inl.h	/^  bool LoadCurrent() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
LookupFilename	util/kaldi-table-inl.h	/^  bool LookupFilename(const std::string &key, std::string *wxfilename) {$/;"	f	class:kaldi::TableWriterScriptImpl
LookupKey	util/kaldi-table-inl.h	/^  bool LookupKey(const std::string &key, size_t *script_offset) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
MakeFilename	util/kaldi-table-inl.h	/^  void MakeFilename(typename std::ostream::pos_type streampos, std::string *output) const {$/;"	f	class:kaldi::TableWriterBothImpl
MakeTombstone	util/kaldi-table-inl.h	/^  void MakeTombstone(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
MapType	util/kaldi-table-inl.h	/^  typedef unordered_map<std::string, Holder*, StringHasher>  MapType;$/;"	t	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
Next	util/kaldi-table-inl.h	/^  virtual void Next() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Next	util/kaldi-table-inl.h	/^  void Next() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Next	util/kaldi-table-inl.h	/^void SequentialTableReader<Holder>::Next() {$/;"	f	class:kaldi::SequentialTableReader
NextScpLine	util/kaldi-table-inl.h	/^  void NextScpLine() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Open	util/kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
Open	util/kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
Open	util/kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Open	util/kaldi-table-inl.h	/^  virtual bool Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Open	util/kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterArchiveImpl
Open	util/kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterBothImpl
Open	util/kaldi-table-inl.h	/^  virtual bool Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriterScriptImpl
Open	util/kaldi-table-inl.h	/^bool RandomAccessTableReader<Holder>::Open(const std::string &rspecifier) {$/;"	f	class:kaldi::RandomAccessTableReader
Open	util/kaldi-table-inl.h	/^bool RandomAccessTableReaderMapped<Holder>::Open($/;"	f	class:kaldi::RandomAccessTableReaderMapped
Open	util/kaldi-table-inl.h	/^bool SequentialTableReader<Holder>::Open(const std::string &rspecifier) {$/;"	f	class:kaldi::SequentialTableReader
Open	util/kaldi-table-inl.h	/^bool TableWriter<Holder>::Open(const std::string &wspecifier) {$/;"	f	class:kaldi::TableWriter
PairCompare	util/kaldi-table-inl.h	/^  struct PairCompare {$/;"	s	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
RandomAccessTableReader	util/kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::RandomAccessTableReader(const std::string &rspecifier):$/;"	f	class:kaldi::RandomAccessTableReader
RandomAccessTableReaderArchiveImplBase	util/kaldi-table-inl.h	/^  RandomAccessTableReaderArchiveImplBase(): holder_(NULL), state_(kUninitialized) { }$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
RandomAccessTableReaderArchiveImplBase	util/kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderArchiveImplBase:$/;"	c	namespace:kaldi
RandomAccessTableReaderDSortedArchiveImpl	util/kaldi-table-inl.h	/^  RandomAccessTableReaderDSortedArchiveImpl() { }$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
RandomAccessTableReaderDSortedArchiveImpl	util/kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderDSortedArchiveImpl:$/;"	c	namespace:kaldi
RandomAccessTableReaderImplBase	util/kaldi-table-inl.h	/^template<class Holder> class RandomAccessTableReaderImplBase {$/;"	c	namespace:kaldi
RandomAccessTableReaderMapped	util/kaldi-table-inl.h	/^RandomAccessTableReaderMapped<Holder>::RandomAccessTableReaderMapped($/;"	f	class:kaldi::RandomAccessTableReaderMapped
RandomAccessTableReaderScriptImpl	util/kaldi-table-inl.h	/^  RandomAccessTableReaderScriptImpl(): last_found_(0), state_(kUninitialized) {}$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
RandomAccessTableReaderScriptImpl	util/kaldi-table-inl.h	/^class RandomAccessTableReaderScriptImpl:$/;"	c	namespace:kaldi
RandomAccessTableReaderSortedArchiveImpl	util/kaldi-table-inl.h	/^  RandomAccessTableReaderSortedArchiveImpl():$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
RandomAccessTableReaderSortedArchiveImpl	util/kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderSortedArchiveImpl:$/;"	c	namespace:kaldi
RandomAccessTableReaderUnsortedArchiveImpl	util/kaldi-table-inl.h	/^  RandomAccessTableReaderUnsortedArchiveImpl(): to_delete_iter_(map_.end()),$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
RandomAccessTableReaderUnsortedArchiveImpl	util/kaldi-table-inl.h	/^template<class Holder>  class RandomAccessTableReaderUnsortedArchiveImpl:$/;"	c	namespace:kaldi
ReadNextObject	util/kaldi-table-inl.h	/^  void ReadNextObject() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
SequentialTableReader	util/kaldi-table-inl.h	/^SequentialTableReader<Holder>::SequentialTableReader(const std::string &rspecifier): impl_(NULL) {$/;"	f	class:kaldi::SequentialTableReader
SequentialTableReaderArchiveImpl	util/kaldi-table-inl.h	/^  SequentialTableReaderArchiveImpl(): state_(kUninitialized) { }$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
SequentialTableReaderArchiveImpl	util/kaldi-table-inl.h	/^template<class Holder>  class SequentialTableReaderArchiveImpl:$/;"	c	namespace:kaldi
SequentialTableReaderImplBase	util/kaldi-table-inl.h	/^  SequentialTableReaderImplBase() { }$/;"	f	class:kaldi::SequentialTableReaderImplBase
SequentialTableReaderImplBase	util/kaldi-table-inl.h	/^template<class Holder> class SequentialTableReaderImplBase {$/;"	c	namespace:kaldi
SequentialTableReaderScriptImpl	util/kaldi-table-inl.h	/^  SequentialTableReaderScriptImpl(): state_(kUninitialized) { }$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
SequentialTableReaderScriptImpl	util/kaldi-table-inl.h	/^template<class Holder>  class SequentialTableReaderScriptImpl:$/;"	c	namespace:kaldi
StateType	util/kaldi-table-inl.h	/^  enum StateType {$/;"	g	class:kaldi::SequentialTableReaderScriptImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderArchiveImplBase
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderImplBase
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderScriptImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderArchiveImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderImplBase
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReaderScriptImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterArchiveImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterBothImpl
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterImplBase
T	util/kaldi-table-inl.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriterScriptImpl
TableWriter	util/kaldi-table-inl.h	/^TableWriter<Holder>::TableWriter(const std::string &wspecifier): impl_(NULL) {$/;"	f	class:kaldi::TableWriter
TableWriterArchiveImpl	util/kaldi-table-inl.h	/^  TableWriterArchiveImpl(): state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterArchiveImpl
TableWriterArchiveImpl	util/kaldi-table-inl.h	/^class TableWriterArchiveImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
TableWriterBothImpl	util/kaldi-table-inl.h	/^  TableWriterBothImpl(): state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterBothImpl
TableWriterBothImpl	util/kaldi-table-inl.h	/^class TableWriterBothImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
TableWriterImplBase	util/kaldi-table-inl.h	/^  TableWriterImplBase() { }$/;"	f	class:kaldi::TableWriterImplBase
TableWriterImplBase	util/kaldi-table-inl.h	/^template<class Holder> class TableWriterImplBase {$/;"	c	namespace:kaldi
TableWriterScriptImpl	util/kaldi-table-inl.h	/^  TableWriterScriptImpl(): last_found_(0), state_(kUninitialized) {}$/;"	f	class:kaldi::TableWriterScriptImpl
TableWriterScriptImpl	util/kaldi-table-inl.h	/^class TableWriterScriptImpl: public TableWriterImplBase<Holder> {$/;"	c	namespace:kaldi
Value	util/kaldi-table-inl.h	/^  const T &Value() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
Value	util/kaldi-table-inl.h	/^  const T &Value() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
Value	util/kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
Value	util/kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
Value	util/kaldi-table-inl.h	/^  virtual const T & Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
Value	util/kaldi-table-inl.h	/^  virtual const T&  Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
Value	util/kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::Value(const std::string &key) {$/;"	f	class:kaldi::RandomAccessTableReader
Value	util/kaldi-table-inl.h	/^SequentialTableReader<Holder>::Value() {$/;"	f	class:kaldi::SequentialTableReader
Value	util/kaldi-table-inl.h	/^const typename Holder::T& RandomAccessTableReaderMapped<Holder>::Value($/;"	f	class:kaldi::RandomAccessTableReaderMapped
Write	util/kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterArchiveImpl
Write	util/kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterBothImpl
Write	util/kaldi-table-inl.h	/^  virtual bool Write(const std::string &key, const T &value) {$/;"	f	class:kaldi::TableWriterScriptImpl
Write	util/kaldi-table-inl.h	/^void TableWriter<Holder>::Write(const std::string &key,$/;"	f	class:kaldi::TableWriter
archive_output_	util/kaldi-table-inl.h	/^  Output archive_output_;$/;"	m	class:kaldi::TableWriterBothImpl
archive_rxfilename_	util/kaldi-table-inl.h	/^  std::string archive_rxfilename_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
archive_rxfilename_	util/kaldi-table-inl.h	/^  std::string archive_rxfilename_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
archive_wxfilename_	util/kaldi-table-inl.h	/^  std::string archive_wxfilename_;$/;"	m	class:kaldi::TableWriterArchiveImpl
archive_wxfilename_	util/kaldi-table-inl.h	/^  std::string archive_wxfilename_;$/;"	m	class:kaldi::TableWriterBothImpl
binary_	util/kaldi-table-inl.h	/^  bool binary_;  \/\/ Binary-mode archive.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
cur_key_	util/kaldi-table-inl.h	/^  std::string cur_key_;   \/\/ current key (if state == kHaveObject).$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
current_key_	util/kaldi-table-inl.h	/^  std::string current_key_;  \/\/ Key of object in holder_$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
data_input_	util/kaldi-table-inl.h	/^  Input data_input_;   \/\/ Input object for the entries in$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
data_rxfilename_	util/kaldi-table-inl.h	/^  std::string data_rxfilename_;  \/\/ of the file we're reading.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
first_deleted_string_	util/kaldi-table-inl.h	/^  std::string first_deleted_string_;  \/\/ keep the first string we deleted$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
holder_	util/kaldi-table-inl.h	/^  Holder *holder_;     \/\/ Holds the object we just read (if state == kHaveObject)$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
holder_	util/kaldi-table-inl.h	/^  Holder holder_;     \/\/ Holds the object.$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
holder_	util/kaldi-table-inl.h	/^  Holder holder_;  \/\/ Holds the object.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
holder_	util/kaldi-table-inl.h	/^  Holder holder_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
input_	util/kaldi-table-inl.h	/^  Input input_;       \/\/ Input object for the archive$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
input_	util/kaldi-table-inl.h	/^  Input input_;  \/\/ Input object for the archive$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
input_	util/kaldi-table-inl.h	/^  Input input_;  \/\/ Use the same input_ object for reading each file, in case$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
kEof	util/kaldi-table-inl.h	/^    kEof,           \/\/ End of file                                 no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon9
kEof	util/kaldi-table-inl.h	/^    kEof,     \/\/ We did Next() and found eof in archive            no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon4
kEof	util/kaldi-table-inl.h	/^    kEof,     \/\/ We did Next() and found eof in script file.       no         no$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kError	util/kaldi-table-inl.h	/^    kError,         \/\/ Some kind of error-state in the reading.    no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon9
kError	util/kaldi-table-inl.h	/^    kError,   \/\/ Some other error                                  no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon4
kError	util/kaldi-table-inl.h	/^    kError,   \/\/ Some other error                                  no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kFileStart	util/kaldi-table-inl.h	/^    kFileStart,        \/\/ [state we only use internally]           no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kFileStart	util/kaldi-table-inl.h	/^    kFileStart,      \/\/ [state we use internally: just opened.]    no         yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon4
kFreedObject	util/kaldi-table-inl.h	/^    kFreedObject,  \/\/ The user called FreeCurrent().                no         yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon4
kGaveObject	util/kaldi-table-inl.h	/^    kGaveObject,   \/\/     yes                    yes$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon8
kHaveObject	util/kaldi-table-inl.h	/^    kHaveObject,    \/\/ Have object in holder_                      yes        yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon9
kHaveObject	util/kaldi-table-inl.h	/^    kHaveObject,   \/\/     yes                    yes$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon8
kHaveObject	util/kaldi-table-inl.h	/^    kHaveObject,  \/\/ We read the key and the object after it.       yes        yes$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon4
kHaveScpLine	util/kaldi-table-inl.h	/^    kHaveScpLine,  \/\/ Just called Open() or Next() and have a       no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kLoadFailed	util/kaldi-table-inl.h	/^    kLoadFailed,  \/\/ Called LoadCurrent() and it failed,           no         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kLoadSucceeded	util/kaldi-table-inl.h	/^    kLoadSucceeded,  \/\/ Called LoadCurrent() and it succeeded.     yes         yes$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kNoObject	util/kaldi-table-inl.h	/^    kNoObject,      \/\/ Do not have object in holder_               no         yes$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon9
kNotHaveObject	util/kaldi-table-inl.h	/^    kNotHaveObject,  \/\/     yes                    no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon8
kNotReadScript	util/kaldi-table-inl.h	/^    kNotReadScript,  \/\/     no                     no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon8
kNotReadScript	util/kaldi-table-inl.h	/^    kNotReadScript,  \/\/ read of script failed.$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon6
kOpen	util/kaldi-table-inl.h	/^    kOpen,             \/\/ yes$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon5
kOpen	util/kaldi-table-inl.h	/^    kOpen,             \/\/ yes$/;"	e	enum:kaldi::TableWriterBothImpl::__anon7
kReadScript	util/kaldi-table-inl.h	/^    kReadScript,$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon6
kUninitialized	util/kaldi-table-inl.h	/^    kUninitialized,    \/\/ no$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon5
kUninitialized	util/kaldi-table-inl.h	/^    kUninitialized,    \/\/ no$/;"	e	enum:kaldi::TableWriterBothImpl::__anon7
kUninitialized	util/kaldi-table-inl.h	/^    kUninitialized,  \/\/     no                     no$/;"	e	enum:kaldi::RandomAccessTableReaderScriptImpl::__anon8
kUninitialized	util/kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed                     no         no$/;"	e	enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon9
kUninitialized	util/kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed.                    no         no$/;"	e	enum:kaldi::SequentialTableReaderArchiveImpl::__anon4
kUninitialized	util/kaldi-table-inl.h	/^    kUninitialized,  \/\/ Uninitialized or closed.                    no         no$/;"	e	enum:kaldi::SequentialTableReaderScriptImpl::StateType
kUninitialized	util/kaldi-table-inl.h	/^    kUninitialized,$/;"	e	enum:kaldi::TableWriterScriptImpl::__anon6
kWriteError	util/kaldi-table-inl.h	/^    kWriteError,       \/\/ yes$/;"	e	enum:kaldi::TableWriterArchiveImpl::__anon5
kWriteError	util/kaldi-table-inl.h	/^    kWriteError,       \/\/ yes$/;"	e	enum:kaldi::TableWriterBothImpl::__anon7
kaldi	util/kaldi-table-inl.h	/^namespace kaldi {$/;"	n
key_	util/kaldi-table-inl.h	/^  std::string key_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
key_	util/kaldi-table-inl.h	/^  std::string key_;$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
last_found_	util/kaldi-table-inl.h	/^  size_t last_found_;  \/\/ This is for an optimization used in FindFilename.$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
last_found_	util/kaldi-table-inl.h	/^  size_t last_found_;  \/\/ This is for an optimization used in LookupFilename.$/;"	m	class:kaldi::TableWriterScriptImpl
last_found_index_	util/kaldi-table-inl.h	/^  size_t last_found_index_;  \/\/ An optimization s.t. if FindKeyInternal called twice with$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
last_requested_key_	util/kaldi-table-inl.h	/^  std::string last_requested_key_;$/;"	m	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
map_	util/kaldi-table-inl.h	/^  MapType map_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
operator ()	util/kaldi-table-inl.h	/^    inline bool operator() (const std::pair<std::string, Holder*> &pr1,$/;"	f	struct:kaldi::RandomAccessTableReaderSortedArchiveImpl::PairCompare
opts_	util/kaldi-table-inl.h	/^  RspecifierOptions opts_;  \/\/ options.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
opts_	util/kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
opts_	util/kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
opts_	util/kaldi-table-inl.h	/^  RspecifierOptions opts_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
opts_	util/kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterArchiveImpl
opts_	util/kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterBothImpl
opts_	util/kaldi-table-inl.h	/^  WspecifierOptions opts_;$/;"	m	class:kaldi::TableWriterScriptImpl
output_	util/kaldi-table-inl.h	/^  Output output_;$/;"	m	class:kaldi::TableWriterArchiveImpl
pending_delete_	util/kaldi-table-inl.h	/^  size_t pending_delete_;  \/\/ If opts_.once == true, this is the index of$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
rspecifier_	util/kaldi-table-inl.h	/^  std::string rspecifier_;  \/\/ rspecifier used to open it; used in debug messages$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
rspecifier_	util/kaldi-table-inl.h	/^  std::string rspecifier_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase
rspecifier_	util/kaldi-table-inl.h	/^  std::string rspecifier_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl
rspecifier_	util/kaldi-table-inl.h	/^  std::string rspecifier_;$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
script_	util/kaldi-table-inl.h	/^  std::vector<std::pair<std::string, std::string> > script_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
script_	util/kaldi-table-inl.h	/^  std::vector<std::pair<std::string, std::string> > script_;$/;"	m	class:kaldi::TableWriterScriptImpl
script_input_	util/kaldi-table-inl.h	/^  Input script_input_;  \/\/ Input object for the .scp file$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
script_output_	util/kaldi-table-inl.h	/^  Output script_output_;$/;"	m	class:kaldi::TableWriterBothImpl
script_rxfilename_	util/kaldi-table-inl.h	/^  std::string script_rxfilename_;  \/\/ filename of script.$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl
script_rxfilename_	util/kaldi-table-inl.h	/^  std::string script_rxfilename_;  \/\/ of the script file.$/;"	m	class:kaldi::SequentialTableReaderScriptImpl
script_rxfilename_	util/kaldi-table-inl.h	/^  std::string script_rxfilename_;$/;"	m	class:kaldi::TableWriterScriptImpl
script_wxfilename_	util/kaldi-table-inl.h	/^  std::string script_wxfilename_;$/;"	m	class:kaldi::TableWriterBothImpl
seen_pairs_	util/kaldi-table-inl.h	/^  std::vector<std::pair<std::string, Holder*> > seen_pairs_;$/;"	m	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
state_	util/kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::RandomAccessTableReaderArchiveImplBase	typeref:enum:kaldi::RandomAccessTableReaderArchiveImplBase::__anon9
state_	util/kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::RandomAccessTableReaderScriptImpl	typeref:enum:kaldi::RandomAccessTableReaderScriptImpl::__anon8
state_	util/kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::SequentialTableReaderArchiveImpl	typeref:enum:kaldi::SequentialTableReaderArchiveImpl::__anon4
state_	util/kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::SequentialTableReaderScriptImpl	typeref:enum:kaldi::SequentialTableReaderScriptImpl::StateType
state_	util/kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterArchiveImpl	typeref:enum:kaldi::TableWriterArchiveImpl::__anon5
state_	util/kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterBothImpl	typeref:enum:kaldi::TableWriterBothImpl::__anon7
state_	util/kaldi-table-inl.h	/^  } state_;$/;"	m	class:kaldi::TableWriterScriptImpl	typeref:enum:kaldi::TableWriterScriptImpl::__anon6
to_delete_iter_	util/kaldi-table-inl.h	/^  typename MapType::iterator to_delete_iter_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
to_delete_iter_valid_	util/kaldi-table-inl.h	/^  bool to_delete_iter_valid_;$/;"	m	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
wspecifier_	util/kaldi-table-inl.h	/^  std::string wspecifier_;$/;"	m	class:kaldi::TableWriterArchiveImpl
wspecifier_	util/kaldi-table-inl.h	/^  std::string wspecifier_;$/;"	m	class:kaldi::TableWriterBothImpl
wspecifier_	util/kaldi-table-inl.h	/^  std::string wspecifier_;$/;"	m	class:kaldi::TableWriterScriptImpl
~RandomAccessTableReader	util/kaldi-table-inl.h	/^RandomAccessTableReader<Holder>::~RandomAccessTableReader() {$/;"	f	class:kaldi::RandomAccessTableReader
~RandomAccessTableReaderArchiveImplBase	util/kaldi-table-inl.h	/^  ~RandomAccessTableReaderArchiveImplBase() {$/;"	f	class:kaldi::RandomAccessTableReaderArchiveImplBase
~RandomAccessTableReaderDSortedArchiveImpl	util/kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderDSortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderDSortedArchiveImpl
~RandomAccessTableReaderImplBase	util/kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderImplBase() {}$/;"	f	class:kaldi::RandomAccessTableReaderImplBase
~RandomAccessTableReaderScriptImpl	util/kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderScriptImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderScriptImpl
~RandomAccessTableReaderSortedArchiveImpl	util/kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderSortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderSortedArchiveImpl
~RandomAccessTableReaderUnsortedArchiveImpl	util/kaldi-table-inl.h	/^  virtual ~RandomAccessTableReaderUnsortedArchiveImpl() {$/;"	f	class:kaldi::RandomAccessTableReaderUnsortedArchiveImpl
~SequentialTableReader	util/kaldi-table-inl.h	/^SequentialTableReader<Holder>::~SequentialTableReader() {$/;"	f	class:kaldi::SequentialTableReader
~SequentialTableReaderArchiveImpl	util/kaldi-table-inl.h	/^  virtual ~SequentialTableReaderArchiveImpl() {$/;"	f	class:kaldi::SequentialTableReaderArchiveImpl
~SequentialTableReaderImplBase	util/kaldi-table-inl.h	/^  virtual ~SequentialTableReaderImplBase() { }$/;"	f	class:kaldi::SequentialTableReaderImplBase
~SequentialTableReaderScriptImpl	util/kaldi-table-inl.h	/^  virtual ~SequentialTableReaderScriptImpl() {$/;"	f	class:kaldi::SequentialTableReaderScriptImpl
~TableWriter	util/kaldi-table-inl.h	/^TableWriter<Holder>::~TableWriter() {$/;"	f	class:kaldi::TableWriter
~TableWriterArchiveImpl	util/kaldi-table-inl.h	/^  virtual ~TableWriterArchiveImpl() {$/;"	f	class:kaldi::TableWriterArchiveImpl
~TableWriterBothImpl	util/kaldi-table-inl.h	/^  virtual ~TableWriterBothImpl() {$/;"	f	class:kaldi::TableWriterBothImpl
~TableWriterImplBase	util/kaldi-table-inl.h	/^  virtual ~TableWriterImplBase() { }$/;"	f	class:kaldi::TableWriterImplBase
~TableWriterScriptImpl	util/kaldi-table-inl.h	/^  virtual ~TableWriterScriptImpl() {$/;"	f	class:kaldi::TableWriterScriptImpl
RandomizeVector	util/kaldi-table-test.cc	/^template<class T> void RandomizeVector(std::vector<T> *v) {$/;"	f	namespace:kaldi
UnitTestClassifyRspecifier	util/kaldi-table-test.cc	/^void UnitTestClassifyRspecifier() {$/;"	f	namespace:kaldi
UnitTestClassifyWspecifier	util/kaldi-table-test.cc	/^void UnitTestClassifyWspecifier() {$/;"	f	namespace:kaldi
UnitTestReadScriptFile	util/kaldi-table-test.cc	/^void UnitTestReadScriptFile() {$/;"	f	namespace:kaldi
UnitTestTableRandomBothDouble	util/kaldi-table-test.cc	/^void UnitTestTableRandomBothDouble(bool binary, bool read_scp,$/;"	f	namespace:kaldi
UnitTestTableRandomBothDoubleMatrix	util/kaldi-table-test.cc	/^void UnitTestTableRandomBothDoubleMatrix(bool binary, bool read_scp,$/;"	f	namespace:kaldi
UnitTestTableSequentialBaseFloatVectorBoth	util/kaldi-table-test.cc	/^void UnitTestTableSequentialBaseFloatVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialBool	util/kaldi-table-test.cc	/^void UnitTestTableSequentialBool(bool binary) {$/;"	f	namespace:kaldi
UnitTestTableSequentialDouble	util/kaldi-table-test.cc	/^void UnitTestTableSequentialDouble(bool binary) {$/;"	f	namespace:kaldi
UnitTestTableSequentialDoubleBoth	util/kaldi-table-test.cc	/^void UnitTestTableSequentialDoubleBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialDoubleMatrixBoth	util/kaldi-table-test.cc	/^void UnitTestTableSequentialDoubleMatrixBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32	util/kaldi-table-test.cc	/^void UnitTestTableSequentialInt32(bool binary) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32PairVectorBoth	util/kaldi-table-test.cc	/^void UnitTestTableSequentialInt32PairVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32Script	util/kaldi-table-test.cc	/^void UnitTestTableSequentialInt32Script(bool binary) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32VectorBoth	util/kaldi-table-test.cc	/^void UnitTestTableSequentialInt32VectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
UnitTestTableSequentialInt32VectorVectorBoth	util/kaldi-table-test.cc	/^void UnitTestTableSequentialInt32VectorVectorBoth(bool binary, bool read_scp) {$/;"	f	namespace:kaldi
kaldi	util/kaldi-table-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/kaldi-table-test.cc	/^int main() {$/;"	f
ClassifyRspecifier	util/kaldi-table.cc	/^RspecifierType ClassifyRspecifier(const std::string &rspecifier,$/;"	f	namespace:kaldi
ClassifyWspecifier	util/kaldi-table.cc	/^WspecifierType ClassifyWspecifier(const std::string &wspecifier,$/;"	f	namespace:kaldi
ReadScriptFile	util/kaldi-table.cc	/^bool ReadScriptFile(const std::string &rxfilename,$/;"	f	namespace:kaldi
ReadScriptFile	util/kaldi-table.cc	/^bool ReadScriptFile(std::istream &is,$/;"	f	namespace:kaldi
WriteScriptFile	util/kaldi-table.cc	/^bool WriteScriptFile(const std::string &wxfilename,$/;"	f	namespace:kaldi
WriteScriptFile	util/kaldi-table.cc	/^bool WriteScriptFile(std::ostream &os,$/;"	f	namespace:kaldi
kaldi	util/kaldi-table.cc	/^namespace kaldi {$/;"	n	file:
Close	util/kaldi-table.h	/^  inline bool Close() { return reader_.Close(); }$/;"	f	class:kaldi::RandomAccessTableReaderMapped
IsOpen	util/kaldi-table.h	/^  bool IsOpen() const { return (impl_ != NULL); }$/;"	f	class:kaldi::RandomAccessTableReader
IsOpen	util/kaldi-table.h	/^  inline bool IsOpen() const { return reader_.IsOpen(); }$/;"	f	class:kaldi::RandomAccessTableReaderMapped
KALDI_UTIL_KALDI_TABLE_H_	util/kaldi-table.h	22;"	d
KeyList	util/kaldi-table.h	/^typedef std::vector<std::string> KeyList;$/;"	t	namespace:kaldi
RandomAccessTableReader	util/kaldi-table.h	/^  RandomAccessTableReader(): impl_(NULL) { }$/;"	f	class:kaldi::RandomAccessTableReader
RandomAccessTableReader	util/kaldi-table.h	/^  RandomAccessTableReader(const RandomAccessTableReader<Holder> &other):$/;"	f	class:kaldi::RandomAccessTableReader
RandomAccessTableReader	util/kaldi-table.h	/^class RandomAccessTableReader {$/;"	c	namespace:kaldi
RandomAccessTableReaderMapped	util/kaldi-table.h	/^  RandomAccessTableReaderMapped() {};$/;"	f	class:kaldi::RandomAccessTableReaderMapped
RandomAccessTableReaderMapped	util/kaldi-table.h	/^class RandomAccessTableReaderMapped {$/;"	c	namespace:kaldi
RspecifierOptions	util/kaldi-table.h	/^  RspecifierOptions(): once(false), sorted(false),$/;"	f	struct:kaldi::RspecifierOptions
RspecifierOptions	util/kaldi-table.h	/^struct  RspecifierOptions {$/;"	s	namespace:kaldi
RspecifierType	util/kaldi-table.h	/^enum RspecifierType  {$/;"	g	namespace:kaldi
SequentialTableReader	util/kaldi-table.h	/^  SequentialTableReader(): impl_(NULL) { }$/;"	f	class:kaldi::SequentialTableReader
SequentialTableReader	util/kaldi-table.h	/^  SequentialTableReader(const SequentialTableReader<Holder> &other):$/;"	f	class:kaldi::SequentialTableReader
SequentialTableReader	util/kaldi-table.h	/^class SequentialTableReader {$/;"	c	namespace:kaldi
T	util/kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReader
T	util/kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::RandomAccessTableReaderMapped
T	util/kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::SequentialTableReader
T	util/kaldi-table.h	/^  typedef typename Holder::T T;$/;"	t	class:kaldi::TableWriter
TableWriter	util/kaldi-table.h	/^  TableWriter(): impl_(NULL) { }$/;"	f	class:kaldi::TableWriter
TableWriter	util/kaldi-table.h	/^  TableWriter(const TableWriter &other): impl_(NULL) {$/;"	f	class:kaldi::TableWriter
TableWriter	util/kaldi-table.h	/^class TableWriter {$/;"	c	namespace:kaldi
WspecifierOptions	util/kaldi-table.h	/^  WspecifierOptions(): binary(true), flush(false), permissive(false) { }$/;"	f	struct:kaldi::WspecifierOptions
WspecifierOptions	util/kaldi-table.h	/^struct WspecifierOptions {$/;"	s	namespace:kaldi
WspecifierType	util/kaldi-table.h	/^enum WspecifierType  {$/;"	g	namespace:kaldi
binary	util/kaldi-table.h	/^  bool binary;$/;"	m	struct:kaldi::WspecifierOptions
called_sorted	util/kaldi-table.h	/^  bool called_sorted;  \/\/ we assert that the (HasKey(), Value() functions will$/;"	m	struct:kaldi::RspecifierOptions
flush	util/kaldi-table.h	/^  bool flush;$/;"	m	struct:kaldi::WspecifierOptions
impl_	util/kaldi-table.h	/^  RandomAccessTableReaderImplBase<Holder> *impl_;$/;"	m	class:kaldi::RandomAccessTableReader
impl_	util/kaldi-table.h	/^  SequentialTableReaderImplBase<Holder> *impl_;$/;"	m	class:kaldi::SequentialTableReader
impl_	util/kaldi-table.h	/^  TableWriterImplBase<Holder> *impl_;$/;"	m	class:kaldi::TableWriter
kArchiveRspecifier	util/kaldi-table.h	/^  kArchiveRspecifier,$/;"	e	enum:kaldi::RspecifierType
kArchiveWspecifier	util/kaldi-table.h	/^  kArchiveWspecifier,$/;"	e	enum:kaldi::WspecifierType
kBothWspecifier	util/kaldi-table.h	/^  kBothWspecifier$/;"	e	enum:kaldi::WspecifierType
kNoRspecifier	util/kaldi-table.h	/^  kNoRspecifier,$/;"	e	enum:kaldi::RspecifierType
kNoWspecifier	util/kaldi-table.h	/^  kNoWspecifier,$/;"	e	enum:kaldi::WspecifierType
kScriptRspecifier	util/kaldi-table.h	/^  kScriptRspecifier$/;"	e	enum:kaldi::RspecifierType
kScriptWspecifier	util/kaldi-table.h	/^  kScriptWspecifier,$/;"	e	enum:kaldi::WspecifierType
kaldi	util/kaldi-table.h	/^namespace kaldi {$/;"	n
once	util/kaldi-table.h	/^  bool once;   \/\/ we assert that the program will only ask for each key once.$/;"	m	struct:kaldi::RspecifierOptions
permissive	util/kaldi-table.h	/^  bool permissive;  \/\/ If "permissive", when reading from scp files it treats$/;"	m	struct:kaldi::RspecifierOptions
permissive	util/kaldi-table.h	/^  bool permissive; \/\/ will ignore absent scp entries.$/;"	m	struct:kaldi::WspecifierOptions
reader_	util/kaldi-table.h	/^  RandomAccessTableReader<Holder> reader_;$/;"	m	class:kaldi::RandomAccessTableReaderMapped
sorted	util/kaldi-table.h	/^  bool sorted;  \/\/ we assert that the keys are sorted.$/;"	m	struct:kaldi::RspecifierOptions
token_reader_	util/kaldi-table.h	/^  RandomAccessTableReader<TokenHolder> token_reader_;$/;"	m	class:kaldi::RandomAccessTableReaderMapped
utt2spk_rxfilename_	util/kaldi-table.h	/^  std::string utt2spk_rxfilename_; \/\/ Used only in diagnostic messages.$/;"	m	class:kaldi::RandomAccessTableReaderMapped
DummyOptions	util/parse-options-test.cc	/^  DummyOptions() {$/;"	f	struct:kaldi::DummyOptions
DummyOptions	util/parse-options-test.cc	/^struct DummyOptions {$/;"	s	namespace:kaldi	file:
Register	util/parse-options-test.cc	/^  void Register(ParseOptions *po) {$/;"	f	struct:kaldi::DummyOptions
UnitTestParseOptions	util/parse-options-test.cc	/^void UnitTestParseOptions() {$/;"	f	namespace:kaldi
kaldi	util/parse-options-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/parse-options-test.cc	/^int main() {$/;"	f
my_bool	util/parse-options-test.cc	/^  bool my_bool;$/;"	m	struct:kaldi::DummyOptions	file:
my_int	util/parse-options-test.cc	/^  int32 my_int;$/;"	m	struct:kaldi::DummyOptions	file:
my_string	util/parse-options-test.cc	/^  std::string my_string;$/;"	m	struct:kaldi::DummyOptions	file:
DisableOption	util/parse-options.cc	/^void ParseOptions::DisableOption(const std::string &name) {$/;"	f	class:kaldi::ParseOptions
Escape	util/parse-options.cc	/^std::string ParseOptions::Escape(const std::string &str) {$/;"	f	class:kaldi::ParseOptions
GetArg	util/parse-options.cc	/^std::string ParseOptions::GetArg(int i) const {$/;"	f	class:kaldi::ParseOptions
MustBeQuoted	util/parse-options.cc	/^static bool MustBeQuoted(const std::string &str, ShellType st) {$/;"	f	namespace:kaldi
NormalizeArgName	util/parse-options.cc	/^void ParseOptions::NormalizeArgName(std::string *str) {$/;"	f	class:kaldi::ParseOptions
NumArgs	util/parse-options.cc	/^int ParseOptions::NumArgs() const {$/;"	f	class:kaldi::ParseOptions
ParseOptions	util/parse-options.cc	/^ParseOptions::ParseOptions(const std::string &prefix,$/;"	f	class:kaldi::ParseOptions
PrintConfig	util/parse-options.cc	/^void ParseOptions::PrintConfig(std::ostream &os) {$/;"	f	class:kaldi::ParseOptions
PrintUsage	util/parse-options.cc	/^void ParseOptions::PrintUsage(bool print_command_line) {$/;"	f	class:kaldi::ParseOptions
QuoteAndEscape	util/parse-options.cc	/^static std::string QuoteAndEscape(const std::string &str, ShellType st) {$/;"	f	namespace:kaldi
Read	util/parse-options.cc	/^int ParseOptions::Read(int argc, const char *const argv[]) {$/;"	f	class:kaldi::ParseOptions
ReadConfigFile	util/parse-options.cc	/^void ParseOptions::ReadConfigFile(const std::string &filename) {$/;"	f	class:kaldi::ParseOptions
Register	util/parse-options.cc	/^void ParseOptions::Register(const std::string &name,$/;"	f	class:kaldi::ParseOptions
RegisterCommon	util/parse-options.cc	/^void ParseOptions::RegisterCommon(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
RegisterSpecific	util/parse-options.cc	/^void ParseOptions::RegisterSpecific(const std::string &name,$/;"	f	class:kaldi::ParseOptions
RegisterStandard	util/parse-options.cc	/^void ParseOptions::RegisterStandard(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
RegisterTmpl	util/parse-options.cc	/^void ParseOptions::RegisterTmpl(const std::string &name, T *ptr,$/;"	f	class:kaldi::ParseOptions
SetOption	util/parse-options.cc	/^bool ParseOptions::SetOption(const std::string &key,$/;"	f	class:kaldi::ParseOptions
ShellType	util/parse-options.cc	/^enum ShellType { kBash = 0 };$/;"	g	namespace:kaldi	file:
SplitLongArg	util/parse-options.cc	/^void ParseOptions::SplitLongArg(std::string in,$/;"	f	class:kaldi::ParseOptions
ToBool	util/parse-options.cc	/^bool ParseOptions::ToBool(std::string str) {$/;"	f	class:kaldi::ParseOptions
ToDouble	util/parse-options.cc	/^double ParseOptions::ToDouble(std::string str) {$/;"	f	class:kaldi::ParseOptions
ToFloat	util/parse-options.cc	/^float ParseOptions::ToFloat(std::string str) {$/;"	f	class:kaldi::ParseOptions
ToInt	util/parse-options.cc	/^int32 ParseOptions::ToInt(std::string str) {$/;"	f	class:kaldi::ParseOptions
ToUInt	util/parse-options.cc	/^uint32 ParseOptions::ToUInt(std::string str) {$/;"	f	class:kaldi::ParseOptions
kBash	util/parse-options.cc	/^enum ShellType { kBash = 0 };$/;"	e	enum:kaldi::ShellType	file:
kShellType	util/parse-options.cc	/^static ShellType kShellType = kBash;$/;"	m	namespace:kaldi	file:
kaldi	util/parse-options.cc	/^namespace kaldi {$/;"	n	file:
DocInfo	util/parse-options.h	/^    DocInfo() {}$/;"	f	struct:kaldi::ParseOptions::DocInfo
DocInfo	util/parse-options.h	/^    DocInfo(const std::string &name, const std::string &usemsg)$/;"	f	struct:kaldi::ParseOptions::DocInfo
DocInfo	util/parse-options.h	/^    DocInfo(const std::string &name, const std::string &usemsg,$/;"	f	struct:kaldi::ParseOptions::DocInfo
DocInfo	util/parse-options.h	/^  struct DocInfo {$/;"	s	class:kaldi::ParseOptions
DocMapType	util/parse-options.h	/^  typedef std::map<std::string, DocInfo> DocMapType;$/;"	t	class:kaldi::ParseOptions
GetOptArg	util/parse-options.h	/^  std::string GetOptArg(int param) const {$/;"	f	class:kaldi::ParseOptions
KALDI_UTIL_PARSE_OPTIONS_H_	util/parse-options.h	23;"	d
ParseOptions	util/parse-options.h	/^  explicit ParseOptions(const char *usage) :$/;"	f	class:kaldi::ParseOptions
ParseOptions	util/parse-options.h	/^class ParseOptions : public OptionsItf {$/;"	c	namespace:kaldi
ReadConfigFromFile	util/parse-options.h	/^template<class C> void ReadConfigFromFile(const std::string config_filename,$/;"	f	namespace:kaldi
ReadConfigsFromFile	util/parse-options.h	/^template<class C1, class C2> void ReadConfigsFromFile(const std::string config_filename,$/;"	f	namespace:kaldi
argc_	util/parse-options.h	/^  int argc_;$/;"	m	class:kaldi::ParseOptions
argv_	util/parse-options.h	/^  const char *const *argv_;$/;"	m	class:kaldi::ParseOptions
bool_map_	util/parse-options.h	/^  std::map<std::string, bool*> bool_map_;$/;"	m	class:kaldi::ParseOptions
config_	util/parse-options.h	/^  std::string config_;  \/\/\/< variable for the implicit --config parameter$/;"	m	class:kaldi::ParseOptions
doc_map_	util/parse-options.h	/^  DocMapType doc_map_;  \/\/\/< map for the documentation$/;"	m	class:kaldi::ParseOptions
double_map_	util/parse-options.h	/^  std::map<std::string, double*> double_map_;$/;"	m	class:kaldi::ParseOptions
float_map_	util/parse-options.h	/^  std::map<std::string, float*> float_map_;$/;"	m	class:kaldi::ParseOptions
help_	util/parse-options.h	/^  bool help_;           \/\/\/< variable for the implicit --help parameter$/;"	m	class:kaldi::ParseOptions
int_map_	util/parse-options.h	/^  std::map<std::string, int32*> int_map_;$/;"	m	class:kaldi::ParseOptions
is_standard_	util/parse-options.h	/^    bool is_standard_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
kaldi	util/parse-options.h	/^namespace kaldi {$/;"	n
name_	util/parse-options.h	/^    std::string name_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
other_parser_	util/parse-options.h	/^  OptionsItf *other_parser_;$/;"	m	class:kaldi::ParseOptions
positional_args_	util/parse-options.h	/^  std::vector<std::string> positional_args_;$/;"	m	class:kaldi::ParseOptions
prefix_	util/parse-options.h	/^  std::string prefix_;$/;"	m	class:kaldi::ParseOptions
print_args_	util/parse-options.h	/^  bool print_args_;     \/\/\/< variable for the implicit --print-args parameter$/;"	m	class:kaldi::ParseOptions
string_map_	util/parse-options.h	/^  std::map<std::string, std::string*> string_map_;$/;"	m	class:kaldi::ParseOptions
uint_map_	util/parse-options.h	/^  std::map<std::string, uint32*> uint_map_;$/;"	m	class:kaldi::ParseOptions
usage_	util/parse-options.h	/^  const char *usage_;$/;"	m	class:kaldi::ParseOptions
use_msg_	util/parse-options.h	/^    std::string use_msg_;$/;"	m	struct:kaldi::ParseOptions::DocInfo
~ParseOptions	util/parse-options.h	/^  ~ParseOptions() {}$/;"	f	class:kaldi::ParseOptions
ReadIntegerVectorSimple	util/simple-io-funcs.cc	/^bool ReadIntegerVectorSimple(std::string rxfilename, std::vector<int32> *list) {$/;"	f	namespace:kaldi
ReadIntegerVectorVectorSimple	util/simple-io-funcs.cc	/^bool ReadIntegerVectorVectorSimple(std::string rxfilename, std::vector<std::vector<int32> > *list) {$/;"	f	namespace:kaldi
WriteIntegerVectorSimple	util/simple-io-funcs.cc	/^bool WriteIntegerVectorSimple(std::string wxfilename, const std::vector<int32> &list) {$/;"	f	namespace:kaldi
WriteIntegerVectorVectorSimple	util/simple-io-funcs.cc	/^bool WriteIntegerVectorVectorSimple(std::string wxfilename, const std::vector<std::vector<int32> > &list) {$/;"	f	namespace:kaldi
kaldi	util/simple-io-funcs.cc	/^namespace kaldi {$/;"	n	file:
KALDI_UTIL_SIMPLE_IO_FUNCS_H_	util/simple-io-funcs.h	20;"	d
kaldi	util/simple-io-funcs.h	/^namespace kaldi {$/;"	n
UnitTestSimpleOptions	util/simple-options-test.cc	/^void UnitTestSimpleOptions() {$/;"	f	namespace:kaldi
kaldi	util/simple-options-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/simple-options-test.cc	/^int main() {$/;"	f
GetOption	util/simple-options.cc	/^bool SimpleOptions::GetOption(const std::string &key, bool *value) {$/;"	f	class:kaldi::SimpleOptions
GetOption	util/simple-options.cc	/^bool SimpleOptions::GetOption(const std::string &key, double *value) {$/;"	f	class:kaldi::SimpleOptions
GetOption	util/simple-options.cc	/^bool SimpleOptions::GetOption(const std::string &key, float *value) {$/;"	f	class:kaldi::SimpleOptions
GetOption	util/simple-options.cc	/^bool SimpleOptions::GetOption(const std::string &key, int32 *value) {$/;"	f	class:kaldi::SimpleOptions
GetOption	util/simple-options.cc	/^bool SimpleOptions::GetOption(const std::string &key, std::string *value) {$/;"	f	class:kaldi::SimpleOptions
GetOption	util/simple-options.cc	/^bool SimpleOptions::GetOption(const std::string &key, uint32 *value) {$/;"	f	class:kaldi::SimpleOptions
GetOptionImpl	util/simple-options.cc	/^static bool GetOptionImpl(const std::string &key, T *value,$/;"	f	namespace:kaldi
GetOptionInfoList	util/simple-options.cc	/^SimpleOptions::GetOptionInfoList() {$/;"	f	class:kaldi::SimpleOptions
GetOptionType	util/simple-options.cc	/^bool SimpleOptions::GetOptionType(const std::string &key, OptionType *type) {$/;"	f	class:kaldi::SimpleOptions
Register	util/simple-options.cc	/^void SimpleOptions::Register(const std::string &name,$/;"	f	class:kaldi::SimpleOptions
SetOption	util/simple-options.cc	/^bool SimpleOptions::SetOption(const std::string &key, const bool &value) {$/;"	f	class:kaldi::SimpleOptions
SetOption	util/simple-options.cc	/^bool SimpleOptions::SetOption(const std::string &key, const char *value) {$/;"	f	class:kaldi::SimpleOptions
SetOption	util/simple-options.cc	/^bool SimpleOptions::SetOption(const std::string &key, const double &value) {$/;"	f	class:kaldi::SimpleOptions
SetOption	util/simple-options.cc	/^bool SimpleOptions::SetOption(const std::string &key, const float &value) {$/;"	f	class:kaldi::SimpleOptions
SetOption	util/simple-options.cc	/^bool SimpleOptions::SetOption(const std::string &key, const int32 &value) {$/;"	f	class:kaldi::SimpleOptions
SetOption	util/simple-options.cc	/^bool SimpleOptions::SetOption(const std::string &key, const uint32 &value) {$/;"	f	class:kaldi::SimpleOptions
SetOption	util/simple-options.cc	/^bool SimpleOptions::SetOption(const std::string &key,$/;"	f	class:kaldi::SimpleOptions
SetOptionImpl	util/simple-options.cc	/^static bool SetOptionImpl(const std::string &key, const T &value,$/;"	f	namespace:kaldi
kaldi	util/simple-options.cc	/^namespace kaldi {$/;"	n	file:
KALDI_UTIL_SIMPLE_OPTIONS_H_	util/simple-options.h	21;"	d
OptionInfo	util/simple-options.h	/^    OptionInfo(const std::string &doc, OptionType type) :$/;"	f	struct:kaldi::SimpleOptions::OptionInfo
OptionInfo	util/simple-options.h	/^  struct OptionInfo {$/;"	s	class:kaldi::SimpleOptions
OptionType	util/simple-options.h	/^  enum OptionType {$/;"	g	class:kaldi::SimpleOptions
SimpleOptions	util/simple-options.h	/^  SimpleOptions() {$/;"	f	class:kaldi::SimpleOptions
SimpleOptions	util/simple-options.h	/^class SimpleOptions : public OptionsItf {$/;"	c	namespace:kaldi
bool_map_	util/simple-options.h	/^  std::map<std::string, bool*> bool_map_;$/;"	m	class:kaldi::SimpleOptions
doc	util/simple-options.h	/^    std::string doc;$/;"	m	struct:kaldi::SimpleOptions::OptionInfo
double_map_	util/simple-options.h	/^  std::map<std::string, double*> double_map_;$/;"	m	class:kaldi::SimpleOptions
float_map_	util/simple-options.h	/^  std::map<std::string, float*> float_map_;$/;"	m	class:kaldi::SimpleOptions
int_map_	util/simple-options.h	/^  std::map<std::string, int32*> int_map_;$/;"	m	class:kaldi::SimpleOptions
kBool	util/simple-options.h	/^    kBool,$/;"	e	enum:kaldi::SimpleOptions::OptionType
kDouble	util/simple-options.h	/^    kDouble,$/;"	e	enum:kaldi::SimpleOptions::OptionType
kFloat	util/simple-options.h	/^    kFloat,$/;"	e	enum:kaldi::SimpleOptions::OptionType
kInt32	util/simple-options.h	/^    kInt32,$/;"	e	enum:kaldi::SimpleOptions::OptionType
kString	util/simple-options.h	/^    kString$/;"	e	enum:kaldi::SimpleOptions::OptionType
kUint32	util/simple-options.h	/^    kUint32,$/;"	e	enum:kaldi::SimpleOptions::OptionType
kaldi	util/simple-options.h	/^namespace kaldi {$/;"	n
option_info_list_	util/simple-options.h	/^  std::vector<std::pair<std::string, OptionInfo> > option_info_list_;$/;"	m	class:kaldi::SimpleOptions
string_map_	util/simple-options.h	/^  std::map<std::string, std::string*> string_map_;$/;"	m	class:kaldi::SimpleOptions
type	util/simple-options.h	/^    OptionType type;$/;"	m	struct:kaldi::SimpleOptions::OptionInfo
uint_map_	util/simple-options.h	/^  std::map<std::string, uint32*> uint_map_;$/;"	m	class:kaldi::SimpleOptions
~SimpleOptions	util/simple-options.h	/^  virtual ~SimpleOptions() {$/;"	f	class:kaldi::SimpleOptions
TestContainsNullPointers	util/stl-utils-test.cc	/^void TestContainsNullPointers() {$/;"	f	namespace:kaldi
TestCopyMapKeysToSet	util/stl-utils-test.cc	/^void TestCopyMapKeysToSet() {$/;"	f	namespace:kaldi
TestCopyMapKeysToVector	util/stl-utils-test.cc	/^void TestCopyMapKeysToVector() {$/;"	f	namespace:kaldi
TestCopyMapToVector	util/stl-utils-test.cc	/^void TestCopyMapToVector() {$/;"	f	namespace:kaldi
TestCopyMapValuesToSet	util/stl-utils-test.cc	/^void TestCopyMapValuesToSet() {$/;"	f	namespace:kaldi
TestCopyMapValuesToVector	util/stl-utils-test.cc	/^void TestCopyMapValuesToVector() {$/;"	f	namespace:kaldi
TestCopySetToVector	util/stl-utils-test.cc	/^void TestCopySetToVector() {$/;"	f	namespace:kaldi
TestIsSorted	util/stl-utils-test.cc	/^static void TestIsSorted() {$/;"	f	namespace:kaldi
TestIsSortedAndUniq	util/stl-utils-test.cc	/^static void TestIsSortedAndUniq() {$/;"	f	namespace:kaldi
TestMergePairVectorSumming	util/stl-utils-test.cc	/^void TestMergePairVectorSumming() {$/;"	f	namespace:kaldi
TestReverseVector	util/stl-utils-test.cc	/^void TestReverseVector() {$/;"	f	namespace:kaldi
TestSortAndUniq	util/stl-utils-test.cc	/^static void TestSortAndUniq() {$/;"	f	namespace:kaldi
TestUniq	util/stl-utils-test.cc	/^static void TestUniq() {$/;"	f	namespace:kaldi
kaldi	util/stl-utils-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/stl-utils-test.cc	/^int main() {$/;"	f
CompareFirstMemberOfPair	util/stl-utils.h	/^struct CompareFirstMemberOfPair {$/;"	s	namespace:kaldi
ContainsNullPointers	util/stl-utils.h	/^bool ContainsNullPointers(const std::vector<A*> &v) {$/;"	f	namespace:kaldi
CopyMapKeysToSet	util/stl-utils.h	/^void CopyMapKeysToSet(const std::map<A, B> &m, std::set<A> *s) {$/;"	f	namespace:kaldi
CopyMapKeysToVector	util/stl-utils.h	/^void CopyMapKeysToVector(const std::map<A, B> &m, std::vector<A> *v) {$/;"	f	namespace:kaldi
CopyMapToVector	util/stl-utils.h	/^void CopyMapToVector(const std::map<A, B> &m,$/;"	f	namespace:kaldi
CopyMapValuesToSet	util/stl-utils.h	/^void CopyMapValuesToSet(const std::map<A, B> &m, std::set<B> *s) {$/;"	f	namespace:kaldi
CopyMapValuesToVector	util/stl-utils.h	/^void CopyMapValuesToVector(const std::map<A, B> &m, std::vector<B> *v) {$/;"	f	namespace:kaldi
CopySetToVector	util/stl-utils.h	/^void CopySetToVector(const std::set<T> &s, std::vector<T> *v) {$/;"	f	namespace:kaldi
CopySetToVector	util/stl-utils.h	/^void CopySetToVector(const unordered_set<T> &s, std::vector<T> *v) {$/;"	f	namespace:kaldi
CopyVectorToSet	util/stl-utils.h	/^void CopyVectorToSet(const std::vector<A> &v, std::set<A> *s) {$/;"	f	namespace:kaldi
CopyVectorToVector	util/stl-utils.h	/^void CopyVectorToVector(const std::vector<A> &vec_in, std::vector<B> *vec_out) {$/;"	f	namespace:kaldi
DeletePointers	util/stl-utils.h	/^void DeletePointers(std::vector<A*> *v) {$/;"	f	namespace:kaldi
IsSorted	util/stl-utils.h	/^inline bool IsSorted(const std::vector<T> &vec) {$/;"	f	namespace:kaldi
IsSortedAndUniq	util/stl-utils.h	/^inline bool IsSortedAndUniq(const std::vector<T> &vec) {$/;"	f	namespace:kaldi
KALDI_UTIL_STL_UTILS_H_	util/stl-utils.h	21;"	d
MergePairVectorSumming	util/stl-utils.h	/^inline void MergePairVectorSumming(std::vector<std::pair<I, F> > *vec) {$/;"	f	namespace:kaldi
PairHasher	util/stl-utils.h	/^  PairHasher() {  \/\/ Check we're instantiated with an integer type.$/;"	f	struct:kaldi::PairHasher
PairHasher	util/stl-utils.h	/^struct PairHasher { \/\/ hashing function for pair<int>$/;"	s	namespace:kaldi
ReverseVector	util/stl-utils.h	/^inline void ReverseVector(std::vector<T> *vec) {$/;"	f	namespace:kaldi
SortAndUniq	util/stl-utils.h	/^inline void SortAndUniq(std::vector<T> *vec) {$/;"	f	namespace:kaldi
StringHasher	util/stl-utils.h	/^struct StringHasher {  \/\/ hashing function for std::string$/;"	s	namespace:kaldi
Uniq	util/stl-utils.h	/^inline void Uniq(std::vector<T> *vec) {  \/\/ must be already sorted.$/;"	f	namespace:kaldi
VectorHasher	util/stl-utils.h	/^  VectorHasher() {  \/\/ Check we're instantiated with an integer type.$/;"	f	struct:kaldi::VectorHasher
VectorHasher	util/stl-utils.h	/^struct VectorHasher {  \/\/ hashing function for vector<Int>.$/;"	s	namespace:kaldi
kPrime	util/stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::PairHasher
kPrime	util/stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::StringHasher
kPrime	util/stl-utils.h	/^  static const int kPrime = 7853;$/;"	m	struct:kaldi::VectorHasher
kaldi	util/stl-utils.h	/^namespace kaldi {$/;"	n
operator ()	util/stl-utils.h	/^  inline bool operator() (const std::pair<A, B> &p1,$/;"	f	struct:kaldi::CompareFirstMemberOfPair
operator ()	util/stl-utils.h	/^  size_t operator()(const std::pair<Int,Int> &x) const {$/;"	f	struct:kaldi::PairHasher
operator ()	util/stl-utils.h	/^  size_t operator()(const std::string &str) const {$/;"	f	struct:kaldi::StringHasher
operator ()	util/stl-utils.h	/^  size_t operator()(const std::vector<Int> &x) const {$/;"	f	struct:kaldi::VectorHasher
BaseFloatCuMatrixWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<CuMatrix<BaseFloat> > >  BaseFloatCuMatrixWriter;$/;"	t	namespace:kaldi
BaseFloatCuVectorWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<CuVector<BaseFloat> > >  BaseFloatCuVectorWriter;$/;"	t	namespace:kaldi
BaseFloatMatrixWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<Matrix<BaseFloat> > >  BaseFloatMatrixWriter;$/;"	t	namespace:kaldi
BaseFloatPairVectorWriter	util/table-types.h	/^typedef TableWriter<BasicPairVectorHolder<BaseFloat> >  BaseFloatPairVectorWriter;$/;"	t	namespace:kaldi
BaseFloatVectorWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<Vector<BaseFloat> > >  BaseFloatVectorWriter;$/;"	t	namespace:kaldi
BaseFloatWriter	util/table-types.h	/^typedef TableWriter<BasicHolder<BaseFloat> >  BaseFloatWriter;$/;"	t	namespace:kaldi
BoolWriter	util/table-types.h	/^typedef TableWriter<BasicHolder<bool> >  BoolWriter;$/;"	t	namespace:kaldi
CompressedMatrixWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<CompressedMatrix> >  CompressedMatrixWriter;$/;"	t	namespace:kaldi
DoubleCuMatrixWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<CuMatrix<double> > >  DoubleCuMatrixWriter;$/;"	t	namespace:kaldi
DoubleCuVectorWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<CuVector<double> > >  DoubleCuVectorWriter;$/;"	t	namespace:kaldi
DoubleMatrixWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<Matrix<double> > >  DoubleMatrixWriter;$/;"	t	namespace:kaldi
DoubleVectorWriter	util/table-types.h	/^typedef TableWriter<KaldiObjectHolder<Vector<double> > >  DoubleVectorWriter;$/;"	t	namespace:kaldi
DoubleWriter	util/table-types.h	/^typedef TableWriter<BasicHolder<double> >  DoubleWriter;$/;"	t	namespace:kaldi
Int32PairVectorWriter	util/table-types.h	/^typedef TableWriter<BasicPairVectorHolder<int32> >  Int32PairVectorWriter;$/;"	t	namespace:kaldi
Int32VectorVectorWriter	util/table-types.h	/^typedef TableWriter<BasicVectorVectorHolder<int32> >  Int32VectorVectorWriter;$/;"	t	namespace:kaldi
Int32VectorWriter	util/table-types.h	/^typedef TableWriter<BasicVectorHolder<int32> >  Int32VectorWriter;$/;"	t	namespace:kaldi
Int32Writer	util/table-types.h	/^typedef TableWriter<BasicHolder<int32> >  Int32Writer;$/;"	t	namespace:kaldi
KALDI_UTIL_TABLE_TYPES_H_	util/table-types.h	22;"	d
RandomAccessBaseFloatCuMatrixReader	util/table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<CuMatrix<BaseFloat> > >  RandomAccessBaseFloatCuMatrixReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatCuMatrixReaderMapped	util/table-types.h	/^typedef RandomAccessTableReaderMapped<KaldiObjectHolder<CuMatrix<BaseFloat> > >  RandomAccessBaseFloatCuMatrixReaderMapped;$/;"	t	namespace:kaldi
RandomAccessBaseFloatCuVectorReader	util/table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<CuVector<BaseFloat> > >  RandomAccessBaseFloatCuVectorReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatCuVectorReaderMapped	util/table-types.h	/^typedef RandomAccessTableReaderMapped<KaldiObjectHolder<CuVector<BaseFloat> > >  RandomAccessBaseFloatCuVectorReaderMapped;$/;"	t	namespace:kaldi
RandomAccessBaseFloatMatrixReader	util/table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Matrix<BaseFloat> > >  RandomAccessBaseFloatMatrixReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatMatrixReaderMapped	util/table-types.h	/^typedef RandomAccessTableReaderMapped<KaldiObjectHolder<Matrix<BaseFloat> > >  RandomAccessBaseFloatMatrixReaderMapped;$/;"	t	namespace:kaldi
RandomAccessBaseFloatPairVectorReader	util/table-types.h	/^typedef RandomAccessTableReader<BasicPairVectorHolder<BaseFloat> >  RandomAccessBaseFloatPairVectorReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatReader	util/table-types.h	/^typedef RandomAccessTableReader<BasicHolder<BaseFloat> >  RandomAccessBaseFloatReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatReaderMapped	util/table-types.h	/^typedef RandomAccessTableReaderMapped<BasicHolder<BaseFloat> >  RandomAccessBaseFloatReaderMapped;$/;"	t	namespace:kaldi
RandomAccessBaseFloatVectorReader	util/table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Vector<BaseFloat> > >  RandomAccessBaseFloatVectorReader;$/;"	t	namespace:kaldi
RandomAccessBaseFloatVectorReaderMapped	util/table-types.h	/^typedef RandomAccessTableReaderMapped<KaldiObjectHolder<Vector<BaseFloat> > >  RandomAccessBaseFloatVectorReaderMapped;$/;"	t	namespace:kaldi
RandomAccessBoolReader	util/table-types.h	/^typedef RandomAccessTableReader<BasicHolder<bool> >  RandomAccessBoolReader;$/;"	t	namespace:kaldi
RandomAccessDoubleCuMatrixReader	util/table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<CuMatrix<double> > >  RandomAccessDoubleCuMatrixReader;$/;"	t	namespace:kaldi
RandomAccessDoubleCuMatrixReaderMapped	util/table-types.h	/^typedef RandomAccessTableReaderMapped<KaldiObjectHolder<CuMatrix<double> > >  RandomAccessDoubleCuMatrixReaderMapped;$/;"	t	namespace:kaldi
RandomAccessDoubleCuVectorReader	util/table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<CuVector<double> > >  RandomAccessDoubleCuVectorReader;$/;"	t	namespace:kaldi
RandomAccessDoubleMatrixReader	util/table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Matrix<double> > >  RandomAccessDoubleMatrixReader;$/;"	t	namespace:kaldi
RandomAccessDoubleMatrixReaderMapped	util/table-types.h	/^typedef RandomAccessTableReaderMapped<KaldiObjectHolder<Matrix<double> > >  RandomAccessDoubleMatrixReaderMapped;$/;"	t	namespace:kaldi
RandomAccessDoubleReader	util/table-types.h	/^typedef RandomAccessTableReader<BasicHolder<double> >  RandomAccessDoubleReader;$/;"	t	namespace:kaldi
RandomAccessDoubleVectorReader	util/table-types.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<Vector<double> > >  RandomAccessDoubleVectorReader;$/;"	t	namespace:kaldi
RandomAccessInt32PairVectorReader	util/table-types.h	/^typedef RandomAccessTableReader<BasicPairVectorHolder<int32> >  RandomAccessInt32PairVectorReader;$/;"	t	namespace:kaldi
RandomAccessInt32Reader	util/table-types.h	/^typedef RandomAccessTableReader<BasicHolder<int32> >  RandomAccessInt32Reader;$/;"	t	namespace:kaldi
RandomAccessInt32VectorReader	util/table-types.h	/^typedef RandomAccessTableReader<BasicVectorHolder<int32> >  RandomAccessInt32VectorReader;$/;"	t	namespace:kaldi
RandomAccessInt32VectorVectorReader	util/table-types.h	/^typedef RandomAccessTableReader<BasicVectorVectorHolder<int32> >  RandomAccessInt32VectorVectorReader;$/;"	t	namespace:kaldi
RandomAccessTokenReader	util/table-types.h	/^typedef RandomAccessTableReader<TokenHolder> RandomAccessTokenReader;$/;"	t	namespace:kaldi
RandomAccessTokenVectorReader	util/table-types.h	/^typedef RandomAccessTableReader<TokenVectorHolder> RandomAccessTokenVectorReader;$/;"	t	namespace:kaldi
SequentialBaseFloatCuMatrixReader	util/table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<CuMatrix<BaseFloat> > >  SequentialBaseFloatCuMatrixReader;$/;"	t	namespace:kaldi
SequentialBaseFloatCuVectorReader	util/table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<CuVector<BaseFloat> > >  SequentialBaseFloatCuVectorReader;$/;"	t	namespace:kaldi
SequentialBaseFloatMatrixReader	util/table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Matrix<BaseFloat> > >  SequentialBaseFloatMatrixReader;$/;"	t	namespace:kaldi
SequentialBaseFloatPairVectorReader	util/table-types.h	/^typedef SequentialTableReader<BasicPairVectorHolder<BaseFloat> >  SequentialBaseFloatPairVectorReader;$/;"	t	namespace:kaldi
SequentialBaseFloatReader	util/table-types.h	/^typedef SequentialTableReader<BasicHolder<BaseFloat> >  SequentialBaseFloatReader;$/;"	t	namespace:kaldi
SequentialBaseFloatVectorReader	util/table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Vector<BaseFloat> > >  SequentialBaseFloatVectorReader;$/;"	t	namespace:kaldi
SequentialBoolReader	util/table-types.h	/^typedef SequentialTableReader<BasicHolder<bool> >  SequentialBoolReader;$/;"	t	namespace:kaldi
SequentialDoubleCuMatrixReader	util/table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<CuMatrix<double> > >  SequentialDoubleCuMatrixReader;$/;"	t	namespace:kaldi
SequentialDoubleCuVectorReader	util/table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<CuVector<double> > >  SequentialDoubleCuVectorReader;$/;"	t	namespace:kaldi
SequentialDoubleMatrixReader	util/table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Matrix<double> > >  SequentialDoubleMatrixReader;$/;"	t	namespace:kaldi
SequentialDoubleReader	util/table-types.h	/^typedef SequentialTableReader<BasicHolder<double> >  SequentialDoubleReader;$/;"	t	namespace:kaldi
SequentialDoubleVectorReader	util/table-types.h	/^typedef SequentialTableReader<KaldiObjectHolder<Vector<double> > >  SequentialDoubleVectorReader;$/;"	t	namespace:kaldi
SequentialInt32PairVectorReader	util/table-types.h	/^typedef SequentialTableReader<BasicPairVectorHolder<int32> >  SequentialInt32PairVectorReader;$/;"	t	namespace:kaldi
SequentialInt32Reader	util/table-types.h	/^typedef SequentialTableReader<BasicHolder<int32> >  SequentialInt32Reader;$/;"	t	namespace:kaldi
SequentialInt32VectorReader	util/table-types.h	/^typedef SequentialTableReader<BasicVectorHolder<int32> >  SequentialInt32VectorReader;$/;"	t	namespace:kaldi
SequentialInt32VectorVectorReader	util/table-types.h	/^typedef SequentialTableReader<BasicVectorVectorHolder<int32> >  SequentialInt32VectorVectorReader;$/;"	t	namespace:kaldi
SequentialTokenReader	util/table-types.h	/^typedef SequentialTableReader<TokenHolder> SequentialTokenReader;$/;"	t	namespace:kaldi
SequentialTokenVectorReader	util/table-types.h	/^typedef SequentialTableReader<TokenVectorHolder> SequentialTokenVectorReader;$/;"	t	namespace:kaldi
TokenVectorWriter	util/table-types.h	/^typedef TableWriter<TokenVectorHolder> TokenVectorWriter;$/;"	t	namespace:kaldi
TokenWriter	util/table-types.h	/^typedef TableWriter<TokenHolder> TokenWriter;$/;"	t	namespace:kaldi
kaldi	util/table-types.h	/^namespace kaldi {$/;"	n
GetRandChar	util/text-utils-test.cc	/^char GetRandChar() {$/;"	f	namespace:kaldi
GetRandDelim	util/text-utils-test.cc	/^char GetRandDelim() {$/;"	f	namespace:kaldi
TestConvertStringToInteger	util/text-utils-test.cc	/^void TestConvertStringToInteger() {$/;"	f	namespace:kaldi
TestConvertStringToReal	util/text-utils-test.cc	/^void TestConvertStringToReal() {$/;"	f	namespace:kaldi
TestIsLine	util/text-utils-test.cc	/^void TestIsLine() {$/;"	f	namespace:kaldi
TestIsToken	util/text-utils-test.cc	/^void TestIsToken() {$/;"	f	namespace:kaldi
TestSplitStringOnFirstSpace	util/text-utils-test.cc	/^void TestSplitStringOnFirstSpace() {$/;"	f	namespace:kaldi
TestSplitStringToFloats	util/text-utils-test.cc	/^void TestSplitStringToFloats() {$/;"	f	namespace:kaldi
TestSplitStringToIntegers	util/text-utils-test.cc	/^void TestSplitStringToIntegers() {$/;"	f	namespace:kaldi
TestSplitStringToVector	util/text-utils-test.cc	/^void TestSplitStringToVector() {$/;"	f	namespace:kaldi
TestTrim	util/text-utils-test.cc	/^void TestTrim() {$/;"	f	namespace:kaldi
TrimTmp	util/text-utils-test.cc	/^std::string TrimTmp(std::string s) {$/;"	f	namespace:kaldi
kaldi	util/text-utils-test.cc	/^namespace kaldi {$/;"	n	file:
main	util/text-utils-test.cc	/^int main() {$/;"	f
ws_delim	util/text-utils-test.cc	/^const char *ws_delim = " \\t\\n\\r";$/;"	m	namespace:kaldi	file:
ConvertStringToReal	util/text-utils.cc	/^bool ConvertStringToReal(const std::string &str,$/;"	f	namespace:kaldi
IsLine	util/text-utils.cc	/^bool IsLine(const std::string &line) {$/;"	f	namespace:kaldi
IsToken	util/text-utils.cc	/^bool IsToken(const std::string &token) {$/;"	f	namespace:kaldi
JoinVectorToString	util/text-utils.cc	/^void JoinVectorToString(const std::vector<std::string> &vec_in,$/;"	f	namespace:kaldi
SplitStringOnFirstSpace	util/text-utils.cc	/^void SplitStringOnFirstSpace(const std::string &str,$/;"	f	namespace:kaldi
SplitStringToFloats	util/text-utils.cc	/^bool SplitStringToFloats(const std::string &full,$/;"	f	namespace:kaldi
SplitStringToVector	util/text-utils.cc	/^void SplitStringToVector(const std::string &full, const char *delim,$/;"	f	namespace:kaldi
Trim	util/text-utils.cc	/^void Trim(std::string *str) {$/;"	f	namespace:kaldi
kaldi	util/text-utils.cc	/^namespace kaldi {$/;"	n	file:
ConvertStringToInteger	util/text-utils.h	/^bool ConvertStringToInteger(const std::string &str,$/;"	f	namespace:kaldi
KALDI_UTIL_TEXT_UTILS_H_	util/text-utils.h	21;"	d
SplitStringToIntegers	util/text-utils.h	/^bool SplitStringToIntegers(const std::string &full,$/;"	f	namespace:kaldi
kaldi	util/text-utils.h	/^namespace kaldi {$/;"	n
KALDI_UTIL_TIMER_H_	util/timer.h	24;"	d
